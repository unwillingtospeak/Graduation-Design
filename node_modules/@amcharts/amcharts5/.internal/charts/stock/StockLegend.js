import { __extends } from "tslib";
import { Legend } from "../../core/render/Legend";
import { Button } from "../../core/render/Button";
import { Graphics } from "../../core/render/Graphics";
import { Template } from "../../core/util/Template";
import { ListTemplate } from "../../core/util/List";
import { Indicator } from "./indicators/Indicator";
import * as $utils from "../../core/util/Utils";
/**
 * A legend, specifically designed for use in a [[StockChart]].
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/stock/#Legend} for more info
 * @important
 */
var StockLegend = /** @class */ (function (_super) {
    __extends(StockLegend, _super);
    function StockLegend() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * A list of "close" buttons in legend items.
         *
         * @default new ListTemplate<Button>()
         */
        Object.defineProperty(_this, "closeButtons", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new ListTemplate(Template.new({}), function () { return Button._new(_this._root, {
                themeTags: $utils.mergeTags(_this.closeButtons.template.get("themeTags", []), ["control", "close"]),
                icon: Graphics.new(_this._root, {
                    themeTags: ["icon", "button"]
                })
            }, [_this.closeButtons.template]); })
        });
        /**
         * A list of "settings" buttons in legend items.
         *
         * @default new ListTemplate<Button>()
         */
        Object.defineProperty(_this, "settingsButtons", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new ListTemplate(Template.new({}), function () { return Button._new(_this._root, {
                themeTags: $utils.mergeTags(_this.settingsButtons.template.get("themeTags", []), ["control", "settings"]),
                icon: Graphics.new(_this._root, {
                    themeTags: ["icon", "button"]
                })
            }, [_this.settingsButtons.template]); })
        });
        return _this;
    }
    Object.defineProperty(StockLegend.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._settings.themeTags = $utils.mergeTags(this._settings.themeTags, ["stocklegend"]);
            _super.prototype._afterNew.call(this);
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(StockLegend.prototype, "makeCloseButton", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var button = this.closeButtons.make();
            this.closeButtons.push(button);
            return button;
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(StockLegend.prototype, "makeSettingsButton", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            var button = this.settingsButtons.make();
            this.settingsButtons.push(button);
            button.events.on("click", function () {
                var dataItem = button.dataItem;
                if (dataItem) {
                    var stockChart = _this.get("stockChart");
                    if (stockChart) {
                        var indicator = button.getPrivate("customData");
                        if (indicator instanceof Indicator) {
                            stockChart.getPrivate("settingsModal").openIndicator(indicator);
                        }
                        else {
                            stockChart.getPrivate("settingsModal").openSeries(dataItem.dataContext);
                        }
                    }
                }
            });
            return button;
        }
    });
    Object.defineProperty(StockLegend.prototype, "processDataItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem) {
            _super.prototype.processDataItem.call(this, dataItem);
            var itemContainer = dataItem.get("itemContainer");
            var settingsButton = this.makeSettingsButton();
            itemContainer.children.push(settingsButton);
            settingsButton._setDataItem(dataItem);
            dataItem.set("settingsButton", settingsButton);
            var closeButton = this.makeCloseButton();
            itemContainer.children.push(closeButton);
            closeButton._setDataItem(dataItem);
            dataItem.set("closeButton", closeButton);
        }
    });
    Object.defineProperty(StockLegend, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "StockLegend"
    });
    Object.defineProperty(StockLegend, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: Legend.classNames.concat([StockLegend.className])
    });
    return StockLegend;
}(Legend));
export { StockLegend };
//# sourceMappingURL=StockLegend.js.map