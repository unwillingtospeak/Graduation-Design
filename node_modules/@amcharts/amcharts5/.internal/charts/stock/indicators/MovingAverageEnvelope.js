import { __extends } from "tslib";
import { MovingAverage } from "./MovingAverage";
import { LineSeries } from "../../xy/series/LineSeries";
import * as $array from "../../../core/util/Array";
/**
 * An implementation of a [[StockChart]] indicator.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/stock/indicators/} for more info
 */
var MovingAverageEnvelope = /** @class */ (function (_super) {
    __extends(MovingAverageEnvelope, _super);
    function MovingAverageEnvelope() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Indicator series for the upper band.
         */
        Object.defineProperty(_this, "upperBandSeries", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Indicator series for the lower band.
         */
        Object.defineProperty(_this, "lowerBandSeries", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_editableSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: [{
                    key: "period",
                    name: _this.root.language.translateAny("Period"),
                    type: "number"
                }, {
                    key: "type",
                    name: _this.root.language.translateAny("Type"),
                    type: "dropdown",
                    options: ["simple", "weighted", "exponential", "dema", "tema"]
                }, {
                    key: "field",
                    name: _this.root.language.translateAny("Field"),
                    type: "dropdown",
                    options: ["open", "close", "low", "high", "hl/2", "hlc/3", "hlcc/4", "ohlc/4"]
                }, {
                    key: "shiftType",
                    name: _this.root.language.translateAny("Shift type"),
                    type: "dropdown",
                    options: ["percent", "points"]
                }, {
                    key: "shift",
                    name: _this.root.language.translateAny("Shift"),
                    type: "number"
                }, {
                    key: "offset",
                    name: _this.root.language.translateAny("Offset"),
                    type: "number"
                }, {
                    key: "upperColor",
                    name: _this.root.language.translateAny("Top"),
                    type: "color"
                }, {
                    key: "seriesColor",
                    name: _this.root.language.translateAny("Median"),
                    type: "color"
                }, {
                    key: "lowerColor",
                    name: _this.root.language.translateAny("Bottom"),
                    type: "color"
                }]
        });
        return _this;
    }
    Object.defineProperty(MovingAverageEnvelope.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var stockSeries = this.get("stockSeries");
            var chart = stockSeries.chart;
            if (chart) {
                var upperBandSeries = chart.series.push(LineSeries.new(this._root, {
                    valueXField: "valueX",
                    valueYField: "upper",
                    openValueYField: "lower",
                    xAxis: stockSeries.get("xAxis"),
                    yAxis: stockSeries.get("yAxis"),
                    groupDataDisabled: true,
                    calculateAggregates: true,
                    themeTags: ["movingaverageenvelope", "upper"]
                }));
                upperBandSeries.fills.template.set("visible", true);
                upperBandSeries.setPrivate("baseValueSeries", stockSeries);
                this.upperBandSeries = upperBandSeries;
                var lowerBandSeries = chart.series.push(LineSeries.new(this._root, {
                    valueXField: "valueX",
                    valueYField: "lower",
                    xAxis: stockSeries.get("xAxis"),
                    yAxis: stockSeries.get("yAxis"),
                    groupDataDisabled: true,
                    calculateAggregates: true,
                    themeTags: ["movingaverageenvelope", "lower"]
                }));
                lowerBandSeries.setPrivate("baseValueSeries", stockSeries);
                this.lowerBandSeries = lowerBandSeries;
            }
            _super.prototype._afterNew.call(this);
            this.series.addTag("movingaverageenvelope");
            this.series._applyThemes();
        }
    });
    Object.defineProperty(MovingAverageEnvelope.prototype, "_updateChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._updateChildren.call(this);
            if (this.isDirty("upperColor")) {
                var color = this.get("upperColor");
                var upperBandSeries = this.upperBandSeries;
                upperBandSeries.set("stroke", color);
                upperBandSeries.set("fill", color);
                upperBandSeries.strokes.template.set("stroke", color);
                this._updateSeriesColor(upperBandSeries, color, "upperColor");
            }
            if (this.isDirty("lowerColor")) {
                var color = this.get("lowerColor");
                var lowerBandSeries = this.lowerBandSeries;
                lowerBandSeries.set("stroke", color);
                lowerBandSeries.strokes.template.set("stroke", color);
                this._updateSeriesColor(lowerBandSeries, color, "lowerColor");
            }
        }
    });
    Object.defineProperty(MovingAverageEnvelope.prototype, "_prepareChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.isDirty("shiftType") || this.isDirty("shift")) {
                this._dataDirty = true;
                this.setCustomData("shift", this.get("shift"));
                this.setCustomData("shiftType", this.get("shiftType"));
            }
            _super.prototype._prepareChildren.call(this);
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(MovingAverageEnvelope.prototype, "prepareData", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype.prepareData.call(this);
            if (this.series) {
                var smaData = this.series.data.values;
                var shift_1 = Number(this.get("shift", 5));
                var shiftType_1 = this.get("shiftType");
                $array.each(smaData, function (dataItem) {
                    var value = dataItem.ma;
                    if (value != null) {
                        var upper = value;
                        var lower = value;
                        if (shiftType_1 == "points") {
                            upper += shift_1;
                            lower -= shift_1;
                        }
                        else {
                            upper += upper * shift_1 / 100;
                            lower -= lower * shift_1 / 100;
                        }
                        dataItem.upper = upper;
                        dataItem.lower = lower;
                    }
                });
                this.upperBandSeries.data.setAll(smaData);
                this.lowerBandSeries.data.setAll(smaData);
            }
        }
    });
    Object.defineProperty(MovingAverageEnvelope.prototype, "_dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this.upperBandSeries.dispose();
            this.lowerBandSeries.dispose();
            _super.prototype._dispose.call(this);
        }
    });
    Object.defineProperty(MovingAverageEnvelope, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "MovingAverageEnvelope"
    });
    Object.defineProperty(MovingAverageEnvelope, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: MovingAverage.classNames.concat([MovingAverageEnvelope.className])
    });
    return MovingAverageEnvelope;
}(MovingAverage));
export { MovingAverageEnvelope };
//# sourceMappingURL=MovingAverageEnvelope.js.map