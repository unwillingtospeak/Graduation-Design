{"version":3,"file":"MovingAverage.js","sourceRoot":"","sources":["../../../../../../src/.internal/charts/stock/indicators/MovingAverage.ts"],"names":[],"mappings":"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","sourcesContent":["import type { DateAxis } from \"../../xy/axes/DateAxis\";\r\nimport type { AxisRenderer } from \"../../xy/axes/AxisRenderer\";\r\n\r\nimport { Indicator, IIndicatorSettings, IIndicatorPrivate, IIndicatorEvents, IIndicatorEditableSetting } from \"./Indicator\";\r\nimport { LineSeries } from \"../../xy/series/LineSeries\";\r\n\r\nimport * as $array from \"../../../core/util/Array\";\r\n\r\nexport interface IMovingAverageSettings extends IIndicatorSettings {\r\n\r\n\t/**\r\n\t * Type of the moving average.\r\n\t *\r\n\t * @default \"simple\"\r\n\t */\r\n\ttype?: \"simple\" | \"weighted\" | \"exponential\" | \"dema\" | \"tema\";\r\n\r\n\t/**\r\n\t * Offset.\r\n\t * \r\n\t * @default 0\r\n\t */\r\n\toffset?: number;\r\n\r\n}\r\n\r\nexport interface IMovingAveragePrivate extends IIndicatorPrivate {\r\n}\r\n\r\nexport interface IMovingAverageEvents extends IIndicatorEvents {\r\n}\r\n\r\n/**\r\n * An implementation of a [[StockChart]] indicator.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/stock/indicators/} for more info\r\n */\r\nexport class MovingAverage extends Indicator {\r\n\tpublic static className: string = \"MovingAverage\";\r\n\tpublic static classNames: Array<string> = Indicator.classNames.concat([MovingAverage.className]);\r\n\r\n\tdeclare public _settings: IMovingAverageSettings;\r\n\tdeclare public _privateSettings: IMovingAveragePrivate;\r\n\tdeclare public _events: IMovingAverageEvents;\r\n\r\n\t/**\r\n\t * Indicator series.\r\n\t */\r\n\tdeclare public series: LineSeries;\r\n\r\n\tpublic _editableSettings: IIndicatorEditableSetting[] = [{\r\n\t\tkey: \"period\",\r\n\t\tname: this.root.language.translateAny(\"Period\"),\r\n\t\ttype: \"number\"\r\n\t}, {\r\n\t\tkey: \"offset\",\r\n\t\tname: this.root.language.translateAny(\"Offset\"),\r\n\t\ttype: \"number\"\r\n\t}, {\r\n\t\tkey: \"seriesColor\",\r\n\t\tname: this.root.language.translateAny(\"Color\"),\r\n\t\ttype: \"color\"\r\n\t}, {\r\n\t\tkey: \"field\",\r\n\t\tname: this.root.language.translateAny(\"Field\"),\r\n\t\ttype: \"dropdown\",\r\n\t\toptions: [\"open\", \"close\", \"low\", \"high\", \"hl/2\", \"hlc/3\", \"hlcc/4\", \"ohlc/4\"]\r\n\t}, {\r\n\t\tkey: \"type\",\r\n\t\tname: this.root.language.translateAny(\"Type\"),\r\n\t\ttype: \"dropdown\",\r\n\t\toptions: [\"simple\", \"weighted\", \"exponential\", \"dema\", \"tema\"]\r\n\t}];\r\n\r\n\tpublic _prepareChildren() {\r\n\r\n\t\tif (this.isDirty(\"type\") || this.isDirty(\"offset\")) {\r\n\t\t\tthis._dataDirty = true;\r\n\t\t\tthis.setCustomData(\"type\", this.get(\"type\"));\r\n\t\t\tthis.setCustomData(\"offset\", this.get(\"offset\", 0));\r\n\t\t}\r\n\r\n\t\tsuper._prepareChildren();\r\n\t}\r\n\r\n\tprotected _afterNew() {\r\n\t\tsuper._afterNew();\r\n\r\n\t\tconst stockSeries = this.get(\"stockSeries\");\r\n\t\tconst chart = stockSeries.chart;\r\n\r\n\t\tif (chart) {\r\n\t\t\tconst series = chart.series.push(LineSeries.new(this._root, {\r\n\t\t\t\tvalueXField: \"valueX\",\r\n\t\t\t\tvalueYField: \"ma\",\r\n\t\t\t\tgroupDataDisabled: true,\r\n\t\t\t\tcalculateAggregates: true,\r\n\t\t\t\txAxis: stockSeries.get(\"xAxis\"),\r\n\t\t\t\tyAxis: stockSeries.get(\"yAxis\"),\r\n\t\t\t\tthemeTags: [\"indicator\", \"movingaverage\"],\r\n\t\t\t\tname: \"MA\"\r\n\t\t\t}))\r\n\r\n\t\t\tseries.setPrivate(\"baseValueSeries\", stockSeries);\r\n\t\t\tthis.series = series;\r\n\r\n\t\t\tthis._handleLegend(series);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _dispose() {\r\n\t\tconst stockChart = this.get(\"stockChart\");\r\n\r\n\t\tconst series = this.series;\r\n\t\tseries.dispose();\r\n\r\n\t\tif (stockChart) {\r\n\t\t\tconst legend = this.get(\"legend\");\r\n\t\t\tif (legend) {\r\n\t\t\t\tconst legendDataItem = series.get(\"legendDataItem\");\r\n\t\t\t\tif (legendDataItem) {\r\n\t\t\t\t\tlegend.disposeDataItem(legendDataItem as any);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tstockChart.indicators.removeValue(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic prepareData() {\r\n\t\tif (this.series) {\r\n\t\t\tlet period = this.get(\"period\", 50);\r\n\t\t\tconst type = this.get(\"type\");\r\n\t\t\tconst stockSeries = this.get(\"stockSeries\");\r\n\t\t\tconst dataItems = stockSeries.dataItems;\r\n\r\n\t\t\tlet data = this._getDataArray(dataItems);\r\n\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase \"simple\":\r\n\t\t\t\t\tthis._sma(data, period, \"value_y\", \"ma\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"weighted\":\r\n\t\t\t\t\tthis._wma(data, period, \"value_y\", \"ma\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"exponential\":\r\n\t\t\t\t\tthis._ema(data, period, \"value_y\", \"ma\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"dema\":\r\n\t\t\t\t\tthis._dema(data, period, \"value_y\", \"ma\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"tema\":\r\n\t\t\t\t\tthis._tema(data, period, \"value_y\", \"ma\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tconst offset = this.get(\"offset\", 0);\r\n\r\n\r\n\t\t\tif (offset != 0) {\r\n\t\t\t\tlet i = 0;\r\n\t\t\t\tconst baseDuration = (this.series.get(\"xAxis\") as DateAxis<AxisRenderer>).baseDuration();\r\n\t\t\t\tconst len = dataItems.length;\r\n\t\t\t\tconst firstTime = dataItems[0].get(\"valueX\", 0);\r\n\t\t\t\tconst lastTime = dataItems[len - 1].get(\"valueX\", 0);\r\n\r\n\t\t\t\t$array.each(data, (dataItem) => {\r\n\t\t\t\t\tlet newX: number = 0;\r\n\r\n\t\t\t\t\tif (i + offset >= len) {\r\n\t\t\t\t\t\tnewX = lastTime + (offset - len + i + 1) * baseDuration;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (i + offset < 0) {\r\n\t\t\t\t\t\tnewX = firstTime + (i + offset) * baseDuration;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tnewX = dataItems[i + offset].get(\"valueX\", 0);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdataItem.valueX = newX;\r\n\r\n\t\t\t\t\ti++;\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\tthis.series.data.setAll(data);\r\n\t\t}\r\n\t}\r\n}"]}