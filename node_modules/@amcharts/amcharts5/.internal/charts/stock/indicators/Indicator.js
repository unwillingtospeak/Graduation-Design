import { __extends } from "tslib";
import { Container } from "../../../core/render/Container";
import { LineSeries } from "../../xy/series/LineSeries";
import { BaseColumnSeries } from "../../xy/series/BaseColumnSeries";
import { MultiDisposer } from "../../../core/util/Disposer";
import * as $array from "../../../core/util/Array";
/**
 * Base class for [[StockChart]] indicators.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/stock/indicators/} for more info
 */
var Indicator = /** @class */ (function (_super) {
    __extends(Indicator, _super);
    function Indicator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_editableSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(_this, "series", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_dataDirty", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(_this, "_sDP", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_vDP", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        return _this;
    }
    Object.defineProperty(Indicator.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._afterNew.call(this);
            this.set("position", "absolute");
        }
    });
    Object.defineProperty(Indicator.prototype, "_prepareChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype._prepareChildren.call(this);
            if (this.isDirty("stockSeries") || this.isDirty("volumeSeries")) {
                this._dataDirty = true;
                var stockSeries = this.get("stockSeries");
                var previousS = this._prevSettings.stockSeries;
                if (previousS && this._sDP) {
                    this._sDP.dispose();
                }
                if (stockSeries) {
                    this._sDP = new MultiDisposer([
                        stockSeries.events.on("datavalidated", function () {
                            _this.markDataDirty();
                        }),
                        stockSeries.events.on("datasetchanged", function () {
                            _this.markDataDirty();
                        })
                    ]);
                }
                var previousV = this._prevSettings.volumeSeries;
                if (previousV && this._vDP) {
                    this._vDP.dispose();
                }
                var volumeSeries = this.get("volumeSeries");
                if (volumeSeries) {
                    this._vDP = new MultiDisposer([
                        volumeSeries.events.on("datavalidated", function () {
                            _this.markDataDirty();
                        }),
                        volumeSeries.events.on("datasetchanged", function () {
                            _this.markDataDirty();
                        })
                    ]);
                }
            }
            if (this.isDirty("field")) {
                if (this.get("field")) {
                    this._dataDirty = true;
                }
            }
            if (this.isDirty("period")) {
                this._dataDirty = true;
                this.setCustomData("period", this.get("period"));
            }
            if (this._dataDirty) {
                this.prepareData();
                this._dataDirty = false;
            }
        }
    });
    Object.defineProperty(Indicator.prototype, "markDataDirty", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this._dataDirty = true;
            this.markDirty();
        }
    });
    Object.defineProperty(Indicator.prototype, "_updateChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._updateChildren.call(this);
            if (this.isDirty("seriesColor")) {
                this._updateSeriesColor(this.series, this.get("seriesColor"), "seriesColor");
            }
            this.setCustomData("period", this.get("period"));
            this.setCustomData("field", this.get("field"));
            this.setCustomData("name", this.get("name"));
            this.setCustomData("shortName", this.get("shortName"));
        }
    });
    Object.defineProperty(Indicator.prototype, "_dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._dispose.call(this);
            if (this._sDP) {
                this._sDP.dispose();
            }
            if (this._vDP) {
                this._vDP.dispose();
            }
        }
    });
    Object.defineProperty(Indicator.prototype, "_handleLegend", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (series) {
            var _this = this;
            var legend = this.get("legend");
            if (legend) {
                legend.data.push(series);
                var legendDataItem = legend.dataItems[legend.dataItems.length - 1];
                legendDataItem.get("marker").set("forceHidden", true);
                var closeButton = legendDataItem.get("closeButton");
                closeButton.set("forceHidden", false);
                closeButton.events.on("click", function () {
                    _this.dispose();
                });
                var settingsButton = legendDataItem.get("settingsButton");
                settingsButton.setPrivate("customData", this);
            }
        }
    });
    Object.defineProperty(Indicator.prototype, "_updateSeriesColor", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (series, color, contextName) {
            if (series) {
                series.set("stroke", color);
                series.set("fill", color);
                if (series instanceof LineSeries) {
                    series.strokes.template.set("stroke", color);
                }
                if (series instanceof BaseColumnSeries) {
                    series.columns.template.setAll({ stroke: color, fill: color });
                }
                if (contextName && color) {
                    this.setCustomData(contextName, color.toCSSHex());
                }
            }
        }
    });
    Object.defineProperty(Indicator.prototype, "setCustomData", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (name, value) {
            var customData = this.series.getPrivate("customData");
            if (customData) {
                customData[name] = value;
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Indicator.prototype, "prepareData", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
        }
    });
    Object.defineProperty(Indicator.prototype, "_getValue", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem) {
            var field = this.get("field");
            var o = dataItem.get("openValueY");
            var h = dataItem.get("highValueY");
            var l = dataItem.get("lowValueY");
            var c = dataItem.get("valueY");
            switch (field) {
                case "close":
                    return c;
                    break;
                case "open":
                    return o;
                    break;
                case "high":
                    return h;
                    break;
                case "low":
                    return l;
                    break;
                case "hl/2":
                    return (h + l) / 2;
                    break;
                case "hlc/3":
                    return (h + l + c) / 3;
                    break;
                case "hlcc/4":
                    return (h + l + c + c) / 4;
                    break;
                case "ohlc/4":
                    return (o + h + l + c) / 4;
                    break;
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Indicator.prototype, "_getDataArray", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItems) {
            var _this = this;
            var data = [];
            $array.each(dataItems, function (dataItem) {
                data.push({ valueX: dataItem.get("valueX"), value_y: _this._getValue(dataItem) });
            });
            return data;
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Indicator.prototype, "_getTypicalPrice", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItems) {
            var data = [];
            $array.each(dataItems, function (dataItem) {
                data.push({ valueX: dataItem.get("valueX"), value_y: (dataItem.get("valueY", 0) + dataItem.get("highValueY", 0) + dataItem.get("lowValueY", 0)) / 2 });
            });
            return data;
        }
    });
    Object.defineProperty(Indicator.prototype, "_sma", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (data, period, field, toField) {
            var i = 0;
            var index = 0;
            var ma = 0;
            $array.each(data, function (dataItem) {
                var value = dataItem[field];
                if (value != null) {
                    i++;
                    ma += value / period;
                    if (i >= period) {
                        if (i > period) {
                            var valueToRemove = data[index - period][field];
                            if (valueToRemove != null) {
                                ma -= valueToRemove / period;
                            }
                        }
                        dataItem[toField] = ma;
                    }
                }
                index++;
            });
        }
    });
    Object.defineProperty(Indicator.prototype, "_wma", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (data, period, field, toField) {
            var i = 0;
            var index = 0;
            var ma = 0;
            $array.each(data, function (dataItem) {
                var value = dataItem[field];
                if (value != null) {
                    i++;
                    if (i >= period) {
                        var sum = 0;
                        var m = 0;
                        var count = 0;
                        var k = 0;
                        for (var n = index; n >= 0; n--) {
                            var pValue = data[n][field];
                            if (pValue != null) {
                                sum += pValue * (period - m);
                                count += (period - m);
                                k++;
                            }
                            m++;
                            if (k == period) {
                                break;
                            }
                        }
                        ma = sum / count;
                        dataItem[toField] = ma;
                    }
                }
                index++;
            });
        }
    });
    Object.defineProperty(Indicator.prototype, "_ema", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (data, period, field, toField) {
            var i = 0;
            var ma = 0;
            var multiplier = 2 / (1 + period);
            $array.each(data, function (dataItem) {
                var value = dataItem[field];
                if (value != null) {
                    i++;
                    if (i > period) {
                        ma = value * multiplier + ma * (1 - multiplier);
                        dataItem[toField] = ma;
                    }
                    else {
                        ma += value / period;
                        if (i == period) {
                            dataItem[toField] = ma;
                        }
                    }
                }
            });
        }
    });
    Object.defineProperty(Indicator.prototype, "_dema", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (data, period, field, toField) {
            var i = 0;
            var ema2 = 0;
            var multiplier = 2 / (1 + period);
            this._ema(data, period, field, "ema");
            $array.each(data, function (dataItem) {
                var ema = dataItem.ema;
                if (ema != null) {
                    i++;
                    if (i > period) {
                        ema2 = ema * multiplier + ema2 * (1 - multiplier);
                        dataItem[toField] = 2 * ema - ema2;
                        dataItem.ema2 = ema2;
                    }
                    else {
                        ema2 += ema / period;
                        if (i == period) {
                            dataItem[toField] = 2 * ema - ema2;
                            dataItem.ema2 = ema2;
                        }
                    }
                }
            });
        }
    });
    Object.defineProperty(Indicator.prototype, "_tema", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (data, period, field, toField) {
            var i = 0;
            var ema3 = 0;
            var multiplier = 2 / (1 + period);
            this._dema(data, period, field, "dema");
            $array.each(data, function (dataItem) {
                var ema = dataItem.ema;
                var ema2 = dataItem.ema2;
                if (ema2 != null) {
                    i++;
                    if (i > period) {
                        ema3 = ema2 * multiplier + ema3 * (1 - multiplier);
                        dataItem[toField] = 3 * ema - 3 * ema2 + ema3;
                    }
                    else {
                        ema3 += ema2 / period;
                        if (i == period) {
                            dataItem[toField] = 3 * ema - 3 * ema2 + ema3;
                        }
                    }
                }
            });
        }
    });
    Object.defineProperty(Indicator, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "Indicator"
    });
    Object.defineProperty(Indicator, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: Container.classNames.concat([Indicator.className])
    });
    return Indicator;
}(Container));
export { Indicator };
//# sourceMappingURL=Indicator.js.map