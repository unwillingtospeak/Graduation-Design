import { __extends } from "tslib";
import { ChartIndicator } from "./ChartIndicator";
import { LineSeries } from "../../xy/series/LineSeries";
import * as $array from "../../../core/util/Array";
/**
 * An implementation of a [[StockChart]] indicator.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/stock/indicators/} for more info
 */
var AccumulationDistribution = /** @class */ (function (_super) {
    __extends(AccumulationDistribution, _super);
    function AccumulationDistribution() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_editableSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: [{
                    key: "seriesColor",
                    name: _this.root.language.translateAny("Color"),
                    type: "color"
                }, {
                    key: "useVolume",
                    name: _this.root.language.translateAny("Use Volume"),
                    type: "checkbox"
                }]
        });
        Object.defineProperty(_this, "_themeTag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "accumulationdistribution"
        });
        return _this;
    }
    Object.defineProperty(AccumulationDistribution.prototype, "_createSeries", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.panel.series.push(LineSeries.new(this._root, {
                xAxis: this.xAxis,
                yAxis: this.yAxis,
                valueXField: "valueX",
                valueYField: "ad",
                stroke: this.get("seriesColor"),
                fill: undefined
            }));
        }
    });
    Object.defineProperty(AccumulationDistribution.prototype, "_prepareChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.isDirty("useVolume") || this.isDirty("volumeSeries")) {
                this._dataDirty = true;
                this.setCustomData("useVolume", this.get("useVolume") ? "Y" : "N");
            }
            _super.prototype._prepareChildren.call(this);
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(AccumulationDistribution.prototype, "prepareData", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.series) {
                var dataItems = this.get("stockSeries").dataItems;
                var volumeSeries_1 = this.get("volumeSeries");
                this.setRaw("field", "close");
                var i_1 = 0;
                var data_1 = this._getDataArray(dataItems);
                var prevAD_1 = 0;
                var useVolume_1 = this.get("useVolume");
                $array.each(dataItems, function (dataItem) {
                    var close = dataItem.get("valueY");
                    if (close != null) {
                        var low = dataItem.get("lowValueY", close);
                        var high = dataItem.get("highValueY", close);
                        var volume = 1;
                        if (volumeSeries_1 && useVolume_1) {
                            var volumeDI = volumeSeries_1.dataItems[i_1];
                            if (volumeDI) {
                                volume = volumeDI.get("valueY", 1);
                            }
                        }
                        var mf = ((close - low) - (high - close)) / (high - low);
                        if (high == low) {
                            mf = 0;
                        }
                        var ad = prevAD_1 + mf * volume;
                        data_1[i_1].ad = ad;
                        prevAD_1 = ad;
                    }
                    i_1++;
                });
                this.series.data.setAll(data_1);
            }
        }
    });
    Object.defineProperty(AccumulationDistribution, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "AccumulationDistribution"
    });
    Object.defineProperty(AccumulationDistribution, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: ChartIndicator.classNames.concat([AccumulationDistribution.className])
    });
    return AccumulationDistribution;
}(ChartIndicator));
export { AccumulationDistribution };
//# sourceMappingURL=AccumulationDistribution.js.map