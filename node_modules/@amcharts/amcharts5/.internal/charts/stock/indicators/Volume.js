import { __extends } from "tslib";
import { ChartIndicator } from "./ChartIndicator";
import { ColumnSeries } from "../../xy/series/ColumnSeries";
import { Color } from "../../../core/util/Color";
import * as $array from "../../../core/util/Array";
/**
 * An implementation of a [[StockChart]] indicator.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/stock/indicators/} for more info
 */
var Volume = /** @class */ (function (_super) {
    __extends(Volume, _super);
    function Volume() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_editableSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: [{
                    key: "increasingColor",
                    name: _this.root.language.translateAny("Up volume"),
                    type: "color"
                }, {
                    key: "decreasingColor",
                    name: _this.root.language.translateAny("Down volume"),
                    type: "color"
                }]
        });
        Object.defineProperty(_this, "_themeTag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "volume"
        });
        return _this;
    }
    Object.defineProperty(Volume.prototype, "_createSeries", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.panel.series.push(ColumnSeries.new(this._root, {
                xAxis: this.xAxis,
                yAxis: this.yAxis,
                valueXField: "valueX",
                valueYField: "volume",
                stroke: this.get("seriesColor"),
                fill: undefined
            }));
        }
    });
    Object.defineProperty(Volume.prototype, "_prepareChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.isDirty("increasingColor") || this.isDirty("decreasingColor")) {
                this._dataDirty = true;
            }
            _super.prototype._prepareChildren.call(this);
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Volume.prototype, "prepareData", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.series) {
                var volumeSeries = this.get("volumeSeries");
                var stockChart_1 = this.get("stockChart");
                if (volumeSeries && stockChart_1) {
                    var dataItems = volumeSeries.dataItems;
                    this.setRaw("field", "close");
                    var decreasingColor_1 = this.get("decreasingColor", Color.fromHex(0xff0000));
                    var increasingColor_1 = this.get("increasingColor", Color.fromHex(0x00ff00));
                    var data = this._getDataArray(dataItems);
                    $array.each(data, function (dataItem) {
                        dataItem.volume = dataItem.value_y;
                    });
                    this.series.data.setAll(data);
                    $array.each(this.series.dataItems, function (dataItem) {
                        var dataContext = dataItem.dataContext;
                        dataContext.volumeColor = stockChart_1.getVolumeColor(dataItem, decreasingColor_1, increasingColor_1);
                    });
                }
            }
        }
    });
    Object.defineProperty(Volume, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "Volume"
    });
    Object.defineProperty(Volume, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: ChartIndicator.classNames.concat([Volume.className])
    });
    return Volume;
}(ChartIndicator));
export { Volume };
//# sourceMappingURL=Volume.js.map