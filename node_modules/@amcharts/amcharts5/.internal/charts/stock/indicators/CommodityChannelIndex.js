import { __extends } from "tslib";
import { ChartIndicator } from "./ChartIndicator";
import { LineSeries } from "../../xy/series/LineSeries";
/**
 * An implementation of a [[StockChart]] indicator.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/stock/indicators/} for more info
 */
var CommodityChannelIndex = /** @class */ (function (_super) {
    __extends(CommodityChannelIndex, _super);
    function CommodityChannelIndex() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "overBought", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "overSold", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "overSoldRange", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "overBoughtRange", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_editableSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: [
                {
                    key: "period",
                    name: _this.root.language.translateAny("Period"),
                    type: "number"
                }, {
                    key: "seriesColor",
                    name: _this.root.language.translateAny("Color"),
                    type: "color"
                }, {
                    key: "overBought",
                    name: _this.root.language.translateAny("Overbought"),
                    type: "number"
                }, {
                    key: "overBoughtColor",
                    name: _this.root.language.translateAny("Overbought"),
                    type: "color"
                }, {
                    key: "overSold",
                    name: _this.root.language.translateAny("Oversold"),
                    type: "number"
                }, {
                    key: "overSoldColor",
                    name: _this.root.language.translateAny("Oversold"),
                    type: "color"
                }
            ]
        });
        Object.defineProperty(_this, "_themeTag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "commoditychannelindex"
        });
        return _this;
    }
    Object.defineProperty(CommodityChannelIndex.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._afterNew.call(this);
            //this.yAxis.setAll({ min: -100, max: 0, strictMinMax: true });
            // overbought range
            var overBought = this.yAxis.makeDataItem({});
            this.overBought = overBought;
            overBought.set("endValue", 1000);
            var overBoughtRange = this.series.createAxisRange(overBought);
            this.overBoughtRange = overBoughtRange;
            var overBoughtFills = overBoughtRange.fills;
            if (overBoughtFills) {
                overBoughtFills.template.set("themeTags", ["overbought", "fill"]);
            }
            var overBoughtGrid = overBought.get("grid");
            if (overBoughtGrid) {
                overBoughtGrid.setAll({ themeTags: ["overbought"], visible: true });
                overBoughtGrid._applyThemes();
            }
            var overBoughtLabel = overBought.get("label");
            if (overBoughtLabel) {
                overBoughtLabel.setAll({ themeTags: ["overbought"], visible: true, location: 0 });
                overBoughtLabel._applyThemes();
            }
            var overSold = this.yAxis.makeDataItem({});
            this.overSold = overSold;
            overSold.set("endValue", -1000);
            var overSoldRange = this.series.createAxisRange(overSold);
            this.overSoldRange = overSoldRange;
            var overSoldFills = overSoldRange.fills;
            if (overSoldFills) {
                overSoldFills.template.set("themeTags", ["oversold", "fill"]);
            }
            var overSoldGrid = overSold.get("grid");
            if (overSoldGrid) {
                overSoldGrid.setAll({ themeTags: ["oversold"], visible: true });
                overSoldGrid._applyThemes();
            }
            var overSoldLabel = overSold.get("label");
            if (overSoldLabel) {
                overSoldLabel.setAll({ themeTags: ["oversold"], visible: true, location: 0 });
                overSoldLabel._applyThemes();
            }
        }
    });
    Object.defineProperty(CommodityChannelIndex.prototype, "_createSeries", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.panel.series.push(LineSeries.new(this._root, {
                xAxis: this.xAxis,
                yAxis: this.yAxis,
                valueXField: "valueX",
                valueYField: "cci",
                fill: undefined
            }));
        }
    });
    Object.defineProperty(CommodityChannelIndex.prototype, "_updateChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._updateChildren.call(this);
            var overSoldValue = this.get("overSold", 100);
            var overBoughtValue = this.get("overBought", -100);
            if (this.isDirty("overBought")) {
                this.overBought.set("value", overBoughtValue);
                var label = this.overBought.get("label");
                if (label) {
                    label.set("text", this.getNumberFormatter().format(overBoughtValue));
                }
            }
            if (this.isDirty("overSold")) {
                this.overSold.set("value", overSoldValue);
                var label = this.overSold.get("label");
                if (label) {
                    label.set("text", this.getNumberFormatter().format(overSoldValue));
                }
            }
            if (this.isDirty("overSoldColor")) {
                var color = this.get("overSoldColor");
                var label = this.overSold.get("label");
                if (label) {
                    label.set("fill", color);
                }
                this.overSold.get("grid").set("stroke", color);
                this.overSoldRange.fills.template.set("fill", color);
                this.overSoldRange.strokes.template.set("stroke", color);
            }
            if (this.isDirty("overBoughtColor")) {
                var color = this.get("overBoughtColor");
                var label = this.overBought.get("label");
                if (label) {
                    label.set("fill", color);
                }
                this.overBought.get("grid").set("stroke", color);
                this.overBoughtRange.fills.template.set("fill", color);
                this.overBoughtRange.strokes.template.set("stroke", color);
            }
            var min = Math.min(overBoughtValue, overSoldValue);
            var max = Math.max(overBoughtValue, overSoldValue);
            this.series.get("yAxis").set("baseValue", min + (max - min) / 2);
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(CommodityChannelIndex.prototype, "prepareData", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.series) {
                this.set("field", "close");
                var dataItems = this.get("stockSeries").dataItems;
                var data = this._getTypicalPrice(dataItems);
                var period = this.get("period", 20);
                this._sma(data, period, "value_y", "sma");
                for (var i = 0, len = data.length; i < len; i++) {
                    var dataItem = data[i];
                    var value = dataItem.value_y;
                    var ma = dataItem.sma;
                    var meanDeviation = 0;
                    if (i >= period - 1) {
                        for (var j = i; j > i - period; j--) {
                            var di = data[j];
                            meanDeviation += Math.abs(di.value_y - ma);
                        }
                        meanDeviation = meanDeviation / period;
                        dataItem.cci = (value - ma) / (0.015 * meanDeviation);
                    }
                }
                this.series.data.setAll(data);
            }
        }
    });
    Object.defineProperty(CommodityChannelIndex, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "CommodityChannelIndex"
    });
    Object.defineProperty(CommodityChannelIndex, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: ChartIndicator.classNames.concat([CommodityChannelIndex.className])
    });
    return CommodityChannelIndex;
}(ChartIndicator));
export { CommodityChannelIndex };
//# sourceMappingURL=CommodityChannelIndex.js.map