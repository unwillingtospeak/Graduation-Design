import { __extends } from "tslib";
import { Indicator } from "./Indicator";
import { LineSeries } from "../../xy/series/LineSeries";
import * as $array from "../../../core/util/Array";
/**
 * An implementation of a [[StockChart]] indicator.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/stock/indicators/} for more info
 */
var MovingAverage = /** @class */ (function (_super) {
    __extends(MovingAverage, _super);
    function MovingAverage() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_editableSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: [{
                    key: "period",
                    name: _this.root.language.translateAny("Period"),
                    type: "number"
                }, {
                    key: "offset",
                    name: _this.root.language.translateAny("Offset"),
                    type: "number"
                }, {
                    key: "seriesColor",
                    name: _this.root.language.translateAny("Color"),
                    type: "color"
                }, {
                    key: "field",
                    name: _this.root.language.translateAny("Field"),
                    type: "dropdown",
                    options: ["open", "close", "low", "high", "hl/2", "hlc/3", "hlcc/4", "ohlc/4"]
                }, {
                    key: "type",
                    name: _this.root.language.translateAny("Type"),
                    type: "dropdown",
                    options: ["simple", "weighted", "exponential", "dema", "tema"]
                }]
        });
        return _this;
    }
    Object.defineProperty(MovingAverage.prototype, "_prepareChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.isDirty("type") || this.isDirty("offset")) {
                this._dataDirty = true;
                this.setCustomData("type", this.get("type"));
                this.setCustomData("offset", this.get("offset", 0));
            }
            _super.prototype._prepareChildren.call(this);
        }
    });
    Object.defineProperty(MovingAverage.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._afterNew.call(this);
            var stockSeries = this.get("stockSeries");
            var chart = stockSeries.chart;
            if (chart) {
                var series = chart.series.push(LineSeries.new(this._root, {
                    valueXField: "valueX",
                    valueYField: "ma",
                    groupDataDisabled: true,
                    calculateAggregates: true,
                    xAxis: stockSeries.get("xAxis"),
                    yAxis: stockSeries.get("yAxis"),
                    themeTags: ["indicator", "movingaverage"],
                    name: "MA"
                }));
                series.setPrivate("baseValueSeries", stockSeries);
                this.series = series;
                this._handleLegend(series);
            }
        }
    });
    Object.defineProperty(MovingAverage.prototype, "_dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var stockChart = this.get("stockChart");
            var series = this.series;
            series.dispose();
            if (stockChart) {
                var legend = this.get("legend");
                if (legend) {
                    var legendDataItem = series.get("legendDataItem");
                    if (legendDataItem) {
                        legend.disposeDataItem(legendDataItem);
                    }
                }
                stockChart.indicators.removeValue(this);
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(MovingAverage.prototype, "prepareData", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.series) {
                var period = this.get("period", 50);
                var type = this.get("type");
                var stockSeries = this.get("stockSeries");
                var dataItems_1 = stockSeries.dataItems;
                var data = this._getDataArray(dataItems_1);
                switch (type) {
                    case "simple":
                        this._sma(data, period, "value_y", "ma");
                        break;
                    case "weighted":
                        this._wma(data, period, "value_y", "ma");
                        break;
                    case "exponential":
                        this._ema(data, period, "value_y", "ma");
                        break;
                    case "dema":
                        this._dema(data, period, "value_y", "ma");
                        break;
                    case "tema":
                        this._tema(data, period, "value_y", "ma");
                        break;
                }
                var offset_1 = this.get("offset", 0);
                if (offset_1 != 0) {
                    var i_1 = 0;
                    var baseDuration_1 = this.series.get("xAxis").baseDuration();
                    var len_1 = dataItems_1.length;
                    var firstTime_1 = dataItems_1[0].get("valueX", 0);
                    var lastTime_1 = dataItems_1[len_1 - 1].get("valueX", 0);
                    $array.each(data, function (dataItem) {
                        var newX = 0;
                        if (i_1 + offset_1 >= len_1) {
                            newX = lastTime_1 + (offset_1 - len_1 + i_1 + 1) * baseDuration_1;
                        }
                        else if (i_1 + offset_1 < 0) {
                            newX = firstTime_1 + (i_1 + offset_1) * baseDuration_1;
                        }
                        else {
                            newX = dataItems_1[i_1 + offset_1].get("valueX", 0);
                        }
                        dataItem.valueX = newX;
                        i_1++;
                    });
                }
                this.series.data.setAll(data);
            }
        }
    });
    Object.defineProperty(MovingAverage, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "MovingAverage"
    });
    Object.defineProperty(MovingAverage, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: Indicator.classNames.concat([MovingAverage.className])
    });
    return MovingAverage;
}(Indicator));
export { MovingAverage };
//# sourceMappingURL=MovingAverage.js.map