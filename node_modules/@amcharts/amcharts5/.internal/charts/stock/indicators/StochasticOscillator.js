import { __extends } from "tslib";
import { ChartIndicator } from "./ChartIndicator";
import { LineSeries } from "../../xy/series/LineSeries";
import * as $array from "../../../core/util/Array";
/**
 * An implementation of a [[StockChart]] indicator.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/stock/indicators/} for more info
 */
var StochasticOscillator = /** @class */ (function (_super) {
    __extends(StochasticOscillator, _super);
    function StochasticOscillator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "overBought", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "overSold", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Indicator series.
         */
        Object.defineProperty(_this, "slowSeries", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_editableSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: [{
                    key: "period",
                    name: _this.root.language.translateAny("Period"),
                    type: "number"
                }, {
                    key: "kSmoothing",
                    name: _this.root.language.translateAny("%K Smoothing"),
                    type: "number"
                }, {
                    key: "dSmoothing",
                    name: _this.root.language.translateAny("%D Smoothing"),
                    type: "number"
                }, {
                    key: "overBought",
                    name: _this.root.language.translateAny("Overbought"),
                    type: "number"
                }, {
                    key: "overSold",
                    name: _this.root.language.translateAny("Oversold"),
                    type: "number"
                }, {
                    key: "seriesColor",
                    name: _this.root.language.translateAny("Fast"),
                    type: "color"
                }, {
                    key: "slowColor",
                    name: _this.root.language.translateAny("Slow"),
                    type: "color"
                }]
        });
        Object.defineProperty(_this, "_themeTag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "stochastic"
        });
        return _this;
    }
    Object.defineProperty(StochasticOscillator.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._afterNew.call(this);
            this.yAxis.setAll({ min: 0, max: 100, strictMinMax: true });
            // overbought range
            var overBought = this.yAxis.makeDataItem({});
            this.overBought = overBought;
            this.yAxis.createAxisRange(overBought);
            var overBoughtGrid = overBought.get("grid");
            if (overBoughtGrid) {
                overBoughtGrid.setAll({ themeTags: ["overbought"], visible: true });
                overBoughtGrid._applyThemes();
            }
            var overBoughtLabel = overBought.get("label");
            if (overBoughtLabel) {
                overBoughtLabel.setAll({ themeTags: ["overbought"], visible: true, location: 0 });
                overBoughtLabel._applyThemes();
            }
            var overSold = this.yAxis.makeDataItem({});
            this.overSold = overSold;
            this.yAxis.createAxisRange(overSold);
            var overSoldGrid = overSold.get("grid");
            if (overSoldGrid) {
                overSoldGrid.setAll({ themeTags: ["oversold"], visible: true });
                overSoldGrid._applyThemes();
            }
            var overSoldLabel = overSold.get("label");
            if (overSoldLabel) {
                overSoldLabel.setAll({ themeTags: ["oversold"], visible: true, location: 0 });
                overSoldLabel._applyThemes();
            }
            var slowSeries = this.panel.series.push(LineSeries.new(this._root, {
                valueXField: "valueX",
                valueYField: "slow",
                xAxis: this.xAxis,
                yAxis: this.yAxis,
                groupDataDisabled: true,
                themeTags: ["slow"]
            }));
            this.slowSeries = slowSeries;
        }
    });
    Object.defineProperty(StochasticOscillator.prototype, "_createSeries", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.panel.series.push(LineSeries.new(this._root, {
                xAxis: this.xAxis,
                yAxis: this.yAxis,
                valueXField: "valueX",
                valueYField: "fast",
                stroke: this.get("seriesColor"),
                fill: undefined
            }));
        }
    });
    Object.defineProperty(StochasticOscillator.prototype, "_prepareChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.isDirty("kSmoothing") || this.isDirty("dSmoothing")) {
                this._dataDirty = true;
            }
            _super.prototype._prepareChildren.call(this);
        }
    });
    Object.defineProperty(StochasticOscillator.prototype, "_updateChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._updateChildren.call(this);
            var overSoldValue = this.get("overSold", 20);
            var overBoughtValue = this.get("overBought", 80);
            if (this.isDirty("overBought")) {
                this.overBought.set("value", overBoughtValue);
                var label = this.overBought.get("label");
                if (label) {
                    label.set("text", this.getNumberFormatter().format(overBoughtValue));
                }
            }
            if (this.isDirty("overSold")) {
                this.overSold.set("value", overSoldValue);
                var label = this.overSold.get("label");
                if (label) {
                    label.set("text", this.getNumberFormatter().format(overSoldValue));
                }
            }
            this.series.get("yAxis").set("baseValue", overSoldValue + (overBoughtValue - overSoldValue) / 2);
            if (this.isDirty("slowColor")) {
                this._updateSeriesColor(this.slowSeries, this.get("slowColor"), "slowColor");
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(StochasticOscillator.prototype, "prepareData", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            if (this.series) {
                var dataItems_1 = this.get("stockSeries").dataItems;
                var period_1 = this.get("period", 14);
                var data_1 = [];
                var index_1 = 0;
                $array.each(dataItems_1, function (dataItem) {
                    var valueX = dataItem.get("valueX");
                    var k;
                    if (index_1 >= period_1 - 1) {
                        var value = _this._getValue(dataItem);
                        if (value != null) {
                            var lp = Infinity;
                            var hp = -lp;
                            for (var j = index_1; j > index_1 - period_1; j--) {
                                var h = dataItems_1[j].get("highValueY");
                                var l = dataItems_1[j].get("lowValueY");
                                if (h != null && l != null) {
                                    if (l < lp) {
                                        lp = l;
                                    }
                                    if (h > hp) {
                                        hp = h;
                                    }
                                }
                            }
                            k = (value - lp) / (hp - lp) * 100;
                        }
                    }
                    if (k == null) {
                        data_1.push({ valueX: valueX });
                    }
                    else {
                        data_1.push({ valueX: valueX, value_y: k });
                    }
                    index_1++;
                });
                period_1 = this.get("kSmoothing", 1);
                this._sma(data_1, period_1, "value_y", "fast");
                period_1 = this.get("dSmoothing", 3);
                this._sma(data_1, period_1, "fast", "slow");
                this.series.data.setAll(data_1);
                this.slowSeries.data.setAll(data_1);
            }
        }
    });
    Object.defineProperty(StochasticOscillator, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "StochasticOscillator"
    });
    Object.defineProperty(StochasticOscillator, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: ChartIndicator.classNames.concat([StochasticOscillator.className])
    });
    return StochasticOscillator;
}(ChartIndicator));
export { StochasticOscillator };
//# sourceMappingURL=StochasticOscillator.js.map