import { __extends } from "tslib";
import { ChartIndicator } from "./ChartIndicator";
import { LineSeries } from "../../xy/series/LineSeries";
import * as $array from "../../../core/util/Array";
/**
 * An implementation of a [[StockChart]] indicator.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/stock/indicators/} for more info
 */
var RelativeStrengthIndex = /** @class */ (function (_super) {
    __extends(RelativeStrengthIndex, _super);
    function RelativeStrengthIndex() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "overBought", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "overSold", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "overSoldRange", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "overBoughtRange", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_editableSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: [
                {
                    key: "period",
                    name: _this.root.language.translateAny("Period"),
                    type: "number"
                }, {
                    key: "field",
                    name: _this.root.language.translateAny("Field"),
                    type: "dropdown",
                    options: ["open", "close", "low", "high", "hl/2", "hlc/3", "hlcc/4", "ohlc/4"]
                }, {
                    key: "seriesColor",
                    name: _this.root.language.translateAny("Color"),
                    type: "color"
                },
                {
                    key: "overBought",
                    name: _this.root.language.translateAny("Overbought"),
                    type: "number"
                }, {
                    key: "overSold",
                    name: _this.root.language.translateAny("Oversold"),
                    type: "number"
                },
                {
                    key: "overBought",
                    name: _this.root.language.translateAny("Overbought"),
                    type: "number"
                }, {
                    key: "overSold",
                    name: _this.root.language.translateAny("Oversold"),
                    type: "number"
                },
                {
                    key: "overBoughtColor",
                    name: _this.root.language.translateAny("Overbought"),
                    type: "color"
                }, {
                    key: "overSoldColor",
                    name: _this.root.language.translateAny("Oversold"),
                    type: "color"
                }
            ]
        });
        Object.defineProperty(_this, "_themeTag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "rsi"
        });
        return _this;
    }
    Object.defineProperty(RelativeStrengthIndex.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._afterNew.call(this);
            this.yAxis.setAll({ min: 0, max: 100, strictMinMax: true });
            // overbought range
            var overBought = this.yAxis.makeDataItem({});
            this.overBought = overBought;
            overBought.set("endValue", 100);
            var overBoughtRange = this.series.createAxisRange(overBought);
            this.overBoughtRange = overBoughtRange;
            var overBoughtFills = overBoughtRange.fills;
            if (overBoughtFills) {
                overBoughtFills.template.set("themeTags", ["overbought", "fill"]);
            }
            var overBoughtGrid = overBought.get("grid");
            if (overBoughtGrid) {
                overBoughtGrid.setAll({ themeTags: ["overbought"], visible: true });
                overBoughtGrid._applyThemes();
            }
            var overBoughtLabel = overBought.get("label");
            if (overBoughtLabel) {
                overBoughtLabel.setAll({ themeTags: ["overbought"], visible: true, location: 0 });
                overBoughtLabel._applyThemes();
            }
            var overSold = this.yAxis.makeDataItem({});
            this.overSold = overSold;
            overSold.set("endValue", 0);
            var overSoldRange = this.series.createAxisRange(overSold);
            this.overSoldRange = overSoldRange;
            var overSoldFills = overSoldRange.fills;
            if (overSoldFills) {
                overSoldFills.template.set("themeTags", ["oversold", "fill"]);
            }
            var overSoldGrid = overSold.get("grid");
            if (overSoldGrid) {
                overSoldGrid.setAll({ themeTags: ["oversold"], visible: true });
                overSoldGrid._applyThemes();
            }
            var overSoldLabel = overSold.get("label");
            if (overSoldLabel) {
                overSoldLabel.setAll({ themeTags: ["oversold"], visible: true, location: 0 });
                overSoldLabel._applyThemes();
            }
        }
    });
    Object.defineProperty(RelativeStrengthIndex.prototype, "_createSeries", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.panel.series.push(LineSeries.new(this._root, {
                xAxis: this.xAxis,
                yAxis: this.yAxis,
                valueXField: "valueX",
                valueYField: "valueY",
                stroke: this.get("seriesColor"),
                fill: undefined
            }));
        }
    });
    Object.defineProperty(RelativeStrengthIndex.prototype, "_updateChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._updateChildren.call(this);
            var overSoldValue = this.get("overSold", 20);
            var overBoughtValue = this.get("overBought", 80);
            if (this.isDirty("overBought")) {
                this.overBought.set("value", overBoughtValue);
                var label = this.overBought.get("label");
                if (label) {
                    label.set("text", this.getNumberFormatter().format(overBoughtValue));
                }
            }
            if (this.isDirty("overSold")) {
                this.overSold.set("value", overSoldValue);
                var label = this.overSold.get("label");
                if (label) {
                    label.set("text", this.getNumberFormatter().format(overSoldValue));
                }
            }
            if (this.isDirty("overSoldColor")) {
                var color = this.get("overSoldColor");
                var label = this.overSold.get("label");
                if (label) {
                    label.set("fill", color);
                }
                this.overSold.get("grid").set("stroke", color);
                this.overSoldRange.fills.template.set("fill", color);
                this.overSoldRange.strokes.template.set("stroke", color);
            }
            if (this.isDirty("overBoughtColor")) {
                var color = this.get("overBoughtColor");
                var label = this.overBought.get("label");
                if (label) {
                    label.set("fill", color);
                }
                this.overBought.get("grid").set("stroke", color);
                this.overBoughtRange.fills.template.set("fill", color);
                this.overBoughtRange.strokes.template.set("stroke", color);
            }
            this.series.get("yAxis").set("baseValue", overSoldValue + (overBoughtValue - overSoldValue) / 2);
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(RelativeStrengthIndex.prototype, "prepareData", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.series) {
                var dataItems_1 = this.get("stockSeries").dataItems;
                var period_1 = this.get("period", 14);
                var data_1 = [];
                var i_1 = 0;
                var averageGain_1 = 0;
                var averageLoss_1 = 0;
                var prevAverageGain_1 = 0;
                var prevAverageLoss_1 = 0;
                $array.each(dataItems_1, function (dataItem) {
                    var rsi = null;
                    i_1++;
                    if (i_1 == period_1 + 1) {
                        for (var j = 1; j <= period_1; j++) {
                            var value = dataItems_1[j].get("valueY", 0);
                            var prevValue = dataItems_1[j - 1].get("valueY", 0);
                            var change = value - prevValue;
                            if (change > 0) {
                                averageGain_1 += change / period_1;
                            }
                            else {
                                averageLoss_1 += Math.abs(change) / period_1;
                            }
                        }
                        rsi = 100 - (100 / (1 + averageGain_1 / averageLoss_1));
                    }
                    else if (i_1 > period_1) {
                        var value = dataItem.get("valueY", 0);
                        var prevValue = dataItems_1[i_1 - 2].get("valueY", 0);
                        var change = value - prevValue;
                        var gain = 0;
                        var loss = 0;
                        if (change > 0) {
                            gain = change;
                        }
                        else {
                            loss = -change;
                        }
                        averageGain_1 = (prevAverageGain_1 * (period_1 - 1) + gain) / period_1;
                        averageLoss_1 = (prevAverageLoss_1 * (period_1 - 1) + loss) / period_1;
                        rsi = 100 - (100 / (1 + averageGain_1 / averageLoss_1));
                    }
                    data_1.push({ valueX: dataItem.get("valueX"), valueY: rsi });
                    prevAverageGain_1 = averageGain_1;
                    prevAverageLoss_1 = averageLoss_1;
                });
                this.series.data.setAll(data_1);
            }
        }
    });
    Object.defineProperty(RelativeStrengthIndex, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "RelativeStrengthIndex"
    });
    Object.defineProperty(RelativeStrengthIndex, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: ChartIndicator.classNames.concat([RelativeStrengthIndex.className])
    });
    return RelativeStrengthIndex;
}(ChartIndicator));
export { RelativeStrengthIndex };
//# sourceMappingURL=RelativeStrengthIndex.js.map