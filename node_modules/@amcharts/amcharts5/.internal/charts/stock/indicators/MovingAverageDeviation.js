import { __extends } from "tslib";
import { Color } from "../../../core/util/Color";
import { ChartIndicator } from "./ChartIndicator";
import { ColumnSeries } from "../../xy/series/ColumnSeries";
import * as $array from "../../../core/util/Array";
/**
 * An implementation of a [[StockChart]] indicator.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/stock/indicators/} for more info
 */
var MovingAverageDeviation = /** @class */ (function (_super) {
    __extends(MovingAverageDeviation, _super);
    function MovingAverageDeviation() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_editableSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: [
                {
                    key: "period",
                    name: _this.root.language.translateAny("Period"),
                    type: "number"
                }, {
                    key: "field",
                    name: _this.root.language.translateAny("Field"),
                    type: "dropdown",
                    options: ["open", "close", "low", "high", "hl/2", "hlc/3", "hlcc/4", "ohlc/4"]
                }, {
                    key: "type",
                    name: _this.root.language.translateAny("Type"),
                    type: "dropdown",
                    options: ["simple", "weighted", "exponential", "dema", "tema"]
                }, {
                    key: "unit",
                    name: _this.root.language.translateAny("Points/Percent"),
                    type: "dropdown",
                    options: ["points", "percent"]
                },
                {
                    key: "increasingColor",
                    name: _this.root.language.translateAny("Increasing"),
                    type: "color"
                }, {
                    key: "decreasingColor",
                    name: _this.root.language.translateAny("Decreasing"),
                    type: "color"
                }
            ]
        });
        Object.defineProperty(_this, "_themeTag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "movingaveragedeviation"
        });
        return _this;
    }
    Object.defineProperty(MovingAverageDeviation.prototype, "_createSeries", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.panel.series.push(ColumnSeries.new(this._root, {
                xAxis: this.xAxis,
                yAxis: this.yAxis,
                valueXField: "valueX",
                valueYField: "deviation",
                fill: undefined
            }));
        }
    });
    Object.defineProperty(MovingAverageDeviation.prototype, "_updateChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._updateChildren.call(this);
            if (this.isDirty("increasingColor") || this.isDirty("decreasingColor")) {
                var template = this.series.columns.template;
                var increasing = this.get("increasingColor");
                var decreasing = this.get("decreasingColor");
                template.states.create("riseFromPrevious", { fill: increasing, stroke: increasing });
                template.states.create("dropFromPrevious", { fill: decreasing, stroke: decreasing });
            }
        }
    });
    Object.defineProperty(MovingAverageDeviation.prototype, "_prepareChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.isDirty("type") || this.isDirty("unit")) {
                this._dataDirty = true;
            }
            _super.prototype._prepareChildren.call(this);
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(MovingAverageDeviation.prototype, "prepareData", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.series) {
                var dataItems = this.get("stockSeries").dataItems;
                var decreasingColor_1 = this.get("decreasingColor", Color.fromHex(0xff0000)).toCSSHex();
                var increasingColor_1 = this.get("increasingColor", Color.fromHex(0x00ff00)).toCSSHex();
                var data = this._getDataArray(dataItems);
                var period_1 = this.get("period", 50);
                var type = this.get("type");
                var unit_1 = this.get("unit");
                switch (type) {
                    case "simple":
                        this._sma(data, period_1, "value_y", "ma");
                        break;
                    case "weighted":
                        this._wma(data, period_1, "value_y", "ma");
                        break;
                    case "exponential":
                        this._ema(data, period_1, "value_y", "ma");
                        break;
                    case "dema":
                        this._dema(data, period_1, "value_y", "ma");
                        break;
                    case "tema":
                        this._tema(data, period_1, "value_y", "ma");
                        break;
                }
                var previous_1 = -Infinity;
                var i_1 = 0;
                $array.each(data, function (dataItem) {
                    i_1++;
                    if (i_1 >= period_1) {
                        var deviation = dataItem.value_y - dataItem.ma;
                        if (unit_1 == "percent") {
                            deviation = (dataItem.value_y / dataItem.ma - 1) * 100;
                        }
                        var color = increasingColor_1;
                        if (deviation < previous_1) {
                            color = decreasingColor_1;
                        }
                        dataItem.deviation = deviation;
                        dataItem.deviationColor = color;
                        previous_1 = deviation;
                    }
                });
                this.series.data.setAll(data);
            }
        }
    });
    Object.defineProperty(MovingAverageDeviation, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "MovingAverageDeviation"
    });
    Object.defineProperty(MovingAverageDeviation, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: ChartIndicator.classNames.concat([MovingAverageDeviation.className])
    });
    return MovingAverageDeviation;
}(ChartIndicator));
export { MovingAverageDeviation };
//# sourceMappingURL=MovingAverageDeviation.js.map