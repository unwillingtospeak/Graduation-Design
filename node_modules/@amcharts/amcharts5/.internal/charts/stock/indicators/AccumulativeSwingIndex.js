import { __extends } from "tslib";
import { ChartIndicator } from "./ChartIndicator";
import { LineSeries } from "../../xy/series/LineSeries";
import { Color } from "../../../core/util/Color";
import * as $type from "../../../core/util/Type";
/**
 * An implementation of a [[StockChart]] indicator.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/stock/indicators/} for more info
 */
var AccumulativeSwingIndex = /** @class */ (function (_super) {
    __extends(AccumulativeSwingIndex, _super);
    function AccumulativeSwingIndex() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_editableSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: [{
                    key: "positiveColor",
                    name: _this.root.language.translateAny("Positive color"),
                    type: "color"
                }, {
                    key: "negativeColor",
                    name: _this.root.language.translateAny("Negative color"),
                    type: "color"
                }, {
                    key: "limitMoveValue",
                    name: _this.root.language.translateAny("Limit move value"),
                    type: "number"
                }]
        });
        Object.defineProperty(_this, "_themeTag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "accumulativeswingindex"
        });
        Object.defineProperty(_this, "_axisRange", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_axisRangeDI", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        return _this;
    }
    Object.defineProperty(AccumulativeSwingIndex.prototype, "_createSeries", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var series = this.panel.series.push(LineSeries.new(this._root, {
                xAxis: this.xAxis,
                yAxis: this.yAxis,
                valueXField: "valueX",
                valueYField: "asi"
            }));
            var dataItem = this.yAxis.makeDataItem({});
            this._axisRangeDI = dataItem;
            dataItem.set("value", 0);
            dataItem.set("endValue", -100);
            this._axisRange = series.createAxisRange(dataItem);
            this.yAxis.onPrivate("min", function (min) {
                dataItem.set("endValue", min);
            });
            return series;
        }
    });
    Object.defineProperty(AccumulativeSwingIndex.prototype, "_prepareChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.isDirty("limitMoveValue")) {
                this.setCustomData("limitMoveValue", this.get("limitMoveValue"));
                this._dataDirty = true;
            }
            var series = this.series;
            if (this.isDirty("positiveColor")) {
                var color = this.get("positiveColor");
                series.setAll({ fill: color, stroke: color });
            }
            if (this.isDirty("negativeColor")) {
                var color = this.get("negativeColor");
                var axisRange = this._axisRange;
                if (axisRange) {
                    var fills = axisRange.fills;
                    if (fills) {
                        fills.template.set("fill", color);
                    }
                    var strokes = axisRange.strokes;
                    if (strokes) {
                        strokes.template.set("stroke", color);
                    }
                }
            }
            _super.prototype._prepareChildren.call(this);
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(AccumulativeSwingIndex.prototype, "prepareData", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.series) {
                var dataItems = this.get("stockSeries").dataItems;
                this.setRaw("field", "close");
                var data = this._getDataArray(dataItems);
                var t = this.get("limitMoveValue", 0.5);
                var asi = 0;
                var negativeColor = this.get("negativeColor", Color.fromHex(0xff0000)).toCSSHex();
                var positiveColor = this.get("positiveColor", Color.fromHex(0x00ff00)).toCSSHex();
                if (dataItems.length > 2) {
                    data[0].asi = 0;
                    data[0].swingColor = positiveColor;
                    for (var i = 1, len = dataItems.length; i < len; i++) {
                        var dataItem = dataItems[i];
                        var yDataItem = dataItems[i - 1];
                        var c = dataItem.get("valueY");
                        if ($type.isNumber(c)) {
                            var cy = yDataItem.get("valueY", c);
                            var h = dataItem.get("highValueY", c);
                            var l = dataItem.get("lowValueY", c);
                            var o = dataItem.get("openValueY", c);
                            var oy = yDataItem.get("openValueY", c);
                            var hl = h - l;
                            var hc = Math.abs(h - cy);
                            var lc = Math.abs(l - cy);
                            var tr = Math.max(hc, lc, hl);
                            var er = 0;
                            if (cy > h) {
                                er = hc;
                            }
                            if (cy < l) {
                                er = lc;
                            }
                            var k = Math.max(hc, lc);
                            var sh = Math.abs(cy - oy);
                            var r = tr - er / 2 + sh / 4;
                            asi += 50 * (c - cy + (c - o) / 2 + (cy - oy) / 4) / r * k / t;
                            var color = positiveColor;
                            if (asi < 0) {
                                color = negativeColor;
                            }
                            data[i].asi = asi;
                            data[i].swingColor = color;
                        }
                    }
                }
                this.series.data.setAll(data);
            }
        }
    });
    Object.defineProperty(AccumulativeSwingIndex, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "AccumulativeSwingIndex"
    });
    Object.defineProperty(AccumulativeSwingIndex, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: ChartIndicator.classNames.concat([AccumulativeSwingIndex.className])
    });
    return AccumulativeSwingIndex;
}(ChartIndicator));
export { AccumulativeSwingIndex };
//# sourceMappingURL=AccumulativeSwingIndex.js.map