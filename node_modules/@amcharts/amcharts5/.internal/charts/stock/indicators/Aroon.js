import { __extends } from "tslib";
import { Color } from "../../../core/util/Color";
import { ChartIndicator } from "./ChartIndicator";
import { LineSeries } from "../../xy/series/LineSeries";
import * as $array from "../../../core/util/Array";
/**
 * An implementation of a [[StockChart]] indicator.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/stock/indicators/} for more info
 */
var Aroon = /** @class */ (function (_super) {
    __extends(Aroon, _super);
    function Aroon() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_editableSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: [{
                    key: "period",
                    name: _this.root.language.translateAny("Period"),
                    type: "number"
                }, {
                    key: "upColor",
                    name: _this.root.language.translateAny("Aroon up"),
                    type: "color"
                }, {
                    key: "downColor",
                    name: _this.root.language.translateAny("Aroon down"),
                    type: "color"
                }]
        });
        Object.defineProperty(_this, "_themeTag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "aroon"
        });
        return _this;
    }
    Object.defineProperty(Aroon.prototype, "_createSeries", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.panel.series.push(LineSeries.new(this._root, {
                xAxis: this.xAxis,
                yAxis: this.yAxis,
                valueXField: "valueX",
                valueYField: "up",
                fill: undefined
            }));
        }
    });
    Object.defineProperty(Aroon.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._afterNew.call(this);
            this.downSeries = this.panel.series.push(LineSeries.new(this._root, {
                xAxis: this.xAxis,
                yAxis: this.yAxis,
                valueXField: "valueX",
                valueYField: "down",
                fill: undefined
            }));
            this.yAxis.setAll({ min: -1, max: 101, strictMinMax: true });
        }
    });
    Object.defineProperty(Aroon.prototype, "_updateChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._updateChildren.call(this);
            if (this.isDirty("upColor")) {
                var color = this.get("upColor", Color.fromHex(0x00ff00));
                this._updateSeriesColor(this.series, color);
                this.setCustomData("upColor", color);
            }
            if (this.isDirty("downColor")) {
                var color = this.get("downColor", Color.fromHex(0xff0000));
                this._updateSeriesColor(this.downSeries, color);
                this.setCustomData("downColor", color);
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(Aroon.prototype, "prepareData", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.series) {
                this.set("field", "close");
                var dataItems_1 = this.get("stockSeries").dataItems;
                var data = this._getDataArray(dataItems_1);
                var period_1 = this.get("period", 14);
                var i_1 = 0;
                $array.each(data, function (dataItem) {
                    var b = Math.max(0, i_1 - period_1);
                    var h = -Infinity;
                    var l = Infinity;
                    var li = 0;
                    var hi = 0;
                    for (var j = b; j <= i_1; j++) {
                        var vh = dataItems_1[j].get("highValueY", 0);
                        if (vh >= h) {
                            h = vh;
                            hi = j;
                        }
                        var vl = dataItems_1[j].get("lowValueY", 0);
                        if (vl <= l) {
                            l = vl;
                            li = j;
                        }
                    }
                    dataItem.up = (period_1 - (i_1 - hi)) / period_1 * 100;
                    dataItem.down = (period_1 - (i_1 - li)) / period_1 * 100;
                    i_1++;
                });
                this.series.data.setAll(data);
                this.downSeries.data.setAll(data);
            }
        }
    });
    Object.defineProperty(Aroon, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "Aroon"
    });
    Object.defineProperty(Aroon, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: ChartIndicator.classNames.concat([Aroon.className])
    });
    return Aroon;
}(ChartIndicator));
export { Aroon };
//# sourceMappingURL=Aroon.js.map