import { __extends } from "tslib";
import { ChartIndicator } from "./ChartIndicator";
import { LineSeries } from "../../xy/series/LineSeries";
/**
 * An implementation of a [[StockChart]] indicator.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/stock/indicators/} for more info
 */
var OnBalanceVolume = /** @class */ (function (_super) {
    __extends(OnBalanceVolume, _super);
    function OnBalanceVolume() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_editableSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: [{
                    key: "seriesColor",
                    name: _this.root.language.translateAny("Color"),
                    type: "color"
                }]
        });
        Object.defineProperty(_this, "_themeTag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "onbalancevolume"
        });
        return _this;
    }
    Object.defineProperty(OnBalanceVolume.prototype, "_createSeries", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.panel.series.push(LineSeries.new(this._root, {
                xAxis: this.xAxis,
                yAxis: this.yAxis,
                valueXField: "valueX",
                valueYField: "obv",
                stroke: this.get("seriesColor"),
                fill: undefined
            }));
        }
    });
    Object.defineProperty(OnBalanceVolume.prototype, "_prepareChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.isDirty("volumeSeries")) {
                this._dataDirty = true;
            }
            _super.prototype._prepareChildren.call(this);
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(OnBalanceVolume.prototype, "prepareData", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.series) {
                this.setRaw("field", "close");
                var dataItems = this.get("stockSeries").dataItems;
                var volumeSeries = this.get("volumeSeries");
                var data = this._getDataArray(dataItems);
                var previous = 0;
                var len = data.length;
                if (volumeSeries && len > 1) {
                    var cy = data[0].value_y;
                    for (var i = 1; i < len; i++) {
                        var dataItem = data[i];
                        var c = dataItem.value_y;
                        if (c != null) {
                            var volumeDI = volumeSeries.dataItems[i];
                            var volume = 0;
                            if (volumeDI) {
                                volume = volumeDI.get("valueY", 1);
                            }
                            var obv = previous;
                            if (c > cy) {
                                obv += volume;
                            }
                            else if (c < cy) {
                                obv -= volume;
                            }
                            dataItem.obv = obv;
                            previous = obv;
                            cy = c;
                        }
                    }
                }
                this.series.data.setAll(data);
            }
        }
    });
    Object.defineProperty(OnBalanceVolume, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "OnBalanceVolume"
    });
    Object.defineProperty(OnBalanceVolume, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: ChartIndicator.classNames.concat([OnBalanceVolume.className])
    });
    return OnBalanceVolume;
}(ChartIndicator));
export { OnBalanceVolume };
//# sourceMappingURL=OnBalanceVolume.js.map