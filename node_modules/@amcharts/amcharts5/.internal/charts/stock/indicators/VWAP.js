import { __extends } from "tslib";
import { Indicator } from "./Indicator";
import { LineSeries } from "../../xy/series/LineSeries";
import * as $array from "../../../core/util/Array";
/**
 * An implementation of a [[StockChart]] indicator.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/stock/indicators/} for more info
 */
var VWAP = /** @class */ (function (_super) {
    __extends(VWAP, _super);
    function VWAP() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_editableSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: [{
                    key: "period",
                    name: _this.root.language.translateAny("Period"),
                    type: "number"
                }, {
                    key: "seriesColor",
                    name: _this.root.language.translateAny("Color"),
                    type: "color"
                }, {
                    key: "field",
                    name: _this.root.language.translateAny("Field"),
                    type: "dropdown",
                    options: ["open", "close", "low", "high", "hl/2", "hlc/3", "hlcc/4", "ohlc/4"]
                }]
        });
        return _this;
    }
    Object.defineProperty(VWAP.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._afterNew.call(this);
            var stockSeries = this.get("stockSeries");
            var chart = stockSeries.chart;
            if (chart) {
                var series = chart.series.push(LineSeries.new(this._root, {
                    valueXField: "valueX",
                    valueYField: "vwap",
                    groupDataDisabled: true,
                    calculateAggregates: true,
                    xAxis: stockSeries.get("xAxis"),
                    yAxis: stockSeries.get("yAxis"),
                    themeTags: ["indicator", "vwap"],
                    name: "VWAP"
                }));
                series.setPrivate("baseValueSeries", stockSeries);
                this.series = series;
                this._handleLegend(series);
            }
        }
    });
    Object.defineProperty(VWAP.prototype, "_prepareChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.isDirty("volumeSeries")) {
                this._dataDirty = true;
            }
            _super.prototype._prepareChildren.call(this);
        }
    });
    Object.defineProperty(VWAP.prototype, "_dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var stockChart = this.get("stockChart");
            var series = this.series;
            series.dispose();
            if (stockChart) {
                var legend = this.get("legend");
                if (legend) {
                    var legendDataItem = series.get("legendDataItem");
                    if (legendDataItem) {
                        legend.disposeDataItem(legendDataItem);
                    }
                }
                stockChart.indicators.removeValue(this);
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(VWAP.prototype, "prepareData", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.series) {
                var period_1 = this.get("period", Infinity);
                var stockSeries = this.get("stockSeries");
                var volumeSeries_1 = this.get("volumeSeries");
                var dataItems = stockSeries.dataItems;
                if (volumeSeries_1) {
                    var data_1 = this._getDataArray(dataItems);
                    var i_1 = 0;
                    var totalVolume_1 = 0;
                    var totalVW_1 = 0;
                    $array.each(data_1, function (dataItem) {
                        var volumeDI = volumeSeries_1.dataItems[i_1];
                        var volume = volumeDI.get("valueY", 0);
                        var vw = dataItem.value_y * volume;
                        dataItem.vw = vw;
                        dataItem.volume = volume;
                        totalVW_1 += vw;
                        totalVolume_1 += volume;
                        if (i_1 >= period_1) {
                            var volumeToRemove = data_1[i_1 - period_1].volume;
                            var vwToRemove = data_1[i_1 - period_1].vw;
                            if (volumeToRemove != null) {
                                totalVolume_1 -= volumeToRemove;
                            }
                            if (vwToRemove != null) {
                                totalVW_1 -= vwToRemove;
                            }
                        }
                        dataItem.totalVW = totalVW_1;
                        dataItem.vwap = totalVW_1 / totalVolume_1;
                        i_1++;
                    });
                    this.series.data.setAll(data_1);
                }
            }
        }
    });
    Object.defineProperty(VWAP, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "VWAP"
    });
    Object.defineProperty(VWAP, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: Indicator.classNames.concat([VWAP.className])
    });
    return VWAP;
}(Indicator));
export { VWAP };
//# sourceMappingURL=VWAP.js.map