import { __extends } from "tslib";
import { ChartIndicator } from "./ChartIndicator";
import { LineSeries } from "../../xy/series/LineSeries";
import * as $array from "../../../core/util/Array";
/**
 * An implementation of a [[StockChart]] indicator.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/stock/indicators/} for more info
 */
var DisparityIndex = /** @class */ (function (_super) {
    __extends(DisparityIndex, _super);
    function DisparityIndex() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_editableSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: [{
                    key: "period",
                    name: _this.root.language.translateAny("Period"),
                    type: "number"
                }, {
                    key: "seriesColor",
                    name: _this.root.language.translateAny("Color"),
                    type: "color"
                }, {
                    key: "field",
                    name: _this.root.language.translateAny("Field"),
                    type: "dropdown",
                    options: ["open", "close", "low", "high", "hl/2", "hlc/3", "hlcc/4", "ohlc/4"]
                }, {
                    key: "movingAverageType",
                    name: _this.root.language.translateAny("Moving Average Type"),
                    type: "dropdown",
                    options: ["simple", "weighted", "exponential", "dema", "tema"]
                }]
        });
        Object.defineProperty(_this, "_themeTag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "disparityindex"
        });
        return _this;
    }
    Object.defineProperty(DisparityIndex.prototype, "_createSeries", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.panel.series.push(LineSeries.new(this._root, {
                xAxis: this.xAxis,
                yAxis: this.yAxis,
                valueXField: "valueX",
                valueYField: "disparity",
                stroke: this.get("seriesColor"),
                fill: undefined
            }));
        }
    });
    Object.defineProperty(DisparityIndex.prototype, "_prepareChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.isDirty("movingAverageType")) {
                this._dataDirty = true;
                this.setCustomData("movingAverageType", this.get("movingAverageType"));
            }
            _super.prototype._prepareChildren.call(this);
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(DisparityIndex.prototype, "prepareData", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.series) {
                var dataItems = this.get("stockSeries").dataItems;
                var period = this.get("period", 14);
                var type = this.get("movingAverageType");
                var data = this._getDataArray(dataItems);
                switch (type) {
                    case "simple":
                        this._sma(data, period, "value_y", "ma");
                        break;
                    case "weighted":
                        this._wma(data, period, "value_y", "ma");
                        break;
                    case "exponential":
                        this._ema(data, period, "value_y", "ma");
                        break;
                    case "dema":
                        this._dema(data, period, "value_y", "ma");
                        break;
                    case "tema":
                        this._tema(data, period, "value_y", "ma");
                        break;
                }
                $array.each(data, function (dataItem) {
                    var ma = dataItem.ma;
                    if (ma != null) {
                        dataItem.disparity = 100 * (dataItem.value_y - ma) / ma;
                    }
                });
                this.series.data.setAll(data);
            }
        }
    });
    Object.defineProperty(DisparityIndex, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "DisparityIndex"
    });
    Object.defineProperty(DisparityIndex, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: ChartIndicator.classNames.concat([DisparityIndex.className])
    });
    return DisparityIndex;
}(ChartIndicator));
export { DisparityIndex };
//# sourceMappingURL=DisparityIndex.js.map