import { __extends } from "tslib";
import { color } from "../../../core/util/Color";
import { ChartIndicator } from "./ChartIndicator";
import { LineSeries } from "../../xy/series/LineSeries";
import { ColumnSeries } from "../../xy/series/ColumnSeries";
import * as $array from "../../../core/util/Array";
/**
 * An implementation of a [[StockChart]] indicator.
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/stock/indicators/} for more info
 */
var MACD = /** @class */ (function (_super) {
    __extends(MACD, _super);
    function MACD() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Indicator series for the signal.
         */
        Object.defineProperty(_this, "signalSeries", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * Indicator series for the difference.
         */
        Object.defineProperty(_this, "differenceSeries", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_editableSettings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: [{
                    key: "fastPeriod",
                    name: _this.root.language.translateAny("Fast MA period"),
                    type: "number"
                }, {
                    key: "slowPeriod",
                    name: _this.root.language.translateAny("Slow MA period"),
                    type: "number"
                }, {
                    key: "signalPeriod",
                    name: _this.root.language.translateAny("Signal period"),
                    type: "number"
                }, {
                    key: "seriesColor",
                    name: _this.root.language.translateAny("MACD"),
                    type: "color"
                }, {
                    key: "signalColor",
                    name: _this.root.language.translateAny("Signal"),
                    type: "color"
                }, {
                    key: "increasingColor",
                    name: _this.root.language.translateAny("Increasing"),
                    type: "color"
                }, {
                    key: "decreasingColor",
                    name: _this.root.language.translateAny("Decreasing"),
                    type: "color"
                }]
        });
        Object.defineProperty(_this, "_themeTag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "macd"
        });
        return _this;
    }
    Object.defineProperty(MACD.prototype, "_createSeries", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.panel.series.push(LineSeries.new(this._root, {
                xAxis: this.xAxis,
                yAxis: this.yAxis,
                valueXField: "valueX",
                valueYField: "macd",
                groupDataDisabled: true,
                stroke: this.get("seriesColor"),
                fill: undefined
            }));
        }
    });
    Object.defineProperty(MACD.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._afterNew.call(this);
            var chart = this.panel;
            if (chart) {
                var signalSeries = chart.series.push(LineSeries.new(this._root, {
                    valueXField: "valueX",
                    valueYField: "signal",
                    xAxis: this.xAxis,
                    yAxis: this.yAxis,
                    groupDataDisabled: true,
                    themeTags: ["signal"]
                }));
                this.signalSeries = signalSeries;
                var differenceSeries = chart.series.push(ColumnSeries.new(this._root, {
                    valueXField: "valueX",
                    valueYField: "difference",
                    xAxis: this.xAxis,
                    yAxis: this.yAxis,
                    groupDataDisabled: true,
                    themeTags: ["difference"]
                }));
                this.differenceSeries = differenceSeries;
            }
        }
    });
    Object.defineProperty(MACD.prototype, "_prepareChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.isDirty("fastPeriod") || this.isDirty("slowPeriod") || this.isDirty("signalPeriod")) {
                this._dataDirty = true;
                this.setCustomData("fastPeriod", this.get("fastPeriod"));
                this.setCustomData("slowPeriod", this.get("slowPeriod"));
                this.setCustomData("signalPeriod", this.get("signalPeriod"));
            }
            _super.prototype._prepareChildren.call(this);
        }
    });
    Object.defineProperty(MACD.prototype, "_updateChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._updateChildren.call(this);
            if (this.isDirty("increasingColor") || this.isDirty("decreasingColor")) {
                var template = this.differenceSeries.columns.template;
                var increasing = this.get("increasingColor");
                var decreasing = this.get("decreasingColor");
                template.states.create("riseFromPrevious", { fill: increasing, stroke: increasing });
                template.states.create("dropFromPrevious", { fill: decreasing, stroke: decreasing });
                this._dataDirty = true;
            }
            if (this.isDirty("signalColor")) {
                this._updateSeriesColor(this.signalSeries, this.get("signalColor"), "signalColor");
            }
            var dataItem = this.series.dataItem;
            if (dataItem) {
                var dataContext = dataItem.dataContext;
                if (dataContext) {
                    dataContext.fastPeriod = this.get("fastPeriod");
                    dataContext.slowPeriod = this.get("slowPeriod");
                    dataContext.signalPeriod = this.get("signalPeriod");
                    var seriesColor = this.get("seriesColor");
                    if (seriesColor) {
                        dataContext.seriesColor = seriesColor.toCSSHex();
                    }
                    var signalColor = this.get("signalColor");
                    if (signalColor) {
                        dataContext.signalColor = signalColor.toCSSHex();
                    }
                }
            }
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(MACD.prototype, "prepareData", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            if (this.series) {
                var dataItems = this.get("stockSeries").dataItems;
                var data = this._getDataArray(dataItems);
                var period = this.get("fastPeriod", 12);
                this._ema(data, period, "value_y", "emaFast");
                period = this.get("slowPeriod", 26);
                this._ema(data, period, "value_y", "emaSlow");
                $array.each(data, function (dataItem) {
                    var emaFast = dataItem.emaFast;
                    var emaSlow = dataItem.emaSlow;
                    if (emaFast != null && emaSlow != null) {
                        dataItem.macd = emaFast - emaSlow;
                    }
                });
                period = this.get("signalPeriod", 9);
                this._ema(data, period, "macd", "signal");
                var increasingColor_1 = this.get("increasingColor", color(0x00ff00)).toCSSHex();
                var decreasingColor_1 = this.get("decreasingColor", color(0xff0000)).toCSSHex();
                var p_1 = -Infinity;
                $array.each(data, function (dataItem) {
                    var macd = dataItem.macd;
                    var signal = dataItem.signal;
                    if (macd != null && signal != null) {
                        var difference = macd - signal;
                        dataItem.difference = difference;
                        var color_1 = increasingColor_1;
                        if (difference < p_1) {
                            color_1 = decreasingColor_1;
                        }
                        dataItem.differenceColor = color_1;
                        p_1 = difference;
                    }
                });
                this.differenceSeries.data.setAll(data);
                this.signalSeries.data.setAll(data);
                this.series.data.setAll(data);
            }
        }
    });
    Object.defineProperty(MACD, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "MACD"
    });
    Object.defineProperty(MACD, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: ChartIndicator.classNames.concat([MACD.className])
    });
    return MACD;
}(ChartIndicator));
export { MACD };
//# sourceMappingURL=MACD.js.map