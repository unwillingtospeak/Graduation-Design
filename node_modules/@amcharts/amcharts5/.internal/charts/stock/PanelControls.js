import { __extends } from "tslib";
import { Container } from "../../core/render/Container";
import { Button } from "../../core/render/Button";
import { Graphics } from "../../core/render/Graphics";
/**
 * Creates a button set for [[StockChart]] panels (move up/down, close, etc.)
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/stock/panels/#Panel_controls} for more info
 */
var PanelControls = /** @class */ (function (_super) {
    __extends(PanelControls, _super);
    function PanelControls() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * A [[Button]] which moves panel up.
         *
         * @default Button.new()
         */
        Object.defineProperty(_this, "upButton", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this.children.push(Button.new(_this._root, {
                themeTags: ["up", "control", "panel"],
                icon: Graphics.new(_this._root, {
                    themeTags: ["icon", "button"]
                })
            }))
        });
        /**
         * A [[Button]] which moves panel down.
         *
         * @default Button.new()
         */
        Object.defineProperty(_this, "downButton", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this.children.push(Button.new(_this._root, {
                themeTags: ["down", "control", "panel"],
                icon: Graphics.new(_this._root, {
                    themeTags: ["icon", "button"]
                })
            }))
        });
        /**
         * A [[Button]] which expands/collapses the panel.
         *
         * @default Button.new()
         */
        Object.defineProperty(_this, "expandButton", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this.children.push(Button.new(_this._root, {
                themeTags: ["expand", "control", "panel"],
                icon: Graphics.new(_this._root, {
                    themeTags: ["icon", "button"]
                })
            }))
        });
        /**
         * A [[Button]] which closes the panel.
         *
         * @default Button.new()
         */
        Object.defineProperty(_this, "closeButton", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this.children.push(Button.new(_this._root, {
                themeTags: ["close", "control", "panel"],
                icon: Graphics.new(_this._root, {
                    themeTags: ["icon", "button"]
                })
            }))
        });
        return _this;
    }
    Object.defineProperty(PanelControls.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype._afterNew.call(this);
            var upButton = this.upButton;
            var downButton = this.downButton;
            downButton.events.on("click", function () {
                var stockPanel = _this.get("stockPanel");
                stockPanel.moveDown();
            });
            upButton.events.on("click", function () {
                var stockPanel = _this.get("stockPanel");
                stockPanel.moveUp();
            });
            this.closeButton.events.on("click", function () {
                var stockPanel = _this.get("stockPanel");
                stockPanel.close();
            });
            this.expandButton.events.on("click", function () {
                var stockPanel = _this.get("stockPanel");
                stockPanel.expand();
            });
        }
    });
    Object.defineProperty(PanelControls, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "PanelControls"
    });
    Object.defineProperty(PanelControls, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: Container.classNames.concat([PanelControls.className])
    });
    return PanelControls;
}(Container));
export { PanelControls };
//# sourceMappingURL=PanelControls.js.map