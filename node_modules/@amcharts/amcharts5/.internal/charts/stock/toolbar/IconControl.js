import { __extends } from "tslib";
import { StockControl } from "./StockControl";
import { DropdownList } from "./DropdownList";
import { StockIcons } from "./StockIcons";
import * as $array from "../../../core/util/Array";
/**
 * Shows selection of icons to choose from for annotating [[StockChart]].
 *
 * This class is instantiated automatically, and should not be used standalone.
 */
var IconControl = /** @class */ (function (_super) {
    __extends(IconControl, _super);
    function IconControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(IconControl.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            // Do parent stuff
            _super.prototype._afterNew.call(this);
            // Create list of tools
            var list = DropdownList.new(this._root, {
                control: this,
                parent: this.getPrivate("button"),
                searchable: false
            });
            this.setPrivate("list", list);
            list.getPrivate("list").className = "am5stock-control-icons";
            list.events.on("closed", function (_ev) {
                _this.set("active", false);
            });
            list.events.on("invoked", function (ev) {
                var item = JSON.parse(ev.item.id);
                var icon;
                var icons = _this.get("icons");
                $array.each(icons, function (listIcon) {
                    if (item.svgPath == listIcon.svgPath) {
                        icon = listIcon;
                    }
                });
                if (icon) {
                    _this.setIcon(icon);
                    _this.events.dispatch("selected", {
                        type: "selected",
                        icon: icon,
                        target: _this
                    });
                }
            });
            this.on("active", function (active) {
                if (active) {
                    _this.setTimeout(function () { return list.show(); }, 10);
                }
                else {
                    list.hide();
                }
            });
            this._initIcons();
        }
    });
    Object.defineProperty(IconControl.prototype, "setIcon", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (icon) {
            this.getPrivate("icon").innerHTML = "";
            this.getPrivate("icon").appendChild(this._getDrawingIcon(icon));
            //this.getPrivate("label")!.style.display = "none";
        }
    });
    Object.defineProperty(IconControl.prototype, "_initIcons", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            var list = this.getPrivate("list");
            var icons = this.get("icons");
            var items = [];
            $array.each(icons, function (icon) {
                items.push({
                    id: JSON.stringify(icon),
                    label: "",
                    icon: _this._getDrawingIcon(icon)
                });
            });
            list.set("items", items);
        }
    });
    Object.defineProperty(IconControl.prototype, "_getDrawingIcon", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (icon) {
            return StockIcons._getSVG({ viewbox: "0 0 50 50", path: icon.svgPath });
        }
    });
    Object.defineProperty(IconControl.prototype, "_afterChanged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._afterChanged.call(this);
            if (this.isDirty("icons")) {
                this._initIcons();
            }
        }
    });
    Object.defineProperty(IconControl.prototype, "_dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._dispose.call(this);
        }
    });
    Object.defineProperty(IconControl, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "IconControl"
    });
    Object.defineProperty(IconControl, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: StockControl.classNames.concat([IconControl.className])
    });
    return IconControl;
}(StockControl));
export { IconControl };
//# sourceMappingURL=IconControl.js.map