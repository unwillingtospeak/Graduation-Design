import { __extends } from "tslib";
import { Entity } from "../../../core/util/Entity";
import StockToolbarCSS from "./StockToolbarCSS";
import * as $array from "../../../core/util/Array";
import * as $utils from "../../../core/util/Utils";
/**
 * @todo revview
 */
var StockToolbar = /** @class */ (function (_super) {
    __extends(StockToolbar, _super);
    function StockToolbar() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_cssDisposer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        return _this;
    }
    Object.defineProperty(StockToolbar.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._afterNew.call(this);
            // Inherit default themes from chart
            this._defaultThemes = this.get("stockChart")._defaultThemes;
            _super.prototype._afterNewApplyThemes.call(this);
            this._initControls();
            this.loadDefaultCSS();
            this._root.addDisposer(this);
            this.events.dispatch("created", {
                type: "created",
                target: this
            });
        }
    });
    Object.defineProperty(StockToolbar.prototype, "_afterChanged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._afterChanged.call(this);
            if (this.isDirty("container")) {
                // TODO
            }
            if (this.isDirty("useDefaultCSS")) {
                if (this.get("useDefaultCSS")) {
                    this.loadDefaultCSS();
                }
                else if (this._cssDisposer) {
                    this._cssDisposer.dispose();
                }
            }
            if (this.isDirty("controls")) {
                this._initControls();
            }
        }
    });
    Object.defineProperty(StockToolbar.prototype, "_dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._dispose.call(this);
            // $array.each(this._itemDisposers, (x) => {
            // 	x.dispose();
            // });
        }
    });
    Object.defineProperty(StockToolbar.prototype, "_initControls", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            var controls = this.get("controls", []);
            $array.each(controls, function (control, _index) {
                if (!control.getPrivate("toolbar")) {
                    // @todo insert at specific index
                    control.setPrivate("toolbar", _this);
                    _this.get("container").appendChild(control.getPrivate("button"));
                }
            });
        }
    });
    /**
     * Loads the default CSS.
     *
     * @ignore Exclude from docs
     */
    Object.defineProperty(StockToolbar.prototype, "loadDefaultCSS", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var disposer = StockToolbarCSS($utils.getShadowRoot(this._root.dom), this._root);
            this._disposers.push(disposer);
            this._cssDisposer = disposer;
        }
    });
    Object.defineProperty(StockToolbar, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "StockToolbar"
    });
    Object.defineProperty(StockToolbar, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: Entity.classNames.concat([StockToolbar.className])
    });
    return StockToolbar;
}(Entity));
export { StockToolbar };
//# sourceMappingURL=StockToolbar.js.map