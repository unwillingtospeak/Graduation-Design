{"version":3,"file":"SettingsControl.js","sourceRoot":"","sources":["../../../../../../src/.internal/charts/stock/toolbar/SettingsControl.ts"],"names":[],"mappings":";AAEA,OAAO,EAAE,SAAS,EAAE,MAAM,yBAAyB,CAAC;AACpD,OAAO,EAAE,mBAAmB,EAAyF,MAAM,uBAAuB,CAAC;AACnJ,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAC1C,OAAO,KAAK,MAAM,MAAM,0BAA0B,CAAC;AAcnD;;GAEG;AACH;IAAqC,mCAAmB;IAAxD;;IAyHA,CAAC;;;;;eAjHA;YAAA,iBA6BC;YA5BA,iBAAM,SAAS,WAAE,CAAC;YAElB,IAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,CAAE,CAAC;YAC9C,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,UAAC,EAAE;gBAChC,IAAM,UAAU,GAAG,KAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;gBAC1C,IAAM,WAAW,GAAG,UAAU,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;gBAClD,IAAI,WAAW,EAAE;oBAChB,IAAI,EAAE,CAAC,IAAI,CAAC,EAAE,IAAI,SAAS,EAAE;wBAC5B,IAAI,EAAE,CAAC,IAAI,CAAC,KAAK,IAAI,SAAS,EAAE;4BAC/B,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;4BACjC,KAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;yBAC5B;6BACI;4BACJ,UAAU,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;4BAClC,KAAI,CAAC,eAAe,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,IAAI,aAAa,CAAC,CAAC;yBACrD;qBACD;yBACI,IAAI,EAAE,CAAC,IAAI,CAAC,EAAE,IAAI,OAAO,EAAE;wBAC/B,KAAI,CAAC,SAAS,CAAO,EAAG,CAAC,OAAO,CAAC,CAAA;qBACjC;iBACD;YAEF,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE;gBACjB,KAAI,CAAC,eAAe,EAAE,CAAC;YACxB,CAAC,CAAC,CAAC;QAEJ,CAAC;;IAED,2BAA2B;IAC3B,0BAA0B;IAC1B,IAAI;;;;;eAEJ;YACC,OAAO,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QACvC,CAAC;;;;;;eAED;YACC,IAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAE,CAAC;YAC1C,IAAM,MAAM,GAAG,MAAM,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;YACpD,IAAM,YAAY,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;YACvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACvC,IAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;gBACxB,QAAQ,KAAK,CAAC,EAAE,EAAE;oBACjB,KAAK,qBAAqB;wBACzB,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,eAAe,EAAE,CAAA;wBACtC,MAAM;oBACP,KAAK,+BAA+B,CAAC;oBACrC,KAAK,+BAA+B,CAAC;oBACrC,KAAK,mCAAmC;wBACvC,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,KAAK,IAAI,YAAY,CAAC;wBAC5C,MAAM;iBACP;aACD;QAEF,CAAC;;;;;;eAED;YACC,IAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YAC1C,IAAM,WAAW,GAAG,UAAU,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;YAClD,IAAI,WAAW,EAAE;gBAChB,IAAM,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBACvC,IAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC;gBACrD,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;aAC5D;YACD,OAAO,KAAK,CAAC;QACd,CAAC;;;;;;eAED;YACC,IAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YAC1C,IAAM,WAAW,GAAG,UAAU,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;YAClD,IAAI,WAAW,EAAE;gBAChB,IAAM,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBACvC,IAAI,KAAK,YAAY,SAAS,EAAE;oBAC/B,IAAI,WAAW,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,8BAA8B,EAAE;wBACpE,OAAO,SAAS,CAAC;qBACjB;oBACD,IAAI,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,EAAE;wBAC7B,OAAO,aAAa,CAAC;qBACrB;iBACD;aACD;YACD,OAAO,SAAS,CAAC;QAClB,CAAC;;;;;;eAED,UAA0B,KAAc;YACvC,IAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YAC1C,IAAM,WAAW,GAAG,UAAU,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;YAClD,IAAI,WAAW,EAAE;gBAChB,IAAM,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBACvC,IAAI,KAAK,YAAY,SAAS,EAAE;oBAE/B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,UAAC,MAAM;wBAChC,MAAM,CAAC,aAAa,EAAE,CAAC;oBACxB,CAAC,CAAC,CAAA;oBAEF,KAAK,CAAC,GAAG,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;iBAChC;aACD;QACF,CAAC;;;;;;eAED,UAAoB,OAAgB;YACnC,IAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YAC1C,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,UAAC,KAAK;gBAC5B,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,UAAC,KAAK;oBACtB,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;oBACjE,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;gBACjE,CAAC,CAAC,CAAA;YACH,CAAC,CAAC,CAAC;QACJ,CAAC;;IAtHD;;;;eAAkC,iBAAiB;OAAC;IACpD;;;;eAA0C,mBAAmB,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;OAAC;IAuH9G,sBAAC;CAAA,AAzHD,CAAqC,mBAAmB,GAyHvD;SAzHY,eAAe","sourcesContent":["import type { IDropdownListItem } from \"./DropdownList\";\r\n\r\nimport { ValueAxis } from \"../../xy/axes/ValueAxis\";\r\nimport { DropdownListControl, IDropdownListControlSettings, IDropdownListControlPrivate, IDropdownListControlEvents } from \"./DropdownListControl\";\r\nimport { StockIcons } from \"./StockIcons\";\r\nimport * as $array from \"../../../core/util/Array\";\r\n\r\nexport interface ISettingsControlItem extends IDropdownListItem {\r\n}\r\n\r\nexport interface ISettingsControlSettings extends IDropdownListControlSettings {\r\n}\r\n\r\nexport interface ISettingsControlPrivate extends IDropdownListControlPrivate {\r\n}\r\n\r\nexport interface ISettingsControlEvents extends IDropdownListControlEvents {\r\n}\r\n\r\n/**\r\n * A control that is used to change type of the main series of the [[StockChart]].\r\n */\r\nexport class SettingsControl extends DropdownListControl {\r\n\tpublic static className: string = \"SettingsControl\";\r\n\tpublic static classNames: Array<string> = DropdownListControl.classNames.concat([SettingsControl.className]);\r\n\r\n\tdeclare public _settings: ISettingsControlSettings;\r\n\tdeclare public _privateSettings: ISettingsControlPrivate;\r\n\tdeclare public _events: ISettingsControlEvents;\r\n\r\n\tprotected _afterNew() {\r\n\t\tsuper._afterNew();\r\n\r\n\t\tconst dropdown = this.getPrivate(\"dropdown\")!;\r\n\t\tdropdown.events.on(\"changed\", (ev) => {\r\n\t\t\tconst stockChart = this.get(\"stockChart\");\r\n\t\t\tconst stockSeries = stockChart.get(\"stockSeries\");\r\n\t\t\tif (stockSeries) {\r\n\t\t\t\tif (ev.item.id == \"y-scale\") {\r\n\t\t\t\t\tif (ev.item.value == \"percent\") {\r\n\t\t\t\t\t\tstockChart.setPercentScale(true);\r\n\t\t\t\t\t\tthis._setLogarithmic(false);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tstockChart.setPercentScale(false);\r\n\t\t\t\t\t\tthis._setLogarithmic(ev.item.value == \"logarithmic\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if (ev.item.id == \"fills\") {\r\n\t\t\t\t\tthis._setFills((<any>ev).checked)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t});\r\n\r\n\t\tthis.on(\"active\", () => {\r\n\t\t\tthis._populateInputs();\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t// public _afterChanged() {\r\n\t// \tsuper._afterChanged();\r\n\t// }\r\n\r\n\tprotected _getDefaultIcon(): SVGElement {\r\n\t\treturn StockIcons.getIcon(\"Settings\");\r\n\t}\r\n\r\n\tprotected _populateInputs(): void {\r\n\t\tconst button = this.getPrivate(\"button\")!;\r\n\t\tconst inputs = button.getElementsByTagName(\"input\");\r\n\t\tconst currentScale = this._getYScale();\r\n\t\tfor (let i = 0; i < inputs.length; i++) {\r\n\t\t\tconst input = inputs[i];\r\n\t\t\tswitch (input.id) {\r\n\t\t\t\tcase \"am5stock-list-fills\":\r\n\t\t\t\t\tinput.checked = this._getFillEnabled()\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"am5stock-list-y-scale-percent\":\r\n\t\t\t\tcase \"am5stock-list-y-scale-regular\":\r\n\t\t\t\tcase \"am5stock-list-y-scale-logarithmic\":\r\n\t\t\t\t\tinput.checked = input.value == currentScale;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tprotected _getFillEnabled(): boolean {\r\n\t\tconst stockChart = this.get(\"stockChart\");\r\n\t\tconst stockSeries = stockChart.get(\"stockSeries\");\r\n\t\tif (stockSeries) {\r\n\t\t\tconst xAxis = stockSeries.get(\"xAxis\");\r\n\t\t\tconst fills = xAxis.get(\"renderer\").axisFills.values;\r\n\t\t\treturn (fills.length > 0) && fills[0].get(\"visible\", false);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprotected _getYScale(): \"percent\" | \"regular\" | \"logarithmic\" {\r\n\t\tconst stockChart = this.get(\"stockChart\");\r\n\t\tconst stockSeries = stockChart.get(\"stockSeries\");\r\n\t\tif (stockSeries) {\r\n\t\t\tconst yAxis = stockSeries.get(\"yAxis\");\r\n\t\t\tif (yAxis instanceof ValueAxis) {\r\n\t\t\t\tif (stockSeries.get(\"valueYShow\") == \"valueYChangeSelectionPercent\") {\r\n\t\t\t\t\treturn \"percent\";\r\n\t\t\t\t}\r\n\t\t\t\tif (yAxis.get(\"logarithmic\")) {\r\n\t\t\t\t\treturn \"logarithmic\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn \"regular\";\r\n\t}\r\n\r\n\tprotected _setLogarithmic(value: boolean): void {\r\n\t\tconst stockChart = this.get(\"stockChart\");\r\n\t\tconst stockSeries = stockChart.get(\"stockSeries\");\r\n\t\tif (stockSeries) {\r\n\t\t\tconst yAxis = stockSeries.get(\"yAxis\");\r\n\t\t\tif (yAxis instanceof ValueAxis) {\r\n\r\n\t\t\t\t$array.each(yAxis.series, (series) => {\r\n\t\t\t\t\tseries.resetExtremes();\r\n\t\t\t\t})\r\n\r\n\t\t\t\tyAxis.set(\"logarithmic\", value);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _setFills(enabled: boolean): void {\r\n\t\tconst stockChart = this.get(\"stockChart\");\r\n\t\tstockChart.panels.each((panel) => {\r\n\t\t\tpanel.xAxes.each((xAxis) => {\r\n\t\t\t\txAxis.get(\"renderer\").axisFills.template.set(\"visible\", enabled);\r\n\t\t\t\txAxis.get(\"renderer\").grid.template.set(\"forceHidden\", enabled);\r\n\t\t\t})\r\n\t\t});\r\n\t}\r\n\r\n}"]}