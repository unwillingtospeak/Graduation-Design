import { __extends } from "tslib";
import { StockControl } from "./StockControl";
import { DropdownList } from "./DropdownList";
import { StockIcons } from "./StockIcons";
import * as $array from "../../../core/util/Array";
/**
 * Control which allows selecting drawing tool.
 *
 * Should not be instantiated directly. Use [[DrawingControl]] instead.
 */
var DrawingToolControl = /** @class */ (function (_super) {
    __extends(DrawingToolControl, _super);
    function DrawingToolControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(DrawingToolControl.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            // Do parent stuff
            _super.prototype._afterNew.call(this);
            // Create list of tools
            var list = DropdownList.new(this._root, {
                control: this,
                parent: this.getPrivate("button")
            });
            this.setPrivate("list", list);
            list.events.on("closed", function (_ev) {
                _this.set("active", false);
            });
            list.events.on("invoked", function (ev) {
                _this.setTool(ev.item.label);
                _this.events.dispatch("selected", {
                    type: "selected",
                    tool: ev.item.id,
                    target: _this
                });
            });
            this.on("active", function (active) {
                if (active) {
                    _this.setTimeout(function () { return list.show(); }, 10);
                }
                else {
                    list.hide();
                }
            });
            var button = this.getPrivate("button");
            button.className = button.className + " am5stock-control-dropdown";
            this._initTools();
        }
    });
    Object.defineProperty(DrawingToolControl.prototype, "setTool", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (tool) {
            this.getPrivate("icon").innerHTML = "";
            this.getPrivate("icon").appendChild(this._getToolIcon(tool));
            //this.getPrivate("label")!.innerHTML = tool;
            this._setLabel(tool);
        }
    });
    Object.defineProperty(DrawingToolControl.prototype, "_initTools", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            var list = this.getPrivate("list");
            var tools = this.get("tools");
            var items = [];
            $array.each(tools, function (tool) {
                items.push({
                    id: tool,
                    label: _this._root.language.translateAny(tool),
                    icon: _this._getToolIcon(tool)
                });
            });
            list.set("items", items);
        }
    });
    Object.defineProperty(DrawingToolControl.prototype, "_getToolIcon", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (tool) {
            return StockIcons.getIcon(tool);
        }
    });
    Object.defineProperty(DrawingToolControl.prototype, "_afterChanged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._afterChanged.call(this);
            if (this.isDirty("tools")) {
                this._initTools();
            }
            // if (this.isDirty("name")) {
            // 	this.getPrivate("label")!.innerHTML = this.get("name", "");
            // }
            // todo icon
        }
    });
    Object.defineProperty(DrawingToolControl.prototype, "_dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._dispose.call(this);
            // $array.each(this._itemDisposers, (x) => {
            // 	x.dispose();
            // });
        }
    });
    Object.defineProperty(DrawingToolControl, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "DrawingToolControl"
    });
    Object.defineProperty(DrawingToolControl, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: StockControl.classNames.concat([DrawingToolControl.className])
    });
    return DrawingToolControl;
}(StockControl));
export { DrawingToolControl };
//# sourceMappingURL=DrawingToolControl.js.map