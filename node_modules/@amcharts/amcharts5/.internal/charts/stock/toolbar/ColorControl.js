import { __extends } from "tslib";
import { StockControl } from "./StockControl";
import { DropdownColors } from "./DropdownColors";
import { StockIcons } from "./StockIcons";
import * as $utils from "../../../core/util/Utils";
import StockToolbarCSS from "./StockToolbarCSS";
/**
 * Color picker control.
 */
var ColorControl = /** @class */ (function (_super) {
    __extends(ColorControl, _super);
    function ColorControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ColorControl.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            // Do parent stuff
            _super.prototype._afterNew.call(this);
            // Create list of tools
            var dropdownSettings = {
                control: this,
                parent: this.getPrivate("button"),
                useOpacity: this.get("useOpacity")
            };
            if (this.get("colors")) {
                dropdownSettings.colors = this.get("colors");
            }
            var dropdown = DropdownColors.new(this._root, dropdownSettings);
            this.setPrivate("dropdown", dropdown);
            dropdown.events.on("closed", function (_ev) {
                _this.set("active", false);
            });
            dropdown.events.on("invoked", function (ev) {
                _this.setPrivate("color", ev.color);
                _this.events.dispatch("selected", {
                    type: "selected",
                    color: ev.color,
                    target: _this
                });
            });
            dropdown.events.on("invokedOpacity", function (ev) {
                _this.setPrivate("opacity", ev.opacity);
                _this.events.dispatch("selectedOpacity", {
                    type: "selectedOpacity",
                    opacity: ev.opacity,
                    target: _this
                });
            });
            this.on("active", function (active) {
                if (active) {
                    dropdown.setPrivate("color", _this.getPrivate("color"));
                    dropdown.setPrivate("opacity", _this.getPrivate("opacity"));
                    _this.setTimeout(function () { return dropdown.show(); }, 10);
                }
                else {
                    dropdown.hide();
                }
            });
            this.onPrivate("color", function () {
                var color = _this.getPrivate("color");
                _this.getPrivate("icon").style.backgroundColor = color ? color.toCSS(_this.getPrivate("opacity", 1)) : "";
            });
            this.onPrivate("opacity", function () {
                var color = _this.getPrivate("color");
                _this.getPrivate("icon").style.backgroundColor = color ? color.toCSS(_this.getPrivate("opacity", 1)) : "";
            });
            // Add checkered background for showing opacity
            var bg = document.createElement("div");
            bg.className = "am5stock-control-icon-color-bg";
            this.getPrivate("icon").appendChild(bg);
            this.loadDefaultCSS();
        }
    });
    Object.defineProperty(ColorControl.prototype, "_getDefaultIcon", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var icon = StockIcons.getIcon("Color");
            $utils.addClass(icon, "am5stock-control-icon-color");
            return icon;
        }
    });
    /**
     * Loads the default CSS.
     *
     * @ignore Exclude from docs
     */
    Object.defineProperty(ColorControl.prototype, "loadDefaultCSS", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var disposer = StockToolbarCSS($utils.getShadowRoot(this._root.dom), this._root);
            this._disposers.push(disposer);
        }
    });
    Object.defineProperty(ColorControl, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "ColorControl"
    });
    Object.defineProperty(ColorControl, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: StockControl.classNames.concat([ColorControl.className])
    });
    return ColorControl;
}(StockControl));
export { ColorControl };
//# sourceMappingURL=ColorControl.js.map