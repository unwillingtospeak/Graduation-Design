import { __extends } from "tslib";
import { StockControl } from "./StockControl";
import { DropdownList } from "./DropdownList";
import * as $array from "../../../core/util/Array";
import * as $type from "../../../core/util/Type";
/**
 * A generic control which creates a searchable list of items in a dropdown.
 *
 * Can be used in a [[StockToolbar]].
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/stock/toolbar/dropdown-list-control/} for more info
 */
var DropdownListControl = /** @class */ (function (_super) {
    __extends(DropdownListControl, _super);
    function DropdownListControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(DropdownListControl.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            // @todo still needed?
            _super.prototype._afterNew.call(this);
            var button = this.getPrivate("button");
            button.className = button.className + " am5stock-control-dropdown";
        }
    });
    Object.defineProperty(DropdownListControl.prototype, "_initElements", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype._initElements.call(this);
            // Disable icon
            //this.getPrivate("icon")!.style.display = "none";
            // Create list
            var dropdownSettings = {
                control: this,
                parent: this.getPrivate("button"),
                searchable: this.get("searchable", false),
                items: []
            };
            var maxSearchItems = this.get("maxSearchItems");
            if (maxSearchItems) {
                dropdownSettings.maxSearchItems = maxSearchItems;
            }
            var searchCallback = this.get("searchCallback");
            if (searchCallback) {
                dropdownSettings.searchCallback = searchCallback;
            }
            var items = this.get("items");
            var currentItem = this.get("currentItem");
            if (items) {
                $array.each(items, function (item) {
                    var itemObject = $type.isString(item) ? {
                        id: item,
                        label: item
                    } : item;
                    dropdownSettings.items.push(itemObject);
                    if ($type.isString(currentItem) && currentItem == itemObject.id) {
                        currentItem = itemObject;
                    }
                });
            }
            var dropdown = DropdownList.new(this._root, dropdownSettings);
            this.setPrivate("dropdown", dropdown);
            if (currentItem) {
                this.setItem(currentItem);
            }
            dropdown.events.on("closed", function (_ev) {
                _this.set("active", false);
            });
            dropdown.events.on("invoked", function (ev) {
                _this.setItem(ev.item);
                _this.events.dispatch("selected", {
                    type: "selected",
                    item: ev.item,
                    target: _this
                });
            });
            this.on("active", function (active) {
                if (active) {
                    //dropdown.setPrivate("currentId", $type.numberToString(this.get("strokeWidth")));
                    _this.setTimeout(function () { return dropdown.show(); }, 10);
                }
                else {
                    dropdown.hide();
                }
            });
        }
    });
    Object.defineProperty(DropdownListControl.prototype, "setItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (item) {
            if (this.get("fixedLabel") !== true) {
                var label = this.getPrivate("label");
                if ($type.isString(item)) {
                    label.innerHTML = item;
                }
                else {
                    if (item.icon) {
                        var icon = this.getPrivate("icon");
                        icon.innerHTML = "";
                        icon.appendChild(item.icon.cloneNode(true));
                        icon.style.display = "";
                    }
                    else {
                        //icon.style.display = "none";
                    }
                    if (item.label) {
                        label.innerHTML = item.label;
                        label.style.display = "";
                    }
                    else {
                        label.innerHTML = "";
                        label.style.display = "none";
                    }
                }
            }
        }
    });
    Object.defineProperty(DropdownListControl.prototype, "_beforeChanged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._beforeChanged.call(this);
            if (this.isDirty("items")) {
                var dropdown = this.getPrivate("dropdown");
                if (dropdown) {
                    var items = this.get("items");
                    var dropdownItems_1 = [];
                    var currentItem_1 = this.get("currentItem");
                    if (items) {
                        $array.each(items, function (item) {
                            var itemObject = $type.isString(item) ? {
                                id: item,
                                label: item
                            } : item;
                            dropdownItems_1.push(itemObject);
                            if ($type.isString(currentItem_1) && currentItem_1 == itemObject.id) {
                                currentItem_1 = itemObject;
                            }
                        });
                    }
                    dropdown.set("items", dropdownItems_1);
                }
            }
        }
    });
    Object.defineProperty(DropdownListControl.prototype, "_dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._dispose.call(this);
        }
    });
    Object.defineProperty(DropdownListControl, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "DropdownListControl"
    });
    Object.defineProperty(DropdownListControl, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: StockControl.classNames.concat([DropdownListControl.className])
    });
    return DropdownListControl;
}(StockControl));
export { DropdownListControl };
//# sourceMappingURL=DropdownListControl.js.map