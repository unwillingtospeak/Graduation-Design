import { __extends } from "tslib";
import { Entity } from "../../../core/util/Entity";
import { StockIcons } from "./StockIcons";
//import * as $array from "../../core/util/Array";
import * as $utils from "../../../core/util/Utils";
/**
 * @todo revview
 */
var StockControl = /** @class */ (function (_super) {
    __extends(StockControl, _super);
    function StockControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    // private _itemDisposers: Array<IDisposer> = [];
    Object.defineProperty(StockControl.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._afterNew.call(this);
            // Inherit default themes from chart
            this._defaultThemes = this.get("stockChart")._defaultThemes;
            _super.prototype._afterNewApplyThemes.call(this);
            this._initElements();
            this._applyClassNames();
            this._root.addDisposer(this);
        }
    });
    Object.defineProperty(StockControl.prototype, "_initElements", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            // Create button
            var button = document.createElement("div");
            button.setAttribute("title", this.get("description", this.get("name", "")));
            this.setPrivate("button", button);
            // Create icon
            var icon = document.createElement("div");
            icon.appendChild(this._getIcon());
            if (this.get("icon") == "none") {
                icon.style.display = "none";
            }
            button.appendChild(icon);
            this.setPrivate("icon", icon);
            // Create label
            var name = this.get("name", "");
            var label = document.createElement("div");
            label.innerHTML = name;
            if (name == "") {
                label.style.display = "none";
            }
            button.appendChild(label);
            this.setPrivate("label", label);
            // Add click event
            this._disposers.push($utils.addEventListener(button, "click", function (ev) {
                //ev.stopImmediatePropagation();
                if (_this.get("togglable") != false) {
                    _this._handleClick();
                }
                if (_this.events.isEnabled("click")) {
                    _this.events.dispatch("click", {
                        type: "click",
                        target: _this,
                        originalEvent: ev
                    });
                }
            }));
        }
    });
    Object.defineProperty(StockControl.prototype, "_applyClassNames", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this.getPrivate("button").className = "am5stock am5stock-control am5stock-control-button";
            this.getPrivate("label").className = "am5stock-control-label";
            this.getPrivate("icon").className = "am5stock-control-icon";
        }
    });
    Object.defineProperty(StockControl.prototype, "_getIcon", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var userIcon = this.get("icon");
            if (userIcon && userIcon != "none") {
                return userIcon;
            }
            return this._getDefaultIcon();
        }
    });
    Object.defineProperty(StockControl.prototype, "_getDefaultIcon", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return StockIcons.getIcon("Default");
        }
    });
    Object.defineProperty(StockControl.prototype, "_beforeChanged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._beforeChanged.call(this);
            if (this.isDirty("visible") && !this.get("visible")) {
                this.getPrivate("button").style.display = "none";
            }
            if (this.isDirty("name")) {
                this._setLabel(this.get("name", ""));
            }
            if (this.isDirty("active")) {
                var button = this.getPrivate("button");
                if (this.get("active")) {
                    $utils.addClass(button, "am5stock-control-button-active");
                }
                else {
                    $utils.removeClass(button, "am5stock-control-button-active");
                }
            }
            if (this.isDirty("align")) {
                if (this.get("align") == "right") {
                    $utils.addClass(this.getPrivate("button"), "am5stock-align-right");
                }
                else {
                    $utils.removeClass(this.getPrivate("button"), "am5stock-align-right");
                }
            }
            // todo icon
        }
    });
    Object.defineProperty(StockControl.prototype, "_dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._dispose.call(this);
            // $array.each(this._itemDisposers, (x) => {
            // 	x.dispose();
            // });
        }
    });
    Object.defineProperty(StockControl.prototype, "_setLabel", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (name) {
            var label = this.getPrivate("label");
            label.innerHTML = name;
            if (name == "") {
                label.style.display = "none";
            }
            else {
                label.style.display = "";
            }
        }
    });
    Object.defineProperty(StockControl.prototype, "hide", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this.getPrivate("button").style.display = "none";
        }
    });
    Object.defineProperty(StockControl.prototype, "show", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this.getPrivate("button").style.display = "";
        }
    });
    Object.defineProperty(StockControl.prototype, "_handleClick", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this.set("active", !this.get("active"));
        }
    });
    Object.defineProperty(StockControl, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "StockControl"
    });
    Object.defineProperty(StockControl, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: Entity.classNames.concat([StockControl.className])
    });
    return StockControl;
}(Entity));
export { StockControl };
//# sourceMappingURL=StockControl.js.map