import { __extends } from "tslib";
// import type { DateAxis } from "../../xy/axes/DateAxis";
// import type { AxisRenderer } from "../../xy/axes/AxisRenderer";
import { StockControl } from "./StockControl";
import * as $utils from "../../../core/util/Utils";
import * as $time from "../../../core/util/Time";
import * as $array from "../../../core/util/Array";
/**
 * A pre-defined period selector control for [[StockToolback]].
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/stock/toolbar/period-selector/} for more info
 */
var PeriodSelector = /** @class */ (function (_super) {
    __extends(PeriodSelector, _super);
    function PeriodSelector() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(PeriodSelector.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._afterNew.call(this);
            var button = this.getPrivate("button");
            button.className = button.className + " am5stock-no-hover";
            this._initPeriodButtons();
        }
    });
    Object.defineProperty(PeriodSelector.prototype, "_initPeriodButtons", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            var container = this.getPrivate("label");
            container.style.display = "";
            var periods = this.get("periods", []);
            $array.each(periods, function (period) {
                var button = document.createElement("a");
                button.innerHTML = period.name || (period.timeUnit.toUpperCase() + period.count || "1");
                button.className = "am5stock-link";
                container.appendChild(button);
                _this._disposers.push($utils.addEventListener(button, "click", function (_ev) {
                    _this.selectPeriod(period);
                }));
            });
        }
    });
    // protected _getDefaultIcon(): SVGElement {
    // 	return StockIcons.getIcon("Period");
    // }
    Object.defineProperty(PeriodSelector.prototype, "_afterChanged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._afterChanged.call(this);
            // if (this.isDirty("active")) {
            // 	this._initDropdown();
            // }
        }
    });
    Object.defineProperty(PeriodSelector.prototype, "_getChart", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.get("stockChart").panels.getIndex(0);
        }
    });
    Object.defineProperty(PeriodSelector.prototype, "_getAxis", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this._getChart().xAxes.getIndex(0);
        }
    });
    Object.defineProperty(PeriodSelector.prototype, "selectPeriod", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (period) {
            if (period.timeUnit == "max") {
                this._getChart().zoomOut();
            }
            else {
                var axis_1 = this._getAxis();
                var end_1 = new Date(axis_1.getPrivate("max"));
                var start_1;
                if (period.timeUnit == "ytd") {
                    start_1 = new Date(end_1.getFullYear(), 0, 1, 0, 0, 0, 0);
                    end_1 = new Date(axis_1.getIntervalMax(axis_1.get("baseInterval")));
                    if (axis_1.get("groupData")) {
                        axis_1.zoomToDates(start_1, end_1, 0);
                        setTimeout(function () {
                            axis_1.zoomToDates(start_1, end_1, 0);
                        }, 10);
                        return;
                    }
                }
                else {
                    // some adjustments in case data is grouped
                    if (axis_1.get("groupData")) {
                        // find interval which will be used after zoom
                        var interval = axis_1.getGroupInterval($time.getDuration(period.timeUnit, period.count));
                        if (interval) {
                            // find max of the base interval
                            var endTime = axis_1.getIntervalMax(axis_1.get("baseInterval"));
                            if (endTime != null) {
                                // round to the future interval
                                end_1 = $time.round(new Date(endTime), interval.timeUnit, interval.count);
                            }
                            start_1 = $time.add(new Date(end_1), period.timeUnit, (period.count || 1) * -1);
                            axis_1.zoomToDates(start_1, end_1, 0);
                            setTimeout(function () {
                                axis_1.zoomToDates(start_1, end_1, 0);
                            }, 10);
                            return;
                        }
                    }
                    start_1 = $time.add(new Date(end_1), period.timeUnit, (period.count || 1) * -1);
                }
                axis_1.zoomToDates(start_1, end_1);
            }
        }
    });
    Object.defineProperty(PeriodSelector, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "PeriodSelector"
    });
    Object.defineProperty(PeriodSelector, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: StockControl.classNames.concat([PeriodSelector.className])
    });
    return PeriodSelector;
}(StockControl));
export { PeriodSelector };
//# sourceMappingURL=PeriodSelector.js.map