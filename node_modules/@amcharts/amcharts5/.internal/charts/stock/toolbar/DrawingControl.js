import { __extends } from "tslib";
import { color } from "../../../core/util/Color";
import { StockControl } from "./StockControl";
import { DrawingToolControl } from "./DrawingToolControl";
import { ColorControl } from "./ColorControl";
import { DropdownListControl } from "./DropdownListControl";
import { IconControl } from "./IconControl";
import { StockIcons } from "./StockIcons";
import { AverageSeries } from "../drawing/AverageSeries";
import { CalloutSeries } from "../drawing/CalloutSeries";
import { EllipseSeries } from "../drawing/EllipseSeries";
import { DoodleSeries } from "../drawing/DoodleSeries";
import { FibonacciSeries } from "../drawing/FibonacciSeries";
import { FibonacciTimezoneSeries } from "../drawing/FibonacciTimezoneSeries";
import { HorizontalLineSeries } from "../drawing/HorizontalLineSeries";
import { HorizontalRaySeries } from "../drawing/HorizontalRaySeries";
import { IconSeries } from "../drawing/IconSeries";
import { LabelSeries } from "../drawing/LabelSeries";
import { SimpleLineSeries } from "../drawing/SimpleLineSeries";
import { PolylineSeries } from "../drawing/PolylineSeries";
import { QuadrantLineSeries } from "../drawing/QuadrantLineSeries";
import { RectangleSeries } from "../drawing/RectangleSeries";
import { RegressionSeries } from "../drawing/RegressionSeries";
import { TrendLineSeries } from "../drawing/TrendLineSeries";
import { VerticalLineSeries } from "../drawing/VerticalLineSeries";
import * as $array from "../../../core/util/Array";
import * as $object from "../../../core/util/Object";
import * as $type from "../../../core/util/Type";
import * as $utils from "../../../core/util/Utils";
/**
 * A drawing tools control for [[StockChart]].
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/stock/toolbar/drawing-control/} for more info
 */
var DrawingControl = /** @class */ (function (_super) {
    __extends(DrawingControl, _super);
    function DrawingControl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_drawingSeries", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(_this, "_currentEnabledSeries", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        return _this;
    }
    Object.defineProperty(DrawingControl.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._afterNew.call(this);
            // Init drawing toolbar
            if (this.getPrivate("toolbar")) {
                this._initToolbar();
            }
        }
    });
    Object.defineProperty(DrawingControl.prototype, "_initElements", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._initElements.call(this);
        }
    });
    Object.defineProperty(DrawingControl.prototype, "_initToolbar", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            var stockChart = this.get("stockChart");
            var l = this._root.language;
            // Add additional container for drawing toolbar
            var toolbar = this.getPrivate("toolbar");
            var toolsContainer = document.createElement("div");
            toolsContainer.className = "am5stock-control-drawing-tools";
            toolsContainer.style.display = "none";
            this.setPrivate("toolsContainer", toolsContainer);
            toolbar.get("container").appendChild(toolsContainer);
            /**
             * Drawing tool selection control
             */
            var toolControl = DrawingToolControl.new(this._root, {
                stockChart: stockChart,
                description: l.translateAny("Drawing tool"),
                tools: this.get("tools")
            });
            toolsContainer.appendChild(toolControl.getPrivate("button"));
            this.setPrivate("toolControl", toolControl);
            toolControl.events.on("selected", function (ev) {
                _this.set("tool", ev.tool);
            });
            /**
             * Icon selection control
             */
            var drawingIcons = this.get("drawingIcons");
            var iconControl = IconControl.new(this._root, {
                stockChart: stockChart,
                description: l.translateAny("Arrows &amp; Icons"),
                icons: drawingIcons
            });
            iconControl.setIcon(this.get("drawingIcon", drawingIcons[0]));
            toolsContainer.appendChild(iconControl.getPrivate("button"));
            this.setPrivate("iconControl", iconControl);
            iconControl.events.on("selected", function (ev) {
                _this.set("drawingIcon", ev.icon);
            });
            /**
             * Snap toggle control
             */
            var snapControl = StockControl.new(this._root, {
                stockChart: stockChart,
                description: l.translateAny("Snap icon to data"),
                icon: StockIcons.getIcon("Snap")
            });
            snapControl.hide();
            toolsContainer.appendChild(snapControl.getPrivate("button"));
            this.setPrivate("snapControl", snapControl);
            if (this.get("snapToData")) {
                snapControl.set("active", true);
            }
            snapControl.on("active", function (_ev) {
                _this.set("snapToData", snapControl.get("active") == true);
            });
            /**
             * Stroke color control
             */
            var strokeControl = ColorControl.new(this._root, {
                stockChart: stockChart,
                colors: this.get("colors"),
                description: l.translateAny("Line color")
            });
            strokeControl.hide();
            strokeControl.setPrivate("color", this.get("strokeColor", color(0x000000)));
            strokeControl.setPrivate("opacity", this.get("strokeOpacity", 1));
            toolsContainer.appendChild(strokeControl.getPrivate("button"));
            this.setPrivate("strokeControl", strokeControl);
            strokeControl.events.on("selected", function (ev) {
                _this.set("strokeColor", ev.color);
            });
            strokeControl.events.on("selectedOpacity", function (ev) {
                _this.set("strokeOpacity", ev.opacity);
            });
            /**
             * Stroke width control
             */
            var strokeWidths = [];
            $array.each(this.get("strokeWidths", []), function (width) {
                strokeWidths.push(width + "px");
            });
            var strokeWidthControl = DropdownListControl.new(this._root, {
                stockChart: stockChart,
                description: l.translateAny("Line thickness"),
                currentItem: this.get("strokeWidth", "12") + "px",
                items: strokeWidths
            });
            strokeWidthControl.hide();
            //strokeWidthControl.setItem(this.get("strokeWidth", "12") + "px");
            strokeWidthControl.getPrivate("icon").style.display = "none";
            toolsContainer.appendChild(strokeWidthControl.getPrivate("button"));
            this.setPrivate("strokeWidthControl", strokeWidthControl);
            strokeWidthControl.events.on("selected", function (ev) {
                _this.set("strokeWidth", $type.toNumber($type.isString(ev.item) ? ev.item : ev.item.id));
            });
            /**
             * Stroke dash cofiguration control
             */
            var strokeDasharrays = [];
            var currentStrokeDasharray;
            var strokeDasharray = this.get("strokeDasharray", []);
            $array.each(this.get("strokeDasharrays", []), function (dasharray) {
                var icon = StockIcons.getIcon("Dash");
                var id = JSON.stringify(dasharray);
                icon.setAttribute("stroke", "#000");
                icon.setAttribute("stroke-dasharray", dasharray.join(","));
                icon.setAttribute("class", "am5stock-icon-wide");
                strokeDasharrays.push({
                    id: id,
                    label: "",
                    icon: icon
                });
                if (id == JSON.stringify(strokeDasharray)) {
                    currentStrokeDasharray = StockIcons.getIcon("Dash");
                    currentStrokeDasharray.setAttribute("stroke", "#000");
                    currentStrokeDasharray.setAttribute("stroke-dasharray", dasharray.join(","));
                    currentStrokeDasharray.setAttribute("class", "am5stock-icon-wide");
                }
            });
            var strokeDasharrayControl = DropdownListControl.new(this._root, {
                stockChart: stockChart,
                description: l.translateAny("Line style"),
                items: strokeDasharrays
            });
            strokeDasharrayControl.hide();
            if (currentStrokeDasharray) {
                strokeDasharrayControl.setItem({
                    id: "",
                    icon: currentStrokeDasharray,
                    label: ""
                });
            }
            strokeDasharrayControl.getPrivate("icon").setAttribute("class", "am5stock-control-icon am5stock-icon-wide");
            toolsContainer.appendChild(strokeDasharrayControl.getPrivate("button"));
            this.setPrivate("strokeDasharrayControl", strokeDasharrayControl);
            strokeDasharrayControl.events.on("selected", function (ev) {
                _this.set("strokeDasharray", JSON.parse(ev.item.id));
            });
            /**
             * Fill color control
             */
            var fillControl = ColorControl.new(this._root, {
                stockChart: stockChart,
                colors: this.get("colors"),
                name: l.translateAny("Fill"),
                description: l.translateAny("Fill color"),
            });
            fillControl.hide();
            fillControl.setPrivate("color", this.get("fillColor", color(0x000000)));
            fillControl.setPrivate("opacity", this.get("fillOpacity", 1));
            toolsContainer.appendChild(fillControl.getPrivate("button"));
            this.setPrivate("fillControl", fillControl);
            fillControl.events.on("selected", function (ev) {
                _this.set("fillColor", ev.color);
            });
            fillControl.events.on("selectedOpacity", function (ev) {
                _this.set("fillOpacity", ev.opacity);
            });
            /**
             * Label color control
             */
            var labelFillControl = ColorControl.new(this._root, {
                stockChart: stockChart,
                colors: this.get("colors"),
                name: l.translateAny("Text"),
                description: l.translateAny("Text color"),
                useOpacity: false
            });
            labelFillControl.hide();
            labelFillControl.setPrivate("color", this.get("labelFill", color(0x000000)));
            toolsContainer.appendChild(labelFillControl.getPrivate("button"));
            this.setPrivate("labelFillControl", labelFillControl);
            labelFillControl.events.on("selected", function (ev) {
                _this.set("labelFill", ev.color);
            });
            /**
             * Font size control
             */
            var fontSizes = [];
            $array.each(this.get("labelFontSizes", []), function (size) {
                fontSizes.push(size + "");
            });
            var fontSizeControl = DropdownListControl.new(this._root, {
                stockChart: stockChart,
                description: l.translateAny("Label font size"),
                currentItem: this.get("labelFontSize", "12px") + "",
                items: fontSizes,
            });
            fontSizeControl.hide();
            //fontSizeControl.setItem(this.get("labelFontSize", "12px") + "");
            toolsContainer.appendChild(fontSizeControl.getPrivate("button"));
            this.setPrivate("labelFontSizeControl", fontSizeControl);
            fontSizeControl.events.on("selected", function (ev) {
                _this.set("labelFontSize", $type.isString(ev.item) ? ev.item : ev.item.id);
            });
            /**
             * Bold control
             */
            var boldControl = StockControl.new(this._root, {
                stockChart: stockChart,
                description: l.translateAny("Bold"),
                icon: StockIcons.getIcon("Bold")
            });
            boldControl.hide();
            toolsContainer.appendChild(boldControl.getPrivate("button"));
            this.setPrivate("boldControl", boldControl);
            boldControl.on("active", function (_ev) {
                _this.set("labelFontWeight", boldControl.get("active") ? "bold" : "normal");
            });
            /**
             * Italic control
             */
            var italicControl = StockControl.new(this._root, {
                stockChart: stockChart,
                description: l.translateAny("Italic"),
                icon: StockIcons.getIcon("Italic")
            });
            italicControl.hide();
            toolsContainer.appendChild(italicControl.getPrivate("button"));
            this.setPrivate("italicControl", italicControl);
            italicControl.on("active", function (_ev) {
                _this.set("labelFontStyle", italicControl.get("active") ? "italic" : "normal");
            });
            /**
             * Font family control
             */
            var fontFamilies = [];
            $array.each(this.get("labelFontFamilies", []), function (size) {
                fontFamilies.push(size + "");
            });
            var fontFamilyControl = DropdownListControl.new(this._root, {
                stockChart: stockChart,
                description: l.translateAny("Label font family"),
                currentItem: this.get("labelFontFamily", "Arial"),
                items: fontFamilies,
            });
            fontFamilyControl.hide();
            toolsContainer.appendChild(fontFamilyControl.getPrivate("button"));
            this.setPrivate("labelFontFamilyControl", fontFamilyControl);
            fontFamilyControl.events.on("selected", function (ev) {
                _this.set("labelFontFamily", $type.isString(ev.item) ? ev.item : ev.item.id);
            });
            /**
             * Line extension control
             */
            var extensionControl = StockControl.new(this._root, {
                stockChart: stockChart,
                description: l.translateAny("Show line extension"),
                icon: StockIcons.getIcon("Show Extension")
            });
            extensionControl.hide();
            toolsContainer.appendChild(extensionControl.getPrivate("button"));
            this.setPrivate("extensionControl", extensionControl);
            if (this.get("showExtension")) {
                extensionControl.set("active", true);
            }
            extensionControl.on("active", function (_ev) {
                _this.set("showExtension", extensionControl.get("active") == true);
            });
            /**
             * Eraser control
             */
            var eraserControl = StockControl.new(this._root, {
                stockChart: stockChart,
                description: l.translateAny("Eraser"),
                icon: StockIcons.getIcon("Eraser")
            });
            toolsContainer.appendChild(eraserControl.getPrivate("button"));
            this.setPrivate("eraserControl", eraserControl);
            eraserControl.on("active", function (_ev) {
                var active = eraserControl.get("active");
                $object.each(_this._drawingSeries, function (_tool, seriesList) {
                    $array.each(seriesList, function (series) {
                        if (active) {
                            series.enableErasing();
                        }
                        else {
                            series.disableErasing();
                        }
                    });
                });
            });
            /**
             * Clear all drawings control
             */
            var clearControl = StockControl.new(this._root, {
                stockChart: stockChart,
                name: l.translateAny("Clear"),
                description: l.translateAny("Clear all drawings"),
                icon: StockIcons.getIcon("Clear"),
                togglable: false
            });
            toolsContainer.appendChild(clearControl.getPrivate("button"));
            this.setPrivate("clearControl", clearControl);
            this._disposers.push($utils.addEventListener(clearControl.getPrivate("button"), "click", function (_ev) {
                $object.each(_this._drawingSeries, function (_tool, seriesList) {
                    $array.each(seriesList, function (series) {
                        series.clearDrawings();
                    });
                });
            }));
            // Preset active tool
            if (this.get("active")) {
                this._setTool(this.get("tool"));
            }
        }
    });
    Object.defineProperty(DrawingControl.prototype, "_beforeChanged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._beforeChanged.call(this);
            if (this.isDirty("tools")) {
                var toolControl = this.getPrivate("toolControl");
                if (toolControl) {
                    toolControl.set("tools", this.get("tools"));
                }
            }
            if (this.isPrivateDirty("toolbar")) {
                if (this.getPrivate("toolbar")) {
                    this._initToolbar();
                }
            }
            if (this.isDirty("active")) {
                if (this.get("active")) {
                    this.getPrivate("toolsContainer").style.display = "block";
                    this._setTool(this.get("tool"));
                }
                else {
                    this.getPrivate("toolsContainer").style.display = "none";
                    this._setTool();
                }
            }
            if (this.isDirty("tool") && this.get("active")) {
                this._setTool(this.get("tool"));
            }
            if (this.isDirty("strokeColor") || this.isDirty("strokeWidth") || this.isDirty("strokeOpacity") || this.isDirty("strokeDasharray")) {
                this._setStroke();
            }
            if (this.isDirty("fillColor") || this.isDirty("fillOpacity")) {
                this._setFill();
            }
            if (this.isDirty("labelFill") || this.isDirty("labelFontSize") || this.isDirty("labelFontFamily") || this.isDirty("labelFontWeight") || this.isDirty("labelFontStyle")) {
                this._setLabel();
            }
            if (this.isDirty("showExtension")) {
                this._setExtension();
            }
            if (this.isDirty("drawingIcon")) {
                this._setDrawingIcon();
            }
            if (this.isDirty("snapToData")) {
                this._setSnap();
            }
        }
    });
    Object.defineProperty(DrawingControl.prototype, "_setTool", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (tool) {
            var _this = this;
            // Disable current drawing series
            $array.each(this._currentEnabledSeries, function (series) {
                series.disableDrawing();
            });
            this._currentEnabledSeries = [];
            // Disable editing
            if (!tool) {
                this.getPrivate("eraserControl").set("active", false);
                return;
            }
            // Check if we need to create series
            var seriesList = this._drawingSeries[tool];
            if (!seriesList) {
                // Get target series
                var chartSeries_1 = this.get("series", []);
                var stockChart = this.get("stockChart");
                if (chartSeries_1.length == 0) {
                    // No target series set, take first series out of each chart
                    stockChart.panels.each(function (panel) {
                        if (panel.series.length > 0) {
                            chartSeries_1.push(panel.series.getIndex(0));
                        }
                    });
                }
                // Populate the list
                seriesList = [];
                $array.each(chartSeries_1, function (chartSeries) {
                    var series;
                    var xAxis = chartSeries.get("xAxis");
                    var yAxis = chartSeries.get("yAxis");
                    var panel = chartSeries.chart;
                    switch (tool) {
                        case "Average":
                            series = AverageSeries.new(_this._root, {
                                series: chartSeries,
                                xAxis: xAxis,
                                yAxis: yAxis,
                                field: "value"
                            });
                            break;
                        case "Callout":
                            series = CalloutSeries.new(_this._root, {
                                xAxis: xAxis,
                                yAxis: yAxis
                            });
                            break;
                        case "Doodle":
                            series = DoodleSeries.new(_this._root, {
                                xAxis: xAxis,
                                yAxis: yAxis
                            });
                            series.fills.template.setAll({
                                forceHidden: true
                            });
                            break;
                        case "Ellipse":
                            series = EllipseSeries.new(_this._root, {
                                xAxis: xAxis,
                                yAxis: yAxis
                            });
                            break;
                        case "Fibonacci":
                            series = FibonacciSeries.new(_this._root, {
                                xAxis: xAxis,
                                yAxis: yAxis
                            });
                            break;
                        case "Fibonacci Timezone":
                            series = FibonacciTimezoneSeries.new(_this._root, {
                                xAxis: xAxis,
                                yAxis: yAxis
                            });
                            break;
                        case "Horizontal Line":
                            series = HorizontalLineSeries.new(_this._root, {
                                xAxis: xAxis,
                                yAxis: yAxis
                            });
                            break;
                        case "Horizontal Ray":
                            series = HorizontalRaySeries.new(_this._root, {
                                series: chartSeries,
                                xAxis: xAxis,
                                yAxis: yAxis,
                                field: "value"
                            });
                            break;
                        case "Arrows &amp; Icons":
                            var icon = _this.get("drawingIcon", _this.get("drawingIcons")[0]);
                            series = IconSeries.new(_this._root, {
                                xAxis: xAxis,
                                yAxis: yAxis,
                                iconSvgPath: icon.svgPath,
                                iconScale: icon.scale,
                                iconCenterX: icon.centerX,
                                iconCenterY: icon.centerY,
                            });
                            break;
                        case "Label":
                            series = LabelSeries.new(_this._root, {
                                xAxis: xAxis,
                                yAxis: yAxis
                            });
                            break;
                        case "Line":
                            series = SimpleLineSeries.new(_this._root, {
                                xAxis: xAxis,
                                yAxis: yAxis
                            });
                            break;
                        case "Polyline":
                            series = PolylineSeries.new(_this._root, {
                                xAxis: xAxis,
                                yAxis: yAxis
                            });
                            series.fills.template.setAll({
                                forceHidden: true
                            });
                            break;
                        case "Quadrant Line":
                            series = QuadrantLineSeries.new(_this._root, {
                                series: chartSeries,
                                xAxis: xAxis,
                                yAxis: yAxis,
                                field: "value"
                            });
                            break;
                        case "Rectangle":
                            series = RectangleSeries.new(_this._root, {
                                xAxis: xAxis,
                                yAxis: yAxis
                            });
                            break;
                        case "Regression":
                            series = RegressionSeries.new(_this._root, {
                                series: chartSeries,
                                xAxis: xAxis,
                                yAxis: yAxis,
                                field: "value"
                            });
                            break;
                        case "Trend Line":
                            series = TrendLineSeries.new(_this._root, {
                                series: chartSeries,
                                xAxis: xAxis,
                                yAxis: yAxis,
                                field: "value"
                            });
                            break;
                        case "Vertical Line":
                            series = VerticalLineSeries.new(_this._root, {
                                xAxis: xAxis,
                                yAxis: yAxis
                            });
                            break;
                    }
                    if (series) {
                        seriesList.push(series);
                        panel.drawings.push(series);
                        series.setPrivate("baseValueSeries", chartSeries);
                        series.set("valueYShow", chartSeries.get("valueYShow"));
                        series.set("calculateAggregates", true);
                    }
                });
                this._drawingSeries[tool] = seriesList;
                this._setStroke();
                this._setFill();
            }
            $array.each(seriesList, function (series) {
                series.enableDrawing();
                _this._currentEnabledSeries.push(series);
            });
            this.getPrivate("toolControl").setTool(tool);
            // Show/hide needed drawing property controls
            var controls = {
                strokeControl: ["Average", "Callout", "Doodle", "Ellipse", "Fibonacci", "Horizontal Line", "Horizontal Ray", "Arrows &amp; Icons", "Line", "Polyline", "Quadrant Line", "Rectangle", "Regression", "Trend Line", "Vertical Line"],
                strokeWidthControl: ["Average", "Doodle", "Ellipse", "Horizontal Line", "Horizontal Ray", "Line", "Polyline", "Quadrant Line", "Rectangle", "Regression", "Trend Line", "Vertical Line"],
                strokeDasharrayControl: ["Average", "Doodle", "Ellipse", "Horizontal Line", "Horizontal Ray", "Line", "Polyline", "Quadrant Line", "Rectangle", "Regression", "Trend Line", "Vertical Line"],
                extensionControl: ["Average", "Line", "Regression", "Trend Line"],
                fillControl: ["Callout", "Ellipse", "Quadrant Line", "Rectangle", "Arrows &amp; Icons"],
                labelFillControl: ["Callout", "Label"],
                labelFontSizeControl: ["Callout", "Label"],
                labelFontFamilyControl: ["Callout", "Label"],
                boldControl: ["Callout", "Label"],
                italicControl: ["Callout", "Label"],
                iconControl: ["Arrows &amp; Icons"],
                snapControl: ["Callout", "Arrows &amp; Icons"],
            };
            $object.each(controls, function (control, tools) {
                var controlElement = _this.getPrivate(control);
                if (tools.indexOf(tool) == -1) {
                    controlElement.hide();
                }
                else {
                    controlElement.show();
                }
                //controlElement!.getPrivate("button").style.display = tools.indexOf(tool) == -1 ? "none" : "";
            });
        }
    });
    Object.defineProperty(DrawingControl.prototype, "_setStroke", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            $object.each(this._drawingSeries, function (_tool, seriesList) {
                $array.each(seriesList, function (series) {
                    series.setAll({
                        strokeColor: _this.get("strokeColor"),
                        strokeWidth: _this.get("strokeWidth"),
                        strokeOpacity: _this.get("strokeOpacity"),
                        strokeDasharray: _this.get("strokeDasharray"),
                    });
                });
            });
        }
    });
    Object.defineProperty(DrawingControl.prototype, "_setFill", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            $object.each(this._drawingSeries, function (_tool, seriesList) {
                $array.each(seriesList, function (series) {
                    series.setAll({
                        fillColor: _this.get("fillColor"),
                        fillOpacity: _this.get("fillOpacity")
                    });
                });
            });
        }
    });
    Object.defineProperty(DrawingControl.prototype, "_setLabel", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            var labelTools = ["Callout", "Label"];
            $object.each(this._drawingSeries, function (tool, seriesList) {
                if (labelTools.indexOf(tool) != -1) {
                    $array.each(seriesList, function (series) {
                        series.setAll({
                            labelFill: _this.get("labelFill"),
                            labelFontSize: _this.get("labelFontSize"),
                            labelFontFamily: _this.get("labelFontFamily"),
                            labelFontWeight: _this.get("labelFontWeight"),
                            labelFontStyle: _this.get("labelFontStyle")
                        });
                    });
                }
            });
        }
    });
    Object.defineProperty(DrawingControl.prototype, "_setExtension", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            $object.each(this._drawingSeries, function (_tool, seriesList) {
                $array.each(seriesList, function (series) {
                    if (series instanceof SimpleLineSeries) {
                        series.setAll({
                            showExtension: _this.get("showExtension")
                        });
                    }
                });
            });
        }
    });
    Object.defineProperty(DrawingControl.prototype, "_setDrawingIcon", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            var icon = this.get("drawingIcon", this.get("drawingIcons")[0]);
            var fillControl = this.getPrivate("fillControl");
            if (icon.fillDisabled) {
                fillControl.hide();
            }
            else {
                fillControl.show();
            }
            $object.each(this._drawingSeries, function (_tool, seriesList) {
                $array.each(seriesList, function (series) {
                    if (series instanceof IconSeries) {
                        series.setAll({
                            iconSvgPath: icon.svgPath,
                            iconScale: icon.scale,
                            iconCenterX: icon.centerX,
                            iconCenterY: icon.centerY,
                            fillOpacity: icon.fillDisabled ? 0 : _this.get("fillOpacity")
                        });
                    }
                });
            });
        }
    });
    Object.defineProperty(DrawingControl.prototype, "_setSnap", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var snap = this.get("snapToData", false);
            $object.each(this._drawingSeries, function (_tool, seriesList) {
                $array.each(seriesList, function (series) {
                    if (series instanceof IconSeries || series instanceof CalloutSeries) {
                        series.setAll({
                            snapToData: snap
                        });
                    }
                });
            });
        }
    });
    Object.defineProperty(DrawingControl.prototype, "_getDefaultIcon", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return StockIcons.getIcon("Draw");
        }
    });
    Object.defineProperty(DrawingControl.prototype, "_dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._dispose.call(this);
        }
    });
    Object.defineProperty(DrawingControl, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "DrawingControl"
    });
    Object.defineProperty(DrawingControl, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: StockControl.classNames.concat([DrawingControl.className])
    });
    return DrawingControl;
}(StockControl));
export { DrawingControl };
//# sourceMappingURL=DrawingControl.js.map