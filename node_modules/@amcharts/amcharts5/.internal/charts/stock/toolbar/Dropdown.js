import { __extends } from "tslib";
import { Entity } from "../../../core/util/Entity";
//import type { IDisposer } from "../../../core/util/Disposer";
import * as $utils from "../../../core/util/Utils";
/**
 * @todo revview
 */
var Dropdown = /** @class */ (function (_super) {
    __extends(Dropdown, _super);
    function Dropdown() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    // private _itemDisposers: Array<IDisposer> = [];
    Object.defineProperty(Dropdown.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype._afterNew.call(this);
            // Inherit default themes from chart
            this._defaultThemes = this.get("control")._defaultThemes;
            _super.prototype._afterNewApplyThemes.call(this);
            this._initElements();
            this._root.addDisposer(this);
            // Close on ESC
            if ($utils.supports("keyboardevents")) {
                this._disposers.push($utils.addEventListener(document, "keydown", function (ev) {
                    if (_this.isOpen() && ev.keyCode == 27) {
                        _this.hide();
                    }
                }));
            }
            this._disposers.push($utils.addEventListener(this.getPrivate("container"), "click", function (ev) {
                if (_this.isOpen()) {
                    ev.preventDefault();
                }
            }));
            this._disposers.push($utils.addEventListener(document, "click", function () {
                if (_this.isOpen()) {
                    _this.hide();
                }
            }));
        }
    });
    Object.defineProperty(Dropdown.prototype, "_initElements", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            // Create container
            var container = document.createElement("div");
            container.className = "am5stock-control-list-container";
            this._disposers.push($utils.addEventListener(container, "click", function (ev) {
                ev.stopPropagation();
            }));
            this.setPrivate("container", container);
            var arrow = document.createElement("div");
            arrow.className = "am5stock-control-list-arrow";
            container.appendChild(arrow);
            this.setPrivate("arrow", arrow);
            var parent = this.get("parent");
            if (parent) {
                parent.appendChild(container);
            }
            this.hide();
        }
    });
    Object.defineProperty(Dropdown.prototype, "_beforeChanged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._beforeChanged.call(this);
            if (this.isDirty("parent")) {
                var parent_1 = this.get("parent");
                var container = this.getPrivate("container");
                if (parent_1 && container) {
                    parent_1.appendChild(container);
                }
            }
        }
    });
    Object.defineProperty(Dropdown.prototype, "_dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._dispose.call(this);
        }
    });
    /**
     * Returns `true` if dropdown is currently open.
     *
     * @return  Dropdown open?
     */
    Object.defineProperty(Dropdown.prototype, "isOpen", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return this.getPrivate("container").style.display != "none";
        }
    });
    Object.defineProperty(Dropdown.prototype, "hide", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            this.getPrivate("container").style.display = "none";
            this.events.dispatch("closed", {
                type: "closed",
                target: this
            });
        }
    });
    Object.defineProperty(Dropdown.prototype, "show", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var arrow = this.getPrivate("arrow");
            var container = this.getPrivate("container");
            container.style.display = "";
            var offset = 0;
            var toolbar = this.get("control").getPrivate("toolbar");
            if (toolbar) {
                var toolbarContainer = this.get("control").getPrivate("toolbar").get("container");
                offset = Math.round(toolbarContainer.getBoundingClientRect().right - container.getBoundingClientRect().right);
            }
            if (offset < 0) {
                container.style.marginLeft = offset + "px";
                arrow.style.marginLeft = Math.abs(offset) + "px";
            }
            else {
                container.style.marginLeft = "";
                arrow.style.marginLeft = "";
            }
            this.events.dispatch("opened", {
                type: "opened",
                target: this
            });
        }
    });
    Object.defineProperty(Dropdown.prototype, "toggle", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var container = this.getPrivate("container");
            if (container.style.display == "none") {
                this.show();
            }
            else {
                this.hide();
            }
        }
    });
    Object.defineProperty(Dropdown, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "Dropdown"
    });
    Object.defineProperty(Dropdown, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: Entity.classNames.concat([Dropdown.className])
    });
    return Dropdown;
}(Entity));
export { Dropdown };
//# sourceMappingURL=Dropdown.js.map