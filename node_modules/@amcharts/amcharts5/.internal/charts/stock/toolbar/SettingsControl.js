import { __extends } from "tslib";
import { ValueAxis } from "../../xy/axes/ValueAxis";
import { DropdownListControl } from "./DropdownListControl";
import { StockIcons } from "./StockIcons";
import * as $array from "../../../core/util/Array";
/**
 * A control that is used to change type of the main series of the [[StockChart]].
 */
var SettingsControl = /** @class */ (function (_super) {
    __extends(SettingsControl, _super);
    function SettingsControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(SettingsControl.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype._afterNew.call(this);
            var dropdown = this.getPrivate("dropdown");
            dropdown.events.on("changed", function (ev) {
                var stockChart = _this.get("stockChart");
                var stockSeries = stockChart.get("stockSeries");
                if (stockSeries) {
                    if (ev.item.id == "y-scale") {
                        if (ev.item.value == "percent") {
                            stockChart.setPercentScale(true);
                            _this._setLogarithmic(false);
                        }
                        else {
                            stockChart.setPercentScale(false);
                            _this._setLogarithmic(ev.item.value == "logarithmic");
                        }
                    }
                    else if (ev.item.id == "fills") {
                        _this._setFills(ev.checked);
                    }
                }
            });
            this.on("active", function () {
                _this._populateInputs();
            });
        }
    });
    // public _afterChanged() {
    // 	super._afterChanged();
    // }
    Object.defineProperty(SettingsControl.prototype, "_getDefaultIcon", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            return StockIcons.getIcon("Settings");
        }
    });
    Object.defineProperty(SettingsControl.prototype, "_populateInputs", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var button = this.getPrivate("button");
            var inputs = button.getElementsByTagName("input");
            var currentScale = this._getYScale();
            for (var i = 0; i < inputs.length; i++) {
                var input = inputs[i];
                switch (input.id) {
                    case "am5stock-list-fills":
                        input.checked = this._getFillEnabled();
                        break;
                    case "am5stock-list-y-scale-percent":
                    case "am5stock-list-y-scale-regular":
                    case "am5stock-list-y-scale-logarithmic":
                        input.checked = input.value == currentScale;
                        break;
                }
            }
        }
    });
    Object.defineProperty(SettingsControl.prototype, "_getFillEnabled", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var stockChart = this.get("stockChart");
            var stockSeries = stockChart.get("stockSeries");
            if (stockSeries) {
                var xAxis = stockSeries.get("xAxis");
                var fills = xAxis.get("renderer").axisFills.values;
                return (fills.length > 0) && fills[0].get("visible", false);
            }
            return false;
        }
    });
    Object.defineProperty(SettingsControl.prototype, "_getYScale", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var stockChart = this.get("stockChart");
            var stockSeries = stockChart.get("stockSeries");
            if (stockSeries) {
                var yAxis = stockSeries.get("yAxis");
                if (yAxis instanceof ValueAxis) {
                    if (stockSeries.get("valueYShow") == "valueYChangeSelectionPercent") {
                        return "percent";
                    }
                    if (yAxis.get("logarithmic")) {
                        return "logarithmic";
                    }
                }
            }
            return "regular";
        }
    });
    Object.defineProperty(SettingsControl.prototype, "_setLogarithmic", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (value) {
            var stockChart = this.get("stockChart");
            var stockSeries = stockChart.get("stockSeries");
            if (stockSeries) {
                var yAxis = stockSeries.get("yAxis");
                if (yAxis instanceof ValueAxis) {
                    $array.each(yAxis.series, function (series) {
                        series.resetExtremes();
                    });
                    yAxis.set("logarithmic", value);
                }
            }
        }
    });
    Object.defineProperty(SettingsControl.prototype, "_setFills", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (enabled) {
            var stockChart = this.get("stockChart");
            stockChart.panels.each(function (panel) {
                panel.xAxes.each(function (xAxis) {
                    xAxis.get("renderer").axisFills.template.set("visible", enabled);
                    xAxis.get("renderer").grid.template.set("forceHidden", enabled);
                });
            });
        }
    });
    Object.defineProperty(SettingsControl, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "SettingsControl"
    });
    Object.defineProperty(SettingsControl, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: DropdownListControl.classNames.concat([SettingsControl.className])
    });
    return SettingsControl;
}(DropdownListControl));
export { SettingsControl };
//# sourceMappingURL=SettingsControl.js.map