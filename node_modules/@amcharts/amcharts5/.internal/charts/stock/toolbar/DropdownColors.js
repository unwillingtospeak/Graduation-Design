import { __extends } from "tslib";
import { color } from "../../../core/util/Color";
import { ColorSet } from "../../../core/util/ColorSet";
import { Dropdown } from "./Dropdown";
import * as $array from "../../../core/util/Array";
import * as $utils from "../../../core/util/Utils";
/**
 * A dropdown used for color picker control.
 *
 * Should not be used as standalone control.
 */
var DropdownColors = /** @class */ (function (_super) {
    __extends(DropdownColors, _super);
    function DropdownColors() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    // private _itemDisposers: Array<IDisposer> = [];
    Object.defineProperty(DropdownColors.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._afterNew.call(this);
            this._root.addDisposer(this);
        }
    });
    Object.defineProperty(DropdownColors.prototype, "_initElements", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._initElements.call(this);
            // Create container
            var container = this.getPrivate("container");
            // Create list
            var list = document.createElement("ul");
            list.className = "am5stock-control-colors";
            container.appendChild(list);
            this.setPrivate("list", list);
            this._initItems();
        }
    });
    Object.defineProperty(DropdownColors.prototype, "_initItems", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            var list = this.getPrivate("list");
            list.innerHTML = "";
            var cs = this.get("colors");
            if (!cs) {
                cs = ColorSet.new(this._root, {});
            }
            var colors = cs.get("colors", []);
            $array.each(colors, function (item) {
                _this.addItem(item);
            });
            this._initOpacity();
        }
    });
    Object.defineProperty(DropdownColors.prototype, "_beforeChanged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._beforeChanged.call(this);
            if (this.isDirty("colors") || this.isDirty("useOpacity") || this.isPrivateDirty("color") || this.isPrivateDirty("opacity")) {
                this._initItems();
            }
        }
    });
    Object.defineProperty(DropdownColors.prototype, "_dispose", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._dispose.call(this);
        }
    });
    Object.defineProperty(DropdownColors.prototype, "addItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (color) {
            var _this = this;
            var currentColor = this.getPrivate("color") ? this.getPrivate("color").hex : 0;
            var list = this.getPrivate("list");
            var item = document.createElement("li");
            item.className = "am5stock-control-color";
            if (currentColor == color.hex) {
                item.className += " am5stock-control-active";
            }
            item.style.background = color.toCSS();
            list.appendChild(item);
            // Add click event
            this._disposers.push($utils.addEventListener(item, "click", function (_ev) {
                _this.hide();
                _this.events.dispatch("invoked", {
                    type: "invoked",
                    color: color,
                    target: _this
                });
            }));
        }
    });
    Object.defineProperty(DropdownColors.prototype, "_initOpacity", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            if (this.get("useOpacity")) {
                var currentOpacity = this.getPrivate("opacity", 1);
                var list = this.getPrivate("list");
                var hr = document.createElement("hr");
                list.appendChild(hr);
                var _loop_1 = function (opacity) {
                    var fill = color(0x000000);
                    var item = document.createElement("li");
                    item.innerHTML = opacity + "%";
                    item.className = "am5stock-control-opacity am5stock-control-opacity-" + opacity;
                    if (currentOpacity * 100 == opacity) {
                        item.className += " am5stock-control-active";
                    }
                    item.style.background = fill.toCSS(opacity / 100);
                    list.appendChild(item);
                    // Add click event
                    this_1._disposers.push($utils.addEventListener(item, "click", function (_ev) {
                        _this.hide();
                        _this.events.dispatch("invokedOpacity", {
                            type: "invokedOpacity",
                            opacity: opacity / 100,
                            target: _this
                        });
                    }));
                };
                var this_1 = this;
                for (var opacity = 100; opacity >= 0; opacity -= 25) {
                    _loop_1(opacity);
                }
            }
        }
    });
    Object.defineProperty(DropdownColors, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "DropdownColors"
    });
    Object.defineProperty(DropdownColors, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: Dropdown.classNames.concat([DropdownColors.className])
    });
    return DropdownColors;
}(Dropdown));
export { DropdownColors };
//# sourceMappingURL=DropdownColors.js.map