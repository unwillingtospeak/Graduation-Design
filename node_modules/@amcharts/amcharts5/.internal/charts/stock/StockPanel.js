import { __extends } from "tslib";
import { XYChart } from "../xy/XYChart";
import * as $array from "../../core/util/Array";
import { ListAutoDispose } from "../../core/util/List";
/**
 * A panel instance for the [[StockChart]].
 *
 * @see {@link https://www.amcharts.com/docs/v5/charts/stock/panels/} for more info
 * @important
 */
var StockPanel = /** @class */ (function (_super) {
    __extends(StockPanel, _super);
    function StockPanel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * An instance of [[PanelControls]].
         */
        Object.defineProperty(_this, "panelControls", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /**
         * A list of drawings on panel.
         *
         */
        Object.defineProperty(_this, "drawings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new ListAutoDispose()
        });
        return _this;
    }
    Object.defineProperty(StockPanel.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype._afterNew.call(this);
            this._disposers.push(this.drawings.events.onAll(function (change) {
                if (change.type === "clear") {
                    $array.each(change.oldValues, function (series) {
                        _this.series.removeValue(series);
                    });
                }
                else if (change.type === "push") {
                    _this.series.push(change.newValue);
                }
                else if (change.type === "setIndex") {
                    _this.series.setIndex(change.index, change.newValue);
                }
                else if (change.type === "insertIndex") {
                    _this.series.insertIndex(change.index, change.newValue);
                }
                else if (change.type === "removeIndex") {
                    _this.series.removeIndex(change.index);
                }
                else {
                    throw new Error("Unknown IListEvent type");
                }
            }));
        }
    });
    /**
     * Moves panel up.
     */
    Object.defineProperty(StockPanel.prototype, "moveUp", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var stockChart = this.getPrivate("stockChart");
            var children = stockChart.panelsContainer.children;
            var index = children.indexOf(this);
            if (index > 0) {
                children.moveValue(this, index - 1);
            }
            stockChart._updateControls();
        }
    });
    /**
     * Moves panel down.
     */
    Object.defineProperty(StockPanel.prototype, "moveDown", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var stockChart = this.getPrivate("stockChart");
            var children = stockChart.panelsContainer.children;
            var index = children.indexOf(this);
            if (index < children.length - 1) {
                children.moveValue(this, index + 1);
            }
            stockChart._updateControls();
        }
    });
    /**
     * Closes panel.
     */
    Object.defineProperty(StockPanel.prototype, "close", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var stockChart = this.getPrivate("stockChart");
            stockChart.panels.removeValue(this);
            stockChart._updateControls();
        }
    });
    /**
     * Toggles "full screen" mode of the panel on and off.
     */
    Object.defineProperty(StockPanel.prototype, "expand", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            var stockChart = this.getPrivate("stockChart");
            var panels = [];
            stockChart.panels.each(function (panel) {
                if (!panel.isVisible()) {
                    panels.push(panel);
                }
            });
            $array.each(panels, function (panel) {
                panel.setPrivate("visible", true);
            });
            if (panels.length == 0) {
                stockChart.panels.each(function (panel) {
                    if (panel != _this) {
                        panel.setPrivate("visible", false);
                    }
                });
            }
            stockChart._updateControls();
            if (panels.length == 0) {
                var panelControls = this.panelControls;
                panelControls.upButton.setPrivate("visible", false);
                panelControls.downButton.setPrivate("visible", false);
                panelControls.closeButton.setPrivate("visible", false);
            }
        }
    });
    Object.defineProperty(StockPanel, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "StockPanel"
    });
    Object.defineProperty(StockPanel, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: XYChart.classNames.concat([StockPanel.className])
    });
    return StockPanel;
}(XYChart));
export { StockPanel };
//# sourceMappingURL=StockPanel.js.map