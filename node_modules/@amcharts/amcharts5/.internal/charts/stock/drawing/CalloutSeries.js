import { __extends } from "tslib";
import { LabelSeries } from "./LabelSeries";
import { PointedRectangle } from "../../../core/render/PointedRectangle";
import { Color, color } from "../../../core/util/Color";
import * as $ease from "../../../core/util/Ease";
var CalloutSeries = /** @class */ (function (_super) {
    __extends(CalloutSeries, _super);
    function CalloutSeries() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_tag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "callout"
        });
        return _this;
    }
    Object.defineProperty(CalloutSeries.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._afterNew.call(this);
        }
    });
    Object.defineProperty(CalloutSeries.prototype, "_tweakBullet2", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (label) {
            var bgColor = this.get("fillColor", this.get("fill", color(0x000000)));
            label.set("background", PointedRectangle.new(this._root, { themeTags: ["callout"], strokeOpacity: 0, fill: bgColor }));
            label.set("fill", this.get("labelFill", Color.alternative(bgColor, this._root.interfaceColors.get("alternativeText"), this._root.interfaceColors.get("text"))));
        }
    });
    Object.defineProperty(CalloutSeries.prototype, "_tweakBullet", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (container) {
            var _this = this;
            _super.prototype._tweakBullet.call(this, container);
            var label = this.getPrivate("label");
            if (label) {
                label.events.on("positionchanged", function () {
                    _this._updatePointer(label);
                });
                label.events.on("click", function () {
                    _this.spriteResizer.set("sprite", label);
                });
                label.on("scale", function () {
                    _this._updatePointer(label);
                });
                label.on("rotation", function () {
                    _this._updatePointer(label);
                });
                label.setAll({ draggable: true });
                var defaultState_1 = label.states.lookup("default");
                setTimeout(function () {
                    label.animate({ key: "y", to: -label.height() / 2 - 10, from: 0, duration: defaultState_1.get("stateAnimationDuration", 500), easing: defaultState_1.get("stateAnimationEasing", $ease.out($ease.cubic)) });
                }, 50);
            }
        }
    });
    Object.defineProperty(CalloutSeries.prototype, "_updatePointer", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (label) {
            var background = label.get("background");
            if (background instanceof PointedRectangle) {
                var parent_1 = label.parent;
                if (parent_1) {
                    var point = parent_1.toGlobal({ x: 0, y: 0 });
                    point = background.toLocal(point);
                    background.setAll({ pointerX: point.x, pointerY: point.y });
                }
            }
        }
    });
    Object.defineProperty(CalloutSeries.prototype, "_hideAllBullets", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
        }
    });
    Object.defineProperty(CalloutSeries, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "CalloutSeries"
    });
    Object.defineProperty(CalloutSeries, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: LabelSeries.classNames.concat([CalloutSeries.className])
    });
    return CalloutSeries;
}(LabelSeries));
export { CalloutSeries };
//# sourceMappingURL=CalloutSeries.js.map