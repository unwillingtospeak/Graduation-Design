import { __extends } from "tslib";
import { Container } from "../../../core/render/Container";
import { p50, Percent } from "../../../core/util/Percent";
import { RoundedRectangle } from "../../../core/render/RoundedRectangle";
import { Rectangle } from "../../../core/render/Rectangle";
import { color } from "../../../core/util/Color";
import * as $math from "../../../core/util/Math";
var SpriteResizer = /** @class */ (function (_super) {
    __extends(SpriteResizer, _super);
    function SpriteResizer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "rectangle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this.children.push(Rectangle.new(_this._root, { themeTags: ["rectangle"], fillOpacity: 0, fill: color(0xFFFFFF) }))
        });
        Object.defineProperty(_this, "gripL", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this._createGrip("left")
        });
        Object.defineProperty(_this, "gripR", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this._createGrip("right")
        });
        Object.defineProperty(_this, "gripT", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this._createGrip("top")
        });
        Object.defineProperty(_this, "gripB", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this._createGrip("bottom")
        });
        Object.defineProperty(_this, "_is", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 1
        });
        Object.defineProperty(_this, "_ix", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(_this, "_iw", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(_this, "_positionDP", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_isHover", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        return _this;
    }
    Object.defineProperty(SpriteResizer.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype._afterNew.call(this);
            this.addTag("resizer");
            this.set("visible", false);
            this.gripL.events.on("dragged", function (e) {
                _this._resize(e.target, -1);
            });
            this.gripR.events.on("dragged", function (e) {
                _this._resize(e.target, 1);
            });
            this.gripL.events.on("dragstart", function (e) {
                _this._resizeStart(e.target);
            });
            this.gripR.events.on("dragstart", function (e) {
                _this._resizeStart(e.target);
            });
            this.gripT.events.on("dragged", function (e) {
                _this._rotate(e, 90);
            });
            this.gripB.events.on("dragged", function (e) {
                _this._rotate(e, -90);
            });
            this.gripT.events.on("dragstart", function (e) {
                _this._resizeStart(e.target);
            });
            this.gripB.events.on("dragstart", function (e) {
                _this._resizeStart(e.target);
            });
        }
    });
    Object.defineProperty(SpriteResizer.prototype, "_resizeStart", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (grip) {
            var sprite = this.get("sprite");
            if (sprite) {
                this._is = sprite.get("scale", 1);
                this._ix = grip.x();
                this._iw = this.width() / 2;
            }
        }
    });
    Object.defineProperty(SpriteResizer.prototype, "_resize", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (grip, c) {
            var sprite = this.get("sprite");
            if (sprite) {
                sprite.set("scale", Math.max(0.01, this._is * (1 + c * (grip.x() - this._ix) / this._iw)));
                this._updatePositions();
            }
        }
    });
    Object.defineProperty(SpriteResizer.prototype, "_rotate", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (e, delta) {
            var sprite = this.get("sprite");
            if (sprite) {
                var parent_1 = this.parent;
                if (parent_1) {
                    var rotationStep = this.get("rotationStep", 10);
                    var angle = Math.round((($math.getAngle({ x: this.x(), y: this.y() }, parent_1.toLocal(e.point)) + delta) / rotationStep)) * rotationStep;
                    sprite.set("rotation", angle);
                    this._updatePositions();
                }
            }
        }
    });
    Object.defineProperty(SpriteResizer.prototype, "_createGrip", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (themeTag) {
            var container = this.children.push(Container.new(this._root, {
                themeTags: ["grip", themeTag],
                setStateOnChildren: true,
                draggable: true
            }));
            container.children.push(RoundedRectangle.new(this._root, {
                themeTags: ["outline"],
                centerX: p50,
                centerY: p50
            }));
            container.children.push(RoundedRectangle.new(this._root, {
                centerX: p50,
                centerY: p50
            }));
            return container;
        }
    });
    Object.defineProperty(SpriteResizer.prototype, "_updateChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype._updateChildren.call(this);
            if (this.isDirty("sprite")) {
                var sprite = this.get("sprite");
                if (sprite) {
                    this.show(0);
                    this._updatePositions();
                    var parent_2 = sprite.parent;
                    if (parent_2) {
                        parent_2.children.moveValue(this, 0);
                    }
                    this._positionDP = sprite.events.on("positionchanged", function () {
                        _this._updatePositions();
                    });
                }
                else {
                    this.hide(0);
                    if (this._positionDP) {
                        this._positionDP.dispose();
                    }
                }
            }
            if (this.isDirty("width") || this.isDirty("height") || this.isDirty("rotation")) {
                this._updatePositions();
            }
        }
    });
    Object.defineProperty(SpriteResizer.prototype, "_updatePositions", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var sprite = this.get("sprite");
            if (sprite) {
                var bounds = sprite.localBounds();
                var scale = sprite.get("scale", 1);
                var d = 20;
                var w = (bounds.right - bounds.left) * scale + d;
                var h = (bounds.bottom - bounds.top) * scale + d;
                var a = sprite.get("rotation", 0);
                var rectangle = this.rectangle;
                var cx = sprite.get("centerX");
                var cy = sprite.get("centerY");
                var cxr = 0;
                if (cx instanceof Percent) {
                    cxr = cx.value;
                }
                var cyr = 0;
                if (cy instanceof Percent) {
                    cyr = cy.value;
                }
                rectangle.setAll({ centerX: cx, centerY: cy, width: w, height: h });
                this.setAll({ x: sprite.x() + d * (cxr - 0.5) * $math.cos(a) - d * (cyr - 0.5) * $math.sin(a), y: sprite.y() + d * (cyr - 0.5) * $math.cos(a) + d * (cxr - 0.5) * $math.sin(a), width: w, height: h, rotation: a });
                this.gripT.setAll({ x: (0.5 - cxr) * w, y: -cyr * h });
                this.gripB.setAll({ x: (0.5 - cxr) * w, y: (1 - cyr) * h });
                this.gripL.setAll({ x: -cxr * w, y: (0.5 - cyr) * h });
                this.gripR.setAll({ x: (1 - cxr) * w, y: (0.5 - cyr) * h });
                this.rectangle.setAll({ width: w, height: h });
            }
        }
    });
    Object.defineProperty(SpriteResizer, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "SpriteResizer"
    });
    Object.defineProperty(SpriteResizer, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: Container.classNames.concat([SpriteResizer.className])
    });
    return SpriteResizer;
}(Container));
export { SpriteResizer };
//# sourceMappingURL=SpriteResizer.js.map