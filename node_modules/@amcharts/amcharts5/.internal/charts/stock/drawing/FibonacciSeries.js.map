{"version":3,"file":"FibonacciSeries.js","sourceRoot":"","sources":["../../../../../../src/.internal/charts/stock/drawing/FibonacciSeries.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ISpritePointerEvent } from \"../../../core/render/Sprite\";\r\nimport type { Graphics } from \"../../../core/render/Graphics\";\r\nimport type { DataItem } from \"../../../core/render/Component\";\r\nimport type { Color } from \"../../../core/util/Color\";\r\n\r\nimport { SimpleLineSeries, ISimpleLineSeriesSettings, ISimpleLineSeriesPrivate, ISimpleLineSeriesDataItem } from \"./SimpleLineSeries\";\r\nimport { Label } from \"../../../core/render/Label\";\r\nimport { ListTemplate } from \"../../../core/util/List\";\r\nimport { Template } from \"../../../core/util/Template\";\r\nimport type { Line } from \"../../../core/render/Line\";\r\n\r\n\r\nimport * as $array from \"../../../core/util/Array\";\r\n\r\nexport interface IFibonacciSeriesDataItem extends ISimpleLineSeriesDataItem {\r\n\r\n}\r\n\r\nexport interface IFibonacciSeriesSettings extends ISimpleLineSeriesSettings {\r\n\t/**\r\n\t * @todo review\r\n\t */\t\r\n\tsequence?: Array<number>;\r\n\t/**\r\n\t * @todo review\r\n\t */\t\r\n\tcolors?: Array<Color>\r\n}\r\n\r\nexport interface IFibonacciSeriesPrivate extends ISimpleLineSeriesPrivate {\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport class FibonacciSeries extends SimpleLineSeries {\r\n\tpublic static className: string = \"FibonacciSeries\";\r\n\tpublic static classNames: Array<string> = SimpleLineSeries.classNames.concat([FibonacciSeries.className]);\r\n\r\n\tdeclare public _settings: IFibonacciSeriesSettings;\r\n\tdeclare public _privateSettings: IFibonacciSeriesPrivate;\r\n\tdeclare public _dataItemSettings: IFibonacciSeriesDataItem;\r\n\r\n\tprotected _tag = \"fibonacci\";\r\n\tprotected _labels: Array<Array<Label>> = [];\r\n\tprotected _fills: Array<Array<Graphics>> = [];\r\n\tprotected _strokes: Array<Array<Graphics>> = [];\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic makeLabel(): Label {\r\n\t\tconst label = this.labels.make();\r\n\t\tthis.mainContainer.children.push(label);\r\n\t\tthis.labels.push(label);\r\n\t\treturn label;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of labels.\r\n\t *\r\n\t * `labels.template` can be used to configure axis labels.\r\n\t *\r\n\t * @default new ListTemplate<Label>\r\n\t */\r\n\tpublic readonly labels: ListTemplate<Label> = new ListTemplate(\r\n\t\tTemplate.new({}),\r\n\t\t() => Label._new(this._root, {}, [this.labels.template])\r\n\t);\r\n\r\n\tprotected _updateSegment(index: number) {\r\n\t\tsuper._updateSegment(index);\r\n\t\tthis._updateSegmentReal(index);\r\n\t}\r\n\r\n\tprotected _updateSegmentReal(index: number) {\r\n\t\tconst diP1 = this._di[index][\"p1\"];\r\n\t\tconst diP2 = this._di[index][\"p2\"];\r\n\r\n\t\tconst valueX = diP1.get(\"valueX\", 0);\r\n\t\tdiP2.set(\"valueX\", valueX);\r\n\t\tthis._setXLocation(diP2, valueX);\r\n\t}\r\n\r\n\r\n\tpublic _updateChildren() {\r\n\r\n\t\tsuper._updateChildren();\r\n\t\tthis._updateChildrenReal();\r\n\r\n\t}\r\n\r\n\tprotected _updateChildrenReal() {\r\n\t\tconst chart = this.chart;\r\n\r\n\t\tif (chart) {\r\n\t\t\tconst yAxis = this.get(\"yAxis\");\r\n\r\n\t\t\tfor (let i = 0; i < this._lines.length; i++) {\r\n\t\t\t\tconst line = this._lines[i];\r\n\t\t\t\tif(line){\r\n\t\t\t\t\tconst diP1 = this._di[i][\"p1\"];\r\n\t\t\t\t\tconst diP2 = this._di[i][\"p2\"];\r\n\r\n\t\t\t\t\tconst p1 = diP1.get(\"point\");\r\n\t\t\t\t\tconst p2 = diP2.get(\"point\");\r\n\r\n\t\t\t\t\tconst valueX = diP1.get(\"valueX\", 0);\r\n\t\t\t\t\tdiP2.set(\"valueX\", valueX);\r\n\t\t\t\t\tthis._setXLocation(diP2, valueX);\r\n\r\n\t\t\t\t\tif (p1 && p2) {\r\n\t\t\t\t\t\tp2.x = chart.plotContainer.width();\r\n\t\t\t\t\t\tconst sequence = this.get(\"sequence\", []);\r\n\t\t\t\t\t\tconst colors = this.get(\"colors\", []);\r\n\t\t\t\t\t\tlet prevValue = 0;\r\n\r\n\t\t\t\t\t\tconst labels = this._labels[i];\r\n\t\t\t\t\t\tconst strokes = this._strokes[i];\r\n\t\t\t\t\t\tconst fills = this._fills[i];\r\n\r\n\t\t\t\t\t\tfor (let i = 0; i < sequence.length; i++) {\r\n\t\t\t\t\t\t\tconst value = sequence[i];\r\n\r\n\t\t\t\t\t\t\tconst color = colors[i];\r\n\t\t\t\t\t\t\tconst label = labels[i];\r\n\r\n\t\t\t\t\t\t\tconst fill = fills[i];\r\n\t\t\t\t\t\t\tconst stroke = strokes[i];\r\n\r\n\t\t\t\t\t\t\tconst y1 = p1.y + (p2.y - p1.y) * prevValue;\r\n\t\t\t\t\t\t\tconst y2 = p1.y + (p2.y - p1.y) * value;\r\n\r\n\t\t\t\t\t\t\tconst realValue = yAxis.positionToValue(yAxis.coordinateToPosition(y2));\r\n\r\n\t\t\t\t\t\t\tfill.setPrivate(\"visible\", true);\r\n\t\t\t\t\t\t\tstroke.setPrivate(\"visible\", true);\r\n\r\n\t\t\t\t\t\t\tfill.set(\"draw\", (display) => {\r\n\t\t\t\t\t\t\t\tdisplay.moveTo(p1.x, y1);\r\n\t\t\t\t\t\t\t\tdisplay.lineTo(p2.x, y1);\r\n\r\n\t\t\t\t\t\t\t\tdisplay.lineTo(p2.x, y2);\r\n\t\t\t\t\t\t\t\tdisplay.lineTo(p1.x, y2);\r\n\t\t\t\t\t\t\t\tdisplay.lineTo(p1.x, y1);\r\n\t\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t\t\tstroke.set(\"draw\", (display) => {\r\n\t\t\t\t\t\t\t\tdisplay.moveTo(p1.x, y2);\r\n\t\t\t\t\t\t\t\tdisplay.lineTo(p2.x, y2);\r\n\t\t\t\t\t\t\t})\r\n\r\n\t\t\t\t\t\t\tconst dataItem = label.dataItem;\r\n\t\t\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\t\t\tdataItem.set(\"value\" as any, realValue);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tlabel.setAll({ x: p2.x, y: y2, fill: color });\r\n\t\t\t\t\t\t\tlabel.text.markDirtyText();\r\n\r\n\t\t\t\t\t\t\tprevValue = value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected _addPoints(event: ISpritePointerEvent, index: number):Line {\r\n\t\tlet line = super._addPoints(event, index);\r\n\r\n\t\tconst labelArr = [];\r\n\t\tconst fillsArr = [];\r\n\t\tconst strokesArr = [];\r\n\r\n\t\tconst diP1 = this._di[index][\"p1\"];\r\n\t\tconst diP2 = this._di[index][\"p2\"];\r\n\r\n\t\tconst userData = [this.dataItems.indexOf(diP1), this.dataItems.indexOf(diP2)];\r\n\r\n\t\tconst sequence = this.get(\"sequence\", []);\r\n\t\tconst colors = this.get(\"colors\", []);\r\n\r\n\t\tfor (let i = 0; i < sequence.length; i++) {\r\n\t\t\tconst label = this.makeLabel();\r\n\t\t\tconst dataItem = this.makeDataItem({});\r\n\t\t\tdataItem.set(\"sequence\" as any, sequence[i]);\r\n\t\t\tlabel._setDataItem(dataItem);\r\n\t\t\tlabelArr.push(label);\r\n\r\n\t\t\tconst fill = this.makeFill(this.fills);\r\n\t\t\tfillsArr.push(fill);\r\n\r\n\t\t\tconst stroke = this.makeStroke(this.strokes);\r\n\t\t\tstrokesArr.push(stroke);\r\n\r\n\t\t\tlet fillColor: Color | undefined = colors[i];\r\n\t\t\tlet strokeColor: Color | undefined = colors[i];\r\n\r\n\t\t\tif (!fillColor) {\r\n\t\t\t\tfillColor = this.get(\"fillColor\", this.get(\"fill\"));\r\n\t\t\t}\r\n\t\t\tif (!strokeColor) {\r\n\t\t\t\tstrokeColor = this.get(\"strokeColor\", this.get(\"stroke\"));\r\n\t\t\t}\r\n\r\n\t\t\tfill.setAll({ fill: fillColor, userData: userData });\r\n\t\t\tstroke.setAll({ stroke: strokeColor, userData: userData });\r\n\t\t}\r\n\r\n\t\tthis._labels[index] = labelArr;\r\n\t\tthis._fills[index] = fillsArr;\r\n\t\tthis._strokes[index] = strokesArr;\r\n\r\n\t\treturn line;\r\n\t}\r\n\r\n\tprotected _drawFill() {\r\n\r\n\t}\r\n\r\n\tprotected _drawStroke() {\r\n\r\n\t}\r\n\r\n\tprotected _updateLine() {\r\n\r\n\t}\r\n\r\n\tprotected _clearGraphics() {\r\n\r\n\t}\r\n\r\n\tpublic disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\r\n\t\tsuper.disposeDataItem(dataItem);\r\n\t\tconst dataContext = dataItem.dataContext as any;\r\n\t\tif (dataContext) {\r\n\t\t\tconst index = dataContext.index;\r\n\t\t\tconst labels = this._labels[index];\r\n\t\t\tconst fills = this._fills[index];\r\n\t\t\tconst strokes = this._strokes[index];\r\n\r\n\t\t\tif (labels) {\r\n\t\t\t\t$array.each(labels, (item) => {\r\n\t\t\t\t\titem.dispose();\r\n\t\t\t\t\tthis.labels.removeValue(item);\r\n\t\t\t\t})\r\n\r\n\t\t\t\tdelete (this._labels[index]);\r\n\t\t\t}\r\n\t\t\tif (fills) {\r\n\t\t\t\t$array.each(fills, (item) => {\r\n\t\t\t\t\tthis.fills.removeValue(item);\r\n\t\t\t\t\titem.dispose();\r\n\t\t\t\t})\r\n\t\t\t\tdelete (this._fills[index]);\r\n\t\t\t}\r\n\t\t\tif (strokes) {\r\n\t\t\t\t$array.each(strokes, (item) => {\r\n\t\t\t\t\tthis.strokes.removeValue(item);\r\n\t\t\t\t\titem.dispose();\r\n\t\t\t\t})\r\n\t\t\t\tdelete (this._strokes[index]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}"]}