import { __extends } from "tslib";
import { DrawingSeries } from "./DrawingSeries";
var RectangleSeries = /** @class */ (function (_super) {
    __extends(RectangleSeries, _super);
    function RectangleSeries() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_index", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(_this, "_di", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(_this, "_tag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "rectangle"
        });
        return _this;
    }
    Object.defineProperty(RectangleSeries.prototype, "_handleBulletDragged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event) {
            _super.prototype._handleBulletDragged.call(this, event);
            var dataItem = event.target.dataItem;
            var movePoint = this._movePointerPoint;
            if (dataItem && movePoint) {
                var dataContext = dataItem.dataContext;
                var index = dataContext.index;
                var corner = dataContext.corner;
                var xAxis = this.get("xAxis");
                var yAxis = this.get("yAxis");
                var valueX = xAxis.positionToValue(xAxis.coordinateToPosition(movePoint.x));
                var valueY = this._getYValue(yAxis.positionToValue(yAxis.coordinateToPosition(movePoint.y)));
                var vx = "valueX";
                var vy = "valueY";
                var vwy = "valueYWorking";
                dataItem.set(vx, valueX);
                dataItem.set(vy, valueY);
                dataItem.set(vwy, valueY);
                this._setXLocation(dataItem, valueX);
                this._positionBullets(dataItem);
                var items = this._di[index];
                var blDI = items["bl"];
                var brDI = items["br"];
                var tlDI = items["tl"];
                var trDI = items["tr"];
                var tlDI2 = items["tl2"];
                if (blDI && brDI && tlDI && trDI && tlDI2) {
                    if (corner == "br") {
                        blDI.set(vy, valueY);
                        blDI.set(vwy, valueY);
                        trDI.set(vx, valueX);
                        this._setXLocation(trDI, valueX);
                    }
                    if (corner == "tr") {
                        brDI.set(vx, valueX);
                        this._setXLocation(brDI, valueX);
                        tlDI.set(vy, valueY);
                        tlDI.set(vwy, valueY);
                        tlDI2.set("valueY", valueY);
                        tlDI2.set(vwy, valueY);
                    }
                    if (corner == "bl") {
                        brDI.set(vy, valueY);
                        brDI.set(vwy, valueY);
                        tlDI.set(vx, valueX);
                        tlDI2.set(vx, valueX);
                        this._setXLocation(tlDI, valueX);
                        this._setXLocation(tlDI2, valueX);
                    }
                    if (corner == "tl2") {
                        blDI.set(vx, valueX);
                        this._setXLocation(blDI, valueX);
                        trDI.set(vy, valueY);
                        trDI.set(vwy, valueY);
                        tlDI.set(vx, valueX);
                        this._setXLocation(tlDI, valueX);
                        tlDI.set(vy, valueY);
                        tlDI.set(vwy, valueY);
                    }
                }
            }
        }
    });
    Object.defineProperty(RectangleSeries.prototype, "_handlePointerClick", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event) {
            _super.prototype._handlePointerClick.call(this, event);
            if (!this._isDragging) {
                if (!this._isDrawing) {
                    this._isDrawing = true;
                    this.bulletsContainer.show();
                    this._addPoints(event, this._index);
                }
                else {
                    this._isDrawing = false;
                    this._index++;
                }
            }
        }
    });
    Object.defineProperty(RectangleSeries.prototype, "_handlePointerMove", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event) {
            _super.prototype._handlePointerMove.call(this, event);
            if (this._isDrawing) {
                var movePoint = this._movePointerPoint;
                if (movePoint) {
                    var xAxis = this.get("xAxis");
                    var yAxis = this.get("yAxis");
                    var valueX = this._getXValue(xAxis.positionToValue(xAxis.coordinateToPosition(movePoint.x)));
                    var valueY = this._getYValue(yAxis.positionToValue(yAxis.coordinateToPosition(movePoint.y)));
                    var index = this._index;
                    var diTR = this._di[index]["tr"];
                    var diBR = this._di[index]["br"];
                    var diBL = this._di[index]["bl"];
                    if (diTR && diBR && diBL) {
                        diTR.set("valueX", valueX);
                        diBR.set("valueX", valueX);
                        this._setXLocation(diTR, valueX);
                        this._setXLocation(diBR, valueX);
                        diBR.set("valueY", valueY);
                        diBR.set("valueYWorking", valueY);
                        diBL.set("valueY", valueY);
                        diBL.set("valueYWorking", valueY);
                    }
                }
            }
        }
    });
    Object.defineProperty(RectangleSeries.prototype, "_addPoints", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event, index) {
            var chart = this.chart;
            if (chart) {
                var xAxis = this.get("xAxis");
                var yAxis = this.get("yAxis");
                var point = chart.plotContainer.toLocal(event.point);
                var valueX = xAxis.positionToValue(xAxis.coordinateToPosition(point.x));
                var valueY = this._getYValue(yAxis.positionToValue(yAxis.coordinateToPosition(point.y)));
                this._di[index] = {};
                this.data.push({ stroke: this._getStrokeTemplate() });
                this._addContextInfo(index, "empty");
                this._addPoint(valueX, valueY, "tl", index);
                this._addPoint(valueX, valueY, "tr", index);
                this._addPoint(valueX, valueY, "br", index);
                this._addPoint(valueX, valueY, "bl", index);
                this._addPoint(valueX, valueY, "tl2", index);
            }
        }
    });
    Object.defineProperty(RectangleSeries.prototype, "_addPoint", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (valueX, valueY, corner, index) {
            this.data.push({ valueY: valueY, valueX: valueX });
            var len = this.dataItems.length;
            var dataItem = this.dataItems[len - 1];
            if (dataItem) {
                if (valueX != null) {
                    this._setXLocation(dataItem, valueX);
                }
                this._addContextInfo(index, corner);
                this._di[index][corner] = dataItem;
                this.setPrivate("startIndex", 0);
                this.setPrivate("endIndex", len);
                return dataItem.dataContext;
            }
        }
    });
    Object.defineProperty(RectangleSeries, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "RectangleSeries"
    });
    Object.defineProperty(RectangleSeries, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: DrawingSeries.classNames.concat([RectangleSeries.className])
    });
    return RectangleSeries;
}(DrawingSeries));
export { RectangleSeries };
//# sourceMappingURL=RectangleSeries.js.map