import { __extends } from "tslib";
import { SimpleLineSeries } from "./SimpleLineSeries";
import * as $math from "../../../core/util/Math";
var HorizontalRaySeries = /** @class */ (function (_super) {
    __extends(HorizontalRaySeries, _super);
    function HorizontalRaySeries() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_tag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "ray"
        });
        return _this;
    }
    Object.defineProperty(HorizontalRaySeries.prototype, "_updateSegment", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (index) {
            var diP1 = this._di[index]["p1"];
            var diP2 = this._di[index]["p2"];
            var series = this.get("series");
            if (series) {
                var xAxis = this.get("xAxis");
                var min = xAxis.getPrivate("min", 0) + 1;
                var max = xAxis.getPrivate("max", 1) - 1;
                var x1 = $math.fitToRange(diP2.get("valueX"), min, max);
                var di1 = xAxis.getSeriesItem(series, Math.max(0, xAxis.valueToPosition(x1)));
                var field = this.get("field") + "Y";
                if (di1) {
                    var y1 = di1.get(field);
                    diP1.set("valueY", y1);
                    diP1.set("valueYWorking", y1);
                    diP2.set("valueY", y1);
                    diP2.set("valueYWorking", y1);
                    diP1.set("valueX", x1);
                    diP2.set("valueX", x1 + 0.01);
                    this._positionBullets(diP1);
                    this._positionBullets(diP2);
                }
            }
        }
    });
    Object.defineProperty(HorizontalRaySeries.prototype, "_updateLine", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (line, hitLine, p11, _p22, p1, _p2) {
            line.set("points", [p1, p11]);
            hitLine.set("points", [p1, p11]);
        }
    });
    // need to override so that location would not be set
    Object.defineProperty(HorizontalRaySeries.prototype, "_setXLocation", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
        }
    });
    Object.defineProperty(HorizontalRaySeries.prototype, "_handlePointerMoveReal", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
        }
    });
    Object.defineProperty(HorizontalRaySeries.prototype, "_handlePointerClickReal", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event) {
            if (!this._isDragging) {
                this._addPoints(event, this._index);
                this._updateSegment(this._index);
                this._index++;
                this._isDrawing = false;
            }
        }
    });
    Object.defineProperty(HorizontalRaySeries.prototype, "_addPoints", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event, index) {
            var line = _super.prototype._addPoints.call(this, event, index);
            this._updateExtentionLine(line);
            var diP2 = this._di[index]["p2"];
            diP2.set("valueX", diP2.get("valueX", 0) + 0.001);
            this._isDrawing = false;
            return line;
        }
    });
    Object.defineProperty(HorizontalRaySeries, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "HorizontalRaySeries"
    });
    Object.defineProperty(HorizontalRaySeries, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: SimpleLineSeries.classNames.concat([HorizontalRaySeries.className])
    });
    return HorizontalRaySeries;
}(SimpleLineSeries));
export { HorizontalRaySeries };
//# sourceMappingURL=HorizontalRaySeries.js.map