import { __extends } from "tslib";
import { DrawingSeries } from "./DrawingSeries";
import { Line } from "../../../core/render/Line";
import { ListTemplate } from "../../../core/util/List";
import { Template } from "../../../core/util/Template";
import * as $math from "../../../core/util/Math";
var SimpleLineSeries = /** @class */ (function (_super) {
    __extends(SimpleLineSeries, _super);
    function SimpleLineSeries() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_tag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "line"
        });
        Object.defineProperty(_this, "lines", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new ListTemplate(Template.new({}), function () { return Line._new(_this._root, {}, [_this.lines.template]); })
        });
        Object.defineProperty(_this, "hitLines", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new ListTemplate(Template.new({}), function () { return Line._new(_this._root, {}, [_this.hitLines.template]); })
        });
        Object.defineProperty(_this, "_di", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(_this, "_lines", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(_this, "_hitLines", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        return _this;
    }
    /**
     * @ignore
     */
    Object.defineProperty(SimpleLineSeries.prototype, "makeLine", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var line = this.lines.make();
            this.mainContainer.children.push(line);
            this.lines.push(line);
            return line;
        }
    });
    /**
     * @ignore
     */
    Object.defineProperty(SimpleLineSeries.prototype, "makeHitLine", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var line = this.hitLines.make();
            line.addTag("hit");
            this.mainContainer.children.push(line);
            this.hitLines.push(line);
            return line;
        }
    });
    Object.defineProperty(SimpleLineSeries.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype._afterNew.call(this);
            var lineTemplate = this.lines.template;
            lineTemplate.events.on("pointerover", function (e) {
                _this._showSegmentBullets(e.target.get("userData"));
            });
            lineTemplate.events.on("pointerout", function (e) {
                _this._hideAllBullets();
                var index = e.target.get("userData");
                var line = _this._lines[index];
                if (line) {
                    line.unhover();
                }
                var strokeIndex = _this._getStrokeIndex(index);
                var stroke = _this.strokes.getIndex(strokeIndex);
                if (stroke) {
                    stroke.unhover();
                }
            });
            var hitTemplate = this.hitLines.template;
            hitTemplate.events.on("pointerover", function (e) {
                var index = e.target.get("userData");
                _this._showSegmentBullets(index);
                var line = _this._lines[index];
                if (line) {
                    line.hover();
                }
                var strokeIndex = _this._getStrokeIndex(index);
                var stroke = _this.strokes.getIndex(strokeIndex);
                if (stroke) {
                    stroke.hover();
                }
            });
            hitTemplate.events.on("click", function (e) {
                if (_this._erasingEnabled) {
                    _this._disposeIndex(e.target.get("userData"));
                }
            });
            hitTemplate.events.on("dragstart", function (e) {
                var index = e.target.get("userData");
                var line = _this._lines[index];
                if (line) {
                    line.dragStart(e);
                }
                var strokeIndex = _this._getStrokeIndex(index);
                var stroke = _this.strokes.getIndex(strokeIndex);
                if (stroke) {
                    stroke.dragStart(e);
                }
            });
            hitTemplate.events.on("dragstop", function (e) {
                var index = e.target.get("userData");
                _this.markDirtyValues();
                e.target.setAll({ x: 0, y: 0 });
                var line = _this._lines[index];
                if (line) {
                    line.dragStop(e);
                    line.setAll({ x: 0, y: 0 });
                }
                var strokeIndex = _this._getStrokeIndex(index);
                var stroke = _this.strokes.getIndex(strokeIndex);
                if (stroke) {
                    stroke.dragStop(e);
                    stroke.setAll({ x: 0, y: 0 });
                }
            });
            hitTemplate.events.on("pointerout", function (e) {
                var index = e.target.get("userData");
                _this._hideAllBullets();
                var line = _this._lines[index];
                if (line) {
                    line.unhover();
                }
                var strokeIndex = _this._getStrokeIndex(index);
                var stroke = _this.strokes.getIndex(strokeIndex);
                if (stroke) {
                    stroke.unhover();
                }
            });
        }
    });
    Object.defineProperty(SimpleLineSeries.prototype, "_updateElements", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var chart = this.chart;
            if (chart) {
                var s = Math.max(chart.plotContainer.width(), chart.plotContainer.height()) * 2;
                for (var i = 0; i < this._lines.length; i++) {
                    var line = this._lines[i];
                    if (line) {
                        var hitLine = this._hitLines[i];
                        var diP1 = this._di[i]["p1"];
                        var diP2 = this._di[i]["p2"];
                        var p1 = diP1.get("point");
                        var p2 = diP2.get("point");
                        if (p1 && p2) {
                            var len = Math.max(Math.abs(s - p1.x), Math.abs(s - p2.x), Math.abs(s - p1.y), Math.abs(s - p2.y), Math.abs(p1.x), Math.abs(p2.x), Math.abs(p1.y), Math.abs(p2.y));
                            var angle = $math.getAngle(p2, p1);
                            var p11 = { x: p1.x + len * $math.cos(angle), y: p1.y + len * $math.sin(angle) };
                            var p22 = { x: p2.x - len * $math.cos(angle), y: p2.y - len * $math.sin(angle) };
                            this._updateLine(line, hitLine, p11, p22, p1, p2);
                        }
                    }
                }
            }
        }
    });
    Object.defineProperty(SimpleLineSeries.prototype, "_updateLine", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (line, hitLine, p11, p22, p1, p2) {
            var segments = [[[p11, p1]], [[p2, p22]]];
            line.set("segments", segments);
            hitLine.set("segments", segments);
        }
    });
    Object.defineProperty(SimpleLineSeries.prototype, "_handlePointerClickReal", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event) {
            if (!this._isDragging) {
                if (!this._isDrawing) {
                    this._isDrawing = true;
                    this._addPoints(event, this._index);
                }
                else {
                    this._isDrawing = false;
                    this._index++;
                }
            }
        }
    });
    Object.defineProperty(SimpleLineSeries.prototype, "_handlePointerClick", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event) {
            _super.prototype._handlePointerClick.call(this, event);
            this._handlePointerClickReal(event);
        }
    });
    Object.defineProperty(SimpleLineSeries.prototype, "_handlePointerMove", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event) {
            _super.prototype._handlePointerMove.call(this, event);
            this._handlePointerMoveReal(event);
        }
    });
    Object.defineProperty(SimpleLineSeries.prototype, "_handlePointerMoveReal", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (_event) {
            if (this._isDrawing) {
                var movePoint = this._movePointerPoint;
                if (movePoint) {
                    var xAxis = this.get("xAxis");
                    var yAxis = this.get("yAxis");
                    var valueX = this._getXValue(xAxis.positionToValue(xAxis.coordinateToPosition(movePoint.x)));
                    var valueY = this._getYValue(yAxis.positionToValue(yAxis.coordinateToPosition(movePoint.y)));
                    var index = this._index;
                    var diP1 = this._di[index]["p1"];
                    var diP2 = this._di[index]["p2"];
                    if (diP1 && diP2) {
                        diP2.set("valueX", valueX);
                        diP2.set("valueY", valueY);
                        diP2.set("valueYWorking", valueY);
                        this._setXLocation(diP2, valueX);
                    }
                    this._updateSegment(index);
                }
            }
        }
    });
    Object.defineProperty(SimpleLineSeries.prototype, "_addPoints", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event, index) {
            var chart = this.chart;
            var xAxis = this.get("xAxis");
            var yAxis = this.get("yAxis");
            var point = chart.plotContainer.toLocal(event.point);
            var valueX = xAxis.positionToValue(xAxis.coordinateToPosition(point.x));
            var valueY = this._getYValue(yAxis.positionToValue(yAxis.coordinateToPosition(point.y)));
            this._di[index] = {};
            var line = this.makeLine();
            this._lines[index] = line;
            var hitLine = this.makeHitLine();
            this._hitLines[index] = hitLine;
            line.setPrivate("visible", this.get("showExtension", true));
            var stroke = this.get("strokeColor", this.get("stroke"));
            var settings = { stroke: stroke, userData: index };
            line.setAll(settings);
            hitLine.setAll(settings);
            this.data.push({ stroke: this._getStrokeTemplate() });
            this._addContextInfo(index, "e");
            this._addPoint(valueX, valueY, "p1", index);
            this._addPoint(valueX, valueY, "p2", index);
            return line;
        }
    });
    Object.defineProperty(SimpleLineSeries.prototype, "_addPoint", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (valueX, valueY, corner, index) {
            this.data.push({ valueY: valueY, valueX: valueX });
            var len = this.dataItems.length;
            var dataItem = this.dataItems[len - 1];
            if (dataItem) {
                this._addContextInfo(index, corner);
                this._di[index][corner] = dataItem;
                this.setPrivate("startIndex", 0);
                this.setPrivate("endIndex", len);
                this._setXLocation(dataItem, valueX);
            }
        }
    });
    Object.defineProperty(SimpleLineSeries.prototype, "disposeDataItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem) {
            _super.prototype.disposeDataItem.call(this, dataItem);
            var dataContext = dataItem.dataContext;
            if (dataContext) {
                var index = dataContext.index;
                var line = this._lines[index];
                if (line) {
                    this.lines.removeValue(line);
                    delete (this._lines[index]);
                    line.dispose();
                }
                var hitLine = this._hitLines[index];
                if (hitLine) {
                    this.hitLines.removeValue(hitLine);
                    delete (this._hitLines[index]);
                    hitLine.dispose();
                }
            }
        }
    });
    Object.defineProperty(SimpleLineSeries.prototype, "_updateExtentionLine", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (line) {
            var strokeOpacity = this.get("strokeOpacity");
            if (strokeOpacity != null) {
                line.set("strokeOpacity", strokeOpacity);
            }
            var strokeWidth = this.get("strokeWidth");
            if (strokeWidth != null) {
                line.set("strokeWidth", strokeWidth);
            }
            var strokeDasharray = this.get("strokeDasharray");
            if (strokeDasharray != null) {
                line.set("strokeDasharray", strokeDasharray);
            }
        }
    });
    Object.defineProperty(SimpleLineSeries, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "SimpleLineSeries"
    });
    Object.defineProperty(SimpleLineSeries, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: DrawingSeries.classNames.concat([SimpleLineSeries.className])
    });
    return SimpleLineSeries;
}(DrawingSeries));
export { SimpleLineSeries };
//# sourceMappingURL=SimpleLineSeries.js.map