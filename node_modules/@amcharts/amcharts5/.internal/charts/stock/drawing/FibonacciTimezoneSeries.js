import { __extends } from "tslib";
import { FibonacciSeries } from "./FibonacciSeries";
var FibonacciTimezoneSeries = /** @class */ (function (_super) {
    __extends(FibonacciTimezoneSeries, _super);
    function FibonacciTimezoneSeries() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_tag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "fibonaccitimezone"
        });
        return _this;
    }
    Object.defineProperty(FibonacciTimezoneSeries.prototype, "_updateSegmentReal", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (index) {
            var diP1 = this._di[index]["p1"];
            var diP2 = this._di[index]["p2"];
            var valueY1 = diP1.get("valueY", 0);
            diP2.set("valueY", valueY1);
            diP2.set("valueYWorking", valueY1);
            diP1.setRaw("locationX", 0);
            diP2.setRaw("locationX", 0);
        }
    });
    Object.defineProperty(FibonacciTimezoneSeries.prototype, "_setXLocation", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem, value) {
            this._setXLocationReal(dataItem, value);
        }
    });
    Object.defineProperty(FibonacciTimezoneSeries.prototype, "_updateChildrenReal", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var chart = this.chart;
            if (chart) {
                for (var i = 0; i < this._lines.length; i++) {
                    var line = this._lines[i];
                    if (line) {
                        var diP1 = this._di[i]["p1"];
                        var diP2 = this._di[i]["p2"];
                        var p1 = diP1.get("point");
                        var p2 = diP2.get("point");
                        var open1 = diP1["open"];
                        var open2 = diP2["open"];
                        var xAxis = this.get("xAxis");
                        if (open1 && open2) {
                            var valueX1 = open1["valueX"];
                            var valueX2 = open2["valueX"];
                            var diff = valueX2 - valueX1;
                            if (p1 && p2) {
                                var sequence = this.get("sequence", []);
                                var labels = this._labels[i];
                                var fills = this._fills[i];
                                var strokes = this._strokes[i];
                                var _loop_1 = function (i_1) {
                                    var value = sequence[i_1];
                                    var label = labels[i_1];
                                    var fill = fills[i_1];
                                    var stroke = strokes[i_1];
                                    this_1.mainContainer.children.moveValue(fill, 0);
                                    var endValue = valueX1 + diff * value;
                                    var x1 = p1.x;
                                    var x2 = xAxis.get("renderer").positionToCoordinate(xAxis.valueToPosition(endValue));
                                    var y1 = 0;
                                    var y2 = chart.plotContainer.height();
                                    fill.setPrivate("visible", true);
                                    stroke.setPrivate("visible", true);
                                    fill.set("draw", function (display) {
                                        display.moveTo(x1, y1);
                                        display.lineTo(x2, y1);
                                        display.lineTo(x2, y2);
                                        display.lineTo(x1, y2);
                                        display.lineTo(x1, y1);
                                    });
                                    stroke.set("draw", function (display) {
                                        display.moveTo(x2, y1);
                                        display.lineTo(x2, y2);
                                    });
                                    var dataItem = label.dataItem;
                                    if (dataItem) {
                                        dataItem.set("value", value);
                                    }
                                    label.setAll({ x: x2, y: y2 });
                                    label.text.markDirtyText();
                                };
                                var this_1 = this;
                                for (var i_1 = 0; i_1 < sequence.length; i_1++) {
                                    _loop_1(i_1);
                                }
                            }
                        }
                    }
                }
            }
        }
    });
    Object.defineProperty(FibonacciTimezoneSeries, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "FibonacciTimezoneSeries"
    });
    Object.defineProperty(FibonacciTimezoneSeries, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: FibonacciSeries.classNames.concat([FibonacciTimezoneSeries.className])
    });
    return FibonacciTimezoneSeries;
}(FibonacciSeries));
export { FibonacciTimezoneSeries };
//# sourceMappingURL=FibonacciTimezoneSeries.js.map