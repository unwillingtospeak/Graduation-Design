import { __extends } from "tslib";
import { DrawingSeries } from "./DrawingSeries";
import * as $array from "../../../core/util/Array";
var PolylineSeries = /** @class */ (function (_super) {
    __extends(PolylineSeries, _super);
    function PolylineSeries() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // point index in segment
        Object.defineProperty(_this, "_pIndex", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(_this, "_tag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "polyline"
        });
        return _this;
    }
    Object.defineProperty(PolylineSeries.prototype, "_handlePointerClick", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event) {
            _super.prototype._handlePointerClick.call(this, event);
            if (!this._isDragging) {
                this._isDrawing = true;
                if (this._pIndex == 0) {
                    this.data.push({ stroke: this._getStrokeTemplate() });
                    this._addContextInfo(this._index);
                }
                this._addPoint(event);
            }
        }
    });
    Object.defineProperty(PolylineSeries.prototype, "_handleBulletDragStop", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event) {
            _super.prototype._handleBulletDragStop.call(this, event);
            this._checkClosing(event);
        }
    });
    Object.defineProperty(PolylineSeries.prototype, "_addPoint", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event) {
            var chart = this.chart;
            if (chart) {
                var xAxis = this.get("xAxis");
                var yAxis = this.get("yAxis");
                var point = chart.plotContainer.toLocal(event.point);
                var valueX = this._getXValue(xAxis.positionToValue(xAxis.coordinateToPosition(point.x)));
                var valueY = this._getYValue(yAxis.positionToValue(yAxis.coordinateToPosition(point.y)));
                var dataItems = this.dataItems;
                var len = dataItems.length;
                this.data.push({ valueY: valueY, valueX: valueX });
                this.setPrivate("startIndex", 0);
                this.setPrivate("endIndex", len);
                this._addContextInfo(this._index, this._pIndex);
                var dataItem = dataItems[len];
                this._positionBullets(dataItem);
                this._setXLocation(dataItem, valueX);
                this._pIndex++;
                this._handleClosing(dataItem, point);
            }
        }
    });
    Object.defineProperty(PolylineSeries.prototype, "_checkClosing", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event) {
            var dataItem = event.target.dataItem;
            if (dataItem) {
                var sprite = event.target;
                var point = { x: sprite.x(), y: sprite.y() };
                this._handleClosing(dataItem, point);
            }
        }
    });
    Object.defineProperty(PolylineSeries.prototype, "_handleClosing", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem, point) {
            var dataContext = dataItem.dataContext;
            if (!dataContext.closing) {
                var index = dataContext.index;
                var firstDataItem = this._di[index][0];
                if (firstDataItem && firstDataItem != dataItem) {
                    var dPoint = firstDataItem.get("point");
                    if (dPoint) {
                        if (Math.hypot(point.x - dPoint.x, point.y - dPoint.y) < 5) {
                            dataContext.closing = firstDataItem;
                            this._pIndex = 0;
                            this._index++;
                            this.data.push({ stroke: this._getStrokeTemplate() });
                            this._addContextInfo(this._index, "e");
                        }
                    }
                }
            }
        }
    });
    Object.defineProperty(PolylineSeries.prototype, "_updateElements", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            $array.each(this.dataItems, function (dataItem) {
                var dataContext = dataItem.dataContext;
                if (dataContext) {
                    var closing = dataContext.closing;
                    if (closing) {
                        var valueX = closing.get("valueX", 0);
                        var valueY = closing.get("valueY");
                        dataItem.set("valueX", valueX);
                        _this._setXLocation(dataItem, valueX);
                        dataItem.set("valueY", valueY);
                        dataItem.set("valueYWorking", valueY);
                        _this._positionBullets(dataItem);
                        var bullets = dataItem.bullets;
                        if (bullets) {
                            $array.each(bullets, function (bullet) {
                                var sprite = bullet.get("sprite");
                                if (sprite) {
                                    sprite.set("forceHidden", true);
                                }
                            });
                        }
                    }
                }
            });
        }
    });
    Object.defineProperty(PolylineSeries, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "PolylineSeries"
    });
    Object.defineProperty(PolylineSeries, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: DrawingSeries.classNames.concat([PolylineSeries.className])
    });
    return PolylineSeries;
}(DrawingSeries));
export { PolylineSeries };
//# sourceMappingURL=PolylineSeries.js.map