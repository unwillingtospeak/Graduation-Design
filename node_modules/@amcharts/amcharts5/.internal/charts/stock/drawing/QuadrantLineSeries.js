import { __extends } from "tslib";
import { SimpleLineSeries } from "./SimpleLineSeries";
var QuadrantLineSeries = /** @class */ (function (_super) {
    __extends(QuadrantLineSeries, _super);
    function QuadrantLineSeries() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_tag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "quadrant"
        });
        return _this;
    }
    Object.defineProperty(QuadrantLineSeries.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._afterNew.call(this);
            this.strokes.template.set("visible", false);
        }
    });
    Object.defineProperty(QuadrantLineSeries.prototype, "_updateSegment", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (index) {
            var movePoint = this._movePointerPoint;
            var diP1 = this._di[index]["p1"];
            var diP2 = this._di[index]["p2"];
            var series = this.get("series");
            if (series && movePoint) {
                var xAxis = this.get("xAxis");
                var x1 = this._getXValue(diP1.get("valueX"));
                var x2 = this._getXValue(diP2.get("valueX"));
                var di1 = xAxis.getSeriesItem(series, Math.max(0, xAxis.valueToPosition(x1)));
                var di2 = xAxis.getSeriesItem(series, Math.min(1, xAxis.valueToPosition(x2)));
                var field = this.get("field") + "Y";
                if (di1 && di2) {
                    var y1 = di1.get(field);
                    var y2 = di2.get(field);
                    diP1.set("valueY", y1);
                    diP1.set("valueYWorking", y1);
                    diP2.set("valueY", y2);
                    diP2.set("valueYWorking", y2);
                    diP1.set("valueX", x1);
                    diP2.set("valueX", x2);
                    this._positionBullets(diP1);
                    this._positionBullets(diP2);
                }
            }
        }
    });
    Object.defineProperty(QuadrantLineSeries.prototype, "_updateChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._updateChildren.call(this);
            var chart = this.chart;
            this.fills.clear();
            if (chart) {
                var _loop_1 = function (i) {
                    var line = this_1._lines[i];
                    var diP1 = this_1._di[i]["p1"];
                    var diP2 = this_1._di[i]["p2"];
                    var fill1 = this_1.makeFill(this_1.fills);
                    var fill2 = this_1.makeFill(this_1.fills);
                    var index = this_1.dataItems.indexOf(diP1);
                    for (var j = index; j >= 0; j--) {
                        var dataContext = this_1.dataItems[j].dataContext;
                        var template = dataContext.fill;
                        if (template) {
                            fill1.template = template;
                            fill2.template = template;
                        }
                    }
                    var userData = [this_1.dataItems.indexOf(diP1), this_1.dataItems.indexOf(diP2)];
                    var settings = { userData: userData };
                    fill1.setAll(settings);
                    fill2.setAll(settings);
                    fill2.set("forceInactive", true);
                    var p1 = diP1.get("point");
                    var p2 = diP2.get("point");
                    if (p1 && p2) {
                        var dy = (p2.y - p1.y) / 4;
                        var m1y_1 = p1.y + dy;
                        var m2y_1 = p1.y + dy * 2;
                        var m3y_1 = p1.y + dy * 3;
                        line.set("draw", function (display) {
                            display.moveTo(p1.x, p1.y);
                            display.lineTo(p2.x, p1.y);
                            display.moveTo(p1.x, m1y_1);
                            display.lineTo(p2.x, m1y_1);
                            display.moveTo(p1.x, m2y_1);
                            display.lineTo(p2.x, m2y_1);
                            display.moveTo(p1.x, m3y_1);
                            display.lineTo(p2.x, m3y_1);
                            display.moveTo(p1.x, p2.y);
                            display.lineTo(p2.x, p2.y);
                        });
                        fill1.set("draw", function (display) {
                            display.moveTo(p1.x, p1.y);
                            display.lineTo(p2.x, p1.y);
                            display.lineTo(p2.x, p2.y);
                            display.lineTo(p1.x, p2.y);
                            display.lineTo(p1.x, p1.y);
                        });
                        fill2.set("draw", function (display) {
                            display.moveTo(p1.x, m1y_1);
                            display.lineTo(p2.x, m1y_1);
                            display.lineTo(p2.x, m3y_1);
                            display.lineTo(p1.x, m3y_1);
                            display.lineTo(p1.x, m1y_1);
                        });
                    }
                };
                var this_1 = this;
                for (var i = 0; i < this._lines.length; i++) {
                    _loop_1(i);
                }
            }
        }
    });
    Object.defineProperty(QuadrantLineSeries.prototype, "_drawFill", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
        }
    });
    // need to override so that location would not be set
    Object.defineProperty(QuadrantLineSeries.prototype, "_setXLocation", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
        }
    });
    Object.defineProperty(QuadrantLineSeries.prototype, "_updateLine", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
        }
    });
    Object.defineProperty(QuadrantLineSeries, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "QuadrantLineSeries"
    });
    Object.defineProperty(QuadrantLineSeries, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: SimpleLineSeries.classNames.concat([QuadrantLineSeries.className])
    });
    return QuadrantLineSeries;
}(SimpleLineSeries));
export { QuadrantLineSeries };
//# sourceMappingURL=QuadrantLineSeries.js.map