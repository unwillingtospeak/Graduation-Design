import { __extends } from "tslib";
import { PolylineSeries } from "./PolylineSeries";
import { Label } from "../../../core/render/Label";
import { RoundedRectangle } from "../../../core/render/RoundedRectangle";
import { SpriteResizer } from "./SpriteResizer";
import { color } from "../../../core/util/Color";
import * as $utils from "../../../core/util/Utils";
var LabelSeries = /** @class */ (function (_super) {
    __extends(LabelSeries, _super);
    function LabelSeries() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "spriteResizer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this.children.push(SpriteResizer.new(_this._root, {}))
        });
        Object.defineProperty(_this, "_clickEvent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_tag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "label"
        });
        return _this;
    }
    Object.defineProperty(LabelSeries.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype._afterNew.call(this);
            this.strokes.template.set("visible", false);
            this.fills.template.set("visible", false);
            this.addTag(this._tag);
            var div = document.createElement("div");
            //div.style.width = "300px";
            div.style.position = "absolute";
            div.style.display = "none";
            div.className = "am5stock-drawing-label-wrapper";
            this._root._inner.appendChild(div);
            this.setPrivate("inputContainer", div);
            var textArea = document.createElement("textarea");
            ;
            //textArea.style.textAlign = "center";
            //textArea.rows = 2;
            textArea.className = "am5stock-drawing-label-input";
            $utils.addEventListener(textArea, "input", function () {
                textArea.style.height = "auto";
                textArea.style.height = textArea.scrollHeight + "px";
            }, false);
            div.appendChild(textArea);
            div.appendChild(document.createElement("br"));
            this.setPrivate("input", textArea);
            var saveButton = document.createElement("input");
            saveButton.type = "button";
            saveButton.value = this._root.language.translateAny("Save");
            saveButton.className = "am5-modal-button am5-modal-primary";
            $utils.addEventListener(saveButton, "click", function () {
                _this.saveText();
            });
            div.appendChild(saveButton);
            var cancelButton = document.createElement("input");
            cancelButton.type = "button";
            cancelButton.value = this._root.language.translateAny("Cancel");
            cancelButton.className = "am5-modal-button am5-modal-scondary";
            $utils.addEventListener(cancelButton, "click", function () {
                _this.getPrivate("inputContainer").style.display = "none";
                _this.getPrivate("input").value = "";
            });
            div.appendChild(cancelButton);
        }
    });
    Object.defineProperty(LabelSeries.prototype, "_tweakBullet", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (container) {
            var _this = this;
            var label = container.children.push(Label.new(this._root, {
                themeTags: ["label"],
                text: this.getPrivate("input").value
            }));
            this.setPrivate("label", label);
            var fontSize = this.get("labelFontSize");
            if (fontSize != null) {
                label.set("fontSize", fontSize);
            }
            var fontFamily = this.get("labelFontFamily");
            if (fontFamily != null) {
                label.set("fontFamily", fontFamily);
            }
            var fontStyle = this.get("labelFontStyle");
            if (fontStyle != null) {
                label.set("fontStyle", fontStyle);
            }
            var fontWeight = this.get("labelFontWeight");
            if (fontWeight != null) {
                label.set("fontWeight", fontWeight);
            }
            container.events.on("click", function () {
                _this.spriteResizer.set("sprite", label);
            });
            container.events.on("pointerover", function () {
                _this._isHover = true;
            });
            container.events.on("pointerout", function () {
                _this._isHover = false;
            });
            this._tweakBullet2(label);
        }
    });
    Object.defineProperty(LabelSeries.prototype, "_tweakBullet2", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (label) {
            label.set("background", RoundedRectangle.new(this._root, { fillOpacity: 0, strokeOpacity: 0, fill: color(0xffffff) }));
            label.set("fill", this.get("labelFill", this.get("fillColor", this.get("fill"))));
        }
    });
    Object.defineProperty(LabelSeries.prototype, "_handlePointerClick", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event) {
            if (!this._isHover) {
                var input = this.getPrivate("input");
                input.value = "";
                this._clickEvent = event;
                //console.log(event);
                var inputDiv = this.getPrivate("inputContainer");
                inputDiv.style.display = "block";
                inputDiv.style.left = (event.point.x) + "px";
                inputDiv.style.top = (event.point.y) + "px";
                input.focus();
                this.spriteResizer.set("sprite", undefined);
                this._index++;
                this._di[this._index] = {};
            }
        }
    });
    Object.defineProperty(LabelSeries.prototype, "saveText", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var clickEvent = this._clickEvent;
            if (clickEvent) {
                if (this.getPrivate("input").value) {
                    _super.prototype._handlePointerClick.call(this, clickEvent);
                }
                this.getPrivate("inputContainer").style.display = "none";
            }
        }
    });
    Object.defineProperty(LabelSeries.prototype, "disposeDataItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem) {
            _super.prototype.disposeDataItem.call(this, dataItem);
            this.spriteResizer.set("sprite", undefined);
            this._isHover = false;
        }
    });
    Object.defineProperty(LabelSeries.prototype, "_hideAllBullets", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
        }
    });
    Object.defineProperty(LabelSeries, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "LabelSeries"
    });
    Object.defineProperty(LabelSeries, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: PolylineSeries.classNames.concat([LabelSeries.className])
    });
    return LabelSeries;
}(PolylineSeries));
export { LabelSeries };
//# sourceMappingURL=LabelSeries.js.map