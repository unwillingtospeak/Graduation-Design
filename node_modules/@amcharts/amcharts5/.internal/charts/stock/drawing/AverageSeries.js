import { __extends, __read } from "tslib";
import { SimpleLineSeries } from "./SimpleLineSeries";
import * as $math from "../../../core/util/Math";
var AverageSeries = /** @class */ (function (_super) {
    __extends(AverageSeries, _super);
    function AverageSeries() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_tag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "average"
        });
        return _this;
    }
    Object.defineProperty(AverageSeries.prototype, "_updateSegment", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (index) {
            var _a;
            var diP1 = this._di[index]["p1"];
            var diP2 = this._di[index]["p2"];
            var series = this.get("series");
            if (series) {
                var xAxis = this.get("xAxis");
                var min = xAxis.getPrivate("min", 0) + 1;
                var max = xAxis.getPrivate("max", 1) - 1;
                var x1 = $math.fitToRange(diP1.get("valueX"), min, max);
                var x2 = $math.fitToRange(diP2.get("valueX"), min, max);
                var di1 = xAxis.getSeriesItem(series, Math.max(0, xAxis.valueToPosition(x1)));
                var di2 = xAxis.getSeriesItem(series, Math.min(1, xAxis.valueToPosition(x2)));
                var field = this.get("field") + "Y";
                if (di1 && di2) {
                    var i1 = series.dataItems.indexOf(di1);
                    var i2 = series.dataItems.indexOf(di2);
                    if (i1 > i2) {
                        _a = __read([i2, i1], 2), i1 = _a[0], i2 = _a[1];
                    }
                    var sum = 0;
                    var count = 0;
                    for (var i = i1; i <= i2; i++) {
                        var di = series.dataItems[i];
                        var value = di.get(field);
                        if (value != null) {
                            sum += value;
                            count++;
                        }
                    }
                    var average = sum / count;
                    diP1.set("valueX", x1);
                    diP2.set("valueX", x2);
                    diP1.set("valueY", average);
                    diP1.set("valueYWorking", average);
                    diP2.set("valueY", average);
                    diP2.set("valueYWorking", average);
                    this._positionBullets(diP1);
                    this._positionBullets(diP2);
                }
            }
        }
    });
    // need to override so that location would not be set
    Object.defineProperty(AverageSeries.prototype, "_setXLocation", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
        }
    });
    Object.defineProperty(AverageSeries, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "AverageSeries"
    });
    Object.defineProperty(AverageSeries, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: SimpleLineSeries.classNames.concat([AverageSeries.className])
    });
    return AverageSeries;
}(SimpleLineSeries));
export { AverageSeries };
//# sourceMappingURL=AverageSeries.js.map