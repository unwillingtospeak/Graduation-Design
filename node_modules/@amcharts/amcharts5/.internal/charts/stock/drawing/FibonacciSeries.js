import { __extends } from "tslib";
import { SimpleLineSeries } from "./SimpleLineSeries";
import { Label } from "../../../core/render/Label";
import { ListTemplate } from "../../../core/util/List";
import { Template } from "../../../core/util/Template";
import * as $array from "../../../core/util/Array";
var FibonacciSeries = /** @class */ (function (_super) {
    __extends(FibonacciSeries, _super);
    function FibonacciSeries() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_tag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "fibonacci"
        });
        Object.defineProperty(_this, "_labels", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(_this, "_fills", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(_this, "_strokes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        /**
         * A list of labels.
         *
         * `labels.template` can be used to configure axis labels.
         *
         * @default new ListTemplate<Label>
         */
        Object.defineProperty(_this, "labels", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new ListTemplate(Template.new({}), function () { return Label._new(_this._root, {}, [_this.labels.template]); })
        });
        return _this;
    }
    /**
     * @ignore
     */
    Object.defineProperty(FibonacciSeries.prototype, "makeLabel", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var label = this.labels.make();
            this.mainContainer.children.push(label);
            this.labels.push(label);
            return label;
        }
    });
    Object.defineProperty(FibonacciSeries.prototype, "_updateSegment", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (index) {
            _super.prototype._updateSegment.call(this, index);
            this._updateSegmentReal(index);
        }
    });
    Object.defineProperty(FibonacciSeries.prototype, "_updateSegmentReal", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (index) {
            var diP1 = this._di[index]["p1"];
            var diP2 = this._di[index]["p2"];
            var valueX = diP1.get("valueX", 0);
            diP2.set("valueX", valueX);
            this._setXLocation(diP2, valueX);
        }
    });
    Object.defineProperty(FibonacciSeries.prototype, "_updateChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._updateChildren.call(this);
            this._updateChildrenReal();
        }
    });
    Object.defineProperty(FibonacciSeries.prototype, "_updateChildrenReal", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var chart = this.chart;
            if (chart) {
                var yAxis = this.get("yAxis");
                var _loop_1 = function (i) {
                    var line = this_1._lines[i];
                    if (line) {
                        var diP1 = this_1._di[i]["p1"];
                        var diP2 = this_1._di[i]["p2"];
                        var p1_1 = diP1.get("point");
                        var p2_1 = diP2.get("point");
                        var valueX = diP1.get("valueX", 0);
                        diP2.set("valueX", valueX);
                        this_1._setXLocation(diP2, valueX);
                        if (p1_1 && p2_1) {
                            p2_1.x = chart.plotContainer.width();
                            var sequence = this_1.get("sequence", []);
                            var colors = this_1.get("colors", []);
                            var prevValue = 0;
                            var labels = this_1._labels[i];
                            var strokes = this_1._strokes[i];
                            var fills = this_1._fills[i];
                            var _loop_2 = function (i_1) {
                                var value = sequence[i_1];
                                var color = colors[i_1];
                                var label = labels[i_1];
                                var fill = fills[i_1];
                                var stroke = strokes[i_1];
                                var y1 = p1_1.y + (p2_1.y - p1_1.y) * prevValue;
                                var y2 = p1_1.y + (p2_1.y - p1_1.y) * value;
                                var realValue = yAxis.positionToValue(yAxis.coordinateToPosition(y2));
                                fill.setPrivate("visible", true);
                                stroke.setPrivate("visible", true);
                                fill.set("draw", function (display) {
                                    display.moveTo(p1_1.x, y1);
                                    display.lineTo(p2_1.x, y1);
                                    display.lineTo(p2_1.x, y2);
                                    display.lineTo(p1_1.x, y2);
                                    display.lineTo(p1_1.x, y1);
                                });
                                stroke.set("draw", function (display) {
                                    display.moveTo(p1_1.x, y2);
                                    display.lineTo(p2_1.x, y2);
                                });
                                var dataItem = label.dataItem;
                                if (dataItem) {
                                    dataItem.set("value", realValue);
                                }
                                label.setAll({ x: p2_1.x, y: y2, fill: color });
                                label.text.markDirtyText();
                                prevValue = value;
                            };
                            for (var i_1 = 0; i_1 < sequence.length; i_1++) {
                                _loop_2(i_1);
                            }
                        }
                    }
                };
                var this_1 = this;
                for (var i = 0; i < this._lines.length; i++) {
                    _loop_1(i);
                }
            }
        }
    });
    Object.defineProperty(FibonacciSeries.prototype, "_addPoints", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event, index) {
            var line = _super.prototype._addPoints.call(this, event, index);
            var labelArr = [];
            var fillsArr = [];
            var strokesArr = [];
            var diP1 = this._di[index]["p1"];
            var diP2 = this._di[index]["p2"];
            var userData = [this.dataItems.indexOf(diP1), this.dataItems.indexOf(diP2)];
            var sequence = this.get("sequence", []);
            var colors = this.get("colors", []);
            for (var i = 0; i < sequence.length; i++) {
                var label = this.makeLabel();
                var dataItem = this.makeDataItem({});
                dataItem.set("sequence", sequence[i]);
                label._setDataItem(dataItem);
                labelArr.push(label);
                var fill = this.makeFill(this.fills);
                fillsArr.push(fill);
                var stroke = this.makeStroke(this.strokes);
                strokesArr.push(stroke);
                var fillColor = colors[i];
                var strokeColor = colors[i];
                if (!fillColor) {
                    fillColor = this.get("fillColor", this.get("fill"));
                }
                if (!strokeColor) {
                    strokeColor = this.get("strokeColor", this.get("stroke"));
                }
                fill.setAll({ fill: fillColor, userData: userData });
                stroke.setAll({ stroke: strokeColor, userData: userData });
            }
            this._labels[index] = labelArr;
            this._fills[index] = fillsArr;
            this._strokes[index] = strokesArr;
            return line;
        }
    });
    Object.defineProperty(FibonacciSeries.prototype, "_drawFill", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
        }
    });
    Object.defineProperty(FibonacciSeries.prototype, "_drawStroke", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
        }
    });
    Object.defineProperty(FibonacciSeries.prototype, "_updateLine", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
        }
    });
    Object.defineProperty(FibonacciSeries.prototype, "_clearGraphics", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
        }
    });
    Object.defineProperty(FibonacciSeries.prototype, "disposeDataItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem) {
            var _this = this;
            _super.prototype.disposeDataItem.call(this, dataItem);
            var dataContext = dataItem.dataContext;
            if (dataContext) {
                var index = dataContext.index;
                var labels = this._labels[index];
                var fills = this._fills[index];
                var strokes = this._strokes[index];
                if (labels) {
                    $array.each(labels, function (item) {
                        item.dispose();
                        _this.labels.removeValue(item);
                    });
                    delete (this._labels[index]);
                }
                if (fills) {
                    $array.each(fills, function (item) {
                        _this.fills.removeValue(item);
                        item.dispose();
                    });
                    delete (this._fills[index]);
                }
                if (strokes) {
                    $array.each(strokes, function (item) {
                        _this.strokes.removeValue(item);
                        item.dispose();
                    });
                    delete (this._strokes[index]);
                }
            }
        }
    });
    Object.defineProperty(FibonacciSeries, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "FibonacciSeries"
    });
    Object.defineProperty(FibonacciSeries, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: SimpleLineSeries.classNames.concat([FibonacciSeries.className])
    });
    return FibonacciSeries;
}(SimpleLineSeries));
export { FibonacciSeries };
//# sourceMappingURL=FibonacciSeries.js.map