import { __extends } from "tslib";
import { PolylineSeries } from "./PolylineSeries";
import { Bullet } from "../../../core/render/Bullet";
import { Graphics } from "../../../core/render/Graphics";
import { SpriteResizer } from "./SpriteResizer";
var IconSeries = /** @class */ (function (_super) {
    __extends(IconSeries, _super);
    function IconSeries() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "spriteResizer", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: _this.children.push(SpriteResizer.new(_this._root, {}))
        });
        Object.defineProperty(_this, "_tag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "icon"
        });
        return _this;
    }
    Object.defineProperty(IconSeries.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype._afterNew.call(this);
            this.bullets.clear();
            this.strokes.template.set("visible", false);
            this.fills.template.set("visible", false);
            this.bullets.push(function () {
                var color = _this.get("fillColor", _this.get("fill"));
                var strokeColor = _this.get("strokeColor", _this.get("stroke"));
                var sprite = Graphics.new(_this._root, {
                    draggable: true,
                    svgPath: _this.get("iconSvgPath"),
                    scale: _this.get("iconScale", 1),
                    themeTags: ["icon"],
                    fill: color,
                    stroke: strokeColor,
                    fillOpacity: _this.get("fillOpacity", 1),
                    strokeOpacity: _this.get("strokeOpacity", 1)
                });
                var iconCenterX = _this.get("iconCenterX");
                if (iconCenterX != null) {
                    sprite.set("centerX", iconCenterX);
                }
                var iconCenterY = _this.get("iconCenterY");
                if (iconCenterY != null) {
                    sprite.set("centerY", iconCenterY);
                }
                _this._addBulletInteraction(sprite);
                sprite.events.on("click", function () {
                    _this.spriteResizer.set("sprite", sprite);
                });
                sprite.events.on("pointerover", function () {
                    _this._isHover = true;
                });
                sprite.events.on("pointerout", function () {
                    _this._isHover = false;
                });
                _this.spriteResizer.set("sprite", undefined);
                return Bullet.new(_this._root, {
                    locationX: undefined,
                    sprite: sprite
                });
            });
        }
    });
    Object.defineProperty(IconSeries.prototype, "_handlePointerClick", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event) {
            if (!this._isHover) {
                _super.prototype._handlePointerClick.call(this, event);
                this._index++;
                this._di[this._index] = {};
            }
        }
    });
    Object.defineProperty(IconSeries.prototype, "disposeDataItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem) {
            _super.prototype.disposeDataItem.call(this, dataItem);
            this.spriteResizer.set("sprite", undefined);
            this._isHover = false;
        }
    });
    Object.defineProperty(IconSeries.prototype, "_hideAllBullets", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
        }
    });
    Object.defineProperty(IconSeries.prototype, "_setXLocation", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem, value) {
            if (!this.get("snapToData")) {
                this._setXLocationReal(dataItem, value);
            }
        }
    });
    Object.defineProperty(IconSeries, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "IconSeries"
    });
    Object.defineProperty(IconSeries, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: PolylineSeries.classNames.concat([IconSeries.className])
    });
    return IconSeries;
}(PolylineSeries));
export { IconSeries };
//# sourceMappingURL=IconSeries.js.map