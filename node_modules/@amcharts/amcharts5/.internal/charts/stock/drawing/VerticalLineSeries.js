import { __extends } from "tslib";
import { SimpleLineSeries } from "./SimpleLineSeries";
var VerticalLineSeries = /** @class */ (function (_super) {
    __extends(VerticalLineSeries, _super);
    function VerticalLineSeries() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_tag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "vertical"
        });
        return _this;
    }
    Object.defineProperty(VerticalLineSeries.prototype, "_handleBulletDragged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event) {
            _super.prototype._handleBulletDragged.call(this, event);
            var dataItem = event.target.dataItem;
            var dataContext = dataItem.dataContext;
            if (dataContext) {
                var index = dataContext.index;
                var diP1 = this._di[index]["p1"];
                var diP2 = this._di[index]["p2"];
                var movePoint = this._movePointerPoint;
                if (diP1 && diP2 && movePoint) {
                    var yAxis = this.get("yAxis");
                    var xAxis = this.get("xAxis");
                    var valueY = this._getYValue(yAxis.positionToValue(yAxis.coordinateToPosition(movePoint.y)));
                    var valueX = this._getXValue(xAxis.positionToValue(xAxis.coordinateToPosition(movePoint.x)));
                    diP1.set("valueY", valueY);
                    diP1.set("valueYWorking", valueY);
                    diP2.set("valueY", valueY + 0.001);
                    diP2.set("valueYWorking", valueY + 0.001);
                    diP1.set("valueX", valueX);
                    diP2.set("valueX", valueX);
                    this._setXLocation(diP1, valueX);
                    this._setXLocation(diP2, valueX);
                    this._positionBullets(diP1);
                    this._positionBullets(diP2);
                }
            }
        }
    });
    Object.defineProperty(VerticalLineSeries.prototype, "_handlePointerMoveReal", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
        }
    });
    Object.defineProperty(VerticalLineSeries.prototype, "_handlePointerClickReal", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event) {
            if (!this._isDragging) {
                this._addPoints(event, this._index);
                this._index++;
                this._isDrawing = false;
            }
        }
    });
    Object.defineProperty(VerticalLineSeries.prototype, "_addPoints", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event, index) {
            var line = _super.prototype._addPoints.call(this, event, index);
            this._updateExtentionLine(line);
            var diP2 = this._di[index]["p2"];
            var value = diP2.get("valueY", 0) + 0.001;
            diP2.set("valueY", value);
            diP2.set("valueYWorking", value);
            return line;
        }
    });
    Object.defineProperty(VerticalLineSeries, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "VerticalLineSeries"
    });
    Object.defineProperty(VerticalLineSeries, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: SimpleLineSeries.classNames.concat([VerticalLineSeries.className])
    });
    return VerticalLineSeries;
}(SimpleLineSeries));
export { VerticalLineSeries };
//# sourceMappingURL=VerticalLineSeries.js.map