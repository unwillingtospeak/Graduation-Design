import { __extends } from "tslib";
import { DrawingSeries } from "./DrawingSeries";
import { Ellipse } from "../../../core/render/Ellipse";
import { ListTemplate } from "../../../core/util/List";
import { Template } from "../../../core/util/Template";
import * as $array from "../../../core/util/Array";
var EllipseSeries = /** @class */ (function (_super) {
    __extends(EllipseSeries, _super);
    function EllipseSeries() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_ellipses", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        Object.defineProperty(_this, "_tag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "ellipse"
        });
        Object.defineProperty(_this, "_clickPX", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(_this, "_clickVY", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(_this, "ellipses", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new ListTemplate(Template.new({ radiusX: 0, radiusY: 0 }), function () { return Ellipse._new(_this._root, { radiusX: 0, radiusY: 0 }, [_this.ellipses.template]); })
        });
        return _this;
    }
    /**
     * @ignore
     */
    Object.defineProperty(EllipseSeries.prototype, "makeEllipse", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var ellipse = this.ellipses.make();
            this.mainContainer.children.push(ellipse);
            this.ellipses.push(ellipse);
            return ellipse;
        }
    });
    Object.defineProperty(EllipseSeries.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype._afterNew.call(this);
            this.strokes.template.set("visible", false);
            this.fills.template.set("visible", false);
            var ellipseTemplate = this.ellipses.template;
            ellipseTemplate.events.on("pointerover", function (e) {
                _this._showSegmentBullets(e.target.get("userData"));
            });
            ellipseTemplate.events.on("pointerout", function () {
                _this._hideAllBullets();
            });
            ellipseTemplate.events.on("dragstart", function (e) {
                _this._handleFillDragStart(e, e.target.get("userData"));
            });
            ellipseTemplate.events.on("dragstop", function (e) {
                _this._handleFillDragStop(e, e.target.get("userData"));
            });
            ellipseTemplate.events.on("click", function (e) {
                if (_this._erasingEnabled) {
                    _this._disposeIndex(e.target.get("userData"));
                }
            });
        }
    });
    Object.defineProperty(EllipseSeries.prototype, "_handleFillDragStop", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event, index) {
            _super.prototype._handleFillDragStop.call(this, event, index);
            var items = this._di[index];
            var bDI = items["b"];
            var tDI = items["t"];
            var rDI = items["r"];
            var lDI = items["l"];
            var xAxis = this.get("xAxis");
            if (bDI && tDI && rDI && lDI) {
                var positionL = xAxis.valueToPosition(lDI.get("valueX", 0));
                var positionR = xAxis.valueToPosition(rDI.get("valueX", 0));
                var mx = this._getXValue(xAxis.positionToValue(positionL + (positionR - positionL) / 2));
                tDI.set("valueX", mx);
                bDI.set("valueX", mx);
                this._setXLocation(tDI, mx);
                this._setXLocation(bDI, mx);
            }
        }
    });
    Object.defineProperty(EllipseSeries.prototype, "_handleBulletDragged", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event) {
            var dataItem = event.target.dataItem;
            var valueXReal = dataItem.get("valueX");
            var locationXReal = dataItem.get("locationX");
            var valueYReal = dataItem.get("valueY");
            _super.prototype._handleBulletDragged.call(this, event);
            var movePoint = this._movePointerPoint;
            if (dataItem && movePoint) {
                var dataContext = dataItem.dataContext;
                var index = dataContext.index;
                var corner = dataContext.corner;
                var xAxis = this.get("xAxis");
                var yAxis = this.get("yAxis");
                var valueX = this._getXValue(xAxis.positionToValue(xAxis.coordinateToPosition(movePoint.x)));
                var valueY = this._getYValue(yAxis.positionToValue(yAxis.coordinateToPosition(movePoint.y)));
                var vx = "valueX";
                var vy = "valueY";
                var vwy = "valueYWorking";
                var items = this._di[index];
                var bDI = items["b"];
                var tDI = items["t"];
                var rDI = items["r"];
                var lDI = items["l"];
                if (bDI && tDI && rDI && lDI) {
                    if (corner == "b") {
                        var valueY0 = tDI.get(vwy, 0);
                        bDI.set(vy, valueY);
                        bDI.set(vwy, valueY);
                        var my = valueY0 + (valueY - valueY0) / 2;
                        rDI.set(vy, my);
                        rDI.set(vwy, my);
                        lDI.set(vy, my);
                        lDI.set(vwy, my);
                        bDI.set(vx, valueXReal);
                        bDI.set("locationX", locationXReal);
                    }
                    if (corner == "t") {
                        var valueY0 = bDI.get(vwy, 0);
                        tDI.set(vy, valueY);
                        tDI.set(vwy, valueY);
                        var my = valueY0 + (valueY - valueY0) / 2;
                        rDI.set(vy, my);
                        rDI.set(vwy, my);
                        lDI.set(vy, my);
                        lDI.set(vwy, my);
                        tDI.set(vx, valueXReal);
                        tDI.set("locationX", locationXReal);
                    }
                    if (corner == "l") {
                        var valueX0 = rDI.get(vx, 0);
                        var positionX0 = xAxis.valueToPosition(valueX0);
                        var positionX = xAxis.valueToPosition(valueX);
                        lDI.set(vx, valueX);
                        this._setXLocation(lDI, valueX);
                        var mpos = positionX0 + (positionX - positionX0) / 2;
                        var mx = this._getXValue(xAxis.positionToValue(mpos));
                        tDI.set(vx, mx);
                        bDI.set(vx, mx);
                        this._setXLocation(tDI, mx);
                        this._setXLocation(bDI, mx);
                        lDI.set(vwy, valueYReal);
                        lDI.set(vy, valueYReal);
                    }
                    if (corner == "r") {
                        var valueX0 = lDI.get(vx, 0);
                        var positionX0 = xAxis.valueToPosition(valueX0);
                        var positionX = xAxis.valueToPosition(valueX);
                        rDI.set(vx, valueX);
                        this._setXLocation(rDI, valueX);
                        var mpos = positionX0 + (positionX - positionX0) / 2;
                        var mx = this._getXValue(xAxis.positionToValue(mpos));
                        tDI.set(vx, mx);
                        bDI.set(vx, mx);
                        this._setXLocation(tDI, mx);
                        this._setXLocation(bDI, mx);
                        rDI.set(vwy, valueYReal);
                        rDI.set(vy, valueYReal);
                    }
                }
                this._positionBullets(dataItem);
            }
        }
    });
    Object.defineProperty(EllipseSeries.prototype, "_handlePointerClick", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event) {
            _super.prototype._handlePointerClick.call(this, event);
            if (!this._isDragging) {
                if (!this._isDrawing) {
                    this._isDrawing = true;
                    this.bulletsContainer.show();
                    this._addPoints(event, this._index);
                }
                else {
                    this._isDrawing = false;
                    this._index++;
                }
            }
        }
    });
    Object.defineProperty(EllipseSeries.prototype, "_handlePointerMove", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event) {
            _super.prototype._handlePointerMove.call(this, event);
            if (this._isDrawing) {
                var movePoint = this._movePointerPoint;
                if (movePoint) {
                    var xAxis = this.get("xAxis");
                    var yAxis = this.get("yAxis");
                    var index = this._index;
                    var diT = this._di[index]["t"];
                    var diB = this._di[index]["b"];
                    var diL = this._di[index]["l"];
                    var diR = this._di[index]["r"];
                    var valueY0 = this._clickVY;
                    var positionX = xAxis.coordinateToPosition(movePoint.x);
                    var positionX0 = this._clickPX;
                    var valueX = this._getXValue(xAxis.positionToValue(positionX));
                    var valueY = this._getYValue(yAxis.positionToValue(yAxis.coordinateToPosition(movePoint.y)));
                    if (diB && diL && diR && diT) {
                        diB.set("valueY", valueY);
                        diB.set("valueYWorking", valueY);
                        var my = valueY0 + (valueY - valueY0) / 2;
                        var mx = this._getXValue(xAxis.positionToValue(positionX0 + (positionX - positionX0) / 2));
                        diR.set("valueY", my);
                        diR.set("valueYWorking", my);
                        diL.set("valueY", my);
                        diL.set("valueYWorking", my);
                        diB.set("valueX", mx);
                        diT.set("valueX", mx);
                        this._setXLocation(diB, mx);
                        this._setXLocation(diT, mx);
                        diR.set("valueX", valueX);
                        this._setXLocation(diR, valueX);
                    }
                }
            }
        }
    });
    Object.defineProperty(EllipseSeries.prototype, "_addPoints", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event, index) {
            var chart = this.chart;
            if (chart) {
                var xAxis = this.get("xAxis");
                var yAxis = this.get("yAxis");
                var point = chart.plotContainer.toLocal(event.point);
                this._clickPX = xAxis.coordinateToPosition(point.x);
                var valueX = xAxis.positionToValue(this._clickPX);
                var valueY = this._getYValue(yAxis.positionToValue(yAxis.coordinateToPosition(point.y)));
                this._clickVY = valueY;
                this._di[index] = {};
                this._addPoint(valueX, valueY, "l", index);
                this._addPoint(valueX, valueY, "t", index);
                this._addPoint(valueX, valueY, "b", index);
                this._addPoint(valueX, valueY, "r", index);
                var color = this.get("fillColor", this.get("fill"));
                var strokeColor = this.get("strokeColor", this.get("stroke"));
                var ellipse = this.makeEllipse();
                this._ellipses[index] = ellipse;
                ellipse.setAll({ userData: index, fill: color, stroke: strokeColor });
            }
        }
    });
    Object.defineProperty(EllipseSeries.prototype, "_addPoint", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (valueX, valueY, corner, index) {
            this.data.push({ valueY: valueY, valueX: valueX });
            var len = this.dataItems.length;
            var dataItem = this.dataItems[len - 1];
            if (dataItem) {
                this._setXLocation(dataItem, valueX);
                this._addContextInfo(index, corner);
                this._di[index][corner] = dataItem;
                this.setPrivate("startIndex", 0);
                this.setPrivate("endIndex", len);
            }
        }
    });
    Object.defineProperty(EllipseSeries.prototype, "_updateChildren", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            var _this = this;
            _super.prototype._updateChildren.call(this);
            var index = 0;
            $array.each(this._di, function (dataItems) {
                var diT = dataItems["t"];
                var diB = dataItems["b"];
                var diL = dataItems["l"];
                var diR = dataItems["r"];
                if (diT && diB && diL && diR) {
                    var pt = diT.get("point");
                    var pb = diB.get("point");
                    var pr = diR.get("point");
                    var pl = diL.get("point");
                    if (pt && pb && pr && pl) {
                        var rx = (pr.x - pl.x) / 2;
                        var ry = (pb.y - pt.y) / 2;
                        var x = pl.x + rx;
                        var y = pt.y + ry;
                        var ellipse = _this._ellipses[index];
                        if (ellipse) {
                            ellipse.setAll({ x: x, y: y, radiusX: rx, radiusY: ry });
                        }
                    }
                }
                index++;
            });
        }
    });
    Object.defineProperty(EllipseSeries.prototype, "disposeDataItem", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (dataItem) {
            _super.prototype.disposeDataItem.call(this, dataItem);
            var dataContext = dataItem.dataContext;
            if (dataContext) {
                var index = dataContext.index;
                var ellipse = this._ellipses[index];
                if (ellipse) {
                    delete (this._ellipses[index]);
                    this.ellipses.removeValue(ellipse);
                    ellipse.dispose();
                }
            }
        }
    });
    Object.defineProperty(EllipseSeries, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "EllipseSeries"
    });
    Object.defineProperty(EllipseSeries, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: DrawingSeries.classNames.concat([EllipseSeries.className])
    });
    return EllipseSeries;
}(DrawingSeries));
export { EllipseSeries };
//# sourceMappingURL=EllipseSeries.js.map