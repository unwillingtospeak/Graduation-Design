import { __extends } from "tslib";
import { DrawingSeries } from "./DrawingSeries";
var DoodleSeries = /** @class */ (function (_super) {
    __extends(DoodleSeries, _super);
    function DoodleSeries() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_panX", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(_this, "_panY", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        // point index in segment
        Object.defineProperty(_this, "_pIndex", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 0
        });
        Object.defineProperty(_this, "_tag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "doodle"
        });
        return _this;
    }
    Object.defineProperty(DoodleSeries.prototype, "_afterNew", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
            _super.prototype._afterNew.call(this);
            this.addTag("doodle");
            this.bullets.clear();
        }
    });
    Object.defineProperty(DoodleSeries.prototype, "_handlePointerMove", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event) {
            _super.prototype._handlePointerMove.call(this, event);
            if (this._drawingEnabled && this._isPointerDown) {
                this._handleBulletPosition(event);
            }
        }
    });
    Object.defineProperty(DoodleSeries.prototype, "_handleBulletPosition", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event) {
            var chart = this.chart;
            if (chart) {
                var xAxis = this.get("xAxis");
                var yAxis = this.get("yAxis");
                var point = chart.plotContainer.toLocal(event.point);
                var valueX = this._getXValue(xAxis.positionToValue(xAxis.coordinateToPosition(point.x)));
                var valueY = this._getYValue(yAxis.positionToValue(yAxis.coordinateToPosition(point.y)));
                this.data.push({ valueY: valueY, valueX: valueX });
                var len = this.dataItems.length;
                var dataItem = this.dataItems[len - 1];
                var index = this._index;
                if (dataItem) {
                    this._setXLocation(dataItem, valueX);
                    this._addContextInfo(index);
                }
                var segmentItems = this._di[index];
                if (!segmentItems) {
                    segmentItems = {};
                }
                segmentItems[this._pIndex] = dataItem;
                this._di[index] = segmentItems;
                this._pIndex++;
                this.setPrivate("startIndex", 0);
                this.setPrivate("endIndex", len);
            }
        }
    });
    Object.defineProperty(DoodleSeries.prototype, "_handleFillDragStart", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (e, index) {
            if (!this._drawingEnabled) {
                _super.prototype._handleFillDragStart.call(this, e, index);
            }
        }
    });
    Object.defineProperty(DoodleSeries.prototype, "_handlePointerDown", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event) {
            _super.prototype._handlePointerDown.call(this, event);
            var chart = this.chart;
            if (chart) {
                this._pIndex = 0;
                this._panX = chart.get("panX");
                this._panY = chart.get("panY");
                chart.set("panX", false);
                chart.set("panY", false);
                var cursor = chart.get("cursor");
                if (cursor) {
                    cursor.setPrivate("visible", false);
                }
                this.data.push({ stroke: this._getStrokeTemplate() });
                this._addContextInfo(this._index);
            }
        }
    });
    Object.defineProperty(DoodleSeries.prototype, "_handlePointerUp", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (event) {
            var _this = this;
            _super.prototype._handlePointerUp.call(this, event);
            var chart = this.chart;
            if (chart) {
                this.setTimeout(function () {
                    chart.set("panX", _this._panX);
                    chart.set("panY", _this._panY);
                    var cursor = chart.get("cursor");
                    if (cursor) {
                        cursor.setPrivate("visible", true);
                    }
                }, 100);
                this._index++;
            }
        }
    });
    Object.defineProperty(DoodleSeries, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "DoodleSeries"
    });
    Object.defineProperty(DoodleSeries, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: DrawingSeries.classNames.concat([DoodleSeries.className])
    });
    return DoodleSeries;
}(DrawingSeries));
export { DoodleSeries };
//# sourceMappingURL=DoodleSeries.js.map