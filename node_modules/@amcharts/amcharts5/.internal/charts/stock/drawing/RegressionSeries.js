import { __extends, __read } from "tslib";
import { SimpleLineSeries } from "./SimpleLineSeries";
import regression from "regression";
var RegressionSeries = /** @class */ (function (_super) {
    __extends(RegressionSeries, _super);
    function RegressionSeries() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        Object.defineProperty(_this, "_tag", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "regression"
        });
        return _this;
    }
    Object.defineProperty(RegressionSeries.prototype, "_updateSegment", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (index) {
            var _a, _b;
            var diP1 = this._di[index]["p1"];
            var diP2 = this._di[index]["p2"];
            var series = this.get("series");
            if (series) {
                var xAxis = series.get("xAxis");
                var x1 = this._getXValue(diP1.get("valueX"));
                var x2 = this._getXValue(diP2.get("valueX"));
                var di1 = xAxis.getSeriesItem(series, xAxis.valueToPosition(x1));
                var di2 = xAxis.getSeriesItem(series, xAxis.valueToPosition(x2));
                var field = this.get("field") + "Y";
                if (di1 && di2) {
                    var dataItems = series.dataItems;
                    var startIndex = dataItems.indexOf(di1);
                    var endIndex = dataItems.indexOf(di2);
                    var inversed = false;
                    if (startIndex > endIndex) {
                        inversed = true;
                        _a = __read([endIndex, startIndex], 2), startIndex = _a[0], endIndex = _a[1];
                    }
                    var points = [];
                    var ii = 0;
                    for (var i = startIndex; i <= endIndex; i++) {
                        var dataItem = dataItems[i];
                        points.push([ii, dataItem.get(field)]);
                        ii++;
                    }
                    var result = regression.linear(points);
                    var resultPoints = result.points;
                    var len = resultPoints.length;
                    if (len > 1) {
                        var p1 = resultPoints[0];
                        var p2 = resultPoints[resultPoints.length - 1];
                        if (p1 && p2) {
                            var y1 = p1[1];
                            var y2 = p2[1];
                            if (inversed) {
                                _b = __read([y2, y1], 2), y1 = _b[0], y2 = _b[1];
                            }
                            diP1.set("valueY", y1);
                            diP1.set("valueYWorking", y1);
                            diP2.set("valueY", y2);
                            diP2.set("valueYWorking", y2);
                            diP1.set("valueX", x1);
                            diP2.set("valueX", x2);
                            this._positionBullets(diP1);
                            this._positionBullets(diP2);
                        }
                    }
                }
            }
        }
    });
    // need to override so that location would not be set
    Object.defineProperty(RegressionSeries.prototype, "_setXLocation", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function () {
        }
    });
    Object.defineProperty(RegressionSeries, "className", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: "RegressionSeries"
    });
    Object.defineProperty(RegressionSeries, "classNames", {
        enumerable: true,
        configurable: true,
        writable: true,
        value: SimpleLineSeries.classNames.concat([RegressionSeries.className])
    });
    return RegressionSeries;
}(SimpleLineSeries));
export { RegressionSeries };
//# sourceMappingURL=RegressionSeries.js.map