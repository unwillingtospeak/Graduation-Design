{
  "version": 3,
  "sources": ["../../tinyqueue/index.js", "../../polylabel/polylabel.js", "../../src/.internal/charts/map/MapSeries.ts", "../../d3-array/src/ascending.js", "../../d3-array/src/descending.js", "../../d3-array/src/bisector.js", "../../d3-array/src/number.js", "../../d3-array/src/bisect.js", "../../d3-array/src/blur.js", "../../d3-array/src/fsum.js", "../../d3-array/src/array.js", "../../d3-array/src/ticks.js", "../../d3-array/src/merge.js", "../../d3-array/src/range.js", "../../d3-array/src/shuffle.js", "../../d3-geo/src/math.js", "../../d3-geo/src/noop.js", "../../d3-geo/src/stream.js", "../../d3-geo/src/area.js", "../../d3-geo/src/cartesian.js", "../../d3-geo/src/bounds.js", "../../d3-geo/src/centroid.js", "../../d3-geo/src/constant.js", "../../d3-geo/src/compose.js", "../../d3-geo/src/rotation.js", "../../d3-geo/src/circle.js", "../../d3-geo/src/clip/buffer.js", "../../d3-geo/src/pointEqual.js", "../../d3-geo/src/clip/rejoin.js", "../../d3-geo/src/polygonContains.js", "../../d3-geo/src/clip/index.js", "../../d3-geo/src/clip/antimeridian.js", "../../d3-geo/src/clip/circle.js", "../../d3-geo/src/clip/line.js", "../../d3-geo/src/clip/rectangle.js", "../../d3-geo/src/length.js", "../../d3-geo/src/distance.js", "../../d3-geo/src/graticule.js", "../../d3-geo/src/interpolate.js", "../../d3-geo/src/identity.js", "../../d3-geo/src/path/area.js", "../../d3-geo/src/path/bounds.js", "../../d3-geo/src/path/centroid.js", "../../d3-geo/src/path/context.js", "../../d3-geo/src/path/measure.js", "../../d3-geo/src/path/string.js", "../../d3-geo/src/path/index.js", "../../d3-geo/src/transform.js", "../../d3-geo/src/projection/fit.js", "../../d3-geo/src/projection/resample.js", "../../d3-geo/src/projection/index.js", "../../d3-geo/src/projection/conic.js", "../../d3-geo/src/projection/cylindricalEqualArea.js", "../../d3-geo/src/projection/conicEqualArea.js", "../../d3-geo/src/projection/albers.js", "../../d3-geo/src/projection/albersUsa.js", "../../d3-geo/src/projection/azimuthal.js", "../../d3-geo/src/projection/azimuthalEqualArea.js", "../../d3-geo/src/projection/azimuthalEquidistant.js", "../../d3-geo/src/projection/mercator.js", "../../d3-geo/src/projection/equirectangular.js", "../../d3-geo/src/projection/equalEarth.js", "../../d3-geo/src/projection/gnomonic.js", "../../d3-geo/src/projection/naturalEarth1.js", "../../d3-geo/src/projection/orthographic.js", "../../d3-geo/src/projection/stereographic.js", "../../d3-geo/src/projection/transverseMercator.js", "../../src/.internal/charts/map/MapLine.ts", "../../src/.internal/charts/map/MapLineSeries.ts", "../../src/.internal/charts/map/GraticuleSeries.ts", "../../src/.internal/charts/map/MapChartDefaultTheme.ts", "../../src/.internal/charts/map/MapUtils.ts", "../../src/.internal/charts/map/MapChart.ts", "../../src/.internal/charts/map/MapPointSeries.ts", "../../src/.internal/charts/map/MapPolygon.ts", "../../src/.internal/charts/map/MapPolygonSeries.ts", "../../src/.internal/charts/map/ZoomControl.ts"],
  "sourcesContent": ["\nexport default class TinyQueue {\n    constructor(data = [], compare = defaultCompare) {\n        this.data = data;\n        this.length = this.data.length;\n        this.compare = compare;\n\n        if (this.length > 0) {\n            for (let i = (this.length >> 1) - 1; i >= 0; i--) this._down(i);\n        }\n    }\n\n    push(item) {\n        this.data.push(item);\n        this.length++;\n        this._up(this.length - 1);\n    }\n\n    pop() {\n        if (this.length === 0) return undefined;\n\n        const top = this.data[0];\n        const bottom = this.data.pop();\n        this.length--;\n\n        if (this.length > 0) {\n            this.data[0] = bottom;\n            this._down(0);\n        }\n\n        return top;\n    }\n\n    peek() {\n        return this.data[0];\n    }\n\n    _up(pos) {\n        const {data, compare} = this;\n        const item = data[pos];\n\n        while (pos > 0) {\n            const parent = (pos - 1) >> 1;\n            const current = data[parent];\n            if (compare(item, current) >= 0) break;\n            data[pos] = current;\n            pos = parent;\n        }\n\n        data[pos] = item;\n    }\n\n    _down(pos) {\n        const {data, compare} = this;\n        const halfLength = this.length >> 1;\n        const item = data[pos];\n\n        while (pos < halfLength) {\n            let left = (pos << 1) + 1;\n            let best = data[left];\n            const right = left + 1;\n\n            if (right < this.length && compare(data[right], best) < 0) {\n                left = right;\n                best = data[right];\n            }\n            if (compare(best, item) >= 0) break;\n\n            data[pos] = best;\n            pos = left;\n        }\n\n        data[pos] = item;\n    }\n}\n\nfunction defaultCompare(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n}\n", "'use strict';\n\nvar Queue = require('tinyqueue');\n\nif (Queue.default) Queue = Queue.default; // temporary webpack fix\n\nmodule.exports = polylabel;\nmodule.exports.default = polylabel;\n\nfunction polylabel(polygon, precision, debug) {\n    precision = precision || 1.0;\n\n    // find the bounding box of the outer ring\n    var minX, minY, maxX, maxY;\n    for (var i = 0; i < polygon[0].length; i++) {\n        var p = polygon[0][i];\n        if (!i || p[0] < minX) minX = p[0];\n        if (!i || p[1] < minY) minY = p[1];\n        if (!i || p[0] > maxX) maxX = p[0];\n        if (!i || p[1] > maxY) maxY = p[1];\n    }\n\n    var width = maxX - minX;\n    var height = maxY - minY;\n    var cellSize = Math.min(width, height);\n    var h = cellSize / 2;\n\n    if (cellSize === 0) {\n        var degeneratePoleOfInaccessibility = [minX, minY];\n        degeneratePoleOfInaccessibility.distance = 0;\n        return degeneratePoleOfInaccessibility;\n    }\n\n    // a priority queue of cells in order of their \"potential\" (max distance to polygon)\n    var cellQueue = new Queue(undefined, compareMax);\n\n    // cover polygon with initial cells\n    for (var x = minX; x < maxX; x += cellSize) {\n        for (var y = minY; y < maxY; y += cellSize) {\n            cellQueue.push(new Cell(x + h, y + h, h, polygon));\n        }\n    }\n\n    // take centroid as the first best guess\n    var bestCell = getCentroidCell(polygon);\n\n    // special case for rectangular polygons\n    var bboxCell = new Cell(minX + width / 2, minY + height / 2, 0, polygon);\n    if (bboxCell.d > bestCell.d) bestCell = bboxCell;\n\n    var numProbes = cellQueue.length;\n\n    while (cellQueue.length) {\n        // pick the most promising cell from the queue\n        var cell = cellQueue.pop();\n\n        // update the best cell if we found a better one\n        if (cell.d > bestCell.d) {\n            bestCell = cell;\n            if (debug) console.log('found best %d after %d probes', Math.round(1e4 * cell.d) / 1e4, numProbes);\n        }\n\n        // do not drill down further if there's no chance of a better solution\n        if (cell.max - bestCell.d <= precision) continue;\n\n        // split the cell into four cells\n        h = cell.h / 2;\n        cellQueue.push(new Cell(cell.x - h, cell.y - h, h, polygon));\n        cellQueue.push(new Cell(cell.x + h, cell.y - h, h, polygon));\n        cellQueue.push(new Cell(cell.x - h, cell.y + h, h, polygon));\n        cellQueue.push(new Cell(cell.x + h, cell.y + h, h, polygon));\n        numProbes += 4;\n    }\n\n    if (debug) {\n        console.log('num probes: ' + numProbes);\n        console.log('best distance: ' + bestCell.d);\n    }\n\n    var poleOfInaccessibility = [bestCell.x, bestCell.y];\n    poleOfInaccessibility.distance = bestCell.d;\n    return poleOfInaccessibility;\n}\n\nfunction compareMax(a, b) {\n    return b.max - a.max;\n}\n\nfunction Cell(x, y, h, polygon) {\n    this.x = x; // cell center x\n    this.y = y; // cell center y\n    this.h = h; // half the cell size\n    this.d = pointToPolygonDist(x, y, polygon); // distance from cell center to polygon\n    this.max = this.d + this.h * Math.SQRT2; // max distance to polygon within a cell\n}\n\n// signed distance from point to polygon outline (negative if point is outside)\nfunction pointToPolygonDist(x, y, polygon) {\n    var inside = false;\n    var minDistSq = Infinity;\n\n    for (var k = 0; k < polygon.length; k++) {\n        var ring = polygon[k];\n\n        for (var i = 0, len = ring.length, j = len - 1; i < len; j = i++) {\n            var a = ring[i];\n            var b = ring[j];\n\n            if ((a[1] > y !== b[1] > y) &&\n                (x < (b[0] - a[0]) * (y - a[1]) / (b[1] - a[1]) + a[0])) inside = !inside;\n\n            minDistSq = Math.min(minDistSq, getSegDistSq(x, y, a, b));\n        }\n    }\n\n    return minDistSq === 0 ? 0 : (inside ? 1 : -1) * Math.sqrt(minDistSq);\n}\n\n// get polygon centroid\nfunction getCentroidCell(polygon) {\n    var area = 0;\n    var x = 0;\n    var y = 0;\n    var points = polygon[0];\n\n    for (var i = 0, len = points.length, j = len - 1; i < len; j = i++) {\n        var a = points[i];\n        var b = points[j];\n        var f = a[0] * b[1] - b[0] * a[1];\n        x += (a[0] + b[0]) * f;\n        y += (a[1] + b[1]) * f;\n        area += f * 3;\n    }\n    if (area === 0) return new Cell(points[0][0], points[0][1], 0, polygon);\n    return new Cell(x / area, y / area, 0, polygon);\n}\n\n// get squared distance from a point to a segment\nfunction getSegDistSq(px, py, a, b) {\n\n    var x = a[0];\n    var y = a[1];\n    var dx = b[0] - x;\n    var dy = b[1] - y;\n\n    if (dx !== 0 || dy !== 0) {\n\n        var t = ((px - x) * dx + (py - y) * dy) / (dx * dx + dy * dy);\n\n        if (t > 1) {\n            x = b[0];\n            y = b[1];\n\n        } else if (t > 0) {\n            x += dx * t;\n            y += dy * t;\n        }\n    }\n\n    dx = px - x;\n    dy = py - y;\n\n    return dx * dx + dy * dy;\n}\n", "import type { MapChart } from \"./MapChart\";\nimport type { GeoProjection, GeoPath } from \"d3-geo\";\n\nimport { Series, ISeriesSettings, ISeriesDataItem, ISeriesPrivate, ISeriesEvents } from \"../../core/render/Series\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $object from \"../../core/util/Object\";\n\nexport interface IMapSeriesDataItem extends ISeriesDataItem {\n\tgeometry?: GeoJSON.Geometry;\n\tgeometryType?: GeoJSON.GeoJsonGeometryTypes;\n\tvalue?: number;\n}\n\nexport interface IMapSeriesSettings extends ISeriesSettings {\n\n\t/**\n\t * Map data in GeoJSON format.\n\t */\n\tgeoJSON?: GeoJSON.GeoJSON;\n\n\t/**\n\t * An array of map object ids from geodata to include in the map.\n\t *\n\t * If set, only those objects listed in `include` will be shown.\n\t */\n\tinclude?: Array<string>;\n\n\t/**\n\t * An array of map object ids from geodata to omit when showing the map.\n\t */\n\texclude?: Array<string>;\n\n\t/**\n\t * A field in series `data` that will hold map object's numeric value.\n\t *\n\t * It can be used in a number of places, e.g. tooltips, heat rules, etc.\n\t */\n\tvalueField?: string;\n\n\t/**\n\t * @ignore\n\t */\n\tgeometryField?: string;\n\n\t/**\n\t * @ignore\n\t */\n\tgeometryTypeField?: string;\n\n\t/**\n\t * Names of geodata items, such as countries, to replace by from loaded\n\t * geodata.\n\t *\n\t * Can be used to override built-in English names for countries.\n\t *\n\t * ```TypeScript\n\t * import am5geodata_lang_ES from '@amcharts5-geodata/lang/es';\n\t * // ...\n\t * map.geodataNames = am5geodata_lang_ES;\n\t * ```\n\t * ```JavaScript\n\t * map.geodataNames = am5geodata_lang_ES;\n\t * ```\n\t *\n\t * @since 5.1.13\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-translations/} for more info\n\t */\n\tgeodataNames?: { [index: string]: string };\n\n}\n\nexport interface IMapSeriesPrivate extends ISeriesPrivate {\n}\n\nexport interface IMapSeriesEvents extends ISeriesEvents {\n\n\t/**\n\t * Invoked when geodata is finished loading and processed.\n\t */\n\tgeodataprocessed: {};\n\n}\n\n/**\n * Base class for map series.\n */\nexport abstract class MapSeries extends Series {\n\tpublic static className: string = \"MapSeries\";\n\tpublic static classNames: Array<string> = Series.classNames.concat([MapSeries.className]);\n\n\tdeclare public chart: MapChart | undefined;\n\tdeclare public _settings: IMapSeriesSettings;\n\tdeclare public _privateSettings: IMapSeriesPrivate;\n\tdeclare public _dataItemSettings: IMapSeriesDataItem;\n\tdeclare public _events: IMapSeriesEvents;\n\n\tprotected _types: Array<GeoJSON.GeoJsonGeometryTypes> = [];\n\n\tpublic _geometries: Array<GeoJSON.Geometry> = [];\n\tprotected _geoJSONparsed: boolean = false;\n\n\tprotected _afterNew() {\n\t\tthis.fields.push(\"geometry\", \"geometryType\");\n\t\tthis._setRawDefault(\"geometryField\", \"geometry\");\n\t\tthis._setRawDefault(\"geometryTypeField\", \"geometryType\");\n\t\tthis._setRawDefault(\"idField\", \"id\");\n\n\t\tthis.on(\"geoJSON\", (geoJSON) => {\n\t\t\tlet previous = this._prevSettings.geoJSON;\n\t\t\tif (previous && previous != geoJSON) {\n\t\t\t\tthis.data.clear();\n\t\t\t}\n\t\t})\n\n\t\tsuper._afterNew();\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tif (this._valuesDirty || this.isDirty(\"geoJSON\") || this.isDirty(\"include\") || this.isDirty(\"exclude\")) {\n\t\t\tconst geoJSON = this.get(\"geoJSON\");\n\t\t\tlet previous = this._prevSettings.geoJSON;\n\n\t\t\tif (previous && previous != geoJSON) {\n\t\t\t\tthis._prevSettings.geoJSON = undefined;\n\t\t\t\tthis._geoJSONparsed = false;\n\t\t\t}\n\n\t\t\tif (!this._geoJSONparsed) {\n\t\t\t\tthis._parseGeoJSON();\n\t\t\t\tthis._geoJSONparsed = true;\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected checkInclude(id: string, includes: string[] | undefined, excludes?: string[] | undefined): boolean {\n\t\tif (includes) {\n\t\t\tif (includes.length == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (includes.indexOf(id) == -1) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (excludes && excludes.length > 0) {\n\t\t\tif (excludes.indexOf(id) != -1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tprotected _parseGeoJSON() {\n\n\t\tconst geoJSON = this.get(\"geoJSON\");\n\t\tif (geoJSON) {\n\n\t\t\tlet features!: any[];\n\n\t\t\tif (geoJSON.type == \"FeatureCollection\") {\n\t\t\t\tfeatures = geoJSON.features;\n\t\t\t}\n\t\t\telse if (geoJSON.type == \"Feature\") {\n\t\t\t\tfeatures = [geoJSON];\n\t\t\t}\n\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\n\t\t\t\tfeatures = [{ geometry: geoJSON }];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.log(\"nothing found in geoJSON\");\n\t\t\t}\n\n\t\t\tconst geodataNames = this.get(\"geodataNames\");\n\t\t\tif (features) {\n\n\t\t\t\tfor (let i = 0, len = features.length; i < len; i++) {\n\t\t\t\t\tlet feature: any = features[i];\n\t\t\t\t\tlet geometry: any = feature.geometry;\n\n\t\t\t\t\tif (geometry) {\n\t\t\t\t\t\tlet type = geometry.type;\n\t\t\t\t\t\tlet id: string = feature.id;\n\n\t\t\t\t\t\tif (geodataNames && geodataNames[id]) {\n\t\t\t\t\t\t\tfeature.properties.name = geodataNames[id];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this._types.indexOf(type) != -1) {\n\t\t\t\t\t\t\tif (!this.checkInclude(id, this.get(\"include\"), this.get(\"exclude\"))) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlet dataItem: any;\n\n\t\t\t\t\t\t\tif (id != null) {\n\t\t\t\t\t\t\t\t// find data object in user-provided data\n\t\t\t\t\t\t\t\tdataItem = $array.find(this.dataItems, (value: any) => {\n\t\t\t\t\t\t\t\t\treturn value.get(\"id\") == id;\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlet dataObject: any;\n\n\t\t\t\t\t\t\tif (dataItem) {\n\t\t\t\t\t\t\t\tdataObject = dataItem.dataContext;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// create one if not found\n\t\t\t\t\t\t\tif (!dataItem) {\n\t\t\t\t\t\t\t\tdataObject = { geometry: geometry, geometryType: type, id: id, madeFromGeoData: true };\n\t\t\t\t\t\t\t\tthis.data.push(dataObject);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// in case found\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t// if user-provided object doesn't have points data provided in any way:\n\t\t\t\t\t\t\t\tif (!dataObject.geometry) {\n\t\t\t\t\t\t\t\t\tdataObject.geometry = geometry;\n\t\t\t\t\t\t\t\t\tdataObject.geometryType = type;\n\t\t\t\t\t\t\t\t\tdataItem.set(\"geometry\", geometry);\n\t\t\t\t\t\t\t\t\tdataItem.set(\"geometryType\", type);\n\t\t\t\t\t\t\t\t\tthis.processDataItem(dataItem);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// copy properties data to datacontext\n\t\t\t\t\t\t\t$object.softCopyProperties(feature.properties, dataObject);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst type = \"geodataprocessed\";\n\t\t\tif (this.events.isEnabled(type)) {\n\t\t\t\tthis.events.dispatch(type, { type: type, target: this });\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract markDirtyProjection(): void\n\n\tpublic _placeBulletsContainer(_chart: MapChart) {\n\t\tthis.children.moveValue(this.bulletsContainer);\n\t}\n\n\tpublic _removeBulletsContainer() {\n\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic projection(): GeoProjection | undefined {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\treturn chart.get(\"projection\");\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic geoPath(): GeoPath | undefined {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\treturn chart.getPrivate(\"geoPath\");\n\t\t}\n\t}\n\n\tprotected _addGeometry(geometry: any) {\n\t\tif (geometry) {\n\t\t\tthis._geometries.push(geometry);\n\n\t\t\tconst chart = this.chart;\n\t\t\tif (chart) {\n\t\t\t\tchart.markDirtyGeometries();\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _removeGeometry(geometry: any) {\n\t\tif (geometry) {\n\t\t\t$array.remove(this._geometries, geometry);\n\n\t\t\tconst chart = this.chart;\n\t\t\tif (chart) {\n\t\t\t\tchart.markDirtyGeometries();\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _dispose() {\n\t\tsuper._dispose();\n\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tchart.series.removeValue(this);\n\t\t}\n\t}\n\n\tprotected _onDataClear() {\n\t\tsuper._onDataClear();\n\t\tthis._geoJSONparsed = false;\n\t}\t\t\n}\n", "export default function ascending(a, b) {\n  return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n", "export default function descending(a, b) {\n  return a == null || b == null ? NaN\n    : b < a ? -1\n    : b > a ? 1\n    : b >= a ? 0\n    : NaN;\n}\n", "import ascending from \"./ascending.js\";\nimport descending from \"./descending.js\";\n\nexport default function bisector(f) {\n  let compare1, compare2, delta;\n\n  // If an accessor is specified, promote it to a comparator. In this case we\n  // can test whether the search value is (self-) comparable. We can\u2019t do this\n  // for a comparator (except for specific, known comparators) because we can\u2019t\n  // tell if the comparator is symmetric, and an asymmetric comparator can\u2019t be\n  // used to test whether a single value is comparable.\n  if (f.length !== 2) {\n    compare1 = ascending;\n    compare2 = (d, x) => ascending(f(d), x);\n    delta = (d, x) => f(d) - x;\n  } else {\n    compare1 = f === ascending || f === descending ? f : zero;\n    compare2 = f;\n    delta = f;\n  }\n\n  function left(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = (lo + hi) >>> 1;\n        if (compare2(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n\n  function right(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = (lo + hi) >>> 1;\n        if (compare2(a[mid], x) <= 0) lo = mid + 1;\n        else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n\n  function center(a, x, lo = 0, hi = a.length) {\n    const i = left(a, x, lo, hi - 1);\n    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\n  }\n\n  return {left, center, right};\n}\n\nfunction zero() {\n  return 0;\n}\n", "export default function number(x) {\n  return x === null ? NaN : +x;\n}\n\nexport function* numbers(values, valueof) {\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n", "import ascending from \"./ascending.js\";\nimport bisector from \"./bisector.js\";\nimport number from \"./number.js\";\n\nconst ascendingBisect = bisector(ascending);\nexport const bisectRight = ascendingBisect.right;\nexport const bisectLeft = ascendingBisect.left;\nexport const bisectCenter = bisector(number).center;\nexport default bisectRight;\n", "export function blur(values, r) {\n  if (!((r = +r) >= 0)) throw new RangeError(\"invalid r\");\n  let length = values.length;\n  if (!((length = Math.floor(length)) >= 0)) throw new RangeError(\"invalid length\");\n  if (!length || !r) return values;\n  const blur = blurf(r);\n  const temp = values.slice();\n  blur(values, temp, 0, length, 1);\n  blur(temp, values, 0, length, 1);\n  blur(values, temp, 0, length, 1);\n  return values;\n}\n\nexport const blur2 = Blur2(blurf);\n\nexport const blurImage = Blur2(blurfImage);\n\nfunction Blur2(blur) {\n  return function(data, rx, ry = rx) {\n    if (!((rx = +rx) >= 0)) throw new RangeError(\"invalid rx\");\n    if (!((ry = +ry) >= 0)) throw new RangeError(\"invalid ry\");\n    let {data: values, width, height} = data;\n    if (!((width = Math.floor(width)) >= 0)) throw new RangeError(\"invalid width\");\n    if (!((height = Math.floor(height !== undefined ? height : values.length / width)) >= 0)) throw new RangeError(\"invalid height\");\n    if (!width || !height || (!rx && !ry)) return data;\n    const blurx = rx && blur(rx);\n    const blury = ry && blur(ry);\n    const temp = values.slice();\n    if (blurx && blury) {\n      blurh(blurx, temp, values, width, height);\n      blurh(blurx, values, temp, width, height);\n      blurh(blurx, temp, values, width, height);\n      blurv(blury, values, temp, width, height);\n      blurv(blury, temp, values, width, height);\n      blurv(blury, values, temp, width, height);\n    } else if (blurx) {\n      blurh(blurx, values, temp, width, height);\n      blurh(blurx, temp, values, width, height);\n      blurh(blurx, values, temp, width, height);\n    } else if (blury) {\n      blurv(blury, values, temp, width, height);\n      blurv(blury, temp, values, width, height);\n      blurv(blury, values, temp, width, height);\n    }\n    return data;\n  };\n}\n\nfunction blurh(blur, T, S, w, h) {\n  for (let y = 0, n = w * h; y < n;) {\n    blur(T, S, y, y += w, 1);\n  }\n}\n\nfunction blurv(blur, T, S, w, h) {\n  for (let x = 0, n = w * h; x < w; ++x) {\n    blur(T, S, x, x + n, w);\n  }\n}\n\nfunction blurfImage(radius) {\n  const blur = blurf(radius);\n  return (T, S, start, stop, step) => {\n    start <<= 2, stop <<= 2, step <<= 2;\n    blur(T, S, start + 0, stop + 0, step);\n    blur(T, S, start + 1, stop + 1, step);\n    blur(T, S, start + 2, stop + 2, step);\n    blur(T, S, start + 3, stop + 3, step);\n  };\n}\n\n// Given a target array T, a source array S, sets each value T[i] to the average\n// of {S[i - r], \u2026, S[i], \u2026, S[i + r]}, where r = \u230Aradius\u230B, start <= i < stop,\n// for each i, i + step, i + 2 * step, etc., and where S[j] is clamped between\n// S[start] (inclusive) and S[stop] (exclusive). If the given radius is not an\n// integer, S[i - r - 1] and S[i + r + 1] are added to the sum, each weighted\n// according to r - \u230Aradius\u230B.\nfunction blurf(radius) {\n  const radius0 = Math.floor(radius);\n  if (radius0 === radius) return bluri(radius);\n  const t = radius - radius0;\n  const w = 2 * radius + 1;\n  return (T, S, start, stop, step) => { // stop must be aligned!\n    if (!((stop -= step) >= start)) return; // inclusive stop\n    let sum = radius0 * S[start];\n    const s0 = step * radius0;\n    const s1 = s0 + step;\n    for (let i = start, j = start + s0; i < j; i += step) {\n      sum += S[Math.min(stop, i)];\n    }\n    for (let i = start, j = stop; i <= j; i += step) {\n      sum += S[Math.min(stop, i + s0)];\n      T[i] = (sum + t * (S[Math.max(start, i - s1)] + S[Math.min(stop, i + s1)])) / w;\n      sum -= S[Math.max(start, i - s0)];\n    }\n  };\n}\n\n// Like blurf, but optimized for integer radius.\nfunction bluri(radius) {\n  const w = 2 * radius + 1;\n  return (T, S, start, stop, step) => { // stop must be aligned!\n    if (!((stop -= step) >= start)) return; // inclusive stop\n    let sum = radius * S[start];\n    const s = step * radius;\n    for (let i = start, j = start + s; i < j; i += step) {\n      sum += S[Math.min(stop, i)];\n    }\n    for (let i = start, j = stop; i <= j; i += step) {\n      sum += S[Math.min(stop, i + s)];\n      T[i] = sum / w;\n      sum -= S[Math.max(start, i - s)];\n    }\n  };\n}\n", "// https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423\nexport class Adder {\n  constructor() {\n    this._partials = new Float64Array(32);\n    this._n = 0;\n  }\n  add(x) {\n    const p = this._partials;\n    let i = 0;\n    for (let j = 0; j < this._n && j < 32; j++) {\n      const y = p[j],\n        hi = x + y,\n        lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);\n      if (lo) p[i++] = lo;\n      x = hi;\n    }\n    p[i] = x;\n    this._n = i + 1;\n    return this;\n  }\n  valueOf() {\n    const p = this._partials;\n    let n = this._n, x, y, lo, hi = 0;\n    if (n > 0) {\n      hi = p[--n];\n      while (n > 0) {\n        x = hi;\n        y = p[--n];\n        hi = x + y;\n        lo = y - (hi - x);\n        if (lo) break;\n      }\n      if (n > 0 && ((lo < 0 && p[n - 1] < 0) || (lo > 0 && p[n - 1] > 0))) {\n        y = lo * 2;\n        x = hi + y;\n        if (y == x - hi) hi = x;\n      }\n    }\n    return hi;\n  }\n}\n\nexport function fsum(values, valueof) {\n  const adder = new Adder();\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value = +value) {\n        adder.add(value);\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if (value = +valueof(value, ++index, values)) {\n        adder.add(value);\n      }\n    }\n  }\n  return +adder;\n}\n\nexport function fcumsum(values, valueof) {\n  const adder = new Adder();\n  let index = -1;\n  return Float64Array.from(values, valueof === undefined\n      ? v => adder.add(+v || 0)\n      : v => adder.add(+valueof(v, ++index, values) || 0)\n  );\n}\n", "var array = Array.prototype;\n\nexport var slice = array.slice;\nexport var map = array.map;\n", "var e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nexport default function ticks(start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    let r0 = Math.round(start / step), r1 = Math.round(stop / step);\n    if (r0 * step < start) ++r0;\n    if (r1 * step > stop) --r1;\n    ticks = new Array(n = r1 - r0 + 1);\n    while (++i < n) ticks[i] = (r0 + i) * step;\n  } else {\n    step = -step;\n    let r0 = Math.round(start * step), r1 = Math.round(stop * step);\n    if (r0 / step < start) ++r0;\n    if (r1 / step > stop) --r1;\n    ticks = new Array(n = r1 - r0 + 1);\n    while (++i < n) ticks[i] = (r0 + i) / step;\n  }\n\n  if (reverse) ticks.reverse();\n\n  return ticks;\n}\n\nexport function tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0\n      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)\n      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\n\nexport function tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;\n  else if (error >= e5) step1 *= 5;\n  else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}\n", "function* flatten(arrays) {\n  for (const array of arrays) {\n    yield* array;\n  }\n}\n\nexport default function merge(arrays) {\n  return Array.from(flatten(arrays));\n}\n", "export default function range(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}\n", "export default shuffler(Math.random);\n\nexport function shuffler(random) {\n  return function shuffle(array, i0 = 0, i1 = array.length) {\n    let m = i1 - (i0 = +i0);\n    while (m) {\n      const i = random() * m-- | 0, t = array[m + i0];\n      array[m + i0] = array[i + i0];\n      array[i + i0] = t;\n    }\n    return array;\n  };\n}\n", "export var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var tau = pi * 2;\n\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\n\nexport var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var cos = Math.cos;\nexport var ceil = Math.ceil;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var hypot = Math.hypot;\nexport var log = Math.log;\nexport var pow = Math.pow;\nexport var sin = Math.sin;\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nexport var sqrt = Math.sqrt;\nexport var tan = Math.tan;\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function haversin(x) {\n  return (x = sin(x / 2)) * x;\n}\n", "export default function noop() {}\n", "function streamGeometry(geometry, stream) {\n  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n    streamGeometryType[geometry.type](geometry, stream);\n  }\n}\n\nvar streamObjectType = {\n  Feature: function(object, stream) {\n    streamGeometry(object.geometry, stream);\n  },\n  FeatureCollection: function(object, stream) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) streamGeometry(features[i].geometry, stream);\n  }\n};\n\nvar streamGeometryType = {\n  Sphere: function(object, stream) {\n    stream.sphere();\n  },\n  Point: function(object, stream) {\n    object = object.coordinates;\n    stream.point(object[0], object[1], object[2]);\n  },\n  MultiPoint: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\n  },\n  LineString: function(object, stream) {\n    streamLine(object.coordinates, stream, 0);\n  },\n  MultiLineString: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamLine(coordinates[i], stream, 0);\n  },\n  Polygon: function(object, stream) {\n    streamPolygon(object.coordinates, stream);\n  },\n  MultiPolygon: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamPolygon(coordinates[i], stream);\n  },\n  GeometryCollection: function(object, stream) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) streamGeometry(geometries[i], stream);\n  }\n};\n\nfunction streamLine(coordinates, stream, closed) {\n  var i = -1, n = coordinates.length - closed, coordinate;\n  stream.lineStart();\n  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n  stream.lineEnd();\n}\n\nfunction streamPolygon(coordinates, stream) {\n  var i = -1, n = coordinates.length;\n  stream.polygonStart();\n  while (++i < n) streamLine(coordinates[i], stream, 1);\n  stream.polygonEnd();\n}\n\nexport default function(object, stream) {\n  if (object && streamObjectType.hasOwnProperty(object.type)) {\n    streamObjectType[object.type](object, stream);\n  } else {\n    streamGeometry(object, stream);\n  }\n}\n", "import {Adder} from \"d3-array\";\nimport {atan2, cos, quarterPi, radians, sin, tau} from \"./math.js\";\nimport noop from \"./noop.js\";\nimport stream from \"./stream.js\";\n\nexport var areaRingSum = new Adder();\n\n// hello?\n\nvar areaSum = new Adder(),\n    lambda00,\n    phi00,\n    lambda0,\n    cosPhi0,\n    sinPhi0;\n\nexport var areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaRingSum = new Adder();\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    var areaRing = +areaRingSum;\n    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\n    this.lineStart = this.lineEnd = this.point = noop;\n  },\n  sphere: function() {\n    areaSum.add(tau);\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaRingEnd() {\n  areaPoint(lambda00, phi00);\n}\n\nfunction areaPointFirst(lambda, phi) {\n  areaStream.point = areaPoint;\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\n}\n\nfunction areaPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\n\n  // Spherical excess E for a spherical triangle with vertices: south pole,\n  // previous point, current point.  Uses a formula derived from Cagnoli\u2019s\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n  var dLambda = lambda - lambda0,\n      sdLambda = dLambda >= 0 ? 1 : -1,\n      adLambda = sdLambda * dLambda,\n      cosPhi = cos(phi),\n      sinPhi = sin(phi),\n      k = sinPhi0 * sinPhi,\n      u = cosPhi0 * cosPhi + k * cos(adLambda),\n      v = k * sdLambda * sin(adLambda);\n  areaRingSum.add(atan2(v, u));\n\n  // Advance the previous points.\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n}\n\nexport default function(object) {\n  areaSum = new Adder();\n  stream(object, areaStream);\n  return areaSum * 2;\n}\n", "import {asin, atan2, cos, sin, sqrt} from \"./math.js\";\n\nexport function spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\n}\n\nexport function cartesian(spherical) {\n  var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);\n  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\n}\n\nexport function cartesianDot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\nexport function cartesianCross(a, b) {\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n}\n\n// TODO return a\nexport function cartesianAddInPlace(a, b) {\n  a[0] += b[0], a[1] += b[1], a[2] += b[2];\n}\n\nexport function cartesianScale(vector, k) {\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\n}\n\n// TODO return d\nexport function cartesianNormalizeInPlace(d) {\n  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n  d[0] /= l, d[1] /= l, d[2] /= l;\n}\n", "import {Adder} from \"d3-array\";\nimport {areaStream, areaRingSum} from \"./area.js\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace, spherical} from \"./cartesian.js\";\nimport {abs, degrees, epsilon, radians} from \"./math.js\";\nimport stream from \"./stream.js\";\n\nvar lambda0, phi0, lambda1, phi1, // bounds\n    lambda2, // previous lambda-coordinate\n    lambda00, phi00, // first point\n    p0, // previous 3D point\n    deltaSum,\n    ranges,\n    range;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: boundsLineStart,\n  lineEnd: boundsLineEnd,\n  polygonStart: function() {\n    boundsStream.point = boundsRingPoint;\n    boundsStream.lineStart = boundsRingStart;\n    boundsStream.lineEnd = boundsRingEnd;\n    deltaSum = new Adder();\n    areaStream.polygonStart();\n  },\n  polygonEnd: function() {\n    areaStream.polygonEnd();\n    boundsStream.point = boundsPoint;\n    boundsStream.lineStart = boundsLineStart;\n    boundsStream.lineEnd = boundsLineEnd;\n    if (areaRingSum < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n    else if (deltaSum > epsilon) phi1 = 90;\n    else if (deltaSum < -epsilon) phi0 = -90;\n    range[0] = lambda0, range[1] = lambda1;\n  },\n  sphere: function() {\n    lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n  }\n};\n\nfunction boundsPoint(lambda, phi) {\n  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n}\n\nfunction linePoint(lambda, phi) {\n  var p = cartesian([lambda * radians, phi * radians]);\n  if (p0) {\n    var normal = cartesianCross(p0, p),\n        equatorial = [normal[1], -normal[0], 0],\n        inflection = cartesianCross(equatorial, normal);\n    cartesianNormalizeInPlace(inflection);\n    inflection = spherical(inflection);\n    var delta = lambda - lambda2,\n        sign = delta > 0 ? 1 : -1,\n        lambdai = inflection[0] * degrees * sign,\n        phii,\n        antimeridian = abs(delta) > 180;\n    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = inflection[1] * degrees;\n      if (phii > phi1) phi1 = phii;\n    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = -inflection[1] * degrees;\n      if (phii < phi0) phi0 = phii;\n    } else {\n      if (phi < phi0) phi0 = phi;\n      if (phi > phi1) phi1 = phi;\n    }\n    if (antimeridian) {\n      if (lambda < lambda2) {\n        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n      } else {\n        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n      }\n    } else {\n      if (lambda1 >= lambda0) {\n        if (lambda < lambda0) lambda0 = lambda;\n        if (lambda > lambda1) lambda1 = lambda;\n      } else {\n        if (lambda > lambda2) {\n          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n        } else {\n          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n        }\n      }\n    }\n  } else {\n    ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  }\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n  p0 = p, lambda2 = lambda;\n}\n\nfunction boundsLineStart() {\n  boundsStream.point = linePoint;\n}\n\nfunction boundsLineEnd() {\n  range[0] = lambda0, range[1] = lambda1;\n  boundsStream.point = boundsPoint;\n  p0 = null;\n}\n\nfunction boundsRingPoint(lambda, phi) {\n  if (p0) {\n    var delta = lambda - lambda2;\n    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n  } else {\n    lambda00 = lambda, phi00 = phi;\n  }\n  areaStream.point(lambda, phi);\n  linePoint(lambda, phi);\n}\n\nfunction boundsRingStart() {\n  areaStream.lineStart();\n}\n\nfunction boundsRingEnd() {\n  boundsRingPoint(lambda00, phi00);\n  areaStream.lineEnd();\n  if (abs(deltaSum) > epsilon) lambda0 = -(lambda1 = 180);\n  range[0] = lambda0, range[1] = lambda1;\n  p0 = null;\n}\n\n// Finds the left-right distance between two longitudes.\n// This is almost the same as (lambda1 - lambda0 + 360\u00B0) % 360\u00B0, except that we want\n// the distance between \u00B1180\u00B0 to be 360\u00B0.\nfunction angle(lambda0, lambda1) {\n  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n}\n\nfunction rangeCompare(a, b) {\n  return a[0] - b[0];\n}\n\nfunction rangeContains(range, x) {\n  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n}\n\nexport default function(feature) {\n  var i, n, a, b, merged, deltaMax, delta;\n\n  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);\n  ranges = [];\n  stream(feature, boundsStream);\n\n  // First, sort ranges by their minimum longitudes.\n  if (n = ranges.length) {\n    ranges.sort(rangeCompare);\n\n    // Then, merge any ranges that overlap.\n    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n      b = ranges[i];\n      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n      } else {\n        merged.push(a = b);\n      }\n    }\n\n    // Finally, find the largest gap between the merged ranges.\n    // The final bounding box will be the inverse of this gap.\n    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n      b = merged[i];\n      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];\n    }\n  }\n\n  ranges = range = null;\n\n  return lambda0 === Infinity || phi0 === Infinity\n      ? [[NaN, NaN], [NaN, NaN]]\n      : [[lambda0, phi0], [lambda1, phi1]];\n}\n", "import {Adder} from \"d3-array\";\nimport {asin, atan2, cos, degrees, epsilon, epsilon2, hypot, radians, sin, sqrt} from \"./math.js\";\nimport noop from \"./noop.js\";\nimport stream from \"./stream.js\";\n\nvar W0, W1,\n    X0, Y0, Z0,\n    X1, Y1, Z1,\n    X2, Y2, Z2,\n    lambda00, phi00, // first point\n    x0, y0, z0; // previous point\n\nvar centroidStream = {\n  sphere: noop,\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  }\n};\n\n// Arithmetic mean of Cartesian vectors.\nfunction centroidPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));\n}\n\nfunction centroidPointCartesian(x, y, z) {\n  ++W0;\n  X0 += (x - X0) / W0;\n  Y0 += (y - Y0) / W0;\n  Z0 += (z - Z0) / W0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidLinePointFirst;\n}\n\nfunction centroidLinePointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidStream.point = centroidLinePoint;\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLinePoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\n// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n// J. Applied Mechanics 42, 239 (1975).\nfunction centroidRingStart() {\n  centroidStream.point = centroidRingPointFirst;\n}\n\nfunction centroidRingEnd() {\n  centroidRingPoint(lambda00, phi00);\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingPointFirst(lambda, phi) {\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  centroidStream.point = centroidRingPoint;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidRingPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      cx = y0 * z - z0 * y,\n      cy = z0 * x - x0 * z,\n      cz = x0 * y - y0 * x,\n      m = hypot(cx, cy, cz),\n      w = asin(m), // line weight = angle\n      v = m && -w / m; // area weight multiplier\n  X2.add(v * cx);\n  Y2.add(v * cy);\n  Z2.add(v * cz);\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nexport default function(object) {\n  W0 = W1 =\n  X0 = Y0 = Z0 =\n  X1 = Y1 = Z1 = 0;\n  X2 = new Adder();\n  Y2 = new Adder();\n  Z2 = new Adder();\n  stream(object, centroidStream);\n\n  var x = +X2,\n      y = +Y2,\n      z = +Z2,\n      m = hypot(x, y, z);\n\n  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\n  if (m < epsilon2) {\n    x = X1, y = Y1, z = Z1;\n    // If the feature has zero length, fall back to arithmetic mean of point vectors.\n    if (W1 < epsilon) x = X0, y = Y0, z = Z0;\n    m = hypot(x, y, z);\n    // If the feature still has an undefined ccentroid, then return.\n    if (m < epsilon2) return [NaN, NaN];\n  }\n\n  return [atan2(y, x) * degrees, asin(z / m) * degrees];\n}\n", "export default function(x) {\n  return function() {\n    return x;\n  };\n}\n", "export default function(a, b) {\n\n  function compose(x, y) {\n    return x = a(x, y), b(x[0], x[1]);\n  }\n\n  if (a.invert && b.invert) compose.invert = function(x, y) {\n    return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n  };\n\n  return compose;\n}\n", "import compose from \"./compose.js\";\nimport {abs, asin, atan2, cos, degrees, pi, radians, sin, tau} from \"./math.js\";\n\nfunction rotationIdentity(lambda, phi) {\n  return [abs(lambda) > pi ? lambda + Math.round(-lambda / tau) * tau : lambda, phi];\n}\n\nrotationIdentity.invert = rotationIdentity;\n\nexport function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\n    : rotationLambda(deltaLambda))\n    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\n    : rotationIdentity);\n}\n\nfunction forwardRotationLambda(deltaLambda) {\n  return function(lambda, phi) {\n    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];\n  };\n}\n\nfunction rotationLambda(deltaLambda) {\n  var rotation = forwardRotationLambda(deltaLambda);\n  rotation.invert = forwardRotationLambda(-deltaLambda);\n  return rotation;\n}\n\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\n  var cosDeltaPhi = cos(deltaPhi),\n      sinDeltaPhi = sin(deltaPhi),\n      cosDeltaGamma = cos(deltaGamma),\n      sinDeltaGamma = sin(deltaGamma);\n\n  function rotation(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\n    return [\n      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\n      asin(k * cosDeltaGamma + y * sinDeltaGamma)\n    ];\n  }\n\n  rotation.invert = function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\n    return [\n      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\n      asin(k * cosDeltaPhi - x * sinDeltaPhi)\n    ];\n  };\n\n  return rotation;\n}\n\nexport default function(rotate) {\n  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n  function forward(coordinates) {\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  }\n\n  forward.invert = function(coordinates) {\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  };\n\n  return forward;\n}\n", "import {cartesian, cartesianNormalizeInPlace, spherical} from \"./cartesian.js\";\nimport constant from \"./constant.js\";\nimport {acos, cos, degrees, epsilon, radians, sin, tau} from \"./math.js\";\nimport {rotateRadians} from \"./rotation.js\";\n\n// Generates a circle centered at [0\u00B0, 0\u00B0], with a given radius and precision.\nexport function circleStream(stream, radius, delta, direction, t0, t1) {\n  if (!delta) return;\n  var cosRadius = cos(radius),\n      sinRadius = sin(radius),\n      step = direction * delta;\n  if (t0 == null) {\n    t0 = radius + direction * tau;\n    t1 = radius - step / 2;\n  } else {\n    t0 = circleRadius(cosRadius, t0);\n    t1 = circleRadius(cosRadius, t1);\n    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;\n  }\n  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);\n    stream.point(point[0], point[1]);\n  }\n}\n\n// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\nfunction circleRadius(cosRadius, point) {\n  point = cartesian(point), point[0] -= cosRadius;\n  cartesianNormalizeInPlace(point);\n  var radius = acos(-point[1]);\n  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;\n}\n\nexport default function() {\n  var center = constant([0, 0]),\n      radius = constant(90),\n      precision = constant(6),\n      ring,\n      rotate,\n      stream = {point: point};\n\n  function point(x, y) {\n    ring.push(x = rotate(x, y));\n    x[0] *= degrees, x[1] *= degrees;\n  }\n\n  function circle() {\n    var c = center.apply(this, arguments),\n        r = radius.apply(this, arguments) * radians,\n        p = precision.apply(this, arguments) * radians;\n    ring = [];\n    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\n    circleStream(stream, r, p, 1);\n    c = {type: \"Polygon\", coordinates: [ring]};\n    ring = rotate = null;\n    return c;\n  }\n\n  circle.center = function(_) {\n    return arguments.length ? (center = typeof _ === \"function\" ? _ : constant([+_[0], +_[1]]), circle) : center;\n  };\n\n  circle.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), circle) : radius;\n  };\n\n  circle.precision = function(_) {\n    return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant(+_), circle) : precision;\n  };\n\n  return circle;\n}\n", "import noop from \"../noop.js\";\n\nexport default function() {\n  var lines = [],\n      line;\n  return {\n    point: function(x, y, m) {\n      line.push([x, y, m]);\n    },\n    lineStart: function() {\n      lines.push(line = []);\n    },\n    lineEnd: noop,\n    rejoin: function() {\n      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n    },\n    result: function() {\n      var result = lines;\n      lines = [];\n      line = null;\n      return result;\n    }\n  };\n}\n", "import {abs, epsilon} from \"./math.js\";\n\nexport default function(a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}\n", "import pointEqual from \"../pointEqual.js\";\nimport {epsilon} from \"../math.js\";\n\nfunction Intersection(point, points, other, entry) {\n  this.x = point;\n  this.z = points;\n  this.o = other; // another intersection\n  this.e = entry; // is an entry?\n  this.v = false; // visited\n  this.n = this.p = null; // next & previous\n}\n\n// A generalized polygon clipping algorithm: given a polygon that has been cut\n// into its visible line segments, and rejoins the segments by interpolating\n// along the clip edge.\nexport default function(segments, compareIntersection, startInside, interpolate, stream) {\n  var subject = [],\n      clip = [],\n      i,\n      n;\n\n  segments.forEach(function(segment) {\n    if ((n = segment.length - 1) <= 0) return;\n    var n, p0 = segment[0], p1 = segment[n], x;\n\n    if (pointEqual(p0, p1)) {\n      if (!p0[2] && !p1[2]) {\n        stream.lineStart();\n        for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\n        stream.lineEnd();\n        return;\n      }\n      // handle degenerate cases by moving the point\n      p1[0] += 2 * epsilon;\n    }\n\n    subject.push(x = new Intersection(p0, segment, null, true));\n    clip.push(x.o = new Intersection(p0, null, x, false));\n    subject.push(x = new Intersection(p1, segment, null, false));\n    clip.push(x.o = new Intersection(p1, null, x, true));\n  });\n\n  if (!subject.length) return;\n\n  clip.sort(compareIntersection);\n  link(subject);\n  link(clip);\n\n  for (i = 0, n = clip.length; i < n; ++i) {\n    clip[i].e = startInside = !startInside;\n  }\n\n  var start = subject[0],\n      points,\n      point;\n\n  while (1) {\n    // Find first unvisited intersection.\n    var current = start,\n        isSubject = true;\n    while (current.v) if ((current = current.n) === start) return;\n    points = current.z;\n    stream.lineStart();\n    do {\n      current.v = current.o.v = true;\n      if (current.e) {\n        if (isSubject) {\n          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.n.x, 1, stream);\n        }\n        current = current.n;\n      } else {\n        if (isSubject) {\n          points = current.p.z;\n          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.p.x, -1, stream);\n        }\n        current = current.p;\n      }\n      current = current.o;\n      points = current.z;\n      isSubject = !isSubject;\n    } while (!current.v);\n    stream.lineEnd();\n  }\n}\n\nfunction link(array) {\n  if (!(n = array.length)) return;\n  var n,\n      i = 0,\n      a = array[0],\n      b;\n  while (++i < n) {\n    a.n = b = array[i];\n    b.p = a;\n    a = b;\n  }\n  a.n = b = array[0];\n  b.p = a;\n}\n", "import {Adder} from \"d3-array\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace} from \"./cartesian.js\";\nimport {abs, asin, atan2, cos, epsilon, epsilon2, halfPi, pi, quarterPi, sign, sin, tau} from \"./math.js\";\n\nfunction longitude(point) {\n  return abs(point[0]) <= pi ? point[0] : sign(point[0]) * ((abs(point[0]) + pi) % tau - pi);\n}\n\nexport default function(polygon, point) {\n  var lambda = longitude(point),\n      phi = point[1],\n      sinPhi = sin(phi),\n      normal = [sin(lambda), -cos(lambda), 0],\n      angle = 0,\n      winding = 0;\n\n  var sum = new Adder();\n\n  if (sinPhi === 1) phi = halfPi + epsilon;\n  else if (sinPhi === -1) phi = -halfPi - epsilon;\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = longitude(point0),\n        phi0 = point0[1] / 2 + quarterPi,\n        sinPhi0 = sin(phi0),\n        cosPhi0 = cos(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = longitude(point1),\n          phi1 = point1[1] / 2 + quarterPi,\n          sinPhi1 = sin(phi1),\n          cosPhi1 = cos(phi1),\n          delta = lambda1 - lambda0,\n          sign = delta >= 0 ? 1 : -1,\n          absDelta = sign * delta,\n          antimeridian = absDelta > pi,\n          k = sinPhi0 * sinPhi1;\n\n      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign * tau : delta;\n\n      // Are the longitudes either side of the point\u2019s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  }\n\n  // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon2) ^ (winding & 1);\n}\n", "import clipBuffer from \"./buffer.js\";\nimport clipRejoin from \"./rejoin.js\";\nimport {epsilon, halfPi} from \"../math.js\";\nimport polygonContains from \"../polygonContains.js\";\nimport {merge} from \"d3-array\";\n\nexport default function(pointVisible, clipLine, interpolate, start) {\n  return function(sink) {\n    var line = clipLine(sink),\n        ringBuffer = clipBuffer(),\n        ringSink = clipLine(ringBuffer),\n        polygonStarted = false,\n        polygon,\n        segments,\n        ring;\n\n    var clip = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        clip.point = pointRing;\n        clip.lineStart = ringStart;\n        clip.lineEnd = ringEnd;\n        segments = [];\n        polygon = [];\n      },\n      polygonEnd: function() {\n        clip.point = point;\n        clip.lineStart = lineStart;\n        clip.lineEnd = lineEnd;\n        segments = merge(segments);\n        var startInside = polygonContains(polygon, start);\n        if (segments.length) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          clipRejoin(segments, compareIntersection, startInside, interpolate, sink);\n        } else if (startInside) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n        }\n        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n        segments = polygon = null;\n      },\n      sphere: function() {\n        sink.polygonStart();\n        sink.lineStart();\n        interpolate(null, null, 1, sink);\n        sink.lineEnd();\n        sink.polygonEnd();\n      }\n    };\n\n    function point(lambda, phi) {\n      if (pointVisible(lambda, phi)) sink.point(lambda, phi);\n    }\n\n    function pointLine(lambda, phi) {\n      line.point(lambda, phi);\n    }\n\n    function lineStart() {\n      clip.point = pointLine;\n      line.lineStart();\n    }\n\n    function lineEnd() {\n      clip.point = point;\n      line.lineEnd();\n    }\n\n    function pointRing(lambda, phi) {\n      ring.push([lambda, phi]);\n      ringSink.point(lambda, phi);\n    }\n\n    function ringStart() {\n      ringSink.lineStart();\n      ring = [];\n    }\n\n    function ringEnd() {\n      pointRing(ring[0][0], ring[0][1]);\n      ringSink.lineEnd();\n\n      var clean = ringSink.clean(),\n          ringSegments = ringBuffer.result(),\n          i, n = ringSegments.length, m,\n          segment,\n          point;\n\n      ring.pop();\n      polygon.push(ring);\n      ring = null;\n\n      if (!n) return;\n\n      // No intersections.\n      if (clean & 1) {\n        segment = ringSegments[0];\n        if ((m = segment.length - 1) > 0) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\n          sink.lineEnd();\n        }\n        return;\n      }\n\n      // Rejoin connected segments.\n      // TODO reuse ringBuffer.rejoin()?\n      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n\n      segments.push(ringSegments.filter(validSegment));\n    }\n\n    return clip;\n  };\n}\n\nfunction validSegment(segment) {\n  return segment.length > 1;\n}\n\n// Intersections are sorted along the clip edge. For both antimeridian cutting\n// and circle clipping, the same comparison is used.\nfunction compareIntersection(a, b) {\n  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1])\n       - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);\n}\n", "import clip from \"./index.js\";\nimport {abs, atan, cos, epsilon, halfPi, pi, sin} from \"../math.js\";\n\nexport default clip(\n  function() { return true; },\n  clipAntimeridianLine,\n  clipAntimeridianInterpolate,\n  [-pi, -halfPi]\n);\n\n// Takes a line and cuts into visible segments. Return values: 0 - there were\n// intersections or the line was empty; 1 - no intersections; 2 - there were\n// intersections, and the first and last segments should be rejoined.\nfunction clipAntimeridianLine(stream) {\n  var lambda0 = NaN,\n      phi0 = NaN,\n      sign0 = NaN,\n      clean; // no intersections\n\n  return {\n    lineStart: function() {\n      stream.lineStart();\n      clean = 1;\n    },\n    point: function(lambda1, phi1) {\n      var sign1 = lambda1 > 0 ? pi : -pi,\n          delta = abs(lambda1 - lambda0);\n      if (abs(delta - pi) < epsilon) { // line crosses a pole\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        stream.point(lambda1, phi0);\n        clean = 0;\n      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian\n        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies\n        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        clean = 0;\n      }\n      stream.point(lambda0 = lambda1, phi0 = phi1);\n      sign0 = sign1;\n    },\n    lineEnd: function() {\n      stream.lineEnd();\n      lambda0 = phi0 = NaN;\n    },\n    clean: function() {\n      return 2 - clean; // if intersections, rejoin first and last segments\n    }\n  };\n}\n\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n  var cosPhi0,\n      cosPhi1,\n      sinLambda0Lambda1 = sin(lambda0 - lambda1);\n  return abs(sinLambda0Lambda1) > epsilon\n      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)\n          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))\n          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\n      : (phi0 + phi1) / 2;\n}\n\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\n  var phi;\n  if (from == null) {\n    phi = direction * halfPi;\n    stream.point(-pi, phi);\n    stream.point(0, phi);\n    stream.point(pi, phi);\n    stream.point(pi, 0);\n    stream.point(pi, -phi);\n    stream.point(0, -phi);\n    stream.point(-pi, -phi);\n    stream.point(-pi, 0);\n    stream.point(-pi, phi);\n  } else if (abs(from[0] - to[0]) > epsilon) {\n    var lambda = from[0] < to[0] ? pi : -pi;\n    phi = direction * lambda / 2;\n    stream.point(-lambda, phi);\n    stream.point(0, phi);\n    stream.point(lambda, phi);\n  } else {\n    stream.point(to[0], to[1]);\n  }\n}\n", "import {cartesian, cartesianAddInPlace, cartesianCross, cartesianDot, cartesianScale, spherical} from \"../cartesian.js\";\nimport {circleStream} from \"../circle.js\";\nimport {abs, cos, epsilon, pi, radians, sqrt} from \"../math.js\";\nimport pointEqual from \"../pointEqual.js\";\nimport clip from \"./index.js\";\n\nexport default function(radius) {\n  var cr = cos(radius),\n      delta = 6 * radians,\n      smallRadius = cr > 0,\n      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case\n\n  function interpolate(from, to, direction, stream) {\n    circleStream(stream, radius, delta, direction, from, to);\n  }\n\n  function visible(lambda, phi) {\n    return cos(lambda) * cos(phi) > cr;\n  }\n\n  // Takes a line and cuts into visible segments. Return values used for polygon\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\n  // intersections 2 - there were intersections, and the first and last segments\n  // should be rejoined.\n  function clipLine(stream) {\n    var point0, // previous point\n        c0, // code for previous point\n        v0, // visibility of previous point\n        v00, // visibility of first point\n        clean; // no intersections\n    return {\n      lineStart: function() {\n        v00 = v0 = false;\n        clean = 1;\n      },\n      point: function(lambda, phi) {\n        var point1 = [lambda, phi],\n            point2,\n            v = visible(lambda, phi),\n            c = smallRadius\n              ? v ? 0 : code(lambda, phi)\n              : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;\n        if (!point0 && (v00 = v0 = v)) stream.lineStart();\n        if (v !== v0) {\n          point2 = intersect(point0, point1);\n          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2))\n            point1[2] = 1;\n        }\n        if (v !== v0) {\n          clean = 0;\n          if (v) {\n            // outside going in\n            stream.lineStart();\n            point2 = intersect(point1, point0);\n            stream.point(point2[0], point2[1]);\n          } else {\n            // inside going out\n            point2 = intersect(point0, point1);\n            stream.point(point2[0], point2[1], 2);\n            stream.lineEnd();\n          }\n          point0 = point2;\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\n          var t;\n          // If the codes for two points are different, or are both zero,\n          // and there this segment intersects with the small circle.\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\n            clean = 0;\n            if (smallRadius) {\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n            } else {\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1], 3);\n            }\n          }\n        }\n        if (v && (!point0 || !pointEqual(point0, point1))) {\n          stream.point(point1[0], point1[1]);\n        }\n        point0 = point1, v0 = v, c0 = c;\n      },\n      lineEnd: function() {\n        if (v0) stream.lineEnd();\n        point0 = null;\n      },\n      // Rejoin first and last segments if there were intersections and the first\n      // and last points were visible.\n      clean: function() {\n        return clean | ((v00 && v0) << 1);\n      }\n    };\n  }\n\n  // Intersects the great circle between a and b with the clip circle.\n  function intersect(a, b, two) {\n    var pa = cartesian(a),\n        pb = cartesian(b);\n\n    // We have two planes, n1.p = d1 and n2.p = d2.\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 \u2A2F n2).\n    var n1 = [1, 0, 0], // normal\n        n2 = cartesianCross(pa, pb),\n        n2n2 = cartesianDot(n2, n2),\n        n1n2 = n2[0], // cartesianDot(n1, n2),\n        determinant = n2n2 - n1n2 * n1n2;\n\n    // Two polar points.\n    if (!determinant) return !two && a;\n\n    var c1 =  cr * n2n2 / determinant,\n        c2 = -cr * n1n2 / determinant,\n        n1xn2 = cartesianCross(n1, n2),\n        A = cartesianScale(n1, c1),\n        B = cartesianScale(n2, c2);\n    cartesianAddInPlace(A, B);\n\n    // Solve |p(t)|^2 = 1.\n    var u = n1xn2,\n        w = cartesianDot(A, u),\n        uu = cartesianDot(u, u),\n        t2 = w * w - uu * (cartesianDot(A, A) - 1);\n\n    if (t2 < 0) return;\n\n    var t = sqrt(t2),\n        q = cartesianScale(u, (-w - t) / uu);\n    cartesianAddInPlace(q, A);\n    q = spherical(q);\n\n    if (!two) return q;\n\n    // Two intersection points.\n    var lambda0 = a[0],\n        lambda1 = b[0],\n        phi0 = a[1],\n        phi1 = b[1],\n        z;\n\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n\n    var delta = lambda1 - lambda0,\n        polar = abs(delta - pi) < epsilon,\n        meridian = polar || delta < epsilon;\n\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\n\n    // Check that the first point is between a and b.\n    if (meridian\n        ? polar\n          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1)\n          : phi0 <= q[1] && q[1] <= phi1\n        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n      var q1 = cartesianScale(u, (-w + t) / uu);\n      cartesianAddInPlace(q1, A);\n      return [q, spherical(q1)];\n    }\n  }\n\n  // Generates a 4-bit vector representing the location of a point relative to\n  // the small circle's bounding box.\n  function code(lambda, phi) {\n    var r = smallRadius ? radius : pi - radius,\n        code = 0;\n    if (lambda < -r) code |= 1; // left\n    else if (lambda > r) code |= 2; // right\n    if (phi < -r) code |= 4; // below\n    else if (phi > r) code |= 8; // above\n    return code;\n  }\n\n  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);\n}\n", "export default function(a, b, x0, y0, x1, y1) {\n  var ax = a[0],\n      ay = a[1],\n      bx = b[0],\n      by = b[1],\n      t0 = 0,\n      t1 = 1,\n      dx = bx - ax,\n      dy = by - ay,\n      r;\n\n  r = x0 - ax;\n  if (!dx && r > 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dx > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = x1 - ax;\n  if (!dx && r < 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dx > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  r = y0 - ay;\n  if (!dy && r > 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dy > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = y1 - ay;\n  if (!dy && r < 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dy > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n  return true;\n}\n", "import {abs, epsilon} from \"../math.js\";\nimport clipBuffer from \"./buffer.js\";\nimport clipLine from \"./line.js\";\nimport clipRejoin from \"./rejoin.js\";\nimport {merge} from \"d3-array\";\n\nvar clipMax = 1e9, clipMin = -clipMax;\n\n// TODO Use d3-polygon\u2019s polygonContains here for the ring check?\n// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\nexport default function clipRectangle(x0, y0, x1, y1) {\n\n  function visible(x, y) {\n    return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n  }\n\n  function interpolate(from, to, direction, stream) {\n    var a = 0, a1 = 0;\n    if (from == null\n        || (a = corner(from, direction)) !== (a1 = corner(to, direction))\n        || comparePoint(from, to) < 0 ^ direction > 0) {\n      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n      while ((a = (a + direction + 4) % 4) !== a1);\n    } else {\n      stream.point(to[0], to[1]);\n    }\n  }\n\n  function corner(p, direction) {\n    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3\n        : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1\n        : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0\n        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n  }\n\n  function compareIntersection(a, b) {\n    return comparePoint(a.x, b.x);\n  }\n\n  function comparePoint(a, b) {\n    var ca = corner(a, 1),\n        cb = corner(b, 1);\n    return ca !== cb ? ca - cb\n        : ca === 0 ? b[1] - a[1]\n        : ca === 1 ? a[0] - b[0]\n        : ca === 2 ? a[1] - b[1]\n        : b[0] - a[0];\n  }\n\n  return function(stream) {\n    var activeStream = stream,\n        bufferStream = clipBuffer(),\n        segments,\n        polygon,\n        ring,\n        x__, y__, v__, // first point\n        x_, y_, v_, // previous point\n        first,\n        clean;\n\n    var clipStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: polygonStart,\n      polygonEnd: polygonEnd\n    };\n\n    function point(x, y) {\n      if (visible(x, y)) activeStream.point(x, y);\n    }\n\n    function polygonInside() {\n      var winding = 0;\n\n      for (var i = 0, n = polygon.length; i < n; ++i) {\n        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\n          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\n        }\n      }\n\n      return winding;\n    }\n\n    // Buffer geometry within a polygon and then clip it en masse.\n    function polygonStart() {\n      activeStream = bufferStream, segments = [], polygon = [], clean = true;\n    }\n\n    function polygonEnd() {\n      var startInside = polygonInside(),\n          cleanInside = clean && startInside,\n          visible = (segments = merge(segments)).length;\n      if (cleanInside || visible) {\n        stream.polygonStart();\n        if (cleanInside) {\n          stream.lineStart();\n          interpolate(null, null, 1, stream);\n          stream.lineEnd();\n        }\n        if (visible) {\n          clipRejoin(segments, compareIntersection, startInside, interpolate, stream);\n        }\n        stream.polygonEnd();\n      }\n      activeStream = stream, segments = polygon = ring = null;\n    }\n\n    function lineStart() {\n      clipStream.point = linePoint;\n      if (polygon) polygon.push(ring = []);\n      first = true;\n      v_ = false;\n      x_ = y_ = NaN;\n    }\n\n    // TODO rather than special-case polygons, simply handle them separately.\n    // Ideally, coincident intersection points should be jittered to avoid\n    // clipping issues.\n    function lineEnd() {\n      if (segments) {\n        linePoint(x__, y__);\n        if (v__ && v_) bufferStream.rejoin();\n        segments.push(bufferStream.result());\n      }\n      clipStream.point = point;\n      if (v_) activeStream.lineEnd();\n    }\n\n    function linePoint(x, y) {\n      var v = visible(x, y);\n      if (polygon) ring.push([x, y]);\n      if (first) {\n        x__ = x, y__ = y, v__ = v;\n        first = false;\n        if (v) {\n          activeStream.lineStart();\n          activeStream.point(x, y);\n        }\n      } else {\n        if (v && v_) activeStream.point(x, y);\n        else {\n          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n          if (clipLine(a, b, x0, y0, x1, y1)) {\n            if (!v_) {\n              activeStream.lineStart();\n              activeStream.point(a[0], a[1]);\n            }\n            activeStream.point(b[0], b[1]);\n            if (!v) activeStream.lineEnd();\n            clean = false;\n          } else if (v) {\n            activeStream.lineStart();\n            activeStream.point(x, y);\n            clean = false;\n          }\n        }\n      }\n      x_ = x, y_ = y, v_ = v;\n    }\n\n    return clipStream;\n  };\n}\n", "import {Adder} from \"d3-array\";\nimport {abs, atan2, cos, radians, sin, sqrt} from \"./math.js\";\nimport noop from \"./noop.js\";\nimport stream from \"./stream.js\";\n\nvar lengthSum,\n    lambda0,\n    sinPhi0,\n    cosPhi0;\n\nvar lengthStream = {\n  sphere: noop,\n  point: noop,\n  lineStart: lengthLineStart,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop\n};\n\nfunction lengthLineStart() {\n  lengthStream.point = lengthPointFirst;\n  lengthStream.lineEnd = lengthLineEnd;\n}\n\nfunction lengthLineEnd() {\n  lengthStream.point = lengthStream.lineEnd = noop;\n}\n\nfunction lengthPointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, sinPhi0 = sin(phi), cosPhi0 = cos(phi);\n  lengthStream.point = lengthPoint;\n}\n\nfunction lengthPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var sinPhi = sin(phi),\n      cosPhi = cos(phi),\n      delta = abs(lambda - lambda0),\n      cosDelta = cos(delta),\n      sinDelta = sin(delta),\n      x = cosPhi * sinDelta,\n      y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,\n      z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;\n  lengthSum.add(atan2(sqrt(x * x + y * y), z));\n  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;\n}\n\nexport default function(object) {\n  lengthSum = new Adder();\n  stream(object, lengthStream);\n  return +lengthSum;\n}\n", "import length from \"./length.js\";\n\nvar coordinates = [null, null],\n    object = {type: \"LineString\", coordinates: coordinates};\n\nexport default function(a, b) {\n  coordinates[0] = a;\n  coordinates[1] = b;\n  return length(object);\n}\n", "import {range} from \"d3-array\";\nimport {abs, ceil, epsilon} from \"./math.js\";\n\nfunction graticuleX(y0, y1, dy) {\n  var y = range(y0, y1 - epsilon, dy).concat(y1);\n  return function(x) { return y.map(function(y) { return [x, y]; }); };\n}\n\nfunction graticuleY(x0, x1, dx) {\n  var x = range(x0, x1 - epsilon, dx).concat(x1);\n  return function(y) { return x.map(function(x) { return [x, y]; }); };\n}\n\nexport default function graticule() {\n  var x1, x0, X1, X0,\n      y1, y0, Y1, Y0,\n      dx = 10, dy = dx, DX = 90, DY = 360,\n      x, y, X, Y,\n      precision = 2.5;\n\n  function graticule() {\n    return {type: \"MultiLineString\", coordinates: lines()};\n  }\n\n  function lines() {\n    return range(ceil(X0 / DX) * DX, X1, DX).map(X)\n        .concat(range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))\n        .concat(range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon; }).map(x))\n        .concat(range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon; }).map(y));\n  }\n\n  graticule.lines = function() {\n    return lines().map(function(coordinates) { return {type: \"LineString\", coordinates: coordinates}; });\n  };\n\n  graticule.outline = function() {\n    return {\n      type: \"Polygon\",\n      coordinates: [\n        X(X0).concat(\n        Y(Y1).slice(1),\n        X(X1).reverse().slice(1),\n        Y(Y0).reverse().slice(1))\n      ]\n    };\n  };\n\n  graticule.extent = function(_) {\n    if (!arguments.length) return graticule.extentMinor();\n    return graticule.extentMajor(_).extentMinor(_);\n  };\n\n  graticule.extentMajor = function(_) {\n    if (!arguments.length) return [[X0, Y0], [X1, Y1]];\n    X0 = +_[0][0], X1 = +_[1][0];\n    Y0 = +_[0][1], Y1 = +_[1][1];\n    if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.extentMinor = function(_) {\n    if (!arguments.length) return [[x0, y0], [x1, y1]];\n    x0 = +_[0][0], x1 = +_[1][0];\n    y0 = +_[0][1], y1 = +_[1][1];\n    if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n    if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.step = function(_) {\n    if (!arguments.length) return graticule.stepMinor();\n    return graticule.stepMajor(_).stepMinor(_);\n  };\n\n  graticule.stepMajor = function(_) {\n    if (!arguments.length) return [DX, DY];\n    DX = +_[0], DY = +_[1];\n    return graticule;\n  };\n\n  graticule.stepMinor = function(_) {\n    if (!arguments.length) return [dx, dy];\n    dx = +_[0], dy = +_[1];\n    return graticule;\n  };\n\n  graticule.precision = function(_) {\n    if (!arguments.length) return precision;\n    precision = +_;\n    x = graticuleX(y0, y1, 90);\n    y = graticuleY(x0, x1, precision);\n    X = graticuleX(Y0, Y1, 90);\n    Y = graticuleY(X0, X1, precision);\n    return graticule;\n  };\n\n  return graticule\n      .extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]])\n      .extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);\n}\n\nexport function graticule10() {\n  return graticule()();\n}\n", "import {asin, atan2, cos, degrees, haversin, radians, sin, sqrt} from \"./math.js\";\n\nexport default function(a, b) {\n  var x0 = a[0] * radians,\n      y0 = a[1] * radians,\n      x1 = b[0] * radians,\n      y1 = b[1] * radians,\n      cy0 = cos(y0),\n      sy0 = sin(y0),\n      cy1 = cos(y1),\n      sy1 = sin(y1),\n      kx0 = cy0 * cos(x0),\n      ky0 = cy0 * sin(x0),\n      kx1 = cy1 * cos(x1),\n      ky1 = cy1 * sin(x1),\n      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\n      k = sin(d);\n\n  var interpolate = d ? function(t) {\n    var B = sin(t *= d) / k,\n        A = sin(d - t) / k,\n        x = A * kx0 + B * kx1,\n        y = A * ky0 + B * ky1,\n        z = A * sy0 + B * sy1;\n    return [\n      atan2(y, x) * degrees,\n      atan2(z, sqrt(x * x + y * y)) * degrees\n    ];\n  } : function() {\n    return [x0 * degrees, y0 * degrees];\n  };\n\n  interpolate.distance = d;\n\n  return interpolate;\n}\n", "export default x => x;\n", "import {Adder} from \"d3-array\";\nimport {abs} from \"../math.js\";\nimport noop from \"../noop.js\";\n\nvar areaSum = new Adder(),\n    areaRingSum = new Adder(),\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop;\n    areaSum.add(abs(areaRingSum));\n    areaRingSum = new Adder();\n  },\n  result: function() {\n    var area = areaSum / 2;\n    areaSum = new Adder();\n    return area;\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaPointFirst(x, y) {\n  areaStream.point = areaPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction areaPoint(x, y) {\n  areaRingSum.add(y0 * x - x0 * y);\n  x0 = x, y0 = y;\n}\n\nfunction areaRingEnd() {\n  areaPoint(x00, y00);\n}\n\nexport default areaStream;\n", "import noop from \"../noop.js\";\n\nvar x0 = Infinity,\n    y0 = x0,\n    x1 = -x0,\n    y1 = x1;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop,\n  result: function() {\n    var bounds = [[x0, y0], [x1, y1]];\n    x1 = y1 = -(y0 = x0 = Infinity);\n    return bounds;\n  }\n};\n\nfunction boundsPoint(x, y) {\n  if (x < x0) x0 = x;\n  if (x > x1) x1 = x;\n  if (y < y0) y0 = y;\n  if (y > y1) y1 = y;\n}\n\nexport default boundsStream;\n", "import {sqrt} from \"../math.js\";\n\n// TODO Enforce positive area for exterior, negative area for interior?\n\nvar X0 = 0,\n    Y0 = 0,\n    Z0 = 0,\n    X1 = 0,\n    Y1 = 0,\n    Z1 = 0,\n    X2 = 0,\n    Y2 = 0,\n    Z2 = 0,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar centroidStream = {\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.point = centroidPoint;\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  },\n  result: function() {\n    var centroid = Z2 ? [X2 / Z2, Y2 / Z2]\n        : Z1 ? [X1 / Z1, Y1 / Z1]\n        : Z0 ? [X0 / Z0, Y0 / Z0]\n        : [NaN, NaN];\n    X0 = Y0 = Z0 =\n    X1 = Y1 = Z1 =\n    X2 = Y2 = Z2 = 0;\n    return centroid;\n  }\n};\n\nfunction centroidPoint(x, y) {\n  X0 += x;\n  Y0 += y;\n  ++Z0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidPointFirstLine;\n}\n\nfunction centroidPointFirstLine(x, y) {\n  centroidStream.point = centroidPointLine;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidPointLine(x, y) {\n  var dx = x - x0, dy = y - y0, z = sqrt(dx * dx + dy * dy);\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingStart() {\n  centroidStream.point = centroidPointFirstRing;\n}\n\nfunction centroidRingEnd() {\n  centroidPointRing(x00, y00);\n}\n\nfunction centroidPointFirstRing(x, y) {\n  centroidStream.point = centroidPointRing;\n  centroidPoint(x00 = x0 = x, y00 = y0 = y);\n}\n\nfunction centroidPointRing(x, y) {\n  var dx = x - x0,\n      dy = y - y0,\n      z = sqrt(dx * dx + dy * dy);\n\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n\n  z = y0 * x - x0 * y;\n  X2 += z * (x0 + x);\n  Y2 += z * (y0 + y);\n  Z2 += z * 3;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nexport default centroidStream;\n", "import {tau} from \"../math.js\";\nimport noop from \"../noop.js\";\n\nexport default function PathContext(context) {\n  this._context = context;\n}\n\nPathContext.prototype = {\n  _radius: 4.5,\n  pointRadius: function(_) {\n    return this._radius = _, this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._context.closePath();\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._context.moveTo(x, y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._context.lineTo(x, y);\n        break;\n      }\n      default: {\n        this._context.moveTo(x + this._radius, y);\n        this._context.arc(x, y, this._radius, 0, tau);\n        break;\n      }\n    }\n  },\n  result: noop\n};\n", "import {Adder} from \"d3-array\";\nimport {sqrt} from \"../math.js\";\nimport noop from \"../noop.js\";\n\nvar lengthSum = new Adder(),\n    lengthRing,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar lengthStream = {\n  point: noop,\n  lineStart: function() {\n    lengthStream.point = lengthPointFirst;\n  },\n  lineEnd: function() {\n    if (lengthRing) lengthPoint(x00, y00);\n    lengthStream.point = noop;\n  },\n  polygonStart: function() {\n    lengthRing = true;\n  },\n  polygonEnd: function() {\n    lengthRing = null;\n  },\n  result: function() {\n    var length = +lengthSum;\n    lengthSum = new Adder();\n    return length;\n  }\n};\n\nfunction lengthPointFirst(x, y) {\n  lengthStream.point = lengthPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction lengthPoint(x, y) {\n  x0 -= x, y0 -= y;\n  lengthSum.add(sqrt(x0 * x0 + y0 * y0));\n  x0 = x, y0 = y;\n}\n\nexport default lengthStream;\n", "export default function PathString() {\n  this._string = [];\n}\n\nPathString.prototype = {\n  _radius: 4.5,\n  _circle: circle(4.5),\n  pointRadius: function(_) {\n    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;\n    return this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._string.push(\"Z\");\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._string.push(\"M\", x, \",\", y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._string.push(\"L\", x, \",\", y);\n        break;\n      }\n      default: {\n        if (this._circle == null) this._circle = circle(this._radius);\n        this._string.push(\"M\", x, \",\", y, this._circle);\n        break;\n      }\n    }\n  },\n  result: function() {\n    if (this._string.length) {\n      var result = this._string.join(\"\");\n      this._string = [];\n      return result;\n    } else {\n      return null;\n    }\n  }\n};\n\nfunction circle(radius) {\n  return \"m0,\" + radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius\n      + \"z\";\n}\n", "import identity from \"../identity.js\";\nimport stream from \"../stream.js\";\nimport pathArea from \"./area.js\";\nimport pathBounds from \"./bounds.js\";\nimport pathCentroid from \"./centroid.js\";\nimport PathContext from \"./context.js\";\nimport pathMeasure from \"./measure.js\";\nimport PathString from \"./string.js\";\n\nexport default function(projection, context) {\n  var pointRadius = 4.5,\n      projectionStream,\n      contextStream;\n\n  function path(object) {\n    if (object) {\n      if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n      stream(object, projectionStream(contextStream));\n    }\n    return contextStream.result();\n  }\n\n  path.area = function(object) {\n    stream(object, projectionStream(pathArea));\n    return pathArea.result();\n  };\n\n  path.measure = function(object) {\n    stream(object, projectionStream(pathMeasure));\n    return pathMeasure.result();\n  };\n\n  path.bounds = function(object) {\n    stream(object, projectionStream(pathBounds));\n    return pathBounds.result();\n  };\n\n  path.centroid = function(object) {\n    stream(object, projectionStream(pathCentroid));\n    return pathCentroid.result();\n  };\n\n  path.projection = function(_) {\n    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;\n  };\n\n  path.context = function(_) {\n    if (!arguments.length) return context;\n    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);\n    if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n    return path;\n  };\n\n  path.pointRadius = function(_) {\n    if (!arguments.length) return pointRadius;\n    pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n    return path;\n  };\n\n  return path.projection(projection).context(context);\n}\n", "export default function(methods) {\n  return {\n    stream: transformer(methods)\n  };\n}\n\nexport function transformer(methods) {\n  return function(stream) {\n    var s = new TransformStream;\n    for (var key in methods) s[key] = methods[key];\n    s.stream = stream;\n    return s;\n  };\n}\n\nfunction TransformStream() {}\n\nTransformStream.prototype = {\n  constructor: TransformStream,\n  point: function(x, y) { this.stream.point(x, y); },\n  sphere: function() { this.stream.sphere(); },\n  lineStart: function() { this.stream.lineStart(); },\n  lineEnd: function() { this.stream.lineEnd(); },\n  polygonStart: function() { this.stream.polygonStart(); },\n  polygonEnd: function() { this.stream.polygonEnd(); }\n};\n", "import {default as geoStream} from \"../stream.js\";\nimport boundsStream from \"../path/bounds.js\";\n\nfunction fit(projection, fitBounds, object) {\n  var clip = projection.clipExtent && projection.clipExtent();\n  projection.scale(150).translate([0, 0]);\n  if (clip != null) projection.clipExtent(null);\n  geoStream(object, projection.stream(boundsStream));\n  fitBounds(boundsStream.result());\n  if (clip != null) projection.clipExtent(clip);\n  return projection;\n}\n\nexport function fitExtent(projection, extent, object) {\n  return fit(projection, function(b) {\n    var w = extent[1][0] - extent[0][0],\n        h = extent[1][1] - extent[0][1],\n        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\n        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\n        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nexport function fitSize(projection, size, object) {\n  return fitExtent(projection, [[0, 0], size], object);\n}\n\nexport function fitWidth(projection, width, object) {\n  return fit(projection, function(b) {\n    var w = +width,\n        k = w / (b[1][0] - b[0][0]),\n        x = (w - k * (b[1][0] + b[0][0])) / 2,\n        y = -k * b[0][1];\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nexport function fitHeight(projection, height, object) {\n  return fit(projection, function(b) {\n    var h = +height,\n        k = h / (b[1][1] - b[0][1]),\n        x = -k * b[0][0],\n        y = (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n", "import {cartesian} from \"../cartesian.js\";\nimport {abs, asin, atan2, cos, epsilon, radians, sqrt} from \"../math.js\";\nimport {transformer} from \"../transform.js\";\n\nvar maxDepth = 16, // maximum depth of subdivision\n    cosMinDistance = cos(30 * radians); // cos(minimum angular distance)\n\nexport default function(project, delta2) {\n  return +delta2 ? resample(project, delta2) : resampleNone(project);\n}\n\nfunction resampleNone(project) {\n  return transformer({\n    point: function(x, y) {\n      x = project(x, y);\n      this.stream.point(x[0], x[1]);\n    }\n  });\n}\n\nfunction resample(project, delta2) {\n\n  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n    var dx = x1 - x0,\n        dy = y1 - y0,\n        d2 = dx * dx + dy * dy;\n    if (d2 > 4 * delta2 && depth--) {\n      var a = a0 + a1,\n          b = b0 + b1,\n          c = c0 + c1,\n          m = sqrt(a * a + b * b + c * c),\n          phi2 = asin(c /= m),\n          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),\n          p = project(lambda2, phi2),\n          x2 = p[0],\n          y2 = p[1],\n          dx2 = x2 - x0,\n          dy2 = y2 - y0,\n          dz = dy * dx2 - dx * dy2;\n      if (dz * dz / d2 > delta2 // perpendicular projected distance\n          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n        stream.point(x2, y2);\n        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n      }\n    }\n  }\n  return function(stream) {\n    var lambda00, x00, y00, a00, b00, c00, // first point\n        lambda0, x0, y0, a0, b0, c0; // previous point\n\n    var resampleStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },\n      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }\n    };\n\n    function point(x, y) {\n      x = project(x, y);\n      stream.point(x[0], x[1]);\n    }\n\n    function lineStart() {\n      x0 = NaN;\n      resampleStream.point = linePoint;\n      stream.lineStart();\n    }\n\n    function linePoint(lambda, phi) {\n      var c = cartesian([lambda, phi]), p = project(lambda, phi);\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n      stream.point(x0, y0);\n    }\n\n    function lineEnd() {\n      resampleStream.point = point;\n      stream.lineEnd();\n    }\n\n    function ringStart() {\n      lineStart();\n      resampleStream.point = ringPoint;\n      resampleStream.lineEnd = ringEnd;\n    }\n\n    function ringPoint(lambda, phi) {\n      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n      resampleStream.point = linePoint;\n    }\n\n    function ringEnd() {\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n      resampleStream.lineEnd = lineEnd;\n      lineEnd();\n    }\n\n    return resampleStream;\n  };\n}\n", "import clipAntimeridian from \"../clip/antimeridian.js\";\nimport clipCircle from \"../clip/circle.js\";\nimport clipRectangle from \"../clip/rectangle.js\";\nimport compose from \"../compose.js\";\nimport identity from \"../identity.js\";\nimport {cos, degrees, radians, sin, sqrt} from \"../math.js\";\nimport {rotateRadians} from \"../rotation.js\";\nimport {transformer} from \"../transform.js\";\nimport {fitExtent, fitSize, fitWidth, fitHeight} from \"./fit.js\";\nimport resample from \"./resample.js\";\n\nvar transformRadians = transformer({\n  point: function(x, y) {\n    this.stream.point(x * radians, y * radians);\n  }\n});\n\nfunction transformRotate(rotate) {\n  return transformer({\n    point: function(x, y) {\n      var r = rotate(x, y);\n      return this.stream.point(r[0], r[1]);\n    }\n  });\n}\n\nfunction scaleTranslate(k, dx, dy, sx, sy) {\n  function transform(x, y) {\n    x *= sx; y *= sy;\n    return [dx + k * x, dy - k * y];\n  }\n  transform.invert = function(x, y) {\n    return [(x - dx) / k * sx, (dy - y) / k * sy];\n  };\n  return transform;\n}\n\nfunction scaleTranslateRotate(k, dx, dy, sx, sy, alpha) {\n  if (!alpha) return scaleTranslate(k, dx, dy, sx, sy);\n  var cosAlpha = cos(alpha),\n      sinAlpha = sin(alpha),\n      a = cosAlpha * k,\n      b = sinAlpha * k,\n      ai = cosAlpha / k,\n      bi = sinAlpha / k,\n      ci = (sinAlpha * dy - cosAlpha * dx) / k,\n      fi = (sinAlpha * dx + cosAlpha * dy) / k;\n  function transform(x, y) {\n    x *= sx; y *= sy;\n    return [a * x - b * y + dx, dy - b * x - a * y];\n  }\n  transform.invert = function(x, y) {\n    return [sx * (ai * x - bi * y + ci), sy * (fi - bi * x - ai * y)];\n  };\n  return transform;\n}\n\nexport default function projection(project) {\n  return projectionMutator(function() { return project; })();\n}\n\nexport function projectionMutator(projectAt) {\n  var project,\n      k = 150, // scale\n      x = 480, y = 250, // translate\n      lambda = 0, phi = 0, // center\n      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, // pre-rotate\n      alpha = 0, // post-rotate angle\n      sx = 1, // reflectX\n      sy = 1, // reflectX\n      theta = null, preclip = clipAntimeridian, // pre-clip angle\n      x0 = null, y0, x1, y1, postclip = identity, // post-clip extent\n      delta2 = 0.5, // precision\n      projectResample,\n      projectTransform,\n      projectRotateTransform,\n      cache,\n      cacheStream;\n\n  function projection(point) {\n    return projectRotateTransform(point[0] * radians, point[1] * radians);\n  }\n\n  function invert(point) {\n    point = projectRotateTransform.invert(point[0], point[1]);\n    return point && [point[0] * degrees, point[1] * degrees];\n  }\n\n  projection.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));\n  };\n\n  projection.preclip = function(_) {\n    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;\n  };\n\n  projection.postclip = function(_) {\n    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n  };\n\n  projection.clipAngle = function(_) {\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n  };\n\n  projection.clipExtent = function(_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  projection.scale = function(_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n\n  projection.translate = function(_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n\n  projection.center = function(_) {\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n  };\n\n  projection.rotate = function(_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n  };\n\n  projection.angle = function(_) {\n    return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees;\n  };\n\n  projection.reflectX = function(_) {\n    return arguments.length ? (sx = _ ? -1 : 1, recenter()) : sx < 0;\n  };\n\n  projection.reflectY = function(_) {\n    return arguments.length ? (sy = _ ? -1 : 1, recenter()) : sy < 0;\n  };\n\n  projection.precision = function(_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n  };\n\n  projection.fitExtent = function(extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n\n  projection.fitSize = function(size, object) {\n    return fitSize(projection, size, object);\n  };\n\n  projection.fitWidth = function(width, object) {\n    return fitWidth(projection, width, object);\n  };\n\n  projection.fitHeight = function(height, object) {\n    return fitHeight(projection, height, object);\n  };\n\n  function recenter() {\n    var center = scaleTranslateRotate(k, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)),\n        transform = scaleTranslateRotate(k, x - center[0], y - center[1], sx, sy, alpha);\n    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);\n    projectTransform = compose(project, transform);\n    projectRotateTransform = compose(rotate, projectTransform);\n    projectResample = resample(projectTransform, delta2);\n    return reset();\n  }\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return function() {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}\n", "import {degrees, pi, radians} from \"../math.js\";\nimport {projectionMutator} from \"./index.js\";\n\nexport function conicProjection(projectAt) {\n  var phi0 = 0,\n      phi1 = pi / 3,\n      m = projectionMutator(projectAt),\n      p = m(phi0, phi1);\n\n  p.parallels = function(_) {\n    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];\n  };\n\n  return p;\n}\n", "import {asin, cos, sin} from \"../math.js\";\n\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\n", "import {abs, asin, atan2, cos, epsilon, pi, sign, sin, sqrt} from \"../math.js\";\nimport {conicProjection} from \"./conic.js\";\nimport {cylindricalEqualAreaRaw} from \"./cylindricalEqualArea.js\";\n\nexport function conicEqualAreaRaw(y0, y1) {\n  var sy0 = sin(y0), n = (sy0 + sin(y1)) / 2;\n\n  // Are the parallels symmetrical around the Equator?\n  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);\n\n  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;\n\n  function project(x, y) {\n    var r = sqrt(c - 2 * n * sin(y)) / n;\n    return [r * sin(x *= n), r0 - r * cos(x)];\n  }\n\n  project.invert = function(x, y) {\n    var r0y = r0 - y,\n        l = atan2(x, abs(r0y)) * sign(r0y);\n    if (r0y * n < 0)\n      l -= pi * sign(x) * sign(r0y);\n    return [l / n, asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicEqualAreaRaw)\n      .scale(155.424)\n      .center([0, 33.6442]);\n}\n", "import conicEqualArea from \"./conicEqualArea.js\";\n\nexport default function() {\n  return conicEqualArea()\n      .parallels([29.5, 45.5])\n      .scale(1070)\n      .translate([480, 250])\n      .rotate([96, 0])\n      .center([-0.6, 38.7]);\n}\n", "import {epsilon} from \"../math.js\";\nimport albers from \"./albers.js\";\nimport conicEqualArea from \"./conicEqualArea.js\";\nimport {fitExtent, fitSize, fitWidth, fitHeight} from \"./fit.js\";\n\n// The projections must have mutually exclusive clip regions on the sphere,\n// as this will avoid emitting interleaving lines and polygons.\nfunction multiplex(streams) {\n  var n = streams.length;\n  return {\n    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },\n    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },\n    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },\n    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },\n    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },\n    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }\n  };\n}\n\n// A composite projection for the United States, configured by default for\n// 960\u00D7500. The projection also works quite well at 960\u00D7600 if you change the\n// scale to 1285 and adjust the translate accordingly. The set of standard\n// parallels for each region comes from USGS, which is published here:\n// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\nexport default function() {\n  var cache,\n      cacheStream,\n      lower48 = albers(), lower48Point,\n      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338\n      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007\n      point, pointStream = {point: function(x, y) { point = [x, y]; }};\n\n  function albersUsa(coordinates) {\n    var x = coordinates[0], y = coordinates[1];\n    return point = null,\n        (lower48Point.point(x, y), point)\n        || (alaskaPoint.point(x, y), point)\n        || (hawaiiPoint.point(x, y), point);\n  }\n\n  albersUsa.invert = function(coordinates) {\n    var k = lower48.scale(),\n        t = lower48.translate(),\n        x = (coordinates[0] - t[0]) / k,\n        y = (coordinates[1] - t[1]) / k;\n    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska\n        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii\n        : lower48).invert(coordinates);\n  };\n\n  albersUsa.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);\n  };\n\n  albersUsa.precision = function(_) {\n    if (!arguments.length) return lower48.precision();\n    lower48.precision(_), alaska.precision(_), hawaii.precision(_);\n    return reset();\n  };\n\n  albersUsa.scale = function(_) {\n    if (!arguments.length) return lower48.scale();\n    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\n    return albersUsa.translate(lower48.translate());\n  };\n\n  albersUsa.translate = function(_) {\n    if (!arguments.length) return lower48.translate();\n    var k = lower48.scale(), x = +_[0], y = +_[1];\n\n    lower48Point = lower48\n        .translate(_)\n        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])\n        .stream(pointStream);\n\n    alaskaPoint = alaska\n        .translate([x - 0.307 * k, y + 0.201 * k])\n        .clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    hawaiiPoint = hawaii\n        .translate([x - 0.205 * k, y + 0.212 * k])\n        .clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    return reset();\n  };\n\n  albersUsa.fitExtent = function(extent, object) {\n    return fitExtent(albersUsa, extent, object);\n  };\n\n  albersUsa.fitSize = function(size, object) {\n    return fitSize(albersUsa, size, object);\n  };\n\n  albersUsa.fitWidth = function(width, object) {\n    return fitWidth(albersUsa, width, object);\n  };\n\n  albersUsa.fitHeight = function(height, object) {\n    return fitHeight(albersUsa, height, object);\n  };\n\n  function reset() {\n    cache = cacheStream = null;\n    return albersUsa;\n  }\n\n  return albersUsa.scale(1070);\n}\n", "import {asin, atan2, cos, sin, sqrt} from \"../math.js\";\n\nexport function azimuthalRaw(scale) {\n  return function(x, y) {\n    var cx = cos(x),\n        cy = cos(y),\n        k = scale(cx * cy);\n        if (k === Infinity) return [2, 0];\n    return [\n      k * cy * sin(x),\n      k * sin(y)\n    ];\n  }\n}\n\nexport function azimuthalInvert(angle) {\n  return function(x, y) {\n    var z = sqrt(x * x + y * y),\n        c = angle(z),\n        sc = sin(c),\n        cc = cos(c);\n    return [\n      atan2(x * sc, z * cc),\n      asin(z && y * sc / z)\n    ];\n  }\n}\n", "import {asin, sqrt} from \"../math.js\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal.js\";\nimport projection from \"./index.js\";\n\nexport var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {\n  return sqrt(2 / (1 + cxcy));\n});\n\nazimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {\n  return 2 * asin(z / 2);\n});\n\nexport default function() {\n  return projection(azimuthalEqualAreaRaw)\n      .scale(124.75)\n      .clipAngle(180 - 1e-3);\n}\n", "import {acos, sin} from \"../math.js\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal.js\";\nimport projection from \"./index.js\";\n\nexport var azimuthalEquidistantRaw = azimuthalRaw(function(c) {\n  return (c = acos(c)) && c / sin(c);\n});\n\nazimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {\n  return z;\n});\n\nexport default function() {\n  return projection(azimuthalEquidistantRaw)\n      .scale(79.4188)\n      .clipAngle(180 - 1e-3);\n}\n", "import {atan, exp, halfPi, log, pi, tan, tau} from \"../math.js\";\nimport rotation from \"../rotation.js\";\nimport projection from \"./index.js\";\n\nexport function mercatorRaw(lambda, phi) {\n  return [lambda, log(tan((halfPi + phi) / 2))];\n}\n\nmercatorRaw.invert = function(x, y) {\n  return [x, 2 * atan(exp(y)) - halfPi];\n};\n\nexport default function() {\n  return mercatorProjection(mercatorRaw)\n      .scale(961 / tau);\n}\n\nexport function mercatorProjection(project) {\n  var m = projection(project),\n      center = m.center,\n      scale = m.scale,\n      translate = m.translate,\n      clipExtent = m.clipExtent,\n      x0 = null, y0, x1, y1; // clip extent\n\n  m.scale = function(_) {\n    return arguments.length ? (scale(_), reclip()) : scale();\n  };\n\n  m.translate = function(_) {\n    return arguments.length ? (translate(_), reclip()) : translate();\n  };\n\n  m.center = function(_) {\n    return arguments.length ? (center(_), reclip()) : center();\n  };\n\n  m.clipExtent = function(_) {\n    return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  function reclip() {\n    var k = pi * scale(),\n        t = m(rotation(m.rotate()).invert([0, 0]));\n    return clipExtent(x0 == null\n        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw\n        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]\n        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);\n  }\n\n  return reclip();\n}\n", "import projection from \"./index.js\";\n\nexport function equirectangularRaw(lambda, phi) {\n  return [lambda, phi];\n}\n\nequirectangularRaw.invert = equirectangularRaw;\n\nexport default function() {\n  return projection(equirectangularRaw)\n      .scale(152.63);\n}\n", "import projection from \"./index.js\";\nimport {abs, asin, cos, epsilon2, sin, sqrt} from \"../math.js\";\n\nvar A1 = 1.340264,\n    A2 = -0.081106,\n    A3 = 0.000893,\n    A4 = 0.003796,\n    M = sqrt(3) / 2,\n    iterations = 12;\n\nexport function equalEarthRaw(lambda, phi) {\n  var l = asin(M * sin(phi)), l2 = l * l, l6 = l2 * l2 * l2;\n  return [\n    lambda * cos(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),\n    l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))\n  ];\n}\n\nequalEarthRaw.invert = function(x, y) {\n  var l = y, l2 = l * l, l6 = l2 * l2 * l2;\n  for (var i = 0, delta, fy, fpy; i < iterations; ++i) {\n    fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;\n    fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);\n    l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;\n    if (abs(delta) < epsilon2) break;\n  }\n  return [\n    M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos(l),\n    asin(sin(l) / M)\n  ];\n};\n\nexport default function() {\n  return projection(equalEarthRaw)\n      .scale(177.158);\n}\n", "import {atan, cos, sin} from \"../math.js\";\nimport {azimuthalInvert} from \"./azimuthal.js\";\nimport projection from \"./index.js\";\n\nexport function gnomonicRaw(x, y) {\n  var cy = cos(y), k = cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\ngnomonicRaw.invert = azimuthalInvert(atan);\n\nexport default function() {\n  return projection(gnomonicRaw)\n      .scale(144.049)\n      .clipAngle(60);\n}\n", "import projection from \"./index.js\";\nimport {abs, epsilon} from \"../math.js\";\n\nexport function naturalEarth1Raw(lambda, phi) {\n  var phi2 = phi * phi, phi4 = phi2 * phi2;\n  return [\n    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),\n    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))\n  ];\n}\n\nnaturalEarth1Raw.invert = function(x, y) {\n  var phi = y, i = 25, delta;\n  do {\n    var phi2 = phi * phi, phi4 = phi2 * phi2;\n    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /\n        (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));\n  } while (abs(delta) > epsilon && --i > 0);\n  return [\n    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(naturalEarth1Raw)\n      .scale(175.295);\n}\n", "import {asin, cos, epsilon, sin} from \"../math.js\";\nimport {azimuthalInvert} from \"./azimuthal.js\";\nimport projection from \"./index.js\";\n\nexport function orthographicRaw(x, y) {\n  return [cos(y) * sin(x), sin(y)];\n}\n\northographicRaw.invert = azimuthalInvert(asin);\n\nexport default function() {\n  return projection(orthographicRaw)\n      .scale(249.5)\n      .clipAngle(90 + epsilon);\n}\n", "import {atan, cos, sin} from \"../math.js\";\nimport {azimuthalInvert} from \"./azimuthal.js\";\nimport projection from \"./index.js\";\n\nexport function stereographicRaw(x, y) {\n  var cy = cos(y), k = 1 + cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\nstereographicRaw.invert = azimuthalInvert(function(z) {\n  return 2 * atan(z);\n});\n\nexport default function() {\n  return projection(stereographicRaw)\n      .scale(250)\n      .clipAngle(142);\n}\n", "import {atan, exp, halfPi, log, tan} from \"../math.js\";\nimport {mercatorProjection} from \"./mercator.js\";\n\nexport function transverseMercatorRaw(lambda, phi) {\n  return [log(tan((halfPi + phi) / 2)), -lambda];\n}\n\ntransverseMercatorRaw.invert = function(x, y) {\n  return [-y, 2 * atan(exp(x)) - halfPi];\n};\n\nexport default function() {\n  var m = mercatorProjection(transverseMercatorRaw),\n      center = m.center,\n      rotate = m.rotate;\n\n  m.center = function(_) {\n    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);\n  };\n\n  m.rotate = function(_) {\n    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);\n  };\n\n  return rotate([0, 0, 90])\n      .scale(159.155);\n}\n", "import type { MapLineSeries } from \"./MapLineSeries\";\nimport type { IGeoPoint } from \"../../core/util/IGeoPoint\";\n\nimport { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"../../core/render/Graphics\";\nimport { geoLength, geoInterpolate, geoDistance } from \"d3-geo\";\n\nexport interface IMapLineSettings extends IGraphicsSettings {\n\n\t/**\n\t * A GeoJSON representation of the polygons geometry.\n\t */\n\tgeometry?: GeoJSON.LineString | GeoJSON.MultiLineString;\n\n\t/**\n\t * @todo needs description\n\t * @default 0.5\n\t */\n\tprecision?: number;\n\n}\n\nexport interface IMapLinePrivate extends IGraphicsPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tseries: MapLineSeries;\n\n}\n\n/**\n * A line object in a [[MapLineSeries]].\n */\nexport class MapLine extends Graphics {\n\n\tdeclare public _settings: IMapLineSettings;\n\tdeclare public _privateSettings: IMapLinePrivate;\n\n\tpublic static className: string = \"MapLine\";\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([MapLine.className]);\n\tprotected _projectionDirty: boolean = false;\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this._projectionDirty || this.isDirty(\"geometry\") || this.isDirty(\"precision\")) {\n\t\t\tconst geometry = this.get(\"geometry\")!;\n\t\t\tif (geometry) {\n\t\t\t\tconst series = this.getPrivate(\"series\");\n\t\t\t\tif (series) {\n\t\t\t\t\tconst chart = series.chart;\n\t\t\t\t\tif (chart) {\n\t\t\t\t\t\tconst projection = chart.get(\"projection\");\n\t\t\t\t\t\tlet clipAngle: number | null = null;\n\n\t\t\t\t\t\tif (projection) {\n\t\t\t\t\t\t\tclipAngle = projection.clipAngle();\n\t\t\t\t\t\t\tprojection.precision(this.get(\"precision\", 0.5));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst geoPath = chart.getPrivate(\"geoPath\");\n\t\t\t\t\t\tif (geoPath) {\n\t\t\t\t\t\t\tthis._clear = true;\n\n\t\t\t\t\t\t\tthis.set(\"draw\", (_display) => {\n\t\t\t\t\t\t\t\tif (projection && series.get(\"clipBack\") === false) {\n\t\t\t\t\t\t\t\t\tprojection.clipAngle(180);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tgeoPath.context(this._display as any);\n\t\t\t\t\t\t\t\tgeoPath(geometry);\n\t\t\t\t\t\t\t\tgeoPath.context(null);\n\n\t\t\t\t\t\t\t\tif (projection) {\n\t\t\t\t\t\t\t\t\tprojection.clipAngle(clipAngle as any);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtyProjection() {\n\t\tthis.markDirty();\n\t\tthis._projectionDirty = true;\n\t}\n\n\tpublic _clearDirty() {\n\t\tsuper._clearDirty();\n\t\tthis._projectionDirty = false;\n\t}\n\n\t/**\n\t * Converts relative position along the line (0-1) into pixel coordinates.\n\t *\n\t * @param position  Position (0-1)\n\t * @return Coordinates\n\t */\n\tpublic positionToGeoPoint(position: number): IGeoPoint {\n\n\t\tconst geometry = this.get(\"geometry\")!;\n\n\t\tif (geometry) {\n\t\t\tlet totalDistance: number = geoLength(geometry);\n\t\t\tlet currentDistance: number = 0;\n\n\t\t\tlet distanceAB: number;\n\t\t\tlet positionA: number = 0;\n\t\t\tlet positionB: number = 0;\n\t\t\tlet pointA!: [number, number];\n\t\t\tlet pointB!: [number, number];\n\n\t\t\tlet coordinates = geometry.coordinates;\n\t\t\tif (coordinates) {\n\n\t\t\t\tlet segments!: number[][][];\n\n\t\t\t\tif (geometry.type == \"LineString\") {\n\t\t\t\t\tsegments = [coordinates] as number[][][];\n\t\t\t\t}\n\t\t\t\telse if (geometry.type == \"MultiLineString\") {\n\t\t\t\t\tsegments = coordinates as number[][][];\n\t\t\t\t}\n\n\t\t\t\tfor (let s = 0; s < segments.length; s++) {\n\t\t\t\t\tlet segment = segments[s];\n\t\t\t\t\tif (segment.length > 1) {\n\t\t\t\t\t\tfor (let p = 1; p < segment.length; p++) {\n\t\t\t\t\t\t\tpointA = segment[p - 1] as [number, number];\n\t\t\t\t\t\t\tpointB = segment[p] as [number, number];\n\n\t\t\t\t\t\t\tpositionA = currentDistance / totalDistance;\n\t\t\t\t\t\t\tdistanceAB = geoDistance(pointA, pointB);\n\t\t\t\t\t\t\tcurrentDistance += distanceAB;\n\t\t\t\t\t\t\tpositionB = currentDistance / totalDistance;\n\n\t\t\t\t\t\t\tif (positionA <= position && positionB > position) {\n\t\t\t\t\t\t\t\ts = segments.length;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (segment.length == 1) {\n\t\t\t\t\t\tpointA = segment[0] as [number, number];;\n\t\t\t\t\t\tpointB = segment[0] as [number, number];;\n\t\t\t\t\t\tpositionA = 0;\n\t\t\t\t\t\tpositionB = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (pointA && pointB) {\n\t\t\t\t\tlet positionAB: number = (position - positionA) / (positionB - positionA);\n\t\t\t\t\tlet location = geoInterpolate(pointA, pointB)(positionAB);\n\t\t\t\t\treturn { longitude: location[0], latitude: location[1] }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { longitude: 0, latitude: 0 };\n\t}\n}\n", "import type { IMapPointSeriesDataItem } from \"./MapPointSeries\";\nimport type { DataItem } from \"../../core/render/Component\";\n\nimport { MapSeries, IMapSeriesSettings, IMapSeriesDataItem, IMapSeriesPrivate } from \"./MapSeries\";\nimport { MapLine } from \"./MapLine\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { Template } from \"../../core/util/Template\";\n\nimport * as $array from \"../../core/util/Array\";\n\n/**\n * @ignore\n */\nexport interface IMapLineSeriesPrivate extends IMapSeriesPrivate {\n}\n\nexport interface IMapLineSeriesDataItem extends IMapSeriesDataItem {\n\n\t/**\n\t * Related [[MapLine]] object.\n\t */\n\tmapLine?: MapLine;\n\n\t/**\n\t * GeoJSON geometry of the line.\n\t */\n\tgeometry?: GeoJSON.LineString | GeoJSON.MultiLineString;\n\n\t/**\n\t * An array of data items from [[MapPointSeries]] to use as line end-points.\n\t */\n\tpointsToConnect?: Array<DataItem<IMapPointSeriesDataItem>>;\n\n}\n\nexport interface IMapLineSeriesSettings extends IMapSeriesSettings {\n\n\t/**\n\t * If set to `true` will hide line segments that are in the invisible range\n\t * of the map.\n\t *\n\t * For example on the side of the globe facing away from the viewer when\n\t * used with Orthographic projection.\n\t *\n\t * NOTE: not all projections have invisible side.\n\t */\n\tclipBack?: boolean;\n\n}\n\n/**\n * Creates a map series for displaying lines on the map.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-line-series/} for more info\n * @important\n */\nexport class MapLineSeries extends MapSeries {\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeMapLine(dataItem: DataItem<this[\"_dataItemSettings\"]>): MapLine {\n\t\tconst mapLine = this.children.push(this.mapLines.make());\n\t\tmapLine._setDataItem(dataItem);\n\t\tthis.mapLines.push(mapLine);\n\t\treturn mapLine;\n\t}\n\n\t/**\n\t * A [[ListTemplate]] of all lines in series.\n\t *\n\t * `mapLines.template` can also be used to configure lines.\n\t *\n\t * @default new ListTemplate<MapLine>\n\t */\n\tpublic readonly mapLines: ListTemplate<MapLine> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => MapLine._new(this._root, {}, [this.mapLines.template])\n\t);\n\n\tpublic static className: string = \"MapLineSeries\";\n\tpublic static classNames: Array<string> = MapSeries.classNames.concat([MapLineSeries.className]);\n\n\tdeclare public _settings: IMapLineSeriesSettings;\n\tdeclare public _privateSettings: IMapLineSeriesPrivate;\n\tdeclare public _dataItemSettings: IMapLineSeriesDataItem;\n\n\tprotected _types: Array<GeoJSON.GeoJsonGeometryTypes> = [\"LineString\", \"MultiLineString\"];\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtyProjection() {\n\t\t$array.each(this.dataItems, (dataItem) => {\n\t\t\tlet mapLine = dataItem.get(\"mapLine\");\n\t\t\tif (mapLine) {\n\t\t\t\tmapLine.markDirtyProjection();\n\t\t\t}\n\t\t})\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tif (this.isDirty(\"stroke\")) {\n\t\t\tthis.mapLines.template.set(\"stroke\", this.get(\"stroke\"));\n\t\t}\n\t}\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\n\t\tlet mapLine = dataItem.get(\"mapLine\");\n\t\tif (!mapLine) {\n\t\t\tmapLine = this.makeMapLine(dataItem);\n\t\t}\n\n\t\tdataItem.set(\"mapLine\", mapLine);\n\t\tconst pointsToConnect = dataItem.get(\"pointsToConnect\");\n\t\tif (pointsToConnect) {\n\t\t\t$array.each(pointsToConnect, (point) => {\n\n\t\t\t\tpoint.on(\"geometry\", () => {\n\t\t\t\t\tthis.markDirtyValues(dataItem);\n\t\t\t\t})\n\n\t\t\t\tpoint.on(\"longitude\", () => {\n\t\t\t\t\tthis.markDirtyValues(dataItem);\n\t\t\t\t})\n\n\t\t\t\tpoint.on(\"latitude\", () => {\n\t\t\t\t\tthis.markDirtyValues(dataItem);\n\t\t\t\t})\n\t\t\t})\n\n\t\t\tthis.markDirtyValues(dataItem);\n\t\t}\n\n\t\tmapLine.setPrivate(\"series\", this);\n\t}\n\n\t/**\n\t * Forces a repaint of the element which relies on data.\n\t *\n\t * @since 5.0.21\n\t */\n\tpublic markDirtyValues(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.markDirtyValues();\n\t\tif (dataItem) {\n\t\t\tconst mapLine = dataItem.get(\"mapLine\");\n\t\t\tif (mapLine) {\n\t\t\t\tconst pointsToConnect = dataItem.get(\"pointsToConnect\");\n\t\t\t\tif (pointsToConnect) {\n\t\t\t\t\tlet coordinates: Array<Array<number>> = [];\n\t\t\t\t\t$array.each(pointsToConnect, (point) => {\n\t\t\t\t\t\tconst longitude = point.get(\"longitude\");\n\t\t\t\t\t\tconst latitude = point.get(\"latitude\");\n\t\t\t\t\t\tif (longitude != null && latitude != null) {\n\t\t\t\t\t\t\tcoordinates.push([longitude, latitude]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tconst geometry = point.get(\"geometry\");\n\t\t\t\t\t\t\tif (geometry) {\n\t\t\t\t\t\t\t\tconst coords = geometry.coordinates;\n\t\t\t\t\t\t\t\tif (coords) {\n\t\t\t\t\t\t\t\t\tcoordinates.push([coords[0] as any, coords[1] as any]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\n\t\t\t\t\tlet geometry: any = { type: \"LineString\", coordinates: coordinates };\n\n\t\t\t\t\tdataItem.setRaw(\"geometry\", geometry);\n\t\t\t\t\tmapLine.set(\"geometry\", geometry);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tmapLine.set(\"geometry\", dataItem.get(\"geometry\"));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.disposeDataItem(dataItem);\n\t\tconst mapLine = dataItem.get(\"mapLine\");\n\t\tif (mapLine) {\n\t\t\tthis.mapLines.removeValue(mapLine);\n\t\t\tmapLine.dispose();\n\t\t}\n\t}\n}\n", "import { MapLineSeries, IMapLineSeriesSettings, IMapLineSeriesPrivate, IMapLineSeriesDataItem } from \"./MapLineSeries\";\nimport type { DataItem } from \"../../core/render/Component\";\nimport { geoGraticule } from \"d3-geo\";\n\n\nexport interface IGraticuleSeriesDataItem extends IMapLineSeriesDataItem {\n}\n\nexport interface IGraticuleSeriesPrivate extends IMapLineSeriesPrivate {\n}\n\nexport interface IGraticuleSeriesSettings extends IMapLineSeriesSettings {\n\n\t/**\n\t * Place a grid line every Xth latitude/longitude.\n\t *\n\t * @default 10\n\t */\n\tstep?: number;\n}\n\n/**\n * A [[MapChart]] series to draw a map grid.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/graticule-series/} for more info\n * @important\n */\nexport class GraticuleSeries extends MapLineSeries {\n\n\tpublic static className: string = \"GraticuleSeries\";\n\tpublic static classNames: Array<string> = MapLineSeries.classNames.concat([GraticuleSeries.className]);\n\n\tdeclare public _settings: IGraticuleSeriesSettings;\n\tdeclare public _privateSettings: IGraticuleSeriesPrivate;\n\n\tprotected _dataItem: DataItem<this[\"_dataItemSettings\"]> = this.makeDataItem({});\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis.dataItems.push(this._dataItem);\n\t\tthis._generate();\n\t}\n\n\tpublic _updateChildren() {\n\t\tsuper._updateChildren();\n\n\t\tif (this.isDirty(\"step\")) {\n\t\t\tthis._generate();\n\t\t}\n\t}\n\n\tprotected _generate() {\n\t\tlet graticule = geoGraticule();\n\n\t\tif (graticule) {\n\t\t\tconst step = this.get(\"step\", 10);\n\n\t\t\tgraticule.stepMinor([360, 360]);\n\t\t\tgraticule.stepMajor([step, step]);\n\t\t\tthis._dataItem.set(\"geometry\", graticule());\n\t\t}\n\t}\n}\n", "import { Theme } from \"../../core/Theme\";\r\nimport { p50 } from \"../../core/util/Percent\";\r\nimport { setColor } from \"../../themes/DefaultTheme\";\r\n\r\nimport { geoMercator } from \"d3-geo\";\r\n\r\nimport * as $ease from \"../../core/util/Ease\";\r\n\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport class MapChartDefaultTheme extends Theme {\r\n\tprotected setupDefaultRules() {\r\n\t\tsuper.setupDefaultRules();\r\n\r\n\t\tconst ic = this._root.interfaceColors;\r\n\t\tconst r = this.rule.bind(this);\r\n\r\n\t\t/**\r\n\t\t * ========================================================================\r\n\t\t * charts/map\r\n\t\t * ========================================================================\r\n\t\t */\r\n\r\n\t\tr(\"MapChart\").setAll({\r\n\t\t\tprojection: geoMercator(),\r\n\t\t\tpanX: \"translateX\",\r\n\t\t\tpanY: \"translateY\",\r\n\t\t\tpinchZoom: true,\r\n\t\t\tzoomStep: 2,\r\n\t\t\tzoomLevel: 1,\r\n\t\t\trotationX: 0,\r\n\t\t\trotationY: 0,\r\n\t\t\trotationZ: 0,\r\n\t\t\tmaxZoomLevel: 32,\r\n\t\t\tminZoomLevel: 1,\r\n\t\t\twheelY: \"zoom\",\r\n\t\t\twheelX: \"none\",\r\n\t\t\tanimationEasing: $ease.out($ease.cubic),\r\n\t\t\twheelEasing: $ease.out($ease.cubic),\r\n\t\t\twheelDuration: 0,\r\n\t\t\twheelSensitivity: 1,\r\n\t\t\tmaxPanOut: 0.4,\r\n\t\t\tcenterMapOnZoomOut: true\r\n\t\t});\r\n\r\n\t\t{\r\n\t\t\tconst rule = r(\"MapLine\");\r\n\r\n\t\t\trule.setAll({\r\n\t\t\t\tprecision: 0.5,\r\n\t\t\t\trole: \"figure\",\r\n\t\t\t});\r\n\r\n\t\t\tsetColor(rule, \"stroke\", ic, \"grid\");\r\n\t\t}\r\n\r\n\t\tr(\"MapPointSeries\").setAll({\r\n\t\t\tclipFront: false,\r\n\t\t\tclipBack: true,\r\n\t\t\tautoScale: false\r\n\t\t})\r\n\r\n\t\t{\r\n\t\t\tconst rule = r(\"MapPolygon\");\r\n\r\n\t\t\trule.setAll({\r\n\t\t\t\tprecision: 0.5,\r\n\t\t\t\tisMeasured: false,\r\n\t\t\t\trole: \"figure\",\r\n\t\t\t\tfillOpacity: 1,\r\n\t\t\t\tposition: \"absolute\",\r\n\t\t\t\tstrokeWidth: 0.2,\r\n\t\t\t\tstrokeOpacity: 1,\r\n\t\t\t});\r\n\r\n\t\t\tsetColor(rule, \"fill\", ic, \"primaryButton\");\r\n\t\t\tsetColor(rule, \"stroke\", ic, \"background\");\r\n\t\t}\r\n\r\n\t\tr(\"Graphics\", [\"map\", \"button\", \"plus\", \"icon\"]).setAll({\r\n\t\t\tx: p50,\r\n\t\t\ty: p50,\r\n\t\t\tdraw: (display) => {\r\n\t\t\t\tdisplay.moveTo(-4, 0);\r\n\t\t\t\tdisplay.lineTo(4, 0);\r\n\t\t\t\tdisplay.moveTo(0, -4);\r\n\t\t\t\tdisplay.lineTo(0, 4);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tr(\"Graphics\", [\"map\", \"button\", \"minus\", \"icon\"]).setAll({\r\n\t\t\tx: p50,\r\n\t\t\ty: p50,\r\n\t\t\tdraw: (display) => {\r\n\t\t\t\tdisplay.moveTo(-4, 0);\r\n\t\t\t\tdisplay.lineTo(4, 0);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\t/**\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t * charts/map: Series\r\n\t\t * ------------------------------------------------------------------------\r\n\t\t */\r\n\r\n\t\tr(\"GraticuleSeries\").setAll({\r\n\t\t\tstep: 10\r\n\t\t});\r\n\r\n\r\n\t}\r\n}\r\n", "import type { IGeoPoint } from \"../../core/util/IGeoPoint\";\nimport * as $math from \"../../core/util/Math\";\nimport { geoCircle, geoCentroid, geoBounds } from \"d3-geo\";\n\n/**\n * Returns a GeoJSON representation of a circle, suitable for use as `geometry` value\n * in a [[MapPolygon]] in a [[MapPolygonSeries]].\n * \n * @param   geoPoint  Coordinates\n * @param   radius    Circle radius in degrees\n * @return            Polygon geometry\n */\nexport function getGeoCircle(geoPoint: IGeoPoint, radius: number): GeoJSON.Polygon {\n\treturn geoCircle().center([geoPoint.longitude, geoPoint.latitude]).radius(radius)();\n}\n\n/**\n * @ignore\n */\nexport function getGeoCentroid(geometry: GeoJSON.GeometryObject): IGeoPoint {\n\tconst centroid = geoCentroid(geometry);\n\treturn { longitude: centroid[0], latitude: centroid[1] };\n}\n\n/**\n * @ignore\n */\nexport function getGeoBounds(geometry: GeoJSON.GeometryObject): { left: number, right: number, top: number, bottom: number } {\n\tconst bounds = geoBounds(geometry);\n\n\tif (bounds) {\n\t\tconst geoBounds = { left: bounds[0][0], right: bounds[1][0], top: bounds[1][1], bottom: bounds[0][1] };\n\t\tif(geoBounds.right < geoBounds.left){\n\t\t\tgeoBounds.right = 180;\n\t\t\tgeoBounds.left = -180;\n\t\t}\n\t\treturn geoBounds;\n\t}\n\treturn { left: 0, right: 0, top: 0, bottom: 0 };\n}\n\n/**\n * Returns a GeoJSON representation of a rectangle, suitable for use\n * as `geometry` value in a [[MapPolygon]] in a [[MapPolygonSeries]].\n * \n * @param   north  North latitude\n * @param   east   East longitude\n * @param   south  South latitude\n * @param   west   West longitude\n * @return         polygon geometry\n */\nexport function getGeoRectangle(north: number, east: number, south: number, west: number): GeoJSON.MultiPolygon {\n\n\tlet multiPolygon: Array<Array<Array<[number, number]>>> = [];\n\n\tif (west <= -180) {\n\t\twest = -179.9999;\n\t}\n\tif (south <= -90) {\n\t\tsouth = -89.9999;\n\t}\n\tif (north >= 90) {\n\t\tnorth = 89.9999;\n\t}\n\tif (east >= 180) {\n\t\teast = 179.9999;\n\t}\n\n\n\tlet stepLong = Math.min(90, (east - west) / Math.ceil((east - west) / 90));\n\tlet stepLat = (north - south) / Math.ceil((north - south) / 90);\n\n\tfor (let ln = west; ln < east; ln = ln + stepLong) {\n\t\tlet surface: Array<[number, number]> = [];\n\t\tmultiPolygon.push([surface]);\n\n\t\tif (ln + stepLong > east) {\n\t\t\tstepLong = east - ln;\n\t\t}\n\n\t\tfor (let ll = ln; ll <= ln + stepLong; ll = ll + 5) {\n\t\t\tsurface.push([ll, north]);\n\t\t}\n\n\t\tfor (let lt = north; lt >= south; lt = lt - stepLat) {\n\t\t\tsurface.push([ln + stepLong, lt]);\n\t\t}\n\n\t\tfor (let ll = ln + stepLong; ll >= ln; ll = ll - 5) {\n\t\t\tsurface.push([ll, south]);\n\t\t}\n\n\t\tfor (let lt = south; lt <= north; lt = lt + stepLat) {\n\t\t\tsurface.push([ln, lt]);\n\t\t}\n\t}\n\n\treturn { type: \"MultiPolygon\", coordinates: multiPolygon };\n}\n\n/**\n * Update longitudes and latitudes that wrap around -180/180 and -90/90 values.\n * \n * @param   geoPoint  Input coordinates\n * @return            Updated coordinates\n */\nexport function normalizeGeoPoint(geoPoint: IGeoPoint): IGeoPoint {\n\tlet longitude = wrapAngleTo180(geoPoint.longitude);\n\tlet latitude = Math.asin(Math.sin((geoPoint.latitude * $math.RADIANS))) * $math.DEGREES;\n\n\tlet latitude180 = wrapAngleTo180(geoPoint.latitude);\n\n\tif (Math.abs(latitude180) > 90) {\n\t\tlongitude = wrapAngleTo180(longitude + 180);\n\t}\n\n\tgeoPoint.longitude = longitude;\n\tgeoPoint.latitude = latitude;\n\n\treturn geoPoint;\n}\n\n/**\n * @ignore\n */\nexport function wrapAngleTo180(angle: number): number {\n\tangle = angle % 360;\n\n\tif (angle > 180) {\n\t\tangle -= 360;\n\t}\n\tif (angle < -180) {\n\t\tangle += 360;\n\t}\n\n\treturn angle;\n}", "import type { MapSeries } from \"./MapSeries\";\nimport type { MapPointSeries } from \"./MapPointSeries\";\nimport type { GeoProjection, GeoPath } from \"d3-geo\";\nimport type { IPoint } from \"../../core/util/IPoint\";\nimport type { IGeoPoint } from \"../../core/util/IGeoPoint\";\nimport type { Time } from \"../../core/util/Animation\";\nimport type { ZoomControl } from \"./ZoomControl\";\nimport type { Animation } from \"../../core/util/Entity\";\n\nimport { MapChartDefaultTheme } from \"./MapChartDefaultTheme\";\nimport { SerialChart, ISerialChartPrivate, ISerialChartSettings, ISerialChartEvents } from \"../../core/render/SerialChart\";\nimport { Rectangle } from \"../../core/render/Rectangle\";\nimport { geoPath } from \"d3-geo\";\nimport { Color } from \"../../core/util/Color\";\nimport { registry } from \"../../core/Registry\";\n\nimport * as $math from \"../../core/util/Math\";\nimport * as $array from \"../../core/util/Array\";\nimport * as $type from \"../../core/util/Type\";\nimport * as $mapUtils from \"./MapUtils\";\nimport * as $object from \"../../core/util/Object\";\nimport * as $utils from \"../../core/util/Utils\";\n\nimport type { IDisposer } from \"../../core/util/Disposer\";\nimport type { ISpritePointerEvent } from \"../../core/render/Sprite\";\n\nexport interface IMapChartSettings extends ISerialChartSettings {\n\n\t/**\n\t * A projection to use when plotting the map.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/#Projections} for more info\n\t */\n\tprojection?: GeoProjection;\n\n\t/**\n\t * Current zoom level.\n\t */\n\tzoomLevel?: number;\n\n\t/**\n\t * @ignore\n\t */\n\ttranslateX?: number;\n\n\t/**\n\t * @ignore\n\t */\n\ttranslateY?: number;\n\n\t/**\n\t * Vertical centering of the map.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/#Centering_the_map} for more info\n\t */\n\trotationY?: number;\n\n\t/**\n\t * Horizontal centering of the map.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/#Centering_the_map} for more info\n\t */\n\trotationX?: number;\n\n\t/**\n\t * Depth centering of the map.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/#Centering_the_map} for more info\n\t */\n\trotationZ?: number;\n\n\t/**\n\t * Highest zoom level map is allowed to zoom in to.\n\t *\n\t * @deault 32\n\t */\n\tmaxZoomLevel?: number;\n\n\t/**\n\t * Lowest zoom level map is allowed to zoom in to.\n\t *\n\t * @deault 1\n\t */\n\tminZoomLevel?: number;\n\n\t/**\n\t * Increment zoom level by `zoomStep` when user zooms in via [[ZoomControl]] or\n\t * API.\n\t *\n\t * @default 2\n\t */\n\tzoomStep?: number;\n\n\t/**\n\t * Defines what happens when map is being dragged horizontally.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Panning} for more info\n\t * @default \"translateX\"\n\t */\n\tpanX?: \"none\" | \"rotateX\" | \"translateX\";\n\n\t/**\n\t * Defines what happens when map is being dragged vertically.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Panning} for more info\n\t * @default \"translateY\"\n\t */\n\tpanY?: \"none\" | \"rotateY\" | \"translateY\";\n\n\t/**\n\t * Enables pinch-zooming of the map on multi-touch devices.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Pinch_zoom} for more info\n\t * @default true\n\t */\n\tpinchZoom?: boolean;\n\n\t/**\n\t * Defines what happens when mouse wheel is turned horizontally.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Mouse_wheel_behavior} for more info\n\t * @default \"none\"\n\t */\n\twheelX?: \"none\" | \"zoom\" | \"rotateX\" | \"rotateY\";\n\n\t/**\n\t * Defines what happens when mouse wheel is turned vertically.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Mouse_wheel_behavior} for more info\n\t * @default \"zoom\"\n\t */\n\twheelY?: \"none\" | \"zoom\" | \"rotateX\" | \"rotateY\";\n\n\t/**\n\t * Sensitivity of a mouse wheel.\n\t *\n\t * @default 1\n\t */\n\twheelSensitivity?: number;\n\n\t/**\n\t * Duration of mouse-wheel action animation, in milliseconds.\n\t */\n\twheelDuration?: number;\n\n\t/**\n\t * An easing function to use for mouse wheel action animations.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/#Easing_functions} for more info\n\t * @default am5.ease.out($ease.cubic)\n\t */\n\twheelEasing?: (t: Time) => Time;\n\n\t/**\n\t * Duration of zoom/pan animations, in milliseconds.\n\t */\n\tanimationDuration?: number;\n\n\t/**\n\t * An easing function to use for zoom/pan animations.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/#Easing_functions} for more info\n\t * @default am5.ease.out($ease.cubic)\n\t */\n\tanimationEasing?: (t: Time) => Time;\n\n\n\t/**\n\t * A [[ZoomControl]] instance.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/#Zoom_control} for more info\n\t */\n\tzoomControl?: ZoomControl;\n\n\t/**\n\t * Initial/home zoom level.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Initial_position_and_zoom} for more info\n\t */\n\thomeZoomLevel?: number;\n\n\t/**\n\t * Initial coordinates to center map on load or `goHome()` call.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Initial_position_and_zoom} for more info\n\t */\n\thomeGeoPoint?: IGeoPoint;\n\n\t/**\n\t * How much of a map can go outside the viewport.\n\t *\n\t * @default 0.4\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Panning_outside_viewport} for more info\n\t */\n\tmaxPanOut?: number;\n\n\t/**\n\t * Setting `true` means that the map will automatically center itself (or go\n\t * to `homeGeoPoint` if set) when fully zoomed out.\n\t *\n\t * `false` would mean that zoom out will be centered around the mouse\n\t * cursor (when zooming using wheel), or current map position.\n\t * \n\t * @default true\n\t * @since 5.2.1\n\t */\n\tcenterMapOnZoomOut?: boolean;\n\n}\n\nexport interface IMapChartPrivate extends ISerialChartPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tgeoPath: GeoPath;\n\n\t/**\n\t * @ignore\n\t */\n\tmapScale: number;\n\n}\n\n\nexport interface IMapChartEvents extends ISerialChartEvents {\n\n\t/**\n\t * Invoked when geo bounds of the map change, usually after map is\n\t * initialized.\n\t */\n\tgeoboundschanged: {};\n\n}\n\n\nexport class MapChart extends SerialChart {\n\tpublic static className: string = \"MapChart\";\n\tpublic static classNames: Array<string> = SerialChart.classNames.concat([MapChart.className]);\n\n\tdeclare public _settings: IMapChartSettings;\n\tdeclare public _privateSettings: IMapChartPrivate;\n\tdeclare public _seriesType: MapSeries;\n\tdeclare public _events: IMapChartEvents;\n\n\tprotected _downTranslateX: number | undefined;\n\tprotected _downTranslateY: number | undefined;\n\tprotected _downRotationX: number | undefined;\n\tprotected _downRotationY: number | undefined;\n\tprotected _downRotationZ: number | undefined;\n\tprotected _pLat: number = 0;\n\tprotected _pLon: number = 0;\n\n\tprotected _movePoints: { [index: number]: IPoint } = {};\n\tprotected _downZoomLevel: number = 1;\n\tprotected _doubleDownDistance: number = 0;\n\n\tprotected _dirtyGeometries: boolean = false;\n\tprotected _geometryColection: GeoJSON.GeometryCollection = { type: \"GeometryCollection\", geometries: [] };\n\n\tprotected _centerLocation: [number, number] | null = null;\n\n\tprotected _za?: Animation<this[\"_settings\"][\"zoomLevel\"]>;\n\tprotected _rxa?: Animation<this[\"_settings\"][\"rotationX\"]>;\n\tprotected _rya?: Animation<this[\"_settings\"][\"rotationY\"]>;\n\tprotected _txa?: Animation<this[\"_settings\"][\"translateX\"]>;\n\tprotected _tya?: Animation<this[\"_settings\"][\"translateY\"]>;\n\n\tprotected _mapBounds = [[0, 0], [0, 0]];\n\n\tprotected _geoCentroid: IGeoPoint = { longitude: 0, latitude: 0 };\n\tprotected _geoBounds: { left: number, right: number, top: number, bottom: number } = { left: 0, right: 0, top: 0, bottom: 0 };\n\tprotected _prevGeoBounds: { left: number, right: number, top: number, bottom: number } = { left: 0, right: 0, top: 0, bottom: 0 };\n\n\tprotected _dispatchBounds: boolean = false;\n\n\tprotected _wheelDp: IDisposer | undefined;\n\n\tprotected _pw?: number;\n\tprotected _ph?: number;\n\n\tprotected _mapFitted: boolean = false;\n\n\tprotected _centerX: number = 0;\n\tprotected _centerY: number = 0;\n\n\tprotected _makeGeoPath() {\n\t\tconst projection = this.get(\"projection\")!;\n\t\tconst path = geoPath();\n\t\tpath.projection(projection);\n\t\tthis.setPrivateRaw(\"geoPath\", path);\n\t}\n\n\t/**\n\t * Returns coordinates to geographical center of the map.\n\t */\n\tpublic geoCentroid() {\n\t\treturn this._geoCentroid;\n\t}\n\n\t/**\n\t * Returns geographical bounds of the map.\n\t */\n\tpublic geoBounds() {\n\t\treturn this._geoBounds;\n\t}\n\n\tprotected _handleSetWheel() {\n\n\t\tconst wheelX = this.get(\"wheelX\");\n\t\tconst wheelY = this.get(\"wheelY\");\n\t\tconst chartContainer = this.chartContainer;\n\n\t\tif (wheelX != \"none\" || wheelY != \"none\") {\n\n\t\t\tthis._wheelDp = chartContainer.events.on(\"wheel\", (event) => {\n\t\t\t\tconst wheelEasing = this.get(\"wheelEasing\")!;\n\t\t\t\tconst wheelSensitivity = this.get(\"wheelSensitivity\", 1);\n\t\t\t\tconst wheelDuration = this.get(\"wheelDuration\", 0);\n\n\t\t\t\tconst wheelEvent = event.originalEvent;\n\n\t\t\t\t// Ignore wheel event if it is happening on a non-chart element, e.g. if\n\t\t\t\t// some page element is over the chart.\n\t\t\t\tif ($utils.isLocalEvent(wheelEvent, this)) {\n\t\t\t\t\twheelEvent.preventDefault();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst chartContainer = this.chartContainer;\n\t\t\t\tconst point = chartContainer._display.toLocal(event.point);\n\n\t\t\t\tif ((wheelY == \"zoom\")) {\n\t\t\t\t\tthis._handleWheelZoom(wheelEvent.deltaY, point);\n\t\t\t\t}\n\t\t\t\telse if (wheelY == \"rotateY\") {\n\t\t\t\t\tthis._handleWheelRotateY(wheelEvent.deltaY / 5 * wheelSensitivity, wheelDuration, wheelEasing);\n\t\t\t\t}\n\t\t\t\telse if (wheelY == \"rotateX\") {\n\t\t\t\t\tthis._handleWheelRotateX(wheelEvent.deltaY / 5 * wheelSensitivity, wheelDuration, wheelEasing);\n\t\t\t\t}\n\n\t\t\t\tif ((wheelX == \"zoom\")) {\n\t\t\t\t\tthis._handleWheelZoom(wheelEvent.deltaX, point);\n\t\t\t\t}\n\t\t\t\telse if (wheelX == \"rotateY\") {\n\t\t\t\t\tthis._handleWheelRotateY(wheelEvent.deltaX / 5 * wheelSensitivity, wheelDuration, wheelEasing);\n\t\t\t\t}\n\t\t\t\telse if (wheelX == \"rotateX\") {\n\t\t\t\t\tthis._handleWheelRotateX(wheelEvent.deltaX / 5 * wheelSensitivity, wheelDuration, wheelEasing);\n\t\t\t\t}\n\n\t\t\t});\n\n\t\t\tthis._disposers.push(this._wheelDp);\n\t\t}\n\t\telse {\n\t\t\tif (this._wheelDp) {\n\t\t\t\tthis._wheelDp.dispose();\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tconst projection = this.get(\"projection\")!;\n\t\tconst w = this.innerWidth();\n\t\tconst h = this.innerHeight();\n\n\t\tif (this.isDirty(\"projection\")) {\n\t\t\tthis._makeGeoPath();\n\t\t\tthis.markDirtyProjection();\n\t\t\tthis._fitMap();\n\n\t\t\tprojection.scale(this.getPrivate(\"mapScale\") * this.get(\"zoomLevel\", 1));\n\t\t\tif (projection.rotate) {\n\t\t\t\tprojection.rotate([this.get(\"rotationX\", 0), this.get(\"rotationY\", 0), this.get(\"rotationZ\", 0)])\n\t\t\t}\n\n\t\t\tlet prev = this._prevSettings.projection;\n\t\t\tif (prev && prev != projection) {\n\t\t\t\tlet hw = w / 2;\n\t\t\t\tlet hh = h / 2;\n\t\t\t\tif (prev.invert) {\n\t\t\t\t\tlet centerLocation = prev.invert([hw, hh]);\n\n\t\t\t\t\tif (centerLocation) {\n\n\t\t\t\t\t\tlet xy = projection(centerLocation);\n\t\t\t\t\t\tif (xy) {\n\t\t\t\t\t\t\tlet translate = projection.translate();\n\n\t\t\t\t\t\t\tlet xx = hw - ((xy[0] - translate[0]));\n\t\t\t\t\t\t\tlet yy = hh - ((xy[1] - translate[1]));\n\n\t\t\t\t\t\t\tprojection.translate([xx, yy])\n\n\t\t\t\t\t\t\tthis.setRaw(\"translateX\", xx);\n\t\t\t\t\t\t\tthis.setRaw(\"translateY\", yy);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"wheelX\") || this.isDirty(\"wheelY\")) {\n\t\t\tthis._handleSetWheel();\n\t\t}\n\t\tvar previousGeometries = this._geometryColection.geometries;\n\t\tif (this._dirtyGeometries) {\n\t\t\tthis._geometryColection.geometries = [];\n\n\t\t\tthis.series.each((series) => {\n\t\t\t\t$array.pushAll(this._geometryColection.geometries, series._geometries);\n\t\t\t})\n\n\t\t\tthis._fitMap();\n\t\t}\n\n\t\tif (previousGeometries.length != 0 && (w != this._pw || h != this._ph || this._dirtyGeometries)) {\n\t\t\tif (w > 0 && h > 0) {\n\t\t\t\tlet hw = w / 2;\n\t\t\t\tlet hh = h / 2;\n\n\t\t\t\tprojection.fitSize([w, h], this._geometryColection);\n\t\t\t\tconst newScale = projection.scale();\n\n\t\t\t\tthis.setPrivateRaw(\"mapScale\", newScale);\n\t\t\t\tprojection.scale(newScale * this.get(\"zoomLevel\", 1));\n\n\t\t\t\tif (this._centerLocation) {\n\t\t\t\t\tlet xy = projection(this._centerLocation);\n\t\t\t\t\tif (xy) {\n\t\t\t\t\t\tlet translate = projection.translate();\n\n\t\t\t\t\t\tlet xx = hw - ((xy[0] - translate[0]));\n\t\t\t\t\t\tlet yy = hh - ((xy[1] - translate[1]));\n\n\t\t\t\t\t\tprojection.translate([xx, yy])\n\n\t\t\t\t\t\tthis.setRaw(\"translateX\", xx);\n\t\t\t\t\t\tthis.setRaw(\"translateY\", yy);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.markDirtyProjection();\n\t\t\t}\n\t\t}\n\n\t\tthis._pw = w;\n\t\tthis._ph = h;\n\n\t\tif (this.isDirty(\"zoomControl\")) {\n\t\t\tconst previous = this._prevSettings.zoomControl;\n\t\t\tconst zoomControl = this.get(\"zoomControl\")!;\n\t\t\tif (zoomControl !== previous) {\n\t\t\t\tthis._disposeProperty(\"zoomControl\");\n\t\t\t\tif (previous) {\n\t\t\t\t\tprevious.dispose();\n\t\t\t\t}\n\t\t\t\tif (zoomControl) {\n\t\t\t\t\tzoomControl.setPrivate(\"chart\", this);\n\t\t\t\t\tthis.children.push(zoomControl);\n\t\t\t\t}\n\n\t\t\t\tthis.setRaw(\"zoomControl\", zoomControl);\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"zoomLevel\")) {\n\t\t\tprojection.scale(this.getPrivate(\"mapScale\") * this.get(\"zoomLevel\", 1));\n\t\t\tthis.markDirtyProjection();\n\n\t\t\tthis.series.each((series) => {\n\t\t\t\tif (series.isType<MapPointSeries>(\"MapPointSeries\")) {\n\t\t\t\t\tif (series.get(\"autoScale\")) {\n\t\t\t\t\t\t$array.each(series.dataItems, (dataItem) => {\n\t\t\t\t\t\t\tconst bullets = dataItem.bullets;\n\t\t\t\t\t\t\tif (bullets) {\n\t\t\t\t\t\t\t\t$array.each(bullets, (bullet) => {\n\t\t\t\t\t\t\t\t\tconst sprite = bullet.get(\"sprite\");\n\t\t\t\t\t\t\t\t\tif (sprite) {\n\t\t\t\t\t\t\t\t\t\tsprite.set(\"scale\", this.get(\"zoomLevel\"));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\tif (this.isDirty(\"translateX\") || this.isDirty(\"translateY\")) {\n\t\t\tprojection.translate([this.get(\"translateX\", this.width() / 2), this.get(\"translateY\", this.height() / 2)])\n\t\t\tthis.markDirtyProjection();\n\t\t}\n\n\t\tif (projection.rotate) {\n\t\t\tif (this.isDirty(\"rotationX\") || this.isDirty(\"rotationY\") || this.isDirty(\"rotationZ\")) {\n\t\t\t\tprojection.rotate([this.get(\"rotationX\", 0), this.get(\"rotationY\", 0), this.get(\"rotationZ\", 0)])\n\t\t\t\tthis.markDirtyProjection();\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"pinchZoom\") || this.get(\"panX\") || this.get(\"panY\")) {\n\t\t\tthis._setUpTouch();\n\t\t}\n\t}\n\n\n\tprotected _fitMap() {\n\t\tconst projection = this.get(\"projection\")!;\n\n\t\tlet w = this.innerWidth();\n\t\tlet h = this.innerHeight();\n\n\t\tif (w > 0 && h > 0) {\n\t\t\tprojection.fitSize([w, h], this._geometryColection);\n\t\t\tthis.setPrivateRaw(\"mapScale\", projection.scale());\n\n\t\t\tconst translate = projection.translate();\n\n\t\t\tthis.setRaw(\"translateX\", translate[0]);\n\t\t\tthis.setRaw(\"translateY\", translate[1]);\n\n\t\t\tthis._centerX = translate[0];\n\t\t\tthis._centerY = translate[1];\n\n\t\t\tconst geoPath = this.getPrivate(\"geoPath\");\n\t\t\tthis._mapBounds = geoPath.bounds(this._geometryColection);\n\n\t\t\tthis._geoCentroid = $mapUtils.getGeoCentroid(this._geometryColection);\n\n\t\t\tconst bounds = $mapUtils.getGeoBounds(this._geometryColection);\n\t\t\tthis._geoBounds = bounds;\n\n\t\t\tif (this._geometryColection.geometries.length > 0) {\n\n\t\t\t\tbounds.left = $math.round(this._geoBounds.left, 3);\n\t\t\t\tbounds.right = $math.round(this._geoBounds.right, 3);\n\t\t\t\tbounds.top = $math.round(this._geoBounds.top, 3);\n\t\t\t\tbounds.bottom = $math.round(this._geoBounds.bottom, 3);\n\n\t\t\t\tconst prevGeoBounds = this._prevGeoBounds;\n\n\t\t\t\tif (prevGeoBounds && !$utils.sameBounds(bounds, prevGeoBounds)) {\n\t\t\t\t\tthis._dispatchBounds = true;\n\t\t\t\t\tthis._prevGeoBounds = bounds;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._mapFitted = true;\n\t\t}\n\t}\n\n\t/**\n\t * Returns geographical coordinates for calculated or manual center of the\n\t * map.\n\t */\n\tpublic homeGeoPoint(): IGeoPoint {\n\t\tlet homeGeoPoint = this.get(\"homeGeoPoint\");\n\t\tif (!homeGeoPoint) {\n\t\t\tconst geoPath = this.getPrivate(\"geoPath\");\n\t\t\tconst bounds = geoPath.bounds(this._geometryColection);\n\n\t\t\tconst left = bounds[0][0];\n\t\t\tconst top = bounds[0][1];\n\n\t\t\tconst right = bounds[1][0];\n\t\t\tconst bottom = bounds[1][1];\n\n\t\t\thomeGeoPoint = this.invert({ x: left + (right - left) / 2, y: top + (bottom - top) / 2 });\n\t\t}\n\t\treturn homeGeoPoint;\n\t}\n\n\t/**\n\t * Repositions the map to the \"home\" zoom level and center coordinates.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Resetting_position_level} for more info\n\t * @param  duration  Animation duration in milliseconds\n\t */\n\tpublic goHome(duration?: number) {\n\t\tthis.zoomToGeoPoint(this.homeGeoPoint(), this.get(\"homeZoomLevel\", 1), true, duration);\n\t}\n\n\tpublic _updateChildren() {\n\t\tconst projection = this.get(\"projection\")!;\n\t\tif (projection.invert) {\n\t\t\tlet w = this.innerWidth();\n\t\t\tlet h = this.innerHeight();\n\t\t\tif (w > 0 && h > 0) {\n\t\t\t\tthis._centerLocation = projection.invert([this.innerWidth() / 2, this.innerHeight() / 2]);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _afterChanged() {\n\t\tsuper._afterChanged();\n\t\tif (this._dispatchBounds) {\n\t\t\tthis._dispatchBounds = false;\n\t\t\tconst type = \"geoboundschanged\";\n\t\t\tif (this.events.isEnabled(type)) {\n\t\t\t\tthis.events.dispatch(type, { type: type, target: this });\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _setUpTouch(): void {\n\t\tif (!this.chartContainer._display.cancelTouch) {\n\t\t\tthis.chartContainer._display.cancelTouch = (this.get(\"pinchZoom\") || this.get(\"panX\") || this.get(\"panY\")) ? true : false;\n\t\t}\n\t}\n\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtyGeometries() {\n\t\tthis._dirtyGeometries = true;\n\t\tthis.markDirty();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtyProjection() {\n\t\tthis.series.each((series) => {\n\t\t\tseries.markDirtyProjection();\n\t\t})\n\t}\n\n\tprotected _afterNew() {\n\t\tthis._defaultThemes.push(MapChartDefaultTheme.new(this._root));\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"map\"]);\n\n\t\tsuper._afterNew();\n\n\t\tthis._makeGeoPath();\n\n\t\tthis.chartContainer.children.push(this.seriesContainer);\n\n\t\tif (this.get(\"translateX\") == null) {\n\t\t\tthis.set(\"translateX\", this.width() / 2);\n\t\t}\n\t\tif (this.get(\"translateY\") == null) {\n\t\t\tthis.set(\"translateY\", this.height() / 2);\n\t\t}\n\n\t\t// Setting trasnparent background so that full body of the plot container\n\t\t// is interactive\n\t\tthis.chartContainer.set(\"interactive\", true);\n\t\tthis.chartContainer.set(\"interactiveChildren\", false);\n\t\tthis.chartContainer.set(\"background\", Rectangle.new(this._root, {\n\t\t\tthemeTags: [\"map\", \"background\"],\n\t\t\tfill: Color.fromHex(0x000000),\n\t\t\tfillOpacity: 0\n\t\t}));\n\n\t\tthis._disposers.push(this.chartContainer.events.on(\"pointerdown\", (event) => {\n\t\t\tthis._handleChartDown(event);\n\t\t}));\n\n\t\tthis._disposers.push(this.chartContainer.events.on(\"globalpointerup\", (event) => {\n\t\t\tthis._handleChartUp(event);\n\t\t}));\n\n\t\tthis._disposers.push(this.chartContainer.events.on(\"globalpointermove\", (event) => {\n\t\t\tthis._handleChartMove(event);\n\t\t}));\n\n\t\tlet license = false;\n\t\tfor (let i = 0; i < registry.licenses.length; i++) {\n\t\t\tif (registry.licenses[i].match(/^AM5M.{5,}/i)) {\n\t\t\t\tlicense = true;\n\t\t\t}\n\t\t}\n\t\tif (!license) {\n\t\t\tthis._root._showBranding();\n\t\t}\n\n\t\tthis._setUpTouch();\n\n\t}\n\n\tprotected _handleChartDown(event: ISpritePointerEvent) {\n\n\t\tthis._downZoomLevel = this.get(\"zoomLevel\", 1);\n\n\n\t\tlet count = $object.keys(this.chartContainer._downPoints).length;\n\t\tif (count > 0) {\n\t\t\tthis._downTranslateX = this.get(\"translateX\");\n\t\t\tthis._downTranslateY = this.get(\"translateY\");\n\t\t\tthis._downRotationX = this.get(\"rotationX\");\n\t\t\tthis._downRotationY = this.get(\"rotationY\");\n\t\t\tthis._downRotationZ = this.get(\"rotationZ\");\n\n\t\t\tconst downId = this.chartContainer._getDownPointId();\n\t\t\tif (downId) {\n\t\t\t\tlet movePoint = this._movePoints[downId];\n\t\t\t\tif (movePoint) {\n\t\t\t\t\tthis.chartContainer._downPoints[downId] = movePoint;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (count == 0) {\n\n\t\t\tlet bg = this.chartContainer.get(\"background\");\n\t\t\tif (bg) {\n\t\t\t\tbg.events.enableType(\"click\");\n\t\t\t}\n\n\t\t\tif (this.get(\"panX\") || this.get(\"panY\")) {\n\n\t\t\t\tif (this._za) {\n\t\t\t\t\tthis._za.stop();\n\t\t\t\t}\n\t\t\t\tif (this._txa) {\n\t\t\t\t\tthis._txa.stop();\n\t\t\t\t}\n\t\t\t\tif (this._tya) {\n\t\t\t\t\tthis._tya.stop();\n\t\t\t\t}\n\t\t\t\tif (this._rxa) {\n\t\t\t\t\tthis._rxa.stop();\n\t\t\t\t}\n\t\t\t\tif (this._rya) {\n\t\t\t\t\tthis._rya.stop();\n\t\t\t\t}\n\n\t\t\t\tconst downPoint = this.chartContainer._display.toLocal(event.point);\n\t\t\t\tthis._downTranslateX = this.get(\"translateX\");\n\t\t\t\tthis._downTranslateY = this.get(\"translateY\");\n\t\t\t\tthis._downRotationX = this.get(\"rotationX\");\n\t\t\t\tthis._downRotationY = this.get(\"rotationY\");\n\t\t\t\tthis._downRotationZ = this.get(\"rotationZ\");\n\n\t\t\t\tlet projection = this.get(\"projection\")!;\n\n\t\t\t\tif (projection.invert) {\n\t\t\t\t\tlet l0 = projection.invert([downPoint.x, downPoint.y]);\n\t\t\t\t\tlet l1 = projection.invert([downPoint.x + 1, downPoint.y + 1]);\n\t\t\t\t\tif (l0 && l1) {\n\t\t\t\t\t\tthis._pLon = Math.abs(l1[0] - l0[0]);\n\t\t\t\t\t\tthis._pLat = Math.abs(l1[1] - l0[1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Converts screen coordinates (X and Y) within chart to latitude and\n\t * longitude.\n\t * \n\t * @param  point  Screen coordinates\n\t * @return        Geographical coordinates\n\t */\n\tpublic invert(point: IPoint): IGeoPoint {\n\t\tlet projection = this.get(\"projection\")!;\n\n\t\tif (projection.invert) {\n\t\t\tconst ll = projection.invert([point.x, point.y]);\n\t\t\tif (ll) {\n\t\t\t\treturn { longitude: ll[0], latitude: ll[1] };\n\t\t\t}\n\t\t}\n\n\t\treturn { longitude: 0, latitude: 0 };\n\t}\n\n\t/**\n\t * Converts latitude/longitude to screen coordinates (X and Y).\n\t * \n\t * @param  point  Geographical coordinates\n\t * @return        Screen coordinates\n\t */\n\tpublic convert(point: IGeoPoint): IPoint {\n\t\tlet projection = this.get(\"projection\")!;\n\n\t\tconst xy = projection([point.longitude, point.latitude]);\n\n\t\tif (xy) {\n\t\t\treturn { x: xy[0], y: xy[1] };\n\t\t}\n\n\t\treturn { x: 0, y: 0 };\n\t}\n\n\tprotected _handleChartUp(_event: ISpritePointerEvent) {\n\t\tthis.chartContainer._downPoints = {}\n\t}\n\n\tprotected _handlePinch() {\n\t\tconst chartContainer = this.chartContainer;\n\t\tlet i = 0;\n\t\tlet downPoints: Array<IPoint> = [];\n\t\tlet movePoints: Array<IPoint> = [];\n\n\t\t$object.each(chartContainer._downPoints, (k, point) => {\n\t\t\tdownPoints[i] = point;\n\t\t\tlet movePoint = this._movePoints[k];\n\t\t\tif (movePoint) {\n\t\t\t\tmovePoints[i] = movePoint;\n\t\t\t}\n\t\t\ti++;\n\t\t});\n\n\t\tif (downPoints.length > 1 && movePoints.length > 1) {\n\t\t\tconst display = chartContainer._display;\n\n\t\t\tlet downPoint0 = downPoints[0];\n\t\t\tlet downPoint1 = downPoints[1];\n\n\t\t\tlet movePoint0 = movePoints[0];\n\t\t\tlet movePoint1 = movePoints[1];\n\n\t\t\tif (downPoint0 && downPoint1 && movePoint0 && movePoint1) {\n\n\t\t\t\tdownPoint0 = display.toLocal(downPoint0);\n\t\t\t\tdownPoint1 = display.toLocal(downPoint1);\n\n\t\t\t\tmovePoint0 = display.toLocal(movePoint0);\n\t\t\t\tmovePoint1 = display.toLocal(movePoint1);\n\n\t\t\t\tlet initialDistance = Math.hypot(downPoint1.x - downPoint0.x, downPoint1.y - downPoint0.y);\n\t\t\t\tlet currentDistance = Math.hypot(movePoint1.x - movePoint0.x, movePoint1.y - movePoint0.y);\n\n\t\t\t\tlet level = currentDistance / initialDistance * this._downZoomLevel;\n\t\t\t\tlevel = $math.fitToRange(level, this.get(\"minZoomLevel\", 1), this.get(\"maxZoomLevel\", 32));\n\n\t\t\t\tlet moveCenter = { x: movePoint0.x + (movePoint1.x - movePoint0.x) / 2, y: movePoint0.y + (movePoint1.y - movePoint0.y) / 2 };\n\t\t\t\tlet downCenter = { x: downPoint0.x + (downPoint1.x - downPoint0.x) / 2, y: downPoint0.y + (downPoint1.y - downPoint0.y) / 2 };\n\n\t\t\t\tlet tx = this._downTranslateX || 0;\n\t\t\t\tlet ty = this._downTranslateY || 0;\n\n\t\t\t\tlet zoomLevel = this._downZoomLevel;\n\n\t\t\t\tlet xx = moveCenter.x - (- tx + downCenter.x) / zoomLevel * level;\n\t\t\t\tlet yy = moveCenter.y - (- ty + downCenter.y) / zoomLevel * level;\n\n\t\t\t\tthis.set(\"zoomLevel\", level);\n\t\t\t\tthis.set(\"translateX\", xx);\n\t\t\t\tthis.set(\"translateY\", yy);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _handleChartMove(event: ISpritePointerEvent) {\n\t\tconst chartContainer = this.chartContainer;\n\t\tlet downPoint = chartContainer._getDownPoint();\n\t\tconst downPointId = chartContainer._getDownPointId();\n\t\tconst originalEvent = event.originalEvent as any;\n\n\t\tconst pointerId = originalEvent.pointerId;\n\n\t\tif (this.get(\"pinchZoom\")) {\n\t\t\tif (pointerId) {\n\t\t\t\tthis._movePoints[pointerId] = event.point;\n\n\t\t\t\tif ($object.keys(chartContainer._downPoints).length > 1) {\n\t\t\t\t\tthis._handlePinch();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (downPointId && pointerId && pointerId != downPointId) {\n\t\t\treturn;\n\t\t}\n\t\telse {\n\t\t\tif (downPoint) {\n\t\t\t\tconst panX = this.get(\"panX\");\n\t\t\t\tconst panY = this.get(\"panY\");\n\t\t\t\tif (panX != \"none\" || panY != \"none\") {\n\t\t\t\t\tconst display = chartContainer._display;\n\t\t\t\t\tlet local = display.toLocal(event.point);\n\t\t\t\t\tdownPoint = display.toLocal(downPoint);\n\n\t\t\t\t\tlet x = this._downTranslateX;\n\t\t\t\t\tlet y = this._downTranslateY;\n\n\t\t\t\t\tif (Math.hypot(downPoint.x - local.x, downPoint.y - local.y) > 5) {\n\t\t\t\t\t\tlet bg = chartContainer.get(\"background\");\n\t\t\t\t\t\tif (bg) {\n\t\t\t\t\t\t\tbg.events.disableType(\"click\");\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ($type.isNumber(x) && $type.isNumber(y)) {\n\t\t\t\t\t\t\tlet projection = this.get(\"projection\")!;\n\t\t\t\t\t\t\tconst zoomLevel = this.get(\"zoomLevel\", 1);\n\n\t\t\t\t\t\t\tconst maxPanOut = this.get(\"maxPanOut\", 0.4);\n\t\t\t\t\t\t\tconst bounds = this._mapBounds;\n\t\t\t\t\t\t\tconst w = this.width();\n\t\t\t\t\t\t\tconst h = this.height();\n\n\t\t\t\t\t\t\tconst ww = bounds[1][0] - bounds[0][0];\n\t\t\t\t\t\t\tconst hh = bounds[1][1] - bounds[0][1];\n\n\t\t\t\t\t\t\tif (panX == \"translateX\") {\n\t\t\t\t\t\t\t\tx += local.x - downPoint.x;\n\n\t\t\t\t\t\t\t\tconst cx = w / 2 - (w / 2 - this._centerX) * zoomLevel;\n\t\t\t\t\t\t\t\tx = Math.min(x, cx + ww * maxPanOut * zoomLevel);\n\t\t\t\t\t\t\t\tx = Math.max(x, cx - ww * maxPanOut * zoomLevel);\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (panY == \"translateY\") {\n\t\t\t\t\t\t\t\ty += local.y - downPoint.y;\n\t\t\t\t\t\t\t\tconst cy = h / 2 - (h / 2 - this._centerY) * zoomLevel;\n\t\t\t\t\t\t\t\ty = Math.min(y, cy + hh * maxPanOut * zoomLevel);\n\t\t\t\t\t\t\t\ty = Math.max(y, cy - hh * maxPanOut * zoomLevel);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.set(\"translateX\", x);\n\t\t\t\t\t\t\tthis.set(\"translateY\", y);\n\n\t\t\t\t\t\t\tif (projection.invert) {\n\t\t\t\t\t\t\t\tlet downLocation = projection.invert([downPoint.x, downPoint.y]);\n\t\t\t\t\t\t\t\tif (location && downLocation) {\n\t\t\t\t\t\t\t\t\tif (panX == \"rotateX\") {\n\t\t\t\t\t\t\t\t\t\tthis.set(\"rotationX\", this._downRotationX! - (downPoint.x - local.x) * this._pLon);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (panY == \"rotateY\") {\n\t\t\t\t\t\t\t\t\t\tthis.set(\"rotationY\", this._downRotationY! + (downPoint.y - local.y) * this._pLat);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _handleWheelRotateY(delta: number, duration: number, easing: (t: Time) => Time) {\n\t\tthis._rya = this.animate({ key: \"rotationY\", to: this.get(\"rotationY\", 0) - delta, duration: duration, easing: easing });\n\t}\n\n\tprotected _handleWheelRotateX(delta: number, duration: number, easing: (t: Time) => Time) {\n\t\tthis._rxa = this.animate({ key: \"rotationX\", to: this.get(\"rotationX\", 0) - delta, duration: duration, easing: easing });\n\t}\n\n\tprotected _handleWheelZoom(delta: number, point: IPoint) {\n\t\tlet step = this.get(\"zoomStep\", 2);\n\t\tlet zoomLevel = this.get(\"zoomLevel\", 1);\n\t\tlet newZoomLevel = zoomLevel;\n\t\tif (delta > 0) {\n\t\t\tnewZoomLevel = zoomLevel / step;\n\t\t}\n\t\telse if (delta < 0) {\n\t\t\tnewZoomLevel = zoomLevel * step;\n\t\t}\n\n\t\tif (newZoomLevel != zoomLevel) {\n\t\t\tthis.zoomToPoint(point, newZoomLevel)\n\t\t}\n\t}\n\n\t/**\n\t * Zoom the map to geographical bounds.\n\t *\n\t * @param  geoBounds  Bounds\n\t * @param  duration   Animation duration in milliseconds\n\t */\n\tpublic zoomToGeoBounds(geoBounds: { left: number, right: number, top: number, bottom: number }, duration?: number): Animation<this[\"_settings\"][\"zoomLevel\"]> | undefined {\n\t\tif (geoBounds.right < geoBounds.left) {\n\t\t\tgeoBounds.right = 180;\n\t\t\tgeoBounds.left = -180;\n\t\t}\n\n\t\tconst geoPath = this.getPrivate(\"geoPath\");\n\t\tconst mapBounds = geoPath.bounds(this._geometryColection);\n\n\t\tlet p0 = this.convert({ longitude: geoBounds.left, latitude: geoBounds.top });\n\t\tlet p1 = this.convert({ longitude: geoBounds.right, latitude: geoBounds.bottom });\n\n\t\tif (p0.y < mapBounds[0][1]) {\n\t\t\tp0.y = mapBounds[0][1];\n\t\t}\n\n\t\tif (p1.y > mapBounds[1][1]) {\n\t\t\tp1.y = mapBounds[1][1];\n\t\t}\n\n\t\tlet zl = this.get(\"zoomLevel\", 1);\n\n\t\tlet bounds = { left: p0.x, right: p1.x, top: p0.y, bottom: p1.y };\n\n\t\tlet seriesContainer = this.seriesContainer;\n\n\t\tlet zoomLevel = .9 * Math.min(seriesContainer.innerWidth() / (bounds.right - bounds.left) * zl, seriesContainer.innerHeight() / (bounds.bottom - bounds.top) * zl);\n\t\tlet x = bounds.left + (bounds.right - bounds.left) / 2;\n\t\tlet y = bounds.top + (bounds.bottom - bounds.top) / 2;\n\n\t\tlet geoPoint = this.invert({ x, y });\n\n\t\treturn this.zoomToGeoPoint(geoPoint, zoomLevel, true, duration);\n\t}\n\n\t/**\n\t * Zooms the map to specific screen point.\n\t *\n\t * @param  point    Point\n\t * @param  level    Zoom level\n\t * @param  center   Center the map\n\t * @param  duration Duration of the animation in milliseconds\n\t */\n\tpublic zoomToPoint(point: IPoint, level: number, center?: boolean, duration?: number): Animation<this[\"_settings\"][\"zoomLevel\"]> | undefined {\n\t\tif (level) {\n\t\t\tlevel = $math.fitToRange(level, this.get(\"minZoomLevel\", 1), this.get(\"maxZoomLevel\", 32));\n\t\t}\n\n\t\tif (!$type.isNumber(duration)) {\n\t\t\tduration = this.get(\"animationDuration\", 0);\n\t\t}\n\t\tconst easing = this.get(\"animationEasing\");\n\t\tconst zoomLevel = this.get(\"zoomLevel\", 1);\n\n\t\tif (this.get(\"centerMapOnZoomOut\") && level == this.get(\"homeZoomLevel\", 1)) {\n\t\t\tpoint = this.convert(this.homeGeoPoint());\n\t\t\tcenter = true;\n\t\t}\n\n\t\tlet x = point.x;\n\t\tlet y = point.y;\n\n\t\tlet tx = this.get(\"translateX\", 0);\n\t\tlet ty = this.get(\"translateY\", 0);\n\n\t\tlet cx = x;\n\t\tlet cy = y;\n\n\t\tif (center) {\n\t\t\tcx = this.width() / 2;\n\t\t\tcy = this.height() / 2;\n\t\t}\n\n\t\tlet xx = cx - ((x - tx) / zoomLevel * level);\n\t\tlet yy = cy - ((y - ty) / zoomLevel * level);\n\n\n\t\tthis._txa = this.animate({ key: \"translateX\", to: xx, duration: duration, easing: easing });\n\t\tthis._tya = this.animate({ key: \"translateY\", to: yy, duration: duration, easing: easing });\n\t\tthis._za = this.animate({ key: \"zoomLevel\", to: level, duration: duration, easing: easing });\n\n\t\tif (zoomLevel != level) {\n\t\t\tthis._root.readerAlert(this._t(\"Zoom level changed to %1\", this._root.locale, $type.numberToString(level)));\n\t\t}\n\n\t\treturn this._za;\n\t}\n\n\t/**\n\t * Zooms the map to specific geographical point.\n\t *\n\t * @param  geoPoint  Point\n\t * @param  level     Zoom level\n\t * @param  center    Center the map\n\t * @param  duration  Duration of the animation in milliseconds\n\t */\n\tpublic zoomToGeoPoint(geoPoint: IGeoPoint, level: number, center?: boolean, duration?: number): Animation<this[\"_settings\"][\"zoomLevel\"]> | undefined {\n\t\tlet xy = this.convert(geoPoint);\n\n\t\tif (xy) {\n\t\t\treturn this.zoomToPoint(xy, level, center, duration);\n\t\t}\n\t}\n\n\t/**\n\t * Zooms the map in.\n\t */\n\tpublic zoomIn(): Animation<this[\"_settings\"][\"zoomLevel\"]> | undefined {\n\t\treturn this.zoomToPoint({ x: this.width() / 2, y: this.height() / 2 }, this.get(\"zoomLevel\", 1) * this.get(\"zoomStep\", 2));\n\t}\n\n\t/**\n\t * Zooms the map out.\n\t */\n\tpublic zoomOut(): Animation<this[\"_settings\"][\"zoomLevel\"]> | undefined {\n\t\treturn this.zoomToPoint({ x: this.width() / 2, y: this.height() / 2 }, this.get(\"zoomLevel\", 1) / this.get(\"zoomStep\", 2));\n\t}\n\n\tpublic _clearDirty() {\n\t\tsuper._clearDirty();\n\t\tthis._dirtyGeometries = false;\n\t\tthis._mapFitted = false;\n\t}\n}\n", "import type { IMapLineSeriesDataItem, MapLineSeries } from \"./MapLineSeries\";\nimport type { IMapPolygonSeriesDataItem, MapPolygonSeries } from \"./MapPolygonSeries\";\nimport type { Bullet } from \"../../core/render/Bullet\";\nimport type { DataItem } from \"../../core/render/Component\";\nimport type { MapLine } from \"./MapLine\";\nimport type { MapPolygon } from \"./MapPolygon\";\n\nimport { MapSeries, IMapSeriesSettings, IMapSeriesDataItem, IMapSeriesPrivate } from \"./MapSeries\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $type from \"../../core/util/Type\";\nimport * as $math from \"../../core/util/Math\";\nimport type { Animation } from \"../../core/util/Entity\";\n\nexport interface IMapPointSeriesPrivate extends IMapSeriesPrivate {\n}\n\nexport interface IMapPointSeriesDataItem extends IMapSeriesDataItem {\n\n\t/**\n\t * GeoJSON geometry of the point.\n\t */\n\tgeometry?: GeoJSON.Point | GeoJSON.MultiPoint;\n\n\t/**\n\t * Longitude.\n\t */\n\tlongitude?: number;\n\n\t/**\n\t * Latitude.\n\t */\n\tlatitude?: number;\n\n\t/**\n\t * Relative position (0-1) on the [[MapLine]] to place point on.\n\t */\n\tpositionOnLine?: number;\n\n\t/**\n\t * Automatically rotate the point bullet to face the direction of the line\n\t * it is attached to.\n\t */\n\tautoRotate?: boolean;\n\n\t/**\n\t * The angle will be added to the automatically-calculated angle.\n\t *\n\t * Can be used to reverse the direction.\n\t */\n\tautoRotateAngle?: number;\n\n\t/**\n\t * A data item from a [[MapLineSeries]] the point is attached to.\n\t */\n\tlineDataItem?: DataItem<IMapLineSeriesDataItem>;\n\n\t/**\n\t * An ID of a [[MapLine]] the point is attached to.\n\t */\n\tlineId?: string;\n\n\t/**\n\t * A data item from a [[MapPolygonSeries]] to use for positioning of the\n\t * point.\n\t */\n\tpolygonDataItem?: DataItem<IMapPolygonSeriesDataItem>;\n\n\t/**\n\t * An ID of the [[MapPolygon]] to use for centering the point.\n\t */\n\tpolygonId?: string;\n}\n\nexport interface IMapPointSeriesSettings extends IMapSeriesSettings {\n\n\t/**\n\t * A field in data that holds an ID of the related polygon.\n\t *\n\t * If set, the point will be positioned in the visual center of the target\n\t * polygon.\n\t */\n\tpolygonIdField?: string;\n\n\t/**\n\t * If set to `true` will hide all points that are in the visible range of\n\t * the map.\n\t */\n\tclipFront?: boolean;\n\n\t/**\n\t * If set to `true` will hide all points that are in the invisible range of\n\t * the map.\n\t *\n\t * For example on the side of the globe facing away from the viewer when\n\t * used with Orthographic projection.\n\t *\n\t * NOTE: not all projections have invisible side.\n\t *\n\t * @default true\n\t */\n\tclipBack?: boolean;\n\n\t/**\n\t * A field in data that holds point's longitude.\n\t */\n\tlatitudeField?: string;\n\n\t/**\n\t * A field in data that holds point's longitude.\n\t */\n\tlongitudeField?: string;\n\n\n\t/**\n\t * @todo review\n\t * @default false\n\t */\n\tautoScale?:boolean\n};\n\n/**\n * Creates a map series for displaying markers on the map.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-point-series/} for more info\n * @important\n */\nexport class MapPointSeries extends MapSeries {\n\n\tpublic static className: string = \"MapPointSeries\";\n\tpublic static classNames: Array<string> = MapSeries.classNames.concat([MapPointSeries.className]);\n\n\tdeclare public _settings: IMapPointSeriesSettings;\n\tdeclare public _privateSettings: IMapPointSeriesPrivate;\n\tdeclare public _dataItemSettings: IMapPointSeriesDataItem;\n\n\tprotected _types: Array<GeoJSON.GeoJsonGeometryTypes> = [\"Point\", \"MultiPoint\"];\n\n\tprotected _afterNew() {\n\t\tthis.fields.push(\"polygonId\", \"lineId\", \"longitude\", \"latitude\");\n\t\tsuper._afterNew();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtyProjection() {\n\t\tthis.markDirty();\n\t}\n\n\t/**\n\t * Forces a repaint of the element which relies on data.\n\t *\n\t * @since 5.0.21\n\t */\n\tpublic markDirtyValues(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.markDirtyValues();\n\n\t\tif (dataItem) {\n\t\t\tthis._positionBullets(dataItem);\n\t\t}\n\t}\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\t\tconst geometry = dataItem.get(\"geometry\");\n\t\tif (!geometry) {\n\t\t\tdataItem.set(\"geometry\", { type: \"Point\", coordinates: [dataItem.get(\"longitude\", 0), dataItem.get(\"latitude\", 0)] });\n\t\t}\n\t\telse {\n\t\t\tif (geometry.type == \"Point\") {\n\t\t\t\tconst coordinates = geometry.coordinates;\n\t\t\t\tif (coordinates) {\n\t\t\t\t\tdataItem.set(\"longitude\", coordinates[0]);\n\t\t\t\t\tdataItem.set(\"latitude\", coordinates[1]);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (geometry.type == \"MultiPoint\") {\n\t\t\t\tconst coordinates = geometry.coordinates;\n\t\t\t\tif (coordinates && coordinates[0]) {\n\t\t\t\t\tdataItem.set(\"longitude\", coordinates[0][0]);\n\t\t\t\t\tdataItem.set(\"latitude\", coordinates[0][1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _makeBullets(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tdataItem.bullets = [];\n\n\t\tthis.bullets.each((bulletFunction) => {\n\t\t\tconst geometry = dataItem.get(\"geometry\");\n\n\t\t\tif (geometry) {\n\t\t\t\tif (geometry.type == \"Point\") {\n\t\t\t\t\tthis._makeBullet(dataItem, bulletFunction);\n\t\t\t\t}\n\t\t\t\telse if (geometry.type = \"MultiPoint\") {\n\t\t\t\t\tlet i = 0;\n\t\t\t\t\t$array.each(geometry.coordinates, () => {\n\t\t\t\t\t\tthis._makeBullet(dataItem, bulletFunction, i);\n\t\t\t\t\t\ti++;\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\n\tpublic _positionBullet(bullet: Bullet) {\n\t\tconst sprite = bullet.get(\"sprite\");\n\t\tif (sprite) {\n\t\t\tconst dataItem = sprite.dataItem as DataItem<this[\"_dataItemSettings\"]>;\n\n\t\t\tconst latitude = dataItem.get(\"latitude\");\n\t\t\tconst longitude = dataItem.get(\"longitude\");\n\t\t\tconst lineDataItem = dataItem.get(\"lineDataItem\");\n\t\t\tconst chart = this.chart;\n\t\t\tlet line: MapLine | undefined;\n\t\t\tif (lineDataItem) {\n\t\t\t\tline = lineDataItem.get(\"mapLine\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst lineId = dataItem.get(\"lineId\");\n\n\t\t\t\tif (lineId && chart) {\n\t\t\t\t\tchart.series.each((series) => {\n\t\t\t\t\t\tif (series.isType<MapLineSeries>(\"MapLineSeries\")) {\n\t\t\t\t\t\t\tlet lineDI = series.getDataItemById(lineId);\n\t\t\t\t\t\t\tif (lineDI) {\n\t\t\t\t\t\t\t\tdataItem.set(\"lineDataItem\", lineDI);\n\t\t\t\t\t\t\t\tline = lineDI.get(\"mapLine\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tconst polygonDataItem = dataItem.get(\"polygonDataItem\");\n\t\t\tlet polygon: MapPolygon | undefined;\n\t\t\tif (polygonDataItem) {\n\t\t\t\tpolygon = polygonDataItem.get(\"mapPolygon\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst polygonId = dataItem.get(\"polygonId\");\n\n\t\t\t\tif (polygonId && chart) {\n\t\t\t\t\tchart.series.each((series) => {\n\t\t\t\t\t\tif (series.isType<MapPolygonSeries>(\"MapPolygonSeries\")) {\n\t\t\t\t\t\t\tlet polygonDI = series.getDataItemById(polygonId);\n\t\t\t\t\t\t\tif (polygonDI) {\n\t\t\t\t\t\t\t\tdataItem.set(\"polygonDataItem\", polygonDI);\n\t\t\t\t\t\t\t\tpolygon = polygonDI.get(\"mapPolygon\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst positionOnLine = dataItem.get(\"positionOnLine\");\n\t\t\tlet coordinates: [number, number] | undefined;\n\n\t\t\tlet angle: number | undefined;\n\n\t\t\tif (polygon) {\n\t\t\t\tlet geoPoint = polygon.visualCentroid();\n\t\t\t\tcoordinates = [geoPoint.longitude, geoPoint.latitude];\n\t\t\t}\n\t\t\telse if (line && $type.isNumber(positionOnLine)) {\n\t\t\t\tlet geoPoint = line.positionToGeoPoint(positionOnLine);\n\t\t\t\tcoordinates = [geoPoint.longitude, geoPoint.latitude];\n\n\t\t\t\tif (dataItem.get(\"autoRotate\", bullet.get(\"autoRotate\")) && chart) {\n\t\t\t\t\tconst geoPoint0 = line.positionToGeoPoint(positionOnLine - 0.002);\n\t\t\t\t\tconst geoPoint1 = line.positionToGeoPoint(positionOnLine + 0.002);\n\n\t\t\t\t\tconst point0 = chart.convert(geoPoint0);\n\t\t\t\t\tconst point1 = chart.convert(geoPoint1);\n\n\t\t\t\t\t//dataItem.set(\"autoRotateAngle\", $math.getAngle(point0, point1));\n\t\t\t\t\tangle = $math.getAngle(point0, point1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ($type.isNumber(longitude) && $type.isNumber(latitude)) {\n\t\t\t\tcoordinates = [longitude, latitude];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst geometry = dataItem.get(\"geometry\")!;\n\t\t\t\tif (geometry) {\n\t\t\t\t\tif (geometry.type == \"Point\") {\n\t\t\t\t\t\tthis._positionBulletReal(bullet, geometry, geometry.coordinates as [number, number], angle);\n\t\t\t\t\t}\n\t\t\t\t\telse if (geometry.type == \"MultiPoint\") {\n\t\t\t\t\t\tlet index = bullet._index || 0;\n\t\t\t\t\t\tcoordinates = geometry.coordinates[index] as [number, number];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (coordinates) {\n\t\t\t\tthis._positionBulletReal(bullet, { type: \"Point\", coordinates: coordinates }, coordinates, angle);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _positionBulletReal(bullet: Bullet, geometry: GeoJSON.Geometry, coordinates: [number, number], angle?: number) {\n\t\tconst sprite = bullet.get(\"sprite\");\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tconst projection = chart.get(\"projection\")!;\n\t\t\tconst geoPath = chart.getPrivate(\"geoPath\");\n\t\t\tconst dataItem: DataItem<IMapPointSeriesDataItem> = sprite.dataItem as DataItem<IMapPointSeriesDataItem>;\n\n\t\t\tconst xy = projection(coordinates as any);\n\n\t\t\tif (xy) {\n\t\t\t\tsprite.setAll({ x: xy[0], y: xy[1] });\n\t\t\t}\n\n\t\t\tlet visible = true;\n\t\t\tif (geoPath(geometry)) {\n\t\t\t\tif (this.get(\"clipFront\")) {\n\t\t\t\t\tvisible = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (this.get(\"clipBack\")) {\n\t\t\t\t\tvisible = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsprite.setPrivate(\"visible\", visible);\n\n\t\t\tif (dataItem && angle != null && dataItem.get(\"autoRotate\", bullet.get(\"autoRotate\"))) {\n\t\t\t\tsprite.set(\"rotation\", angle + dataItem.get(\"autoRotateAngle\", bullet.get(\"autoRotateAngle\", 0)));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Centers the map to specific series' data item and zooms to the level\n\t * specified in the parameters.\n\t *\n\t * @param  dataItem   Map point\n\t * @param  zoomLevel  Zoom level\n\t */\n\tpublic zoomToDataItem(dataItem: DataItem<IMapPointSeriesDataItem>, zoomLevel: number): Animation<any> | undefined {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\treturn chart.zoomToGeoPoint({ longitude: dataItem.get(\"longitude\", 0), latitude: dataItem.get(\"latitude\", 0) }, zoomLevel, true);\n\t\t}\n\t}\n\n}\n", "import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"../../core/render/Graphics\";\nimport type { MapPolygonSeries } from \"./MapPolygonSeries\";\nimport type { IGeoPoint } from \"../../core/util/IGeoPoint\";\nimport type { IPoint } from \"../../core/util/IPoint\";\nimport * as $mapUtils from \"./MapUtils\";\nimport $polylabel from \"polylabel\";\nimport { geoArea } from \"d3-geo\";\n\nexport interface IMapPolygonSettings extends IGraphicsSettings {\n\n\t/**\n\t * A GeoJSON representation of the polygons geometry.\n\t */\n\tgeometry?: GeoJSON.MultiPolygon | GeoJSON.Polygon;\n\n\t/**\n\t * @todo needs description\n\t * @default 0.5\n\t */\n\tprecision?: number;\n\n}\n\nexport interface IMapPolygonPrivate extends IGraphicsPrivate {\n}\n\n/**\n * A polygon in a [[MapPolygonSeries]].\n */\nexport class MapPolygon extends Graphics {\n\n\tdeclare public _settings: IMapPolygonSettings;\n\tdeclare public _privateSettings: IMapPolygonPrivate;\n\n\tpublic static className: string = \"MapPolygon\";\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([MapPolygon.className]);\n\tprotected _projectionDirty: boolean = false;\n\n\t/**\n\t * A [[MapPolygonSeries]] polygon belongs to.\n\t */\n\tpublic series: MapPolygonSeries | undefined;\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this._projectionDirty || this.isDirty(\"geometry\") || this.isDirty(\"precision\")) {\n\t\t\tconst geometry = this.get(\"geometry\")!;\n\n\t\t\tif (geometry) {\n\t\t\t\tconst series = this.series;\n\t\t\t\tif (series) {\n\t\t\t\t\tconst projection = series.projection();\n\t\t\t\t\tif (projection) {\n\t\t\t\t\t\tprojection.precision(this.get(\"precision\", 0.5));\n\t\t\t\t\t}\n\n\t\t\t\t\tconst geoPath = series.geoPath();\n\n\t\t\t\t\tif (geoPath) {\n\t\t\t\t\t\tthis._clear = true;\n\n\t\t\t\t\t\tthis.set(\"draw\", (_display) => {\n\t\t\t\t\t\t\tgeoPath.context(this._display as any);\n\t\t\t\t\t\t\tgeoPath(geometry);\n\t\t\t\t\t\t\tgeoPath.context(null);\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\tif (this.isHover()) {\n\t\t\t\t\t\t\tthis.showTooltip();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtyProjection() {\n\t\tthis.markDirty();\n\t\tthis._projectionDirty = true;\n\t}\n\n\tpublic _clearDirty() {\n\t\tsuper._clearDirty();\n\t\tthis._projectionDirty = false;\n\t}\n\n\t/**\n\t * Returns latitude/longitude of the geometrical center of the polygon.\n\t *\n\t * @return Center\n\t */\n\tpublic geoCentroid(): IGeoPoint {\n\t\tconst geometry = this.get(\"geometry\")!;\n\t\tif (geometry) {\n\t\t\treturn $mapUtils.getGeoCentroid(geometry);\n\t\t}\n\t\telse {\n\t\t\treturn { latitude: 0, longitude: 0 };\n\t\t}\n\t}\n\n\t/**\n\t * Returns latitude/longitude of the visual center of the polygon.\n\t *\n\t * @return Center\n\t */\n\tpublic visualCentroid(): IGeoPoint {\n\n\t\tlet biggestArea = 0;\n\t\tlet coordinates: number[][][] = [];\n\t\tconst geometry = this.get(\"geometry\")!;\n\n\t\tif (geometry) {\n\t\t\tif (geometry.type == \"Polygon\") {\n\t\t\t\tcoordinates = geometry.coordinates as number[][][];\n\t\t\t}\n\t\t\telse if (geometry.type == \"MultiPolygon\") {\n\t\t\t\tfor (let i = 0; i < geometry.coordinates.length; i++) {\n\t\t\t\t\tlet coords = geometry.coordinates[i] as number[][][];\n\t\t\t\t\tlet area = geoArea({ type: \"Polygon\", coordinates: coords });\n\t\t\t\t\tif (area > biggestArea) {\n\t\t\t\t\t\tcoordinates = coords;\n\t\t\t\t\t\tbiggestArea = area;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet center = $polylabel(coordinates as number[][][]);\n\t\t\treturn { longitude: center[0], latitude: center[1] };\n\n\t\t}\n\t\treturn { longitude: 0, latitude: 0 };\n\t}\n\n\n\tpublic _getTooltipPoint(): IPoint {\n\t\tconst series = this.series;\n\n\t\tif (series) {\n\t\t\tconst projection = series.projection();\n\t\t\tif (projection) {\n\t\t\t\tconst geoPoint = this.visualCentroid();\n\t\t\t\tconst xy = projection([geoPoint.longitude, geoPoint.latitude]);\n\n\t\t\t\tif (xy) {\n\t\t\t\t\treturn { x: xy[0], y: xy[1] }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { x: 0, y: 0 };\n\t}\n}\n", "import type { DataItem } from \"../../core/render/Component\";\n\nimport { MapSeries, IMapSeriesSettings, IMapSeriesDataItem, IMapSeriesPrivate } from \"./MapSeries\";\nimport { MapPolygon } from \"./MapPolygon\";\nimport { Template } from \"../../core/util/Template\";\nimport { ListTemplate } from \"../../core/util/List\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $mapUtils from \"./MapUtils\";\nimport type { Animation } from \"../../core/util/Entity\";\n\nexport interface IMapPolygonSeriesPrivate extends IMapSeriesPrivate {\n}\n\nexport interface IMapPolygonSeriesDataItem extends IMapSeriesDataItem {\n\n\t/**\n\t * Related [[MapPolygon]] object.\n\t */\n\tmapPolygon: MapPolygon;\n\n\t/**\n\t * GeoJSON geometry of the polygon.\n\t */\n\tgeometry?: GeoJSON.Polygon | GeoJSON.MultiPolygon;\n\n}\n\nexport interface IMapPolygonSeriesSettings extends IMapSeriesSettings {\n\n}\n\n/**\n * Creates a map series for displaying polygons.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/} for more info\n * @important\n */\nexport class MapPolygonSeries extends MapSeries {\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeMapPolygon(dataItem: DataItem<this[\"_dataItemSettings\"]>): MapPolygon {\n\t\tconst mapPolygon = this.children.push(this.mapPolygons.make());\n\t\tmapPolygon._setDataItem(dataItem);\n\t\tthis.mapPolygons.push(mapPolygon);\n\t\treturn mapPolygon;\n\t}\n\n\t/**\n\t * A [[ListTemplate]] of all polygons in series.\n\t *\n\t * `mapPolygons.template` can also be used to configure polygons.\n\t *\n\t * @default new ListTemplate<MapPolygon>\n\t */\n\tpublic readonly mapPolygons: ListTemplate<MapPolygon> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => MapPolygon._new(this._root, {}, [this.mapPolygons.template])\n\t);\n\n\tpublic static className: string = \"MapPolygonSeries\";\n\tpublic static classNames: Array<string> = MapSeries.classNames.concat([MapPolygonSeries.className]);\n\n\tdeclare public _settings: IMapPolygonSeriesSettings;\n\tdeclare public _privateSettings: IMapPolygonSeriesPrivate;\n\tdeclare public _dataItemSettings: IMapPolygonSeriesDataItem;\n\n\tprotected _types: Array<GeoJSON.GeoJsonGeometryTypes> = [\"Polygon\", \"MultiPolygon\"];\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtyProjection() {\n\t\t$array.each(this.dataItems, (dataItem) => {\n\t\t\tlet mapPolygon = dataItem.get(\"mapPolygon\");\n\t\t\tif (mapPolygon) {\n\t\t\t\tmapPolygon.markDirtyProjection();\n\t\t\t}\n\t\t})\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tif (this.isDirty(\"fill\")) {\n\t\t\tthis.mapPolygons.template.set(\"fill\", this.get(\"fill\"));\n\t\t}\n\t\tif (this.isDirty(\"stroke\")) {\n\t\t\tthis.mapPolygons.template.set(\"stroke\", this.get(\"stroke\"));\n\t\t}\n\t}\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\n\t\tlet mapPolygon = dataItem.get(\"mapPolygon\");\n\t\tif (!mapPolygon) {\n\t\t\tmapPolygon = this.makeMapPolygon(dataItem);\n\t\t}\n\n\t\tdataItem.set(\"mapPolygon\", mapPolygon);\n\t\tconst geometry = dataItem.get(\"geometry\")!;\n\n\t\tif (geometry) {\n\t\t\tmapPolygon.set(\"geometry\", geometry);\n\t\t}\n\n\t\tmapPolygon.series = this;\n\n\t\tthis._addGeometry(dataItem.get(\"geometry\"));\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.disposeDataItem(dataItem);\n\t\tconst mapPolygon = dataItem.get(\"mapPolygon\");\n\t\tif (mapPolygon) {\n\t\t\tthis.mapPolygons.removeValue(mapPolygon);\n\t\t\tmapPolygon.dispose();\n\t\t}\n\t\tthis._removeGeometry(dataItem.get(\"geometry\"));\n\t}\n\n\n\t/**\n\t * Forces a repaint of the element which relies on data.\n\t *\n\t * @since 5.0.21\n\t */\n\tpublic markDirtyValues(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.markDirtyValues();\n\t\tif (dataItem) {\n\t\t\tconst mapPolygon = dataItem.get(\"mapPolygon\");\n\t\t\tif (mapPolygon) {\n\t\t\t\tmapPolygon.set(\"geometry\", dataItem.get(\"geometry\"));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Centers and zooms in on the specific polygon.\n\t *\n\t * @param  dataItem  Target data item\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Zooming_to_clicked_object} for more info\n\t */\n\tpublic zoomToDataItem(dataItem: DataItem<IMapPolygonSeriesDataItem>):Animation<any> | undefined {\n\t\tconst polygon = dataItem.get(\"mapPolygon\");\n\t\tif (polygon) {\n\t\t\tconst geometry = polygon.get(\"geometry\");\n\t\t\tconst chart = this.chart;\n\t\t\tif (geometry && chart) {\n\t\t\t\treturn chart.zoomToGeoBounds($mapUtils.getGeoBounds(geometry));\n\t\t\t}\n\t\t}\n\t}\n}\n", "import type { MapChart } from \"./MapChart\";\n\nimport { Container, IContainerPrivate, IContainerSettings } from \"../../core/render/Container\";\nimport { Button } from \"../../core/render/Button\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport { p100 } from \"../../core/util/Percent\";\nimport { MultiDisposer } from \"../../core/util/Disposer\";\n\nexport interface IZoomControlSettings extends IContainerSettings {\n\n}\n\nexport interface IZoomControlPrivate extends IContainerPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tchart?: MapChart;\n\n}\n\n/**\n * A control that displays button for zooming [[MapChart]] in and out.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Zoom_control} for more information\n * @important\n */\nexport class ZoomControl extends Container {\n\n\t/**\n\t * A [[Button]] for zoom in.\n\t *\n\t * @default Button.new()\n\t */\n\tpublic readonly plusButton: Button = this.children.push(Button.new(this._root, { width: 36, height: 36, themeTags: [\"plus\"] }));\n\n\t/**\n\t * A [[Button]] for zoom out.\n\t *\n\t * @default Button.new()\n\t */\n\tpublic readonly minusButton: Button = this.children.push(Button.new(this._root, { width: 36, height: 36, themeTags: [\"minus\"] }));\n\n\tdeclare public _settings: IZoomControlSettings;\n\tdeclare public _privateSettings: IZoomControlPrivate;\n\n\tpublic static className: string = \"ZoomControl\";\n\tpublic static classNames: Array<string> = Container.classNames.concat([ZoomControl.className]);\n\n\tprotected _disposer: MultiDisposer | undefined;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\n\t\tthis.set(\"position\", \"absolute\");\n\n\t\tthis.set(\"layout\", this._root.verticalLayout);\n\t\tthis.set(\"x\", p100);\n\t\tthis.set(\"centerX\", p100);\n\n\t\tthis.set(\"y\", p100);\n\t\tthis.set(\"centerY\", p100);\n\n\t\tthis.set(\"paddingRight\", 10);\n\t\tthis.set(\"paddingBottom\", 10);\n\n\t\tthis.plusButton.setAll({\n\t\t\ticon: Graphics.new(this._root, { themeTags: [\"icon\"] }),\n\t\t\tlayout: undefined\n\t\t});\n\n\t\tthis.minusButton.setAll({\n\t\t\ticon: Graphics.new(this._root, { themeTags: [\"icon\"] }),\n\t\t\tlayout: undefined\n\t\t});\n\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tif (this.isPrivateDirty(\"chart\")) {\n\t\t\tconst chart = this.getPrivate(\"chart\");\n\t\t\tconst previous = this._prevPrivateSettings.chart;\n\t\t\tif (chart) {\n\t\t\t\tthis._disposer = new MultiDisposer([\n\t\t\t\t\tthis.plusButton.events.on(\"click\", () => {\n\t\t\t\t\t\tchart.zoomIn()\n\t\t\t\t\t}),\n\t\t\t\t\tthis.minusButton.events.on(\"click\", () => {\n\t\t\t\t\t\tchart.zoomOut()\n\t\t\t\t\t})])\n\t\t\t}\n\n\t\t\tif (previous && this._disposer) {\n\t\t\t\tthis._disposer.dispose();\n\t\t\t}\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
