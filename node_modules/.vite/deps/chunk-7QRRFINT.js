import {
  __export
} from "./chunk-QOVRSCHT.js";

// node_modules/@amcharts/amcharts5/.internal/core/util/Type.js
var Type_exports = {};
__export(Type_exports, {
  PLACEHOLDER: () => PLACEHOLDER,
  PLACEHOLDER2: () => PLACEHOLDER2,
  getType: () => getType,
  isArray: () => isArray,
  isDate: () => isDate,
  isNaN: () => isNaN,
  isNumber: () => isNumber,
  isObject: () => isObject,
  isString: () => isString,
  numberToString: () => numberToString,
  repeat: () => repeat,
  toDate: () => toDate,
  toNumber: () => toNumber
});
function isNaN(value) {
  return Number(value) !== value;
}
function getType(value) {
  return {}.toString.call(value);
}
function toNumber(value) {
  if (value != null && !isNumber(value)) {
    var converted = Number(value);
    if (isNaN(converted) && isString(value) && value != "") {
      return toNumber(value.replace(/[^0-9.\-]+/g, ""));
    }
    return converted;
  }
  return value;
}
function toDate(value) {
  if (isDate(value)) {
    return new Date(value);
  } else if (isNumber(value)) {
    return new Date(value);
  } else {
    var num = Number(value);
    if (!isNumber(num)) {
      return new Date(value);
    } else {
      return new Date(num);
    }
  }
}
function numberToString(value) {
  if (isNaN(value)) {
    return "NaN";
  }
  if (value === Infinity) {
    return "Infinity";
  }
  if (value === -Infinity) {
    return "-Infinity";
  }
  if (value === 0 && 1 / value === -Infinity) {
    return "-0";
  }
  var negative = value < 0;
  value = Math.abs(value);
  var parsed = /^([0-9]+)(?:\.([0-9]+))?(?:e[\+\-]([0-9]+))?$/.exec("" + value);
  var digits = parsed[1];
  var decimals = parsed[2] || "";
  var res;
  if (parsed[3] === void 0) {
    res = decimals === "" ? digits : digits + "." + decimals;
  } else {
    var exponent = +parsed[3];
    if (value < 1) {
      var zeros = exponent - 1;
      res = "0." + repeat("0", zeros) + digits + decimals;
    } else {
      var zeros = exponent - decimals.length;
      if (zeros === 0) {
        res = digits + decimals;
      } else if (zeros < 0) {
        res = digits + decimals.slice(0, zeros) + "." + decimals.slice(zeros);
      } else {
        res = digits + decimals + repeat("0", zeros);
      }
    }
  }
  return negative ? "-" + res : res;
}
function repeat(string, amount) {
  return new Array(amount + 1).join(string);
}
function isDate(value) {
  return getType(value) === "[object Date]";
}
function isString(value) {
  return typeof value === "string";
}
function isNumber(value) {
  return typeof value === "number" && Number(value) == value;
}
function isObject(value) {
  return typeof value === "object" && value !== null;
}
function isArray(value) {
  return Array.isArray(value);
}
var PLACEHOLDER = "__\xA7\xA7\xA7__";
var PLACEHOLDER2 = "__\xA7\xA7\xA7\xA7__";

// node_modules/@amcharts/amcharts5/.internal/core/util/Array.js
var Array_exports = {};
__export(Array_exports, {
  add: () => add,
  any: () => any,
  copy: () => copy,
  each: () => each,
  eachContinue: () => eachContinue,
  eachReverse: () => eachReverse,
  find: () => find,
  findIndex: () => findIndex,
  findIndexReverse: () => findIndexReverse,
  findMap: () => findMap,
  findReverse: () => findReverse,
  first: () => first,
  getFirstSortedIndex: () => getFirstSortedIndex,
  getSortedIndex: () => getSortedIndex,
  has: () => has,
  indexOf: () => indexOf,
  insert: () => insert,
  insertIndex: () => insertIndex,
  keepIf: () => keepIf,
  last: () => last,
  map: () => map,
  move: () => move,
  pushAll: () => pushAll,
  pushOne: () => pushOne,
  remove: () => remove,
  removeFirst: () => removeFirst,
  removeIndex: () => removeIndex,
  replace: () => replace,
  setIndex: () => setIndex,
  shiftLeft: () => shiftLeft,
  shuffle: () => shuffle,
  slice: () => slice,
  toArray: () => toArray
});
function indexOf(array, value) {
  var length = array.length;
  for (var i = 0; i < length; ++i) {
    if (array[i] === value) {
      return i;
    }
  }
  return -1;
}
function any(array, test) {
  var length = array.length;
  for (var i = 0; i < length; ++i) {
    if (test(array[i])) {
      return true;
    }
  }
  return false;
}
function map(array, fn) {
  var length = array.length;
  var output = new Array(length);
  for (var i = 0; i < length; ++i) {
    output[i] = fn(array[i], i);
  }
  return output;
}
function each(array, fn) {
  var length = array.length;
  for (var i = 0; i < length; ++i) {
    fn(array[i], i);
  }
}
function eachReverse(array, fn) {
  var i = array.length;
  while (i > 0) {
    --i;
    fn(array[i], i);
  }
}
function eachContinue(array, fn) {
  var length = array.length;
  for (var i = 0; i < length; ++i) {
    if (!fn(array[i], i)) {
      break;
    }
  }
}
function shiftLeft(array, index) {
  var length = array.length;
  for (var i = index; i < length; ++i) {
    array[i - index] = array[i];
  }
  array.length = length - index;
}
function last(array) {
  var length = array.length;
  return length ? array[length - 1] : void 0;
}
function first(array) {
  return array[0];
}
function insert(array, element, index) {
  index = Math.max(0, Math.min(index, array.length));
  array.splice(index, 0, element);
}
function setIndex(array, element, index) {
  remove(array, element);
  insert(array, element, index);
}
function pushAll(array, input) {
  var length = input.length;
  for (var i = 0; i < length; ++i) {
    array.push(input[i]);
  }
}
function remove(array, element) {
  var found = false;
  var index = 0;
  for (; ; ) {
    index = array.indexOf(element, index);
    if (index === -1) {
      return found;
    } else {
      found = true;
      array.splice(index, 1);
    }
  }
}
function removeFirst(array, element) {
  var index = array.indexOf(element);
  if (index !== -1) {
    array.splice(index, 1);
    return true;
  } else {
    return false;
  }
}
function move(array, element, toIndex) {
  var index = indexOf(array, element);
  if (index !== -1) {
    removeIndex(array, index);
  }
  if (toIndex == null) {
    array.push(element);
  } else {
    insertIndex(array, toIndex, element);
  }
}
function add(array, element, index) {
  if (!isNumber(index)) {
    array.push(element);
  } else if (index === 0) {
    array.unshift(element);
  } else {
    array.splice(index, 0, element);
  }
}
function pushOne(array, element) {
  if (array.indexOf(element) === -1) {
    array.push(element);
  }
}
function replace(array, element, index) {
  var ind = array.indexOf(element);
  if (ind !== -1) {
    array.splice(ind, 1);
  }
  if (!isNumber(index)) {
    array.push(element);
  } else {
    array.splice(index, 0, element);
  }
}
function toArray(input) {
  if (Array.isArray(input)) {
    return input;
  } else {
    return [input];
  }
}
function has(array, element) {
  return indexOf(array, element) !== -1;
}
function copy(array) {
  var length = array.length;
  var output = new Array(length);
  for (var i = 0; i < length; ++i) {
    output[i] = array[i];
  }
  return output;
}
function slice(array, start, end) {
  if (end === void 0) {
    end = array.length;
  }
  var output = new Array(end - start);
  for (var i = start; i < end; ++i) {
    output[i - start] = array[i];
  }
  return output;
}
function insertIndex(array, index, value) {
  array.splice(index, 0, value);
}
function removeIndex(array, index) {
  array.splice(index, 1);
}
function findIndex(array, matches) {
  var length = array.length;
  for (var i = 0; i < length; ++i) {
    if (matches(array[i], i)) {
      return i;
    }
  }
  return -1;
}
function findIndexReverse(array, matches) {
  var i = array.length;
  while (i > 0) {
    --i;
    if (matches(array[i], i)) {
      return i;
    }
  }
  return -1;
}
function find(array, matches) {
  var index = findIndex(array, matches);
  if (index !== -1) {
    return array[index];
  }
}
function findReverse(array, matches) {
  var index = findIndexReverse(array, matches);
  if (index !== -1) {
    return array[index];
  }
}
function findMap(array, matches) {
  var length = array.length;
  for (var i = 0; i < length; ++i) {
    var value = matches(array[i], i);
    if (value !== void 0) {
      return value;
    }
  }
}
function shuffle(array) {
  var currentIndex = array.length, temporaryValue, randomIndex;
  while (currentIndex !== 0) {
    randomIndex = Math.floor(Math.random() * currentIndex);
    currentIndex -= 1;
    temporaryValue = array[currentIndex];
    array[currentIndex] = array[randomIndex];
    array[randomIndex] = temporaryValue;
  }
}
function getSortedIndex(array, ordering) {
  var start = 0;
  var end = array.length;
  var found = false;
  while (start < end) {
    var pivot = start + end >> 1;
    var order = ordering(array[pivot]);
    if (order < 0) {
      start = pivot + 1;
    } else if (order === 0) {
      found = true;
      start = pivot + 1;
    } else {
      end = pivot;
    }
  }
  return {
    found,
    index: found ? start - 1 : start
  };
}
function getFirstSortedIndex(array, ordering) {
  var start = 0;
  var end = array.length;
  var found = false;
  while (start < end) {
    var pivot = start + end >> 1;
    var order = ordering(array[pivot]);
    if (order < 0) {
      start = pivot + 1;
    } else if (order === 0) {
      found = true;
      end = pivot;
    } else {
      end = pivot;
    }
  }
  return {
    found,
    index: start
  };
}
function keepIf(array, keep) {
  var i = array.length;
  while (i > 0) {
    --i;
    if (!keep(array[i])) {
      array.splice(i, 1);
    }
  }
}

// node_modules/@amcharts/amcharts5/.internal/core/util/Object.js
var Object_exports = {};
__export(Object_exports, {
  copy: () => copy2,
  each: () => each2,
  eachContinue: () => eachContinue2,
  eachOrdered: () => eachOrdered,
  hasKey: () => hasKey,
  keys: () => keys,
  keysOrdered: () => keysOrdered,
  softCopyProperties: () => softCopyProperties
});
function keys(object) {
  return Object.keys(object);
}
function keysOrdered(object, order) {
  return keys(object).sort(order);
}
function copy2(object) {
  return Object.assign({}, object);
}
function each2(object, f) {
  keys(object).forEach(function(key) {
    f(key, object[key]);
  });
}
function eachContinue2(object, fn) {
  for (var key in object) {
    if (hasKey(object, key)) {
      if (!fn(key, object[key])) {
        break;
      }
    }
  }
}
function eachOrdered(object, fn, ord) {
  each(keysOrdered(object, ord), function(key) {
    fn(key, object[key]);
  });
}
function hasKey(object, key) {
  return {}.hasOwnProperty.call(object, key);
}
function softCopyProperties(source, target) {
  each2(source, function(key, value) {
    if (value != null && target[key] == null) {
      target[key] = value;
    }
  });
  return target;
}

// node_modules/@amcharts/amcharts5/node_modules/tslib/tslib.es6.js
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}

// node_modules/@amcharts/amcharts5/.internal/core/util/Disposer.js
var DisposerClass = function() {
  function DisposerClass2() {
    Object.defineProperty(this, "_disposed", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this._disposed = false;
  }
  Object.defineProperty(DisposerClass2.prototype, "isDisposed", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this._disposed;
    }
  });
  Object.defineProperty(DisposerClass2.prototype, "dispose", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (!this._disposed) {
        this._disposed = true;
        this._dispose();
      }
    }
  });
  return DisposerClass2;
}();
var Disposer = function() {
  function Disposer2(dispose) {
    Object.defineProperty(this, "_disposed", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_dispose", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this._disposed = false;
    this._dispose = dispose;
  }
  Object.defineProperty(Disposer2.prototype, "isDisposed", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this._disposed;
    }
  });
  Object.defineProperty(Disposer2.prototype, "dispose", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (!this._disposed) {
        this._disposed = true;
        this._dispose();
      }
    }
  });
  return Disposer2;
}();
var ArrayDisposer = function(_super) {
  __extends(ArrayDisposer2, _super);
  function ArrayDisposer2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    Object.defineProperty(_this, "_disposers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    return _this;
  }
  Object.defineProperty(ArrayDisposer2.prototype, "_dispose", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      each(this._disposers, function(x) {
        x.dispose();
      });
    }
  });
  return ArrayDisposer2;
}(DisposerClass);
var MultiDisposer = function(_super) {
  __extends(MultiDisposer2, _super);
  function MultiDisposer2(disposers) {
    var _this = _super.call(this) || this;
    Object.defineProperty(_this, "_disposers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    _this._disposers = disposers;
    return _this;
  }
  Object.defineProperty(MultiDisposer2.prototype, "_dispose", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      each(this._disposers, function(x) {
        x.dispose();
      });
    }
  });
  return MultiDisposer2;
}(DisposerClass);
var MutableValueDisposer = function(_super) {
  __extends(MutableValueDisposer2, _super);
  function MutableValueDisposer2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    Object.defineProperty(_this, "_disposer", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_value", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    return _this;
  }
  Object.defineProperty(MutableValueDisposer2.prototype, "_dispose", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (this._disposer != null) {
        this._disposer.dispose();
        this._disposer = void 0;
      }
    }
  });
  Object.defineProperty(MutableValueDisposer2.prototype, "get", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this._value;
    }
  });
  Object.defineProperty(MutableValueDisposer2.prototype, "set", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(value, disposer) {
      if (this._disposer != null) {
        this._disposer.dispose();
      }
      this._disposer = disposer;
      this._value = value;
    }
  });
  Object.defineProperty(MutableValueDisposer2.prototype, "reset", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this.set(void 0, void 0);
    }
  });
  return MutableValueDisposer2;
}(DisposerClass);
var CounterDisposer = function(_super) {
  __extends(CounterDisposer2, _super);
  function CounterDisposer2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    Object.defineProperty(_this, "_counter", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    return _this;
  }
  Object.defineProperty(CounterDisposer2.prototype, "increment", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      ++this._counter;
      return new Disposer(function() {
        --_this._counter;
        if (_this._counter === 0) {
          _this.dispose();
        }
      });
    }
  });
  return CounterDisposer2;
}(Disposer);

// node_modules/@amcharts/amcharts5/.internal/core/util/EventDispatcher.js
var EventDispatcher = function() {
  function EventDispatcher2() {
    Object.defineProperty(this, "_listeners", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_killed", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_disabled", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_iterating", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_enabled", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_disposed", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this._listeners = [];
    this._killed = [];
    this._disabled = {};
    this._iterating = 0;
    this._enabled = true;
    this._disposed = false;
  }
  Object.defineProperty(EventDispatcher2.prototype, "isDisposed", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this._disposed;
    }
  });
  Object.defineProperty(EventDispatcher2.prototype, "dispose", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (!this._disposed) {
        this._disposed = true;
        var a = this._listeners;
        this._iterating = 1;
        this._listeners = null;
        this._disabled = null;
        try {
          each(a, function(x) {
            x.disposer.dispose();
          });
        } finally {
          this._killed = null;
          this._iterating = null;
        }
      }
    }
  });
  Object.defineProperty(EventDispatcher2.prototype, "hasListeners", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this._listeners.length !== 0;
    }
  });
  Object.defineProperty(EventDispatcher2.prototype, "hasListenersByType", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(type) {
      return any(this._listeners, function(x) {
        return (x.type === null || x.type === type) && !x.killed;
      });
    }
  });
  Object.defineProperty(EventDispatcher2.prototype, "enable", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._enabled = true;
    }
  });
  Object.defineProperty(EventDispatcher2.prototype, "disable", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._enabled = false;
    }
  });
  Object.defineProperty(EventDispatcher2.prototype, "enableType", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(type) {
      delete this._disabled[type];
    }
  });
  Object.defineProperty(EventDispatcher2.prototype, "disableType", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(type, amount) {
      if (amount === void 0) {
        amount = Infinity;
      }
      this._disabled[type] = amount;
    }
  });
  Object.defineProperty(EventDispatcher2.prototype, "_removeListener", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(listener) {
      if (this._iterating === 0) {
        var index = this._listeners.indexOf(listener);
        if (index === -1) {
          throw new Error("Invalid state: could not remove listener");
        }
        this._listeners.splice(index, 1);
      } else {
        this._killed.push(listener);
      }
    }
  });
  Object.defineProperty(EventDispatcher2.prototype, "_removeExistingListener", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(once, type, callback, context) {
      if (this._disposed) {
        throw new Error("EventDispatcher is disposed");
      }
      this._eachListener(function(info) {
        if (info.once === once && info.type === type && (callback === void 0 || info.callback === callback) && info.context === context) {
          info.disposer.dispose();
        }
      });
    }
  });
  Object.defineProperty(EventDispatcher2.prototype, "isEnabled", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(type) {
      if (this._disposed) {
        throw new Error("EventDispatcher is disposed");
      }
      return this._enabled && this._listeners.length > 0 && this.hasListenersByType(type) && this._disabled[type] === void 0;
    }
  });
  Object.defineProperty(EventDispatcher2.prototype, "removeType", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(type) {
      if (this._disposed) {
        throw new Error("EventDispatcher is disposed");
      }
      this._eachListener(function(info) {
        if (info.type === type) {
          info.disposer.dispose();
        }
      });
    }
  });
  Object.defineProperty(EventDispatcher2.prototype, "has", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(type, callback, context) {
      var index = findIndex(this._listeners, function(info) {
        return info.once !== true && info.type === type && (callback === void 0 || info.callback === callback) && info.context === context;
      });
      return index !== -1;
    }
  });
  Object.defineProperty(EventDispatcher2.prototype, "_shouldDispatch", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(type) {
      if (this._disposed) {
        throw new Error("EventDispatcher is disposed");
      }
      var count = this._disabled[type];
      if (!isNumber(count)) {
        return this._enabled;
      } else {
        if (count <= 1) {
          delete this._disabled[type];
        } else {
          --this._disabled[type];
        }
        return false;
      }
    }
  });
  Object.defineProperty(EventDispatcher2.prototype, "_eachListener", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(fn) {
      var _this = this;
      ++this._iterating;
      try {
        each(this._listeners, fn);
      } finally {
        --this._iterating;
        if (this._iterating === 0 && this._killed.length !== 0) {
          each(this._killed, function(killed) {
            _this._removeListener(killed);
          });
          this._killed.length = 0;
        }
      }
    }
  });
  Object.defineProperty(EventDispatcher2.prototype, "dispatch", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(type, event) {
      if (this._shouldDispatch(type)) {
        this._eachListener(function(listener) {
          if (!listener.killed && (listener.type === null || listener.type === type)) {
            listener.dispatch(type, event);
          }
        });
      }
    }
  });
  Object.defineProperty(EventDispatcher2.prototype, "_on", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(once, type, callback, context, shouldClone, dispatch) {
      var _this = this;
      if (this._disposed) {
        throw new Error("EventDispatcher is disposed");
      }
      this._removeExistingListener(once, type, callback, context);
      var info = {
        type,
        callback,
        context,
        shouldClone,
        dispatch,
        killed: false,
        once,
        disposer: new Disposer(function() {
          info.killed = true;
          _this._removeListener(info);
        })
      };
      this._listeners.push(info);
      return info;
    }
  });
  Object.defineProperty(EventDispatcher2.prototype, "onAll", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(callback, context, shouldClone) {
      if (shouldClone === void 0) {
        shouldClone = true;
      }
      return this._on(false, null, callback, context, shouldClone, function(_type, event) {
        return callback.call(context, event);
      }).disposer;
    }
  });
  Object.defineProperty(EventDispatcher2.prototype, "on", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(type, callback, context, shouldClone) {
      if (shouldClone === void 0) {
        shouldClone = true;
      }
      return this._on(false, type, callback, context, shouldClone, function(_type, event) {
        return callback.call(context, event);
      }).disposer;
    }
  });
  Object.defineProperty(EventDispatcher2.prototype, "once", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(type, callback, context, shouldClone) {
      if (shouldClone === void 0) {
        shouldClone = true;
      }
      var x = this._on(true, type, callback, context, shouldClone, function(_type, event) {
        x.disposer.dispose();
        callback.call(context, event);
      });
      return x.disposer;
    }
  });
  Object.defineProperty(EventDispatcher2.prototype, "off", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(type, callback, context) {
      this._removeExistingListener(false, type, callback, context);
    }
  });
  Object.defineProperty(EventDispatcher2.prototype, "copyFrom", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(source) {
      var _this = this;
      if (this._disposed) {
        throw new Error("EventDispatcher is disposed");
      }
      if (source === this) {
        throw new Error("Cannot copyFrom the same TargetedEventDispatcher");
      }
      var disposers = [];
      each(source._listeners, function(x) {
        if (!x.killed && x.shouldClone) {
          if (x.type === null) {
            disposers.push(_this.onAll(x.callback, x.context));
          } else if (x.once) {
            disposers.push(_this.once(x.type, x.callback, x.context));
          } else {
            disposers.push(_this.on(x.type, x.callback, x.context));
          }
        }
      });
      return new MultiDisposer(disposers);
    }
  });
  return EventDispatcher2;
}();
var TargetedEventDispatcher = function(_super) {
  __extends(TargetedEventDispatcher2, _super);
  function TargetedEventDispatcher2(target) {
    var _this = _super.call(this) || this;
    Object.defineProperty(_this, "target", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    _this.target = target;
    return _this;
  }
  Object.defineProperty(TargetedEventDispatcher2.prototype, "copyFrom", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(source) {
      var _this = this;
      if (this._disposed) {
        throw new Error("EventDispatcher is disposed");
      }
      if (source === this) {
        throw new Error("Cannot copyFrom the same TargetedEventDispatcher");
      }
      var disposers = [];
      each(source._listeners, function(x) {
        if (x.context === source.target) {
          return;
        }
        if (!x.killed && x.shouldClone) {
          if (x.type === null) {
            disposers.push(_this.onAll(x.callback, x.context));
          } else if (x.once) {
            disposers.push(_this.once(x.type, x.callback, x.context));
          } else {
            disposers.push(_this.on(x.type, x.callback, x.context));
          }
        }
      });
      return new MultiDisposer(disposers);
    }
  });
  return TargetedEventDispatcher2;
}(EventDispatcher);

// node_modules/@amcharts/amcharts5/.internal/core/util/Template.js
var TemplateState = function() {
  function TemplateState2(name, template, settings) {
    Object.defineProperty(this, "_settings", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_template", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this._name = name;
    this._template = template;
    this._settings = settings;
  }
  Object.defineProperty(TemplateState2.prototype, "get", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, fallback) {
      var value = this._settings[key];
      if (value !== void 0) {
        return value;
      } else {
        return fallback;
      }
    }
  });
  Object.defineProperty(TemplateState2.prototype, "set", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, value) {
      this._settings[key] = value;
      this._template._stateChanged(this._name);
    }
  });
  Object.defineProperty(TemplateState2.prototype, "remove", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key) {
      delete this._settings[key];
      this._template._stateChanged(this._name);
    }
  });
  Object.defineProperty(TemplateState2.prototype, "setAll", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(settings) {
      var _this = this;
      keys(settings).forEach(function(key) {
        _this._settings[key] = settings[key];
      });
      this._template._stateChanged(this._name);
    }
  });
  Object.defineProperty(TemplateState2.prototype, "_apply", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(other, seen) {
      each2(this._settings, function(key, value) {
        if (!seen[key] && !other._userSettings[key]) {
          seen[key] = true;
          other.setRaw(key, value);
        }
      });
    }
  });
  return TemplateState2;
}();
var TemplateStates = function() {
  function TemplateStates2(template) {
    Object.defineProperty(this, "_template", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_states", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    this._template = template;
  }
  Object.defineProperty(TemplateStates2.prototype, "lookup", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(name) {
      return this._states[name];
    }
  });
  Object.defineProperty(TemplateStates2.prototype, "create", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(name, settings) {
      var state = this._states[name];
      if (state) {
        state.setAll(settings);
        return state;
      } else {
        var state_1 = new TemplateState(name, this._template, settings);
        this._states[name] = state_1;
        this._template._stateChanged(name);
        return state_1;
      }
    }
  });
  Object.defineProperty(TemplateStates2.prototype, "remove", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(name) {
      delete this._states[name];
      this._template._stateChanged(name);
    }
  });
  Object.defineProperty(TemplateStates2.prototype, "_apply", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(entity, state) {
      each2(this._states, function(key, value) {
        var seen = state.states[key];
        if (seen == null) {
          seen = state.states[key] = {};
        }
        var other = entity.states.create(key, {});
        value._apply(other, seen);
      });
    }
  });
  return TemplateStates2;
}();
var TemplateAdapters = function() {
  function TemplateAdapters2() {
    Object.defineProperty(this, "_callbacks", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
  }
  Object.defineProperty(TemplateAdapters2.prototype, "add", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, callback) {
      var _this = this;
      var callbacks = this._callbacks[key];
      if (callbacks === void 0) {
        callbacks = this._callbacks[key] = [];
      }
      callbacks.push(callback);
      return new Disposer(function() {
        removeFirst(callbacks, callback);
        if (callbacks.length === 0) {
          delete _this._callbacks[key];
        }
      });
    }
  });
  Object.defineProperty(TemplateAdapters2.prototype, "remove", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key) {
      var callbacks = this._callbacks[key];
      if (callbacks !== void 0) {
        delete this._callbacks[key];
      }
    }
  });
  Object.defineProperty(TemplateAdapters2.prototype, "_apply", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(entity) {
      var disposers = [];
      each2(this._callbacks, function(key, callbacks) {
        each(callbacks, function(callback) {
          disposers.push(entity.adapters.add(key, callback));
        });
      });
      return new MultiDisposer(disposers);
    }
  });
  return TemplateAdapters2;
}();
var Template = function() {
  function Template2(settings, isReal) {
    Object.defineProperty(this, "_settings", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_privateSettings", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    Object.defineProperty(this, "_settingEvents", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    Object.defineProperty(this, "_privateSettingEvents", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    Object.defineProperty(this, "_entities", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    Object.defineProperty(this, "states", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new TemplateStates(this)
    });
    Object.defineProperty(this, "adapters", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new TemplateAdapters()
    });
    Object.defineProperty(this, "events", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new EventDispatcher()
    });
    Object.defineProperty(this, "setup", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    if (!isReal) {
      throw new Error("You cannot use `new Class()`, instead use `Class.new()`");
    }
    this._settings = settings;
  }
  Object.defineProperty(Template2, "new", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(settings) {
      return new Template2(settings, true);
    }
  });
  Object.defineProperty(Template2.prototype, "get", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, fallback) {
      var value = this._settings[key];
      if (value !== void 0) {
        return value;
      } else {
        return fallback;
      }
    }
  });
  Object.defineProperty(Template2.prototype, "setRaw", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, value) {
      this._settings[key] = value;
    }
  });
  Object.defineProperty(Template2.prototype, "set", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, value) {
      var _this = this;
      if (this._settings[key] !== value) {
        this.setRaw(key, value);
        this._entities.forEach(function(entity) {
          entity._setTemplateProperty(_this, key, value);
        });
      }
    }
  });
  Object.defineProperty(Template2.prototype, "remove", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key) {
      if (key in this._settings) {
        delete this._settings[key];
        this._entities.forEach(function(entity) {
          entity._removeTemplateProperty(key);
        });
      }
    }
  });
  Object.defineProperty(Template2.prototype, "removeAll", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      each2(this._settings, function(key, _value) {
        _this.remove(key);
      });
    }
  });
  Object.defineProperty(Template2.prototype, "getPrivate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, fallback) {
      var value = this._privateSettings[key];
      if (value !== void 0) {
        return value;
      } else {
        return fallback;
      }
    }
  });
  Object.defineProperty(Template2.prototype, "setPrivateRaw", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, value) {
      this._privateSettings[key] = value;
      return value;
    }
  });
  Object.defineProperty(Template2.prototype, "setPrivate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, value) {
      var _this = this;
      if (this._privateSettings[key] !== value) {
        this.setPrivateRaw(key, value);
        this._entities.forEach(function(entity) {
          entity._setTemplatePrivateProperty(_this, key, value);
        });
      }
      return value;
    }
  });
  Object.defineProperty(Template2.prototype, "removePrivate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key) {
      if (key in this._privateSettings) {
        delete this._privateSettings[key];
        this._entities.forEach(function(entity) {
          entity._removeTemplatePrivateProperty(key);
        });
      }
    }
  });
  Object.defineProperty(Template2.prototype, "setAll", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(value) {
      var _this = this;
      each2(value, function(key, value2) {
        _this.set(key, value2);
      });
    }
  });
  Object.defineProperty(Template2.prototype, "on", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, callback) {
      var _this = this;
      var events = this._settingEvents[key];
      if (events === void 0) {
        events = this._settingEvents[key] = [];
      }
      events.push(callback);
      return new Disposer(function() {
        removeFirst(events, callback);
        if (events.length === 0) {
          delete _this._settingEvents[key];
        }
      });
    }
  });
  Object.defineProperty(Template2.prototype, "onPrivate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, callback) {
      var _this = this;
      var events = this._privateSettingEvents[key];
      if (events === void 0) {
        events = this._privateSettingEvents[key] = [];
      }
      events.push(callback);
      return new Disposer(function() {
        removeFirst(events, callback);
        if (events.length === 0) {
          delete _this._privateSettingEvents[key];
        }
      });
    }
  });
  Object.defineProperty(Template2.prototype, "_apply", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(entity, state) {
      var disposers = [];
      each2(this._settingEvents, function(key, events) {
        each(events, function(event) {
          disposers.push(entity.on(key, event));
        });
      });
      each2(this._privateSettingEvents, function(key, events) {
        each(events, function(event) {
          disposers.push(entity.onPrivate(key, event));
        });
      });
      this.states._apply(entity, state);
      disposers.push(this.adapters._apply(entity));
      disposers.push(entity.events.copyFrom(this.events));
      return new MultiDisposer(disposers);
    }
  });
  Object.defineProperty(Template2.prototype, "_setObjectTemplate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(entity) {
      this._entities.push(entity);
    }
  });
  Object.defineProperty(Template2.prototype, "_removeObjectTemplate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(entity) {
      remove(this._entities, entity);
    }
  });
  Object.defineProperty(Template2.prototype, "_stateChanged", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(name) {
      this._entities.forEach(function(entity) {
        entity._applyStateByKey(name);
      });
    }
  });
  return Template2;
}();

// node_modules/@amcharts/amcharts5/.internal/core/util/Order.js
function compare(left, right) {
  if (left === right) {
    return 0;
  } else if (left < right) {
    return -1;
  } else {
    return 1;
  }
}
function compareArray(left, right, f) {
  var leftLength = left.length;
  var rightLength = right.length;
  var length = Math.min(leftLength, rightLength);
  for (var i = 0; i < length; ++i) {
    var order = f(left[i], right[i]);
    if (order !== 0) {
      return order;
    }
  }
  return compare(leftLength, rightLength);
}

// node_modules/@amcharts/amcharts5/.internal/core/Theme.js
var Theme = function() {
  function Theme2(root, isReal) {
    Object.defineProperty(this, "_root", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_rules", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    this._root = root;
    if (!isReal) {
      throw new Error("You cannot use `new Class()`, instead use `Class.new()`");
    }
  }
  Object.defineProperty(Theme2, "new", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(root) {
      var x = new this(root, true);
      x.setupDefaultRules();
      return x;
    }
  });
  Object.defineProperty(Theme2.prototype, "setupDefaultRules", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
    }
  });
  Object.defineProperty(Theme2.prototype, "_lookupRules", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(themeClass) {
      return this._rules[themeClass];
    }
  });
  Object.defineProperty(Theme2.prototype, "ruleRaw", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(themeClass, themeTags) {
      if (themeTags === void 0) {
        themeTags = [];
      }
      var rules = this._rules[themeClass];
      if (!rules) {
        rules = this._rules[themeClass] = [];
      }
      themeTags.sort(compare);
      var _a = getSortedIndex(rules, function(x) {
        var order = compare(x.tags.length, themeTags.length);
        if (order === 0) {
          return compareArray(x.tags, themeTags, compare);
        } else {
          return order;
        }
      }), index = _a.index, found = _a.found;
      if (found) {
        return rules[index].template;
      } else {
        var template = Template.new({});
        rules.splice(index, 0, {
          tags: themeTags,
          template
        });
        return template;
      }
    }
  });
  Object.defineProperty(Theme2.prototype, "rule", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(themeClass, themeTags) {
      if (themeTags === void 0) {
        themeTags = [];
      }
      return this.ruleRaw(themeClass, themeTags);
    }
  });
  return Theme2;
}();

export {
  __extends,
  __assign,
  __awaiter,
  __generator,
  __read,
  __spreadArray,
  isNaN,
  toNumber,
  toDate,
  numberToString,
  isDate,
  isString,
  isNumber,
  isObject,
  isArray,
  PLACEHOLDER,
  PLACEHOLDER2,
  Type_exports,
  indexOf,
  map,
  each,
  eachReverse,
  eachContinue,
  pushAll,
  remove,
  removeFirst,
  pushOne,
  copy,
  insertIndex,
  removeIndex,
  find,
  findReverse,
  getFirstSortedIndex,
  keepIf,
  Array_exports,
  DisposerClass,
  Disposer,
  ArrayDisposer,
  MultiDisposer,
  CounterDisposer,
  EventDispatcher,
  keys,
  keysOrdered,
  copy2,
  each2,
  eachContinue2,
  softCopyProperties,
  Object_exports,
  compare,
  compareArray,
  Template,
  Theme
};
//# sourceMappingURL=chunk-7QRRFINT.js.map
