import {
  CounterDisposer,
  Disposer,
  DisposerClass,
  EventDispatcher,
  MultiDisposer,
  PLACEHOLDER,
  Template,
  Theme,
  __assign,
  __awaiter,
  __extends,
  __generator,
  __read,
  __spreadArray,
  compare,
  compareArray,
  each,
  each2,
  eachReverse,
  find,
  findReverse,
  getFirstSortedIndex,
  indexOf,
  insertIndex,
  isDate,
  isNaN,
  isNumber,
  isObject,
  isString,
  keys,
  keysOrdered,
  map,
  pushOne,
  remove,
  removeFirst,
  removeIndex,
  toDate,
  toNumber
} from "./chunk-7QRRFINT.js";
import {
  __export
} from "./chunk-QOVRSCHT.js";

// node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js
var Percent = function() {
  function Percent2(percent2) {
    Object.defineProperty(this, "_value", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this._value = percent2;
  }
  Object.defineProperty(Percent2.prototype, "value", {
    get: function() {
      return this._value / 100;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Percent2.prototype, "percent", {
    get: function() {
      return this._value;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Percent2.prototype, "toString", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return "" + this._value + "%";
    }
  });
  Object.defineProperty(Percent2.prototype, "interpolate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(min, max) {
      return min + this.value * (max - min);
    }
  });
  Object.defineProperty(Percent2, "normalize", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(percent2, min, max) {
      if (percent2 instanceof Percent2) {
        return percent2;
      } else {
        if (min === max) {
          return new Percent2(0);
        } else {
          return new Percent2(Math.min(Math.max((percent2 - min) * (1 / (max - min)), 0), 1) * 100);
        }
      }
    }
  });
  return Percent2;
}();
function percent(value) {
  return new Percent(value);
}
var p0 = percent(0);
var p100 = percent(100);
var p50 = percent(50);

// node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js
var Utils_exports = {};
__export(Utils_exports, {
  StyleRule: () => StyleRule,
  StyleSheet: () => StyleSheet,
  addClass: () => addClass,
  addEventListener: () => addEventListener,
  alternativeColor: () => alternativeColor,
  blur: () => blur,
  brighten: () => brighten,
  capitalizeFirst: () => capitalizeFirst,
  cleanFormat: () => cleanFormat,
  contains: () => contains,
  decimalPlaces: () => decimalPlaces,
  escapeForRgex: () => escapeForRgex,
  focus: () => focus,
  get12Hours: () => get12Hours,
  getBrightnessStep: () => getBrightnessStep,
  getDayFromWeek: () => getDayFromWeek,
  getFormat: () => getFormat,
  getLightnessStep: () => getLightnessStep,
  getMonthWeek: () => getMonthWeek,
  getPointerId: () => getPointerId,
  getRendererEvent: () => getRendererEvent,
  getSafeResolution: () => getSafeResolution,
  getShadowRoot: () => getShadowRoot,
  getStyle: () => getStyle,
  getTimeZone: () => getTimeZone,
  getWeek: () => getWeek,
  getYearDay: () => getYearDay,
  hslToRgb: () => hslToRgb,
  iOS: () => iOS,
  isLight: () => isLight,
  isLocalEvent: () => isLocalEvent,
  isTouchEvent: () => isTouchEvent,
  lighten: () => lighten,
  mergeTags: () => mergeTags,
  padString: () => padString,
  plainText: () => plainText,
  ready: () => ready,
  relativeToValue: () => relativeToValue,
  removeClass: () => removeClass,
  removeElement: () => removeElement,
  rgbToHsl: () => rgbToHsl,
  sameBounds: () => sameBounds,
  saturate: () => saturate,
  setInteractive: () => setInteractive,
  setStyle: () => setStyle,
  stripTags: () => stripTags,
  supports: () => supports,
  trim: () => trim,
  trimLeft: () => trimLeft,
  trimRight: () => trimRight
});
function ready(f) {
  if (document.readyState !== "loading") {
    f();
  } else {
    var listener_1 = function() {
      if (document.readyState !== "loading") {
        document.removeEventListener("readystatechange", listener_1);
        f();
      }
    };
    document.addEventListener("readystatechange", listener_1);
  }
}
function removeElement(el) {
  if (el.parentNode) {
    el.parentNode.removeChild(el);
  }
}
function addEventListener(dom, type, listener, options) {
  dom.addEventListener(type, listener, options || false);
  return new Disposer(function() {
    dom.removeEventListener(type, listener, options || false);
  });
}
function supports(cap) {
  switch (cap) {
    case "touchevents":
      return window.hasOwnProperty("TouchEvent");
    case "pointerevents":
      return window.hasOwnProperty("PointerEvent");
    case "mouseevents":
      return window.hasOwnProperty("MouseEvent");
    case "wheelevents":
      return window.hasOwnProperty("WheelEvent");
    case "keyboardevents":
      return window.hasOwnProperty("KeyboardEvent");
  }
  return false;
}
function getPointerId(event) {
  var id = event.pointerId || 0;
  return id;
}
function blur() {
  if (document.activeElement && document.activeElement != document.body) {
    if (document.activeElement.blur) {
      document.activeElement.blur();
    } else {
      var input = document.createElement("button");
      input.style.position = "fixed";
      input.style.top = "0px";
      input.style.left = "-10000px";
      document.body.appendChild(input);
      input.focus();
      input.blur();
      document.body.removeChild(input);
    }
  }
}
function focus(el) {
  if (el) {
    el.focus();
  }
}
function getRendererEvent(key) {
  if (supports("pointerevents")) {
    return key;
  } else if (supports("touchevents")) {
    switch (key) {
      case "pointerover":
        return "touchstart";
      case "pointerout":
        return "touchend";
      case "pointerdown":
        return "touchstart";
      case "pointermove":
        return "touchmove";
      case "pointerup":
        return "touchend";
      case "click":
        return "click";
      case "dblclick":
        return "dblclick";
    }
  } else if (supports("mouseevents")) {
    switch (key) {
      case "pointerover":
        return "mouseover";
      case "pointerout":
        return "mouseout";
      case "pointerdown":
        return "mousedown";
      case "pointermove":
        return "mousemove";
      case "pointerup":
        return "mouseup";
      case "click":
        return "click";
      case "dblclick":
        return "dblclick";
    }
  }
  return key;
}
function isTouchEvent(ev) {
  if (typeof Touch !== "undefined" && ev instanceof Touch) {
    return true;
  } else if (typeof PointerEvent !== "undefined" && ev instanceof PointerEvent && ev.pointerType != null) {
    switch (ev.pointerType) {
      case "touch":
      case "pen":
      case 2:
        return true;
      case "mouse":
      case 4:
        return false;
      default:
        return !(ev instanceof MouseEvent);
    }
  } else if (ev.type != null) {
    if (ev.type.match(/^mouse/)) {
      return false;
    }
  }
  return true;
}
function setStyle(dom, property, value) {
  dom.style[property] = value;
}
function getStyle(dom, property) {
  return dom.style[property];
}
function contains(a, b) {
  var cursor = b;
  while (true) {
    if (a === cursor) {
      return true;
    } else if (cursor.parentNode === null) {
      if (cursor.host == null) {
        return false;
      } else {
        cursor = cursor.host;
      }
    } else {
      cursor = cursor.parentNode;
    }
  }
}
function isLocalEvent(event, target) {
  return event.target && contains(target.root.dom, event.target);
}
function setInteractive(target, interactive) {
  if (interactive) {
    target.style.pointerEvents = "";
  } else {
    target.style.pointerEvents = "none";
  }
}
function getShadowRoot(a) {
  var cursor = a;
  while (true) {
    if (cursor.parentNode === null) {
      if (cursor.host != null) {
        return cursor;
      } else {
        return null;
      }
    } else {
      cursor = cursor.parentNode;
    }
  }
}
var rootStylesheet;
function createStylesheet(element, text, nonce) {
  if (nonce === void 0) {
    nonce = "";
  }
  var e = document.createElement("style");
  e.type = "text/css";
  if (nonce != "") {
    e.setAttribute("nonce", nonce);
  }
  e.textContent = text;
  if (element === null) {
    document.head.appendChild(e);
  } else {
    element.appendChild(e);
  }
  return e;
}
function getStylesheet(element, nonce) {
  if (nonce === void 0) {
    nonce = "";
  }
  if (element === null) {
    if (rootStylesheet == null) {
      var e = document.createElement("style");
      e.type = "text/css";
      if (nonce != "") {
        e.setAttribute("nonce", nonce);
      }
      document.head.appendChild(e);
      rootStylesheet = e.sheet;
    }
    return rootStylesheet;
  } else {
    var e = document.createElement("style");
    e.type = "text/css";
    if (nonce != "") {
      e.setAttribute("nonce", nonce);
    }
    element.appendChild(e);
    return e.sheet;
  }
}
function appendStylesheet(root, selector) {
  var index = root.cssRules.length;
  root.insertRule(selector + "{}", index);
  return root.cssRules[index];
}
var StyleRule = function(_super) {
  __extends(StyleRule2, _super);
  function StyleRule2(element, selector, styles, nonce) {
    if (nonce === void 0) {
      nonce = "";
    }
    var _this = _super.call(this) || this;
    Object.defineProperty(_this, "_root", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_rule", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    _this._root = getStylesheet(element, nonce);
    _this._rule = appendStylesheet(_this._root, selector);
    each2(styles, function(key, value) {
      _this.setStyle(key, value);
    });
    return _this;
  }
  Object.defineProperty(StyleRule2.prototype, "selector", {
    get: function() {
      return this._rule.selectorText;
    },
    set: function(selector) {
      this._rule.selectorText = selector;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(StyleRule2.prototype, "_dispose", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var index = indexOf(this._root.cssRules, this._rule);
      if (index === -1) {
        throw new Error("Could not dispose StyleRule");
      } else {
        this._root.deleteRule(index);
      }
    }
  });
  Object.defineProperty(StyleRule2.prototype, "_setVendorPrefixName", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(name, value) {
      var style = this._rule.style;
      style.setProperty("-webkit-" + name, value, "");
      style.setProperty("-moz-" + name, value, "");
      style.setProperty("-ms-" + name, value, "");
      style.setProperty("-o-" + name, value, "");
      style.setProperty(name, value, "");
    }
  });
  Object.defineProperty(StyleRule2.prototype, "setStyle", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(name, value) {
      if (name === "transition") {
        this._setVendorPrefixName(name, value);
      } else {
        this._rule.style.setProperty(name, value, "");
      }
    }
  });
  return StyleRule2;
}(DisposerClass);
var StyleSheet = function(_super) {
  __extends(StyleSheet2, _super);
  function StyleSheet2(element, text, nonce) {
    if (nonce === void 0) {
      nonce = "";
    }
    var _this = _super.call(this) || this;
    Object.defineProperty(_this, "_element", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    _this._element = createStylesheet(element, text, nonce);
    return _this;
  }
  Object.defineProperty(StyleSheet2.prototype, "_dispose", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (this._element.parentNode) {
        this._element.parentNode.removeChild(this._element);
      }
    }
  });
  return StyleSheet2;
}(DisposerClass);
function addClass(element, className) {
  if (!element) {
    return;
  }
  if (element.classList) {
    var classes = className.split(" ");
    each(classes, function(name) {
      element.classList.add(name);
    });
  } else {
    var currentClassName = element.getAttribute("class");
    if (currentClassName) {
      element.setAttribute("class", currentClassName.split(" ").filter(function(item) {
        return item !== className;
      }).join(" ") + " " + className);
    } else {
      element.setAttribute("class", className);
    }
  }
}
function removeClass(element, className) {
  if (!element) {
    return;
  }
  if (element.classList) {
    element.classList.remove(className);
  } else {
    var currentClassName = element.getAttribute("class");
    if (currentClassName) {
      element.setAttribute("class", currentClassName.split(" ").filter(function(item) {
        return item !== className;
      }).join(" "));
    }
  }
}
function iOS() {
  return /apple/i.test(navigator.vendor) && "ontouchend" in document;
}
function getSafeResolution() {
  return iOS() ? 1 : void 0;
}
function relativeToValue(percent2, full) {
  if (isNumber(percent2)) {
    return percent2;
  } else if (percent2 != null && isNumber(percent2.value) && isNumber(full)) {
    return full * percent2.value;
  } else {
    return 0;
  }
}
function decimalPlaces(number) {
  var match = ("" + number).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
  if (!match) {
    return 0;
  }
  return Math.max(0, (match[1] ? match[1].length : 0) - (match[2] ? +match[2] : 0));
}
function padString(value, len, char) {
  if (len === void 0) {
    len = 0;
  }
  if (char === void 0) {
    char = "0";
  }
  if (typeof value !== "string") {
    value = value.toString();
  }
  return len > value.length ? Array(len - value.length + 1).join(char) + value : value;
}
function trimLeft(text) {
  return text.replace(/^[\s]*/, "");
}
function trimRight(text) {
  return text.replace(/[\s]*$/, "");
}
function trim(text) {
  return trimLeft(trimRight(text));
}
function getFormat(format) {
  if (typeof format === "undefined") {
    return "string";
  }
  format = format.toLowerCase().replace(/^\[[^\]]*\]/, "");
  format = format.replace(/\[[^\]]+\]/, "");
  format = format.trim();
  var hints = format.match(/\/(date|number|duration)$/);
  if (hints) {
    return hints[1];
  }
  if (format === "number") {
    return "number";
  }
  if (format === "date") {
    return "date";
  }
  if (format === "duration") {
    return "duration";
  }
  if (format.match(/[#0]/)) {
    return "number";
  }
  if (format.match(/[ymwdhnsqaxkzgtei]/)) {
    return "date";
  }
  return "string";
}
function cleanFormat(format) {
  return format.replace(/\/(date|number|duration)$/i, "");
}
function stripTags(text) {
  return text ? text.replace(/<[^>]*>/g, "") : text;
}
function plainText(text) {
  return text ? stripTags(("" + text).replace(/[\n\r]+/g, ". ")) : text;
}
function escapeForRgex(value) {
  return value.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
}
function getYearDay(date, utc) {
  if (utc === void 0) {
    utc = false;
  }
  utc;
  var start = new Date(date.getFullYear(), 0, 0);
  var diff = date.getTime() - start.getTime() + (start.getTimezoneOffset() - date.getTimezoneOffset()) * 60 * 1e3;
  var oneDay = 1e3 * 60 * 60 * 24;
  return Math.floor(diff / oneDay);
}
function getWeek(date, _utc) {
  if (_utc === void 0) {
    _utc = false;
  }
  var d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
  var day = d.getUTCDay() || 7;
  d.setUTCDate(d.getUTCDate() + 4 - day);
  var firstDay = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
  return Math.ceil(((d.getTime() - firstDay.getTime()) / 864e5 + 1) / 7);
}
function getMonthWeek(date, utc) {
  if (utc === void 0) {
    utc = false;
  }
  var firstWeek = getWeek(new Date(date.getFullYear(), date.getMonth(), 1), utc);
  var currentWeek = getWeek(date, utc);
  if (currentWeek == 1) {
    currentWeek = 53;
  }
  return currentWeek - firstWeek + 1;
}
function getDayFromWeek(week, year, weekday, utc) {
  if (weekday === void 0) {
    weekday = 1;
  }
  if (utc === void 0) {
    utc = false;
  }
  var date = new Date(year, 0, 4, 0, 0, 0, 0);
  if (utc) {
    date.setUTCFullYear(year);
  }
  var day = week * 7 + weekday - ((date.getDay() || 7) + 3);
  return day;
}
function get12Hours(hours, base) {
  if (hours > 12) {
    hours -= 12;
  } else if (hours === 0) {
    hours = 12;
  }
  return base != null ? hours + (base - 1) : hours;
}
function getTimeZone(date, long, savings, utc) {
  if (long === void 0) {
    long = false;
  }
  if (savings === void 0) {
    savings = false;
  }
  if (utc === void 0) {
    utc = false;
  }
  if (utc) {
    return long ? "Coordinated Universal Time" : "UTC";
  }
  var wotz = date.toLocaleString("UTC");
  var wtz = date.toLocaleString("UTC", { timeZoneName: long ? "long" : "short" }).substr(wotz.length);
  if (savings === false) {
    wtz = wtz.replace(/ (standard|daylight|summer|winter) /i, " ");
  }
  return wtz;
}
function capitalizeFirst(text) {
  return text.charAt(0).toUpperCase() + text.slice(1);
}
function hslToRgb(color2) {
  var r, g, b;
  var h = color2.h;
  var s2 = color2.s;
  var l = color2.l;
  if (s2 == 0) {
    r = g = b = l;
  } else {
    var hue2rgb = function hue2rgb2(p2, q2, t) {
      if (t < 0) {
        t += 1;
      }
      if (t > 1) {
        t -= 1;
      }
      if (t < 1 / 6) {
        return p2 + (q2 - p2) * 6 * t;
      }
      if (t < 1 / 2) {
        return q2;
      }
      if (t < 2 / 3) {
        return p2 + (q2 - p2) * (2 / 3 - t) * 6;
      }
      return p2;
    };
    var q = l < 0.5 ? l * (1 + s2) : l + s2 - l * s2;
    var p = 2 * l - q;
    r = hue2rgb(p, q, h + 1 / 3);
    g = hue2rgb(p, q, h);
    b = hue2rgb(p, q, h - 1 / 3);
  }
  return {
    r: Math.round(r * 255),
    g: Math.round(g * 255),
    b: Math.round(b * 255)
  };
}
function rgbToHsl(color2) {
  var r = color2.r / 255;
  var g = color2.g / 255;
  var b = color2.b / 255;
  var max = Math.max(r, g, b);
  var min = Math.min(r, g, b);
  var h = 0;
  var s2 = 0;
  var l = (max + min) / 2;
  if (max === min) {
    h = s2 = 0;
  } else {
    var d = max - min;
    s2 = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    switch (max) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r) / d + 2;
        break;
      case b:
        h = (r - g) / d + 4;
        break;
    }
    h /= 6;
  }
  return {
    h,
    s: s2,
    l
  };
}
function lighten(rgb, percent2) {
  if (rgb) {
    return {
      r: Math.max(0, Math.min(255, rgb.r + getLightnessStep(rgb.r, percent2))),
      g: Math.max(0, Math.min(255, rgb.g + getLightnessStep(rgb.g, percent2))),
      b: Math.max(0, Math.min(255, rgb.b + getLightnessStep(rgb.b, percent2))),
      a: rgb.a
    };
  } else {
    return rgb;
  }
}
function getLightnessStep(value, percent2) {
  var base = percent2 > 0 ? 255 - value : value;
  return Math.round(base * percent2);
}
function brighten(rgb, percent2) {
  if (rgb) {
    var base = Math.min(Math.max(rgb.r, rgb.g, rgb.b), 230);
    var step = getLightnessStep(base, percent2);
    return {
      r: Math.max(0, Math.min(255, Math.round(rgb.r + step))),
      g: Math.max(0, Math.min(255, Math.round(rgb.g + step))),
      b: Math.max(0, Math.min(255, Math.round(rgb.b + step))),
      a: rgb.a
    };
  } else {
    return rgb;
  }
}
function getBrightnessStep(_value, percent2) {
  var base = 255;
  return Math.round(base * percent2);
}
function isLight(color2) {
  return (color2.r * 299 + color2.g * 587 + color2.b * 114) / 1e3 >= 128;
}
function saturate(rgb, saturation) {
  if (rgb === void 0 || saturation == 1) {
    return rgb;
  }
  var hsl = rgbToHsl(rgb);
  hsl.s = saturation;
  return hslToRgb(hsl);
}
function alternativeColor(color2, lightAlternative, darkAlternative) {
  if (lightAlternative === void 0) {
    lightAlternative = { r: 255, g: 255, b: 255 };
  }
  if (darkAlternative === void 0) {
    darkAlternative = { r: 255, g: 255, b: 255 };
  }
  var light = lightAlternative;
  var dark = darkAlternative;
  if (isLight(darkAlternative)) {
    light = darkAlternative;
    dark = lightAlternative;
  }
  return isLight(color2) ? dark : light;
}
function mergeTags(tags1, tags2) {
  if (!tags1) {
    tags1 = [];
  }
  return __spreadArray(__spreadArray([], __read(tags1), false), __read(tags2), false).filter(function(value, index, self) {
    return self.indexOf(value) === index;
  });
}
function sameBounds(a, b) {
  if (!b) {
    return false;
  }
  if (a.left != b.left) {
    return false;
  }
  if (a.right != b.right) {
    return false;
  }
  if (a.top != b.top) {
    return false;
  }
  if (a.bottom != b.bottom) {
    return false;
  }
  return true;
}

// node_modules/@amcharts/amcharts5/.internal/core/util/Animation.js
function waitForAnimations(animations) {
  return __awaiter(this, void 0, void 0, function() {
    var promises_1;
    return __generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          if (!(animations !== void 0))
            return [3, 2];
          promises_1 = [];
          each2(animations, function(_, animation) {
            promises_1.push(animation.waitForStop());
          });
          return [4, Promise.all(promises_1)];
        case 1:
          _a.sent();
          _a.label = 2;
        case 2:
          return [2];
      }
    });
  });
}
function range(diff, from, to) {
  return from + diff * (to - from);
}
function defaultInterpolate(diff, from, to) {
  if (diff >= 1) {
    return to;
  } else {
    return from;
  }
}
function percentInterpolate(diff, from, to) {
  return new Percent(range(diff, from.percent, to.percent));
}
function colorInterpolate(diff, from, to) {
  return Color.interpolate(diff, from, to);
}
function getInterpolate(from, to) {
  if (typeof from === "number" && typeof to === "number") {
    return range;
  }
  if (from instanceof Percent && to instanceof Percent) {
    return percentInterpolate;
  }
  if (from instanceof Color && to instanceof Color) {
    return colorInterpolate;
  }
  return defaultInterpolate;
}
var AnimationTime = function() {
  function AnimationTime2(entity, duration) {
    Object.defineProperty(this, "_entity", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_duration", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_playingDuration", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: null
    });
    Object.defineProperty(this, "_startingTime", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: null
    });
    Object.defineProperty(this, "_current", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(this, "_from", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(this, "_to", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(this, "events", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new EventDispatcher()
    });
    Object.defineProperty(this, "easing", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this._entity = entity;
    this._duration = duration;
  }
  Object.defineProperty(AnimationTime2.prototype, "_stopEvent", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var type = "stopped";
      if (this.events.isEnabled(type)) {
        this.events.dispatch(type, { type, target: this });
      }
    }
  });
  Object.defineProperty(AnimationTime2.prototype, "_runAnimation", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(currentTime) {
      if (this._playingDuration !== null) {
        if (this._startingTime === null) {
          this._startingTime = currentTime;
          return false;
        } else {
          var diff = (currentTime - this._startingTime) / this._playingDuration;
          if (diff >= 1) {
            this._playingDuration = null;
            this._startingTime = null;
            this._from = this._to;
            this._current = this._to;
            this._entity.markDirty();
            this._stopEvent();
            var type = "ended";
            if (this.events.isEnabled(type)) {
              this.events.dispatch(type, { type, target: this });
            }
            return true;
          } else {
            this._current = range(diff, this._from, this._to);
            this._entity.markDirty();
            var type = "progress";
            if (this.events.isEnabled(type)) {
              this.events.dispatch(type, { type, target: this, progress: diff });
            }
            return false;
          }
        }
      } else {
        return true;
      }
    }
  });
  Object.defineProperty(AnimationTime2.prototype, "_play", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._from = this._current;
      if (this._playingDuration === null) {
        this._entity._root._addAnimation(this);
        var type = "started";
        if (this.events.isEnabled(type)) {
          this.events.dispatch(type, { type, target: this });
        }
      } else {
        this._startingTime = null;
      }
      this._playingDuration = Math.abs(this._to - this._from) * this._duration;
    }
  });
  Object.defineProperty(AnimationTime2.prototype, "duration", {
    get: function() {
      return this._duration;
    },
    set: function(value) {
      if (this._duration !== value) {
        this._duration = value;
        if (value === 0) {
          this.jumpTo(this._to);
        } else if (this._current !== this._to) {
          this._play();
        }
      }
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(AnimationTime2.prototype, "current", {
    get: function() {
      if (this.easing) {
        return this.easing(this._current);
      } else {
        return this._current;
      }
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(AnimationTime2.prototype, "stop", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this.jumpTo(this._current);
    }
  });
  Object.defineProperty(AnimationTime2.prototype, "jumpTo", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(value) {
      if (this._current !== value) {
        this._entity.markDirty();
      }
      if (this._playingDuration !== null) {
        this._stopEvent();
      }
      this._playingDuration = null;
      this._startingTime = null;
      this._current = value;
      this._from = value;
      this._to = value;
    }
  });
  Object.defineProperty(AnimationTime2.prototype, "tweenTo", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(value) {
      if (this._current === value || this._duration === 0) {
        this.jumpTo(value);
      } else {
        if (this._to !== value) {
          this._to = value;
          this._play();
        }
      }
    }
  });
  return AnimationTime2;
}();

// node_modules/@amcharts/amcharts5/.internal/core/util/Color.js
function string2hex(string) {
  if (string[0] === "#") {
    string = string.substr(1);
  }
  if (string.length == 3) {
    string = string[0].repeat(2) + string[1].repeat(2) + string[2].repeat(2);
  }
  return parseInt(string, 16);
}
function rgba2hex(color2) {
  color2 = color2.replace(/[ ]/g, "");
  var matches = color2.match(/^rgb\(([0-9]*),([0-9]*),([0-9]*)\)/i);
  if (matches) {
    matches.push("1");
  } else {
    matches = color2.match(/^rgba\(([0-9]*),([0-9]*),([0-9]*),([.0-9]*)\)/i);
    if (!matches) {
      return 0;
    }
  }
  var hex = "";
  for (var i = 1; i <= 3; i++) {
    var val = parseInt(matches[i]).toString(16);
    if (val.length == 1) {
      val = "0" + val;
    }
    hex += val;
  }
  return string2hex(hex);
}
function color(input) {
  return Color.fromAny(input);
}
var Color = function() {
  function Color2(hex) {
    Object.defineProperty(this, "_hex", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this._hex = hex | 0;
  }
  Object.defineProperty(Color2.prototype, "hex", {
    get: function() {
      return this._hex;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Color2.prototype, "r", {
    get: function() {
      return this._hex >>> 16;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Color2.prototype, "g", {
    get: function() {
      return this._hex >> 8 & 255;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Color2.prototype, "b", {
    get: function() {
      return this._hex & 255;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Color2.prototype, "toCSS", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(alpha) {
      if (alpha === void 0) {
        alpha = 1;
      }
      return "rgba(" + this.r + ", " + this.g + ", " + this.b + ", " + alpha + ")";
    }
  });
  Object.defineProperty(Color2.prototype, "toCSSHex", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return "#" + padString(this.r.toString(16), 2) + padString(this.g.toString(16), 2) + padString(this.b.toString(16), 2);
    }
  });
  Object.defineProperty(Color2.prototype, "toHSL", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(alpha) {
      if (alpha === void 0) {
        alpha = 1;
      }
      return rgbToHsl({
        r: this.r,
        g: this.g,
        b: this.b,
        a: alpha
      });
    }
  });
  Object.defineProperty(Color2, "fromHSL", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(h, s2, l) {
      var rgb = hslToRgb({
        h,
        s: s2,
        l
      });
      return this.fromRGB(rgb.r, rgb.g, rgb.b);
    }
  });
  Object.defineProperty(Color2.prototype, "toString", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this.toCSSHex();
    }
  });
  Object.defineProperty(Color2, "fromHex", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(hex) {
      return new Color2(hex);
    }
  });
  Object.defineProperty(Color2, "fromRGB", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(r, g, b) {
      return new Color2((b | 0) + (g << 8) + (r << 16));
    }
  });
  Object.defineProperty(Color2, "fromString", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(s2) {
      return new Color2(string2hex(s2));
    }
  });
  Object.defineProperty(Color2, "fromCSS", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(s2) {
      return new Color2(rgba2hex(s2));
    }
  });
  Object.defineProperty(Color2, "fromAny", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(s2) {
      if (isString(s2)) {
        if (s2[0] == "#") {
          return Color2.fromString(s2);
        } else if (s2.substr(0, 3) == "rgb") {
          return Color2.fromCSS(s2);
        }
      } else if (isNumber(s2)) {
        return Color2.fromHex(s2);
      } else if (s2 instanceof Color2) {
        return Color2.fromHex(s2.hex);
      }
      throw new Error("Unknown color syntax: " + s2);
    }
  });
  Object.defineProperty(Color2, "alternative", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(color2, lightAlternative, darkAlternative) {
      var rgb = alternativeColor({ r: color2.r, g: color2.g, b: color2.b }, lightAlternative ? { r: lightAlternative.r, g: lightAlternative.g, b: lightAlternative.b } : void 0, darkAlternative ? { r: darkAlternative.r, g: darkAlternative.g, b: darkAlternative.b } : void 0);
      return this.fromRGB(rgb.r, rgb.g, rgb.b);
    }
  });
  Object.defineProperty(Color2, "interpolate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(diff, from, to, mode) {
      if (mode === void 0) {
        mode = "rgb";
      }
      if (mode == "hsl") {
        var fromHSL = from.toHSL();
        var toHSL = to.toHSL();
        return Color2.fromHSL(range(diff, fromHSL.h, toHSL.h), range(diff, fromHSL.s, toHSL.s), range(diff, fromHSL.l, toHSL.l));
      } else {
        return Color2.fromRGB(range(diff, from.r, to.r), range(diff, from.g, to.g), range(diff, from.b, to.b));
      }
    }
  });
  Object.defineProperty(Color2, "lighten", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(color2, percent2) {
      var rgb = lighten({ r: color2.r, g: color2.g, b: color2.b }, percent2);
      return Color2.fromRGB(rgb.r, rgb.g, rgb.b);
    }
  });
  Object.defineProperty(Color2, "brighten", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(color2, percent2) {
      var rgb = brighten({ r: color2.r, g: color2.g, b: color2.b }, percent2);
      return Color2.fromRGB(rgb.r, rgb.g, rgb.b);
    }
  });
  Object.defineProperty(Color2, "saturate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(color2, percent2) {
      var rgb = saturate({ r: color2.r, g: color2.g, b: color2.b }, percent2);
      return Color2.fromRGB(rgb.r, rgb.g, rgb.b);
    }
  });
  return Color2;
}();

// node_modules/@amcharts/amcharts5/.internal/core/util/Math.js
var Math_exports = {};
__export(Math_exports, {
  DEGREES: () => DEGREES,
  HALFPI: () => HALFPI,
  PI: () => PI,
  RADIANS: () => RADIANS,
  boundsOverlap: () => boundsOverlap,
  ceil: () => ceil,
  closest: () => closest,
  cos: () => cos,
  fitAngleToRange: () => fitAngleToRange,
  fitToRange: () => fitToRange,
  getAngle: () => getAngle,
  getArcBounds: () => getArcBounds,
  getArcPoint: () => getArcPoint,
  getCubicControlPointA: () => getCubicControlPointA,
  getCubicControlPointB: () => getCubicControlPointB,
  getPointOnLine: () => getPointOnLine,
  getPointOnQuadraticCurve: () => getPointOnQuadraticCurve,
  inBounds: () => inBounds,
  mergeBounds: () => mergeBounds,
  normalizeAngle: () => normalizeAngle,
  round: () => round,
  sin: () => sin,
  tan: () => tan
});
var PI = Math.PI;
var HALFPI = PI / 2;
var RADIANS = PI / 180;
var DEGREES = 180 / PI;
function round(value, precision, floor) {
  if (!isNumber(precision) || precision <= 0) {
    var rounded = Math.round(value);
    if (floor) {
      if (rounded - value == 0.5) {
        rounded--;
      }
    }
    return rounded;
  } else {
    var d = Math.pow(10, precision);
    return Math.round(value * d) / d;
  }
}
function ceil(value, precision) {
  if (!isNumber(precision) || precision <= 0) {
    return Math.ceil(value);
  } else {
    var d = Math.pow(10, precision);
    return Math.ceil(value * d) / d;
  }
}
function getCubicControlPointA(p02, p1, p2, tensionX, tensionY) {
  return { x: (-p02.x + p1.x / tensionX + p2.x) * tensionX, y: (-p02.y + p1.y / tensionY + p2.y) * tensionY };
}
function getCubicControlPointB(p1, p2, p3, tensionX, tensionY) {
  return { x: (p1.x + p2.x / tensionX - p3.x) * tensionX, y: (p1.y + p2.y / tensionY - p3.y) * tensionY };
}
function fitToRange(value, min, max) {
  return Math.min(Math.max(value, min), max);
}
function sin(angle) {
  return Math.sin(RADIANS * angle);
}
function tan(angle) {
  return Math.tan(RADIANS * angle);
}
function cos(angle) {
  return Math.cos(RADIANS * angle);
}
function normalizeAngle(value) {
  value = value % 360;
  if (value < 0) {
    value += 360;
  }
  return value;
}
function getArcBounds(cx, cy, startAngle, endAngle, radius) {
  var minX = Number.MAX_VALUE;
  var minY = Number.MAX_VALUE;
  var maxX = -Number.MAX_VALUE;
  var maxY = -Number.MAX_VALUE;
  var bpoints = [];
  bpoints.push(getArcPoint(radius, startAngle));
  bpoints.push(getArcPoint(radius, endAngle));
  var fromAngle = Math.min(Math.floor(startAngle / 90) * 90, Math.floor(endAngle / 90) * 90);
  var toAngle = Math.max(Math.ceil(startAngle / 90) * 90, Math.ceil(endAngle / 90) * 90);
  for (var angle = fromAngle; angle <= toAngle; angle += 90) {
    if (angle >= startAngle && angle <= endAngle) {
      bpoints.push(getArcPoint(radius, angle));
    }
  }
  for (var i = 0; i < bpoints.length; i++) {
    var pt = bpoints[i];
    if (pt.x < minX) {
      minX = pt.x;
    }
    if (pt.y < minY) {
      minY = pt.y;
    }
    if (pt.x > maxX) {
      maxX = pt.x;
    }
    if (pt.y > maxY) {
      maxY = pt.y;
    }
  }
  return { left: cx + minX, top: cy + minY, right: cx + maxX, bottom: cy + maxY };
}
function getArcPoint(radius, arc) {
  return { x: radius * cos(arc), y: radius * sin(arc) };
}
function mergeBounds(bounds) {
  var len = bounds.length;
  if (len > 0) {
    var bound = bounds[0];
    var left = bound.left;
    var top_1 = bound.top;
    var right = bound.right;
    var bottom = bound.bottom;
    if (len > 1) {
      for (var i = 1; i < len; i++) {
        bound = bounds[i];
        left = Math.min(bound.left, left);
        right = Math.max(bound.right, right);
        top_1 = Math.min(bound.top, top_1);
        bottom = Math.max(bound.bottom, bottom);
      }
    }
    return { left, right, top: top_1, bottom };
  }
  return { left: 0, right: 0, top: 0, bottom: 0 };
}
function fitAngleToRange(value, startAngle, endAngle) {
  if (startAngle > endAngle) {
    var temp = startAngle;
    startAngle = endAngle;
    endAngle = temp;
  }
  value = normalizeAngle(value);
  var count = (startAngle - normalizeAngle(startAngle)) / 360;
  if (value < startAngle) {
    value += 360 * (count + 1);
  }
  var maxEnd = startAngle + (endAngle - startAngle) / 2 + 180;
  var maxStart = startAngle + (endAngle - startAngle) / 2 - 180;
  if (value > endAngle) {
    if (value - 360 > startAngle) {
      value -= 360;
    } else {
      if (value < maxEnd) {
        value = endAngle;
      } else {
        value = startAngle;
      }
    }
  }
  if (value < startAngle) {
    if (value > maxStart) {
      value = startAngle;
    } else {
      value = endAngle;
    }
  }
  return value;
}
function inBounds(point, bounds) {
  if (point.x >= bounds.left && point.y >= bounds.top && point.x <= bounds.right && point.y <= bounds.bottom) {
    return true;
  }
  return false;
}
function getAngle(point1, point2) {
  if (!point2) {
    point2 = { x: point1.x * 2, y: point1.y * 2 };
  }
  var diffX = point2.x - point1.x;
  var diffY = point2.y - point1.y;
  var angle = Math.atan2(diffY, diffX) * DEGREES;
  if (angle < 0) {
    angle += 360;
  }
  return normalizeAngle(angle);
}
function getPointOnQuadraticCurve(pointA, pointB, controlPoint, position) {
  var x = (1 - position) * (1 - position) * pointA.x + 2 * (1 - position) * position * controlPoint.x + position * position * pointB.x;
  var y = (1 - position) * (1 - position) * pointA.y + 2 * (1 - position) * position * controlPoint.y + position * position * pointB.y;
  return { x, y };
}
function getPointOnLine(pointA, pointB, position) {
  return { x: pointA.x + (pointB.x - pointA.x) * position, y: pointA.y + (pointB.y - pointA.y) * position };
}
function closest(values, referenceValue) {
  return values.reduce(function(prev, curr) {
    return Math.abs(curr - referenceValue) < Math.abs(prev - referenceValue) ? curr : prev;
  });
}
function boundsOverlap(bounds1, bounds2) {
  return !(bounds1.bottom < bounds2.top || bounds2.bottom < bounds1.top || bounds1.right < bounds2.left || bounds2.right < bounds1.left);
}

// node_modules/@amcharts/amcharts5/.internal/core/util/Ease.js
var Ease_exports = {};
__export(Ease_exports, {
  bounce: () => bounce,
  circle: () => circle,
  cubic: () => cubic,
  elastic: () => elastic,
  exp: () => exp,
  inOut: () => inOut,
  linear: () => linear,
  out: () => out,
  pow: () => pow,
  quad: () => quad,
  sine: () => sine,
  yoyo: () => yoyo
});
function linear(t) {
  return t;
}
function quad(t) {
  return t * t;
}
function cubic(t) {
  return t * t * t;
}
function pow(t, e) {
  return Math.pow(t, e);
}
function exp(t) {
  return Math.pow(2, 10 * t - 10);
}
function sine(t) {
  return 1 - Math.cos(t * HALFPI);
}
function circle(t) {
  return 1 - Math.sqrt(1 - t * t);
}
function yoyo(ease) {
  return function(t) {
    if (t < 0.5) {
      return ease(t * 2);
    } else {
      return ease((1 - t) * 2);
    }
  };
}
function out(ease) {
  return function(t) {
    return 1 - ease(1 - t);
  };
}
function inOut(ease) {
  return function(t) {
    if (t <= 0.5) {
      return ease(t * 2) / 2;
    } else {
      return 1 - ease((1 - t) * 2) / 2;
    }
  };
}
var b1 = 4 / 11;
var b2 = 6 / 11;
var b3 = 8 / 11;
var b4 = 3 / 4;
var b5 = 9 / 11;
var b6 = 10 / 11;
var b7 = 15 / 16;
var b8 = 21 / 22;
var b9 = 63 / 64;
var b0 = 1 / b1 / b1;
function bounce(t) {
  return 1 - bounceOut(1 - t);
}
function bounceOut(t) {
  t = t;
  if (t < b1) {
    return b0 * t * t;
  } else if (t < b3) {
    return b0 * (t -= b2) * t + b4;
  } else if (t < b6) {
    return b0 * (t -= b5) * t + b7;
  } else {
    return b0 * (t -= b8) * t + b9;
  }
}
var tau = 2 * Math.PI;
var amplitude = 1;
var period = 0.3 / tau;
var s = Math.asin(1 / amplitude) * period;
function elastic(t) {
  var v = t;
  return amplitude * Math.pow(2, 10 * --v) * Math.sin((s - v) / period);
}

// node_modules/@amcharts/amcharts5/.internal/core/Registry.js
var Registry = function() {
  function Registry2() {
    Object.defineProperty(this, "licenses", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    Object.defineProperty(this, "entitiesById", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    Object.defineProperty(this, "rootElements", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
  }
  return Registry2;
}();
var registry = new Registry();
function addLicense(license) {
  registry.licenses.push(license);
}
function disposeAllRootElements() {
  var root;
  while (root = registry.rootElements.pop()) {
    root.dispose();
  }
}

// node_modules/@amcharts/amcharts5/.internal/core/util/States.js
var State = function() {
  function State2(entity, settings) {
    Object.defineProperty(this, "_entity", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_settings", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_userSettings", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    this._entity = entity;
    this._settings = settings;
  }
  Object.defineProperty(State2.prototype, "get", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, fallback) {
      var value = this._settings[key];
      if (value !== void 0) {
        return value;
      } else {
        return fallback;
      }
    }
  });
  Object.defineProperty(State2.prototype, "setRaw", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, value) {
      this._settings[key] = value;
    }
  });
  Object.defineProperty(State2.prototype, "set", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, value) {
      this._userSettings[key] = true;
      this.setRaw(key, value);
    }
  });
  Object.defineProperty(State2.prototype, "remove", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key) {
      delete this._userSettings[key];
      delete this._settings[key];
    }
  });
  Object.defineProperty(State2.prototype, "setAll", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(settings) {
      var _this = this;
      keys(settings).forEach(function(key) {
        _this.set(key, settings[key]);
      });
    }
  });
  Object.defineProperty(State2.prototype, "_eachSetting", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(f) {
      each2(this._settings, f);
    }
  });
  Object.defineProperty(State2.prototype, "apply", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      var seen = {};
      seen["stateAnimationEasing"] = true;
      seen["stateAnimationDuration"] = true;
      var defaultState = this._entity.states.lookup("default");
      this._eachSetting(function(key, value) {
        if (!seen[key]) {
          seen[key] = true;
          if (_this !== defaultState) {
            if (!(key in defaultState._settings)) {
              defaultState._settings[key] = _this._entity.get(key);
            }
          }
          _this._entity.set(key, value);
        }
      });
    }
  });
  Object.defineProperty(State2.prototype, "applyAnimate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(duration) {
      var _this = this;
      if (duration == null) {
        duration = this._settings.stateAnimationDuration;
      }
      if (duration == null) {
        duration = this.get("stateAnimationDuration", this._entity.get("stateAnimationDuration", 0));
      }
      var easing = this._settings.stateAnimationEasing;
      if (easing == null) {
        easing = this.get("stateAnimationEasing", this._entity.get("stateAnimationEasing", cubic));
      }
      var defaultState = this._entity.states.lookup("default");
      var seen = {};
      seen["stateAnimationEasing"] = true;
      seen["stateAnimationDuration"] = true;
      var animations = {};
      this._eachSetting(function(key, value) {
        if (!seen[key]) {
          seen[key] = true;
          if (_this != defaultState) {
            if (!(key in defaultState._settings)) {
              defaultState._settings[key] = _this._entity.get(key);
            }
          }
          var animation = _this._entity.animate({
            key,
            to: value,
            duration,
            easing
          });
          if (animation) {
            animations[key] = animation;
          }
        }
      });
      return animations;
    }
  });
  return State2;
}();
var States = function() {
  function States2(entity) {
    Object.defineProperty(this, "_states", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    Object.defineProperty(this, "_entity", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this._entity = entity;
  }
  Object.defineProperty(States2.prototype, "lookup", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(name) {
      return this._states[name];
    }
  });
  Object.defineProperty(States2.prototype, "create", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(name, settings) {
      var state = this._states[name];
      if (state) {
        state.setAll(settings);
        return state;
      } else {
        var state_1 = new State(this._entity, settings);
        this._states[name] = state_1;
        return state_1;
      }
    }
  });
  Object.defineProperty(States2.prototype, "remove", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(name) {
      delete this._states[name];
    }
  });
  Object.defineProperty(States2.prototype, "apply", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(newState) {
      var state = this._states[newState];
      if (state) {
        state.apply();
      }
      this._entity._applyState(newState);
    }
  });
  Object.defineProperty(States2.prototype, "applyAnimate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(newState, duration) {
      var animations;
      var state = this._states[newState];
      if (state) {
        animations = state.applyAnimate(duration);
      }
      this._entity._applyStateAnimated(newState, duration);
      return animations;
    }
  });
  return States2;
}();

// node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js
var Adapters = function() {
  function Adapters2(entity) {
    Object.defineProperty(this, "_entity", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_callbacks", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    Object.defineProperty(this, "_disabled", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    this._entity = entity;
  }
  Object.defineProperty(Adapters2.prototype, "add", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, callback) {
      var _this = this;
      var callbacks = this._callbacks[key];
      if (callbacks === void 0) {
        callbacks = this._callbacks[key] = [];
      }
      callbacks.push(callback);
      this._entity._markDirtyKey(key);
      return new Disposer(function() {
        if (removeFirst(callbacks, callback)) {
          _this._entity._markDirtyKey(key);
        }
      });
    }
  });
  Object.defineProperty(Adapters2.prototype, "remove", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key) {
      var callbacks = this._callbacks[key];
      if (callbacks !== void 0) {
        delete this._callbacks[key];
        if (callbacks.length !== 0) {
          this._entity._markDirtyKey(key);
        }
      }
    }
  });
  Object.defineProperty(Adapters2.prototype, "enable", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key) {
      if (this._disabled[key]) {
        delete this._disabled[key];
        this._entity._markDirtyKey(key);
      }
    }
  });
  Object.defineProperty(Adapters2.prototype, "disable", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key) {
      if (!this._disabled[key]) {
        this._disabled[key] = true;
        this._entity._markDirtyKey(key);
      }
    }
  });
  Object.defineProperty(Adapters2.prototype, "fold", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, value) {
      if (!this._disabled[key]) {
        var callbacks = this._callbacks[key];
        if (callbacks !== void 0) {
          for (var i = 0, len = callbacks.length; i < len; ++i) {
            value = callbacks[i](value, this._entity, key);
          }
        }
      }
      return value;
    }
  });
  return Adapters2;
}();
var Animation = function() {
  function Animation2(from, to, duration, easing, loops, startingTime) {
    Object.defineProperty(this, "_from", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_to", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_duration", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_easing", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_loops", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_interpolate", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_oldTime", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_time", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(this, "_stopped", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(this, "_playing", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true
    });
    Object.defineProperty(this, "events", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new EventDispatcher()
    });
    this._from = from;
    this._to = to;
    this._duration = duration;
    this._easing = easing;
    this._loops = loops;
    this._interpolate = getInterpolate(from, to);
    this._oldTime = startingTime;
  }
  Object.defineProperty(Animation2.prototype, "to", {
    get: function() {
      return this._to;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Animation2.prototype, "from", {
    get: function() {
      return this._from;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Animation2.prototype, "playing", {
    get: function() {
      return this._playing;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Animation2.prototype, "stopped", {
    get: function() {
      return this._stopped;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Animation2.prototype, "stop", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (!this._stopped) {
        this._stopped = true;
        this._playing = false;
        if (this.events.isEnabled("stopped")) {
          this.events.dispatch("stopped", {
            type: "stopped",
            target: this
          });
        }
      }
    }
  });
  Object.defineProperty(Animation2.prototype, "pause", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._playing = false;
      this._oldTime = null;
    }
  });
  Object.defineProperty(Animation2.prototype, "play", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (!this._stopped) {
        this._playing = true;
      }
    }
  });
  Object.defineProperty(Animation2.prototype, "percentage", {
    get: function() {
      return this._time / this._duration;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Animation2.prototype, "waitForStop", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      return new Promise(function(resolve, _reject) {
        if (_this._stopped) {
          resolve();
        } else {
          var listener = function() {
            stopped_1.dispose();
            resolve();
          };
          var stopped_1 = _this.events.on("stopped", listener);
        }
      });
    }
  });
  Object.defineProperty(Animation2.prototype, "_checkEnded", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (this._loops > 1) {
        --this._loops;
        return false;
      } else {
        return true;
      }
    }
  });
  Object.defineProperty(Animation2.prototype, "_run", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(currentTime) {
      if (this._oldTime !== null) {
        this._time += currentTime - this._oldTime;
        if (this._time > this._duration) {
          this._time = this._duration;
        }
      }
      this._oldTime = currentTime;
    }
  });
  Object.defineProperty(Animation2.prototype, "_reset", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(currentTime) {
      this._oldTime = currentTime;
      this._time = 0;
    }
  });
  Object.defineProperty(Animation2.prototype, "_value", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(diff) {
      return this._interpolate(this._easing(diff), this._from, this._to);
    }
  });
  return Animation2;
}();
var counter = 0;
var Settings = function() {
  function Settings2(settings) {
    Object.defineProperty(this, "uid", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: ++counter
    });
    Object.defineProperty(this, "_settings", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_privateSettings", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    Object.defineProperty(this, "_settingEvents", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    Object.defineProperty(this, "_privateSettingEvents", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    Object.defineProperty(this, "_prevSettings", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    Object.defineProperty(this, "_prevPrivateSettings", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    Object.defineProperty(this, "_animatingSettings", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    Object.defineProperty(this, "_animatingPrivateSettings", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    Object.defineProperty(this, "_animatingCount", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(this, "_disposed", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(this, "_userProperties", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    this._settings = settings;
  }
  Object.defineProperty(Settings2.prototype, "_checkDirty", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      keys(this._settings).forEach(function(key) {
        _this._userProperties[key] = true;
        _this._markDirtyKey(key);
      });
    }
  });
  Object.defineProperty(Settings2.prototype, "_runAnimation", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(currentTime) {
      var _this = this;
      if (!this.isDisposed()) {
        each2(this._animatingSettings, function(key, animation) {
          if (animation._stopped) {
            _this._stopAnimation(key);
          } else if (animation._playing) {
            animation._run(currentTime);
            var diff = animation.percentage;
            if (diff >= 1) {
              if (animation._checkEnded()) {
                _this.set(key, animation._value(1));
              } else {
                animation._reset(currentTime);
                _this._set(key, animation._value(1));
              }
            } else {
              _this._set(key, animation._value(diff));
            }
          }
        });
        each2(this._animatingPrivateSettings, function(key, animation) {
          if (animation._stopped) {
            _this._stopAnimationPrivate(key);
          } else if (animation._playing) {
            animation._run(currentTime);
            var diff = animation.percentage;
            if (diff >= 1) {
              if (animation._checkEnded()) {
                _this.setPrivate(key, animation._value(1));
              } else {
                animation._reset(currentTime);
                _this._setPrivate(key, animation._value(1));
              }
            } else {
              _this._setPrivate(key, animation._value(diff));
            }
          }
        });
        if (this._animatingCount < 0) {
          throw new Error("Invalid animation count");
        }
        return this._animatingCount === 0;
      } else {
        return true;
      }
    }
  });
  Object.defineProperty(Settings2.prototype, "_markDirtyKey", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(_key) {
      this.markDirty();
    }
  });
  Object.defineProperty(Settings2.prototype, "_markDirtyPrivateKey", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(_key) {
      this.markDirty();
    }
  });
  Object.defineProperty(Settings2.prototype, "on", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, callback) {
      var _this = this;
      var events = this._settingEvents[key];
      if (events === void 0) {
        events = this._settingEvents[key] = [];
      }
      events.push(callback);
      return new Disposer(function() {
        removeFirst(events, callback);
        if (events.length === 0) {
          delete _this._settingEvents[key];
        }
      });
    }
  });
  Object.defineProperty(Settings2.prototype, "onPrivate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, callback) {
      var _this = this;
      var events = this._privateSettingEvents[key];
      if (events === void 0) {
        events = this._privateSettingEvents[key] = [];
      }
      events.push(callback);
      return new Disposer(function() {
        removeFirst(events, callback);
        if (events.length === 0) {
          delete _this._privateSettingEvents[key];
        }
      });
    }
  });
  Object.defineProperty(Settings2.prototype, "getRaw", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, fallback) {
      var value = this._settings[key];
      if (value !== void 0) {
        return value;
      } else {
        return fallback;
      }
    }
  });
  Object.defineProperty(Settings2.prototype, "get", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, fallback) {
      return this.getRaw(key, fallback);
    }
  });
  Object.defineProperty(Settings2.prototype, "_sendKeyEvent", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, value) {
      var _this = this;
      var events = this._settingEvents[key];
      if (events !== void 0) {
        each(events, function(callback) {
          callback(value, _this, key);
        });
      }
    }
  });
  Object.defineProperty(Settings2.prototype, "_sendPrivateKeyEvent", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, value) {
      var _this = this;
      var events = this._privateSettingEvents[key];
      if (events !== void 0) {
        each(events, function(callback) {
          callback(value, _this, key);
        });
      }
    }
  });
  Object.defineProperty(Settings2.prototype, "_setRaw", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, old, value) {
      this._prevSettings[key] = old;
      this._sendKeyEvent(key, value);
    }
  });
  Object.defineProperty(Settings2.prototype, "setRaw", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, value) {
      var old = this._settings[key];
      this._settings[key] = value;
      if (old !== value) {
        this._setRaw(key, old, value);
      }
    }
  });
  Object.defineProperty(Settings2.prototype, "_set", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, value) {
      var old = this._settings[key];
      this._settings[key] = value;
      if (old !== value) {
        this._setRaw(key, old, value);
        this._markDirtyKey(key);
      }
    }
  });
  Object.defineProperty(Settings2.prototype, "_stopAnimation", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key) {
      var animation = this._animatingSettings[key];
      if (animation) {
        delete this._animatingSettings[key];
        --this._animatingCount;
        animation.stop();
      }
    }
  });
  Object.defineProperty(Settings2.prototype, "set", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, value) {
      this._set(key, value);
      this._stopAnimation(key);
      return value;
    }
  });
  Object.defineProperty(Settings2.prototype, "remove", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key) {
      if (key in this._settings) {
        this._prevSettings[key] = this._settings[key];
        delete this._settings[key];
        this._sendKeyEvent(key, void 0);
        this._markDirtyKey(key);
      }
      this._stopAnimation(key);
    }
  });
  Object.defineProperty(Settings2.prototype, "removeAll", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      each(keys(this._settings), function(key) {
        _this.remove(key);
      });
    }
  });
  Object.defineProperty(Settings2.prototype, "getPrivate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, fallback) {
      var value = this._privateSettings[key];
      if (value !== void 0) {
        return value;
      } else {
        return fallback;
      }
    }
  });
  Object.defineProperty(Settings2.prototype, "_setPrivateRaw", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, old, value) {
      this._prevPrivateSettings[key] = old;
      this._sendPrivateKeyEvent(key, value);
    }
  });
  Object.defineProperty(Settings2.prototype, "setPrivateRaw", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, value) {
      var old = this._privateSettings[key];
      this._privateSettings[key] = value;
      if (old !== value) {
        this._setPrivateRaw(key, old, value);
      }
    }
  });
  Object.defineProperty(Settings2.prototype, "_setPrivate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, value) {
      var old = this._privateSettings[key];
      this._privateSettings[key] = value;
      if (old !== value) {
        this._setPrivateRaw(key, old, value);
        this._markDirtyPrivateKey(key);
      }
    }
  });
  Object.defineProperty(Settings2.prototype, "_stopAnimationPrivate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key) {
      var animation = this._animatingPrivateSettings[key];
      if (animation) {
        animation.stop();
        delete this._animatingPrivateSettings[key];
        --this._animatingCount;
      }
    }
  });
  Object.defineProperty(Settings2.prototype, "setPrivate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, value) {
      this._setPrivate(key, value);
      this._stopAnimationPrivate(key);
      return value;
    }
  });
  Object.defineProperty(Settings2.prototype, "removePrivate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key) {
      if (key in this._privateSettings) {
        this._prevPrivateSettings[key] = this._privateSettings[key];
        delete this._privateSettings[key];
        this._markDirtyPrivateKey(key);
      }
      this._stopAnimationPrivate(key);
    }
  });
  Object.defineProperty(Settings2.prototype, "setAll", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(settings) {
      var _this = this;
      each2(settings, function(key, value) {
        _this.set(key, value);
      });
    }
  });
  Object.defineProperty(Settings2.prototype, "animate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(options) {
      var key = options.key;
      var to = options.to;
      var duration = options.duration || 0;
      var loops = options.loops || 1;
      var from = options.from === void 0 ? this.get(key) : options.from;
      var easing = options.easing === void 0 ? linear : options.easing;
      if (duration === 0) {
        this.set(key, to);
      } else {
        if (from === void 0 || from === to) {
          this.set(key, to);
        } else {
          ++this._animatingCount;
          this.set(key, from);
          var animation_1 = this._animatingSettings[key] = new Animation(from, to, duration, easing, loops, this._animationTime());
          this._startAnimation();
          return animation_1;
        }
      }
      var animation = new Animation(from, to, duration, easing, loops, null);
      animation.stop();
      return animation;
    }
  });
  Object.defineProperty(Settings2.prototype, "animatePrivate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(options) {
      var key = options.key;
      var to = options.to;
      var duration = options.duration || 0;
      var loops = options.loops || 1;
      var from = options.from === void 0 ? this.getPrivate(key) : options.from;
      var easing = options.easing === void 0 ? linear : options.easing;
      if (duration === 0) {
        this.setPrivate(key, to);
      } else {
        if (from === void 0 || from === to) {
          this.setPrivate(key, to);
        } else {
          ++this._animatingCount;
          this.setPrivate(key, from);
          var animation_2 = this._animatingPrivateSettings[key] = new Animation(from, to, duration, easing, loops, this._animationTime());
          this._startAnimation();
          return animation_2;
        }
      }
      var animation = new Animation(from, to, duration, easing, loops, null);
      animation.stop();
      return animation;
    }
  });
  Object.defineProperty(Settings2.prototype, "_dispose", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
    }
  });
  Object.defineProperty(Settings2.prototype, "isDisposed", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this._disposed;
    }
  });
  Object.defineProperty(Settings2.prototype, "dispose", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (!this._disposed) {
        this._disposed = true;
        this._dispose();
      }
    }
  });
  return Settings2;
}();
var Entity = function(_super) {
  __extends(Entity2, _super);
  function Entity2(root, settings, isReal, templates) {
    if (templates === void 0) {
      templates = [];
    }
    var _this = _super.call(this, settings) || this;
    Object.defineProperty(_this, "_root", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_user_id", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "states", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new States(_this)
    });
    Object.defineProperty(_this, "adapters", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new Adapters(_this)
    });
    Object.defineProperty(_this, "events", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this._createEvents()
    });
    Object.defineProperty(_this, "_userPrivateProperties", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    Object.defineProperty(_this, "_dirty", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    Object.defineProperty(_this, "_dirtyPrivate", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    Object.defineProperty(_this, "_template", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_templates", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    Object.defineProperty(_this, "_internalTemplates", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_defaultThemes", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    Object.defineProperty(_this, "_templateDisposers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    Object.defineProperty(_this, "_disposers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    Object.defineProperty(_this, "_runSetup", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true
    });
    Object.defineProperty(_this, "_disposerProperties", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    if (!isReal) {
      throw new Error("You cannot use `new Class()`, instead use `Class.new()`");
    }
    _this._root = root;
    _this._internalTemplates = templates;
    if (settings.id) {
      _this._registerId(settings.id);
    }
    return _this;
  }
  Object.defineProperty(Entity2, "new", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(root, settings, template) {
      var x = new this(root, settings, true);
      x._template = template;
      x._afterNew();
      return x;
    }
  });
  Object.defineProperty(Entity2, "_new", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(root, settings, templates) {
      if (templates === void 0) {
        templates = [];
      }
      var x = new this(root, settings, true, templates);
      x._afterNew();
      return x;
    }
  });
  Object.defineProperty(Entity2.prototype, "_afterNew", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      this._checkDirty();
      var shouldApply = false;
      var template = this._template;
      if (template) {
        shouldApply = true;
        template._setObjectTemplate(this);
      }
      each(this._internalTemplates, function(template2) {
        shouldApply = true;
        template2._setObjectTemplate(_this);
      });
      if (shouldApply) {
        this._applyTemplates(false);
      }
      this.states.create("default", {});
      this._setDefaults();
    }
  });
  Object.defineProperty(Entity2.prototype, "_afterNewApplyThemes", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      this._checkDirty();
      var template = this._template;
      if (template) {
        template._setObjectTemplate(this);
      }
      each(this._internalTemplates, function(template2) {
        template2._setObjectTemplate(_this);
      });
      this.states.create("default", {});
      this._setDefaults();
      this._applyThemes();
    }
  });
  Object.defineProperty(Entity2.prototype, "_createEvents", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return new EventDispatcher();
    }
  });
  Object.defineProperty(Entity2.prototype, "classNames", {
    get: function() {
      return this.constructor.classNames;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Entity2.prototype, "className", {
    get: function() {
      return this.constructor.className;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Entity2.prototype, "_setDefaults", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
    }
  });
  Object.defineProperty(Entity2.prototype, "_setDefault", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, value) {
      if (!(key in this._settings)) {
        _super.prototype.set.call(this, key, value);
      }
    }
  });
  Object.defineProperty(Entity2.prototype, "_setRawDefault", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, value) {
      if (!(key in this._settings)) {
        _super.prototype.setRaw.call(this, key, value);
      }
    }
  });
  Object.defineProperty(Entity2.prototype, "_clearDirty", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      keys(this._dirty).forEach(function(key) {
        _this._dirty[key] = false;
      });
      keys(this._dirtyPrivate).forEach(function(key) {
        _this._dirtyPrivate[key] = false;
      });
    }
  });
  Object.defineProperty(Entity2.prototype, "isDirty", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key) {
      return !!this._dirty[key];
    }
  });
  Object.defineProperty(Entity2.prototype, "isPrivateDirty", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key) {
      return !!this._dirtyPrivate[key];
    }
  });
  Object.defineProperty(Entity2.prototype, "_markDirtyKey", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key) {
      this._dirty[key] = true;
      _super.prototype._markDirtyKey.call(this, key);
    }
  });
  Object.defineProperty(Entity2.prototype, "_markDirtyPrivateKey", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key) {
      this._dirtyPrivate[key] = true;
      _super.prototype._markDirtyKey.call(this, key);
    }
  });
  Object.defineProperty(Entity2.prototype, "isType", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(type) {
      return this.classNames.indexOf(type) !== -1;
    }
  });
  Object.defineProperty(Entity2.prototype, "_pushPropertyDisposer", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, disposer) {
      var disposers = this._disposerProperties[key];
      if (disposers === void 0) {
        disposers = this._disposerProperties[key] = [];
      }
      disposers.push(disposer);
      return disposer;
    }
  });
  Object.defineProperty(Entity2.prototype, "_disposeProperty", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key) {
      var disposers = this._disposerProperties[key];
      if (disposers !== void 0) {
        each(disposers, function(disposer) {
          disposer.dispose();
        });
        delete this._disposerProperties[key];
      }
    }
  });
  Object.defineProperty(Entity2.prototype, "template", {
    get: function() {
      return this._template;
    },
    set: function(value) {
      var template = this._template;
      if (template !== value) {
        this._template = value;
        if (template) {
          template._removeObjectTemplate(this);
        }
        if (value) {
          value._setObjectTemplate(this);
        }
        this._applyTemplates();
      }
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Entity2.prototype, "markDirty", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._root._addDirtyEntity(this);
    }
  });
  Object.defineProperty(Entity2.prototype, "_startAnimation", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._root._addAnimation(this);
    }
  });
  Object.defineProperty(Entity2.prototype, "_animationTime", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this._root.animationTime;
    }
  });
  Object.defineProperty(Entity2.prototype, "_applyState", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(_name) {
    }
  });
  Object.defineProperty(Entity2.prototype, "_applyStateAnimated", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(_name, _duration) {
    }
  });
  Object.defineProperty(Entity2.prototype, "get", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, fallback) {
      var value = this.adapters.fold(key, this._settings[key]);
      if (value !== void 0) {
        return value;
      } else {
        return fallback;
      }
    }
  });
  Object.defineProperty(Entity2.prototype, "set", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, value) {
      this._userProperties[key] = true;
      return _super.prototype.set.call(this, key, value);
    }
  });
  Object.defineProperty(Entity2.prototype, "setRaw", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, value) {
      this._userProperties[key] = true;
      _super.prototype.setRaw.call(this, key, value);
    }
  });
  Object.defineProperty(Entity2.prototype, "_setSoft", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, value) {
      if (!this._userProperties[key]) {
        return _super.prototype.set.call(this, key, value);
      }
      return value;
    }
  });
  Object.defineProperty(Entity2.prototype, "remove", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key) {
      delete this._userProperties[key];
      this._removeTemplateProperty(key);
    }
  });
  Object.defineProperty(Entity2.prototype, "setPrivate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, value) {
      this._userPrivateProperties[key] = true;
      return _super.prototype.setPrivate.call(this, key, value);
    }
  });
  Object.defineProperty(Entity2.prototype, "setPrivateRaw", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, value) {
      this._userPrivateProperties[key] = true;
      _super.prototype.setPrivateRaw.call(this, key, value);
    }
  });
  Object.defineProperty(Entity2.prototype, "removePrivate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key) {
      delete this._userPrivateProperties[key];
      this._removeTemplatePrivateProperty(key);
    }
  });
  Object.defineProperty(Entity2.prototype, "_setTemplateProperty", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(template, key, value) {
      if (!this._userProperties[key]) {
        var match = this._findTemplateByKey(key);
        if (template === match) {
          _super.prototype.set.call(this, key, value);
        }
      }
    }
  });
  Object.defineProperty(Entity2.prototype, "_setTemplatePrivateProperty", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(template, key, value) {
      if (!this._userPrivateProperties[key]) {
        var match = this._findTemplateByPrivateKey(key);
        if (template === match) {
          _super.prototype.setPrivate.call(this, key, value);
        }
      }
    }
  });
  Object.defineProperty(Entity2.prototype, "_removeTemplateProperty", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key) {
      if (!this._userProperties[key]) {
        var match = this._findTemplateByKey(key);
        if (match) {
          _super.prototype.set.call(this, key, match._settings[key]);
        } else {
          _super.prototype.remove.call(this, key);
        }
      }
    }
  });
  Object.defineProperty(Entity2.prototype, "_removeTemplatePrivateProperty", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key) {
      if (!this._userPrivateProperties[key]) {
        var match = this._findTemplateByPrivateKey(key);
        if (match) {
          _super.prototype.setPrivate.call(this, key, match._privateSettings[key]);
        } else {
          _super.prototype.removePrivate.call(this, key);
        }
      }
    }
  });
  Object.defineProperty(Entity2.prototype, "_walkParents", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(f) {
      f(this._root._rootContainer);
      f(this);
    }
  });
  Object.defineProperty(Entity2.prototype, "_applyStateByKey", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(name) {
      var other = this.states.create(name, {});
      var seen = {};
      this._eachTemplate(function(template) {
        var state = template.states.lookup(name);
        if (state) {
          state._apply(other, seen);
        }
      });
      each2(other._settings, function(key) {
        if (!seen[key] && !other._userSettings[key]) {
          other.remove(key);
        }
      });
    }
  });
  Object.defineProperty(Entity2.prototype, "_applyTemplate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(template, state) {
      var _this = this;
      this._templateDisposers.push(template._apply(this, state));
      each2(template._settings, function(key, value) {
        if (!state.settings[key] && !_this._userProperties[key]) {
          state.settings[key] = true;
          _super.prototype.set.call(_this, key, value);
        }
      });
      each2(template._privateSettings, function(key, value) {
        if (!state.privateSettings[key] && !_this._userPrivateProperties[key]) {
          state.privateSettings[key] = true;
          _super.prototype.setPrivate.call(_this, key, value);
        }
      });
      if (this._runSetup && template.setup) {
        this._runSetup = false;
        template.setup(this);
      }
    }
  });
  Object.defineProperty(Entity2.prototype, "_findStaticTemplate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(f) {
      if (this._template) {
        if (f(this._template)) {
          return this._template;
        }
      }
    }
  });
  Object.defineProperty(Entity2.prototype, "_eachTemplate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(f) {
      this._findStaticTemplate(function(template) {
        f(template);
        return false;
      });
      eachReverse(this._internalTemplates, f);
      each(this._templates, f);
    }
  });
  Object.defineProperty(Entity2.prototype, "_applyTemplates", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(remove2) {
      var _this = this;
      if (remove2 === void 0) {
        remove2 = true;
      }
      if (remove2) {
        this._disposeTemplates();
      }
      var state = {
        settings: {},
        privateSettings: {},
        states: {}
      };
      this._eachTemplate(function(template) {
        _this._applyTemplate(template, state);
      });
      if (remove2) {
        each2(this._settings, function(key) {
          if (!_this._userProperties[key] && !state.settings[key]) {
            _super.prototype.remove.call(_this, key);
          }
        });
        each2(this._privateSettings, function(key) {
          if (!_this._userPrivateProperties[key] && !state.privateSettings[key]) {
            _super.prototype.removePrivate.call(_this, key);
          }
        });
      }
    }
  });
  Object.defineProperty(Entity2.prototype, "_findTemplate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(f) {
      var value = this._findStaticTemplate(f);
      if (value === void 0) {
        var value_1 = findReverse(this._internalTemplates, f);
        if (value_1 === void 0) {
          return find(this._templates, f);
        } else {
          return value_1;
        }
      } else {
        return value;
      }
    }
  });
  Object.defineProperty(Entity2.prototype, "_findTemplateByKey", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key) {
      return this._findTemplate(function(template) {
        return key in template._settings;
      });
    }
  });
  Object.defineProperty(Entity2.prototype, "_findTemplateByPrivateKey", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key) {
      return this._findTemplate(function(template) {
        return key in template._privateSettings;
      });
    }
  });
  Object.defineProperty(Entity2.prototype, "_disposeTemplates", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      each(this._templateDisposers, function(disposer) {
        disposer.dispose();
      });
      this._templateDisposers.length = 0;
    }
  });
  Object.defineProperty(Entity2.prototype, "_removeTemplates", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      each(this._templates, function(template) {
        template._removeObjectTemplate(_this);
      });
      this._templates.length = 0;
    }
  });
  Object.defineProperty(Entity2.prototype, "_applyThemes", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      var isConnected = false;
      var defaults = [];
      var themes = [];
      var themeTags = /* @__PURE__ */ new Set();
      var tags = this.get("themeTagsSelf");
      if (tags) {
        each(tags, function(tag) {
          themeTags.add(tag);
        });
      }
      this._walkParents(function(entity) {
        if (entity === _this._root._rootContainer) {
          isConnected = true;
        }
        if (entity._defaultThemes.length > 0) {
          defaults.push(entity._defaultThemes);
        }
        var theme = entity.get("themes");
        if (theme) {
          themes.push(theme);
        }
        var tags2 = entity.get("themeTags");
        if (tags2) {
          each(tags2, function(tag) {
            themeTags.add(tag);
          });
        }
      });
      themes = defaults.concat(themes);
      this._removeTemplates();
      if (isConnected) {
        eachReverse(this.classNames, function(name) {
          var allRules = [];
          each(themes, function(themes2) {
            each(themes2, function(theme) {
              var rules = theme._lookupRules(name);
              if (rules) {
                eachReverse(rules, function(rule) {
                  var matches = rule.tags.every(function(tag) {
                    return themeTags.has(tag);
                  });
                  if (matches) {
                    var result = getFirstSortedIndex(allRules, function(x) {
                      var order = compare(rule.tags.length, x.tags.length);
                      if (order === 0) {
                        return compareArray(rule.tags, x.tags, compare);
                      } else {
                        return order;
                      }
                    });
                    allRules.splice(result.index, 0, rule);
                  }
                });
              }
            });
          });
          each(allRules, function(rule) {
            _this._templates.push(rule.template);
            rule.template._setObjectTemplate(_this);
          });
        });
      }
      this._applyTemplates();
      if (isConnected) {
        this._runSetup = false;
      }
      return isConnected;
    }
  });
  Object.defineProperty(Entity2.prototype, "_changed", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
    }
  });
  Object.defineProperty(Entity2.prototype, "_beforeChanged", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (this.isDirty("id")) {
        var id = this.get("id");
        if (id) {
          this._registerId(id);
        }
        var prevId = this._prevSettings.id;
        if (prevId) {
          delete registry.entitiesById[prevId];
        }
      }
    }
  });
  Object.defineProperty(Entity2.prototype, "_registerId", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(id) {
      if (registry.entitiesById[id] && registry.entitiesById[id] !== this) {
        throw new Error('An entity with id "' + id + '" already exists.');
      }
      registry.entitiesById[id] = this;
    }
  });
  Object.defineProperty(Entity2.prototype, "_afterChanged", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
    }
  });
  Object.defineProperty(Entity2.prototype, "addDisposer", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(disposer) {
      this._disposers.push(disposer);
      return disposer;
    }
  });
  Object.defineProperty(Entity2.prototype, "_dispose", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      _super.prototype._dispose.call(this);
      var template = this._template;
      if (template) {
        template._removeObjectTemplate(this);
      }
      each(this._internalTemplates, function(template2) {
        template2._removeObjectTemplate(_this);
      });
      this._removeTemplates();
      this._disposeTemplates();
      this.events.dispose();
      this._disposers.forEach(function(x) {
        x.dispose();
      });
      each2(this._disposerProperties, function(_, disposers) {
        each(disposers, function(disposer) {
          disposer.dispose();
        });
      });
      var id = this.get("id");
      if (id) {
        delete registry.entitiesById[id];
      }
    }
  });
  Object.defineProperty(Entity2.prototype, "setTimeout", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(fn, delay) {
      var _this = this;
      var id = setTimeout(function() {
        _this.removeDispose(disposer);
        fn();
      }, delay);
      var disposer = new Disposer(function() {
        clearTimeout(id);
      });
      this._disposers.push(disposer);
      return disposer;
    }
  });
  Object.defineProperty(Entity2.prototype, "removeDispose", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(target) {
      if (!this.isDisposed()) {
        var index = indexOf(this._disposers, target);
        if (index > -1) {
          this._disposers.splice(index, 1);
        }
      }
      target.dispose();
    }
  });
  Object.defineProperty(Entity2.prototype, "hasTag", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(tag) {
      return indexOf(this.get("themeTags", []), tag) !== -1;
    }
  });
  Object.defineProperty(Entity2.prototype, "addTag", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(tag) {
      if (!this.hasTag(tag)) {
        var tags = this.get("themeTags", []);
        tags.push(tag);
        this.set("themeTags", tags);
      }
    }
  });
  Object.defineProperty(Entity2.prototype, "removeTag", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(tag) {
      if (this.hasTag(tag)) {
        var tags = this.get("themeTags", []);
        remove(tags, tag);
        this.set("themeTags", tags);
      }
    }
  });
  Object.defineProperty(Entity2.prototype, "_t", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(text, locale) {
      var _a;
      var rest = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        rest[_i - 2] = arguments[_i];
      }
      return (_a = this._root.language).translate.apply(_a, __spreadArray([text, locale], __read(rest), false));
    }
  });
  Object.defineProperty(Entity2.prototype, "root", {
    get: function() {
      return this._root;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Entity2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Entity"
  });
  Object.defineProperty(Entity2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: ["Entity"]
  });
  return Entity2;
}(Settings);

// node_modules/@amcharts/amcharts5/.internal/core/render/Sprite.js
var SpriteEventDispatcher = function(_super) {
  __extends(SpriteEventDispatcher2, _super);
  function SpriteEventDispatcher2(sprite) {
    var _this = _super.call(this) || this;
    Object.defineProperty(_this, "_sprite", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_rendererDisposers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    Object.defineProperty(_this, "_dispatchParents", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true
    });
    _this._sprite = sprite;
    return _this;
  }
  Object.defineProperty(SpriteEventDispatcher2.prototype, "_makePointerEvent", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, event) {
      return {
        type: key,
        originalEvent: event.event,
        point: event.point,
        simulated: event.simulated,
        native: event.native,
        target: this._sprite
      };
    }
  });
  Object.defineProperty(SpriteEventDispatcher2.prototype, "_onRenderer", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, dispatch) {
      var _this = this;
      this._sprite.set("interactive", true);
      this._sprite._display.interactive = true;
      var events = this._rendererDisposers[key];
      if (events === void 0) {
        var disposer_1 = this._sprite._display.on(key, function(e) {
          dispatch.call(_this, e);
        });
        events = this._rendererDisposers[key] = new CounterDisposer(function() {
          delete _this._rendererDisposers[key];
          disposer_1.dispose();
        });
      }
      return events.increment();
    }
  });
  Object.defineProperty(SpriteEventDispatcher2.prototype, "_on", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(once, type, callback, context, shouldClone, dispatch) {
      var info = _super.prototype._on.call(this, once, type, callback, context, shouldClone, dispatch);
      var rendererEvent = SpriteEventDispatcher2.RENDERER_EVENTS[type];
      if (rendererEvent !== void 0) {
        info.disposer = new MultiDisposer([
          info.disposer,
          this._onRenderer(type, rendererEvent)
        ]);
      }
      return info;
    }
  });
  Object.defineProperty(SpriteEventDispatcher2.prototype, "stopParentDispatch", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._dispatchParents = false;
    }
  });
  Object.defineProperty(SpriteEventDispatcher2.prototype, "dispatchParents", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(type, event) {
      var old = this._dispatchParents;
      this._dispatchParents = true;
      try {
        this.dispatch(type, event);
        if (this._dispatchParents && this._sprite.parent) {
          this._sprite.parent.events.dispatchParents(type, event);
        }
      } finally {
        this._dispatchParents = old;
      }
    }
  });
  Object.defineProperty(SpriteEventDispatcher2, "RENDERER_EVENTS", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: {
      "click": function(event) {
        if (this.isEnabled("click") && !this._sprite.isDragging() && this._sprite._hasDown() && !this._sprite._hasMoved(this._makePointerEvent("click", event))) {
          this.dispatch("click", this._makePointerEvent("click", event));
        }
      },
      "rightclick": function(event) {
        if (this.isEnabled("rightclick")) {
          this.dispatch("rightclick", this._makePointerEvent("rightclick", event));
        }
      },
      "middleclick": function(event) {
        if (this.isEnabled("middleclick")) {
          this.dispatch("middleclick", this._makePointerEvent("middleclick", event));
        }
      },
      "dblclick": function(event) {
        this.dispatchParents("dblclick", this._makePointerEvent("dblclick", event));
      },
      "pointerover": function(event) {
        if (this.isEnabled("pointerover")) {
          this.dispatch("pointerover", this._makePointerEvent("pointerover", event));
        }
      },
      "pointerout": function(event) {
        if (this.isEnabled("pointerout")) {
          this.dispatch("pointerout", this._makePointerEvent("pointerout", event));
        }
      },
      "pointerdown": function(event) {
        this.dispatchParents("pointerdown", this._makePointerEvent("pointerdown", event));
      },
      "pointerup": function(event) {
        if (this.isEnabled("pointerup")) {
          this.dispatch("pointerup", this._makePointerEvent("pointerup", event));
        }
      },
      "globalpointerup": function(event) {
        if (this.isEnabled("globalpointerup")) {
          this.dispatch("globalpointerup", this._makePointerEvent("globalpointerup", event));
        }
      },
      "globalpointermove": function(event) {
        if (this.isEnabled("globalpointermove")) {
          this.dispatch("globalpointermove", this._makePointerEvent("globalpointermove", event));
        }
      },
      "wheel": function(event) {
        this.dispatchParents("wheel", {
          type: "wheel",
          target: this._sprite,
          originalEvent: event.event,
          point: event.point
        });
      }
    }
  });
  return SpriteEventDispatcher2;
}(EventDispatcher);
var Sprite = function(_super) {
  __extends(Sprite2, _super);
  function Sprite2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    Object.defineProperty(_this, "_adjustedLocalBounds", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: { left: 0, right: 0, top: 0, bottom: 0 }
    });
    Object.defineProperty(_this, "_localBounds", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: { left: 0, right: 0, top: 0, bottom: 0 }
    });
    Object.defineProperty(_this, "_parent", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_dataItem", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_templateField", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_sizeDirty", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "_isDragging", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "_dragEvent", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_dragPoint", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_isHidden", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "_isShowing", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "_isHiding", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "_isDown", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "_downPoint", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_downPoints", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    Object.defineProperty(_this, "_toggleDp", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_dragDp", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_tooltipDp", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_hoverDp", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_focusDp", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_tooltipMoveDp", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_tooltipPointerDp", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_statesHandled", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    return _this;
  }
  Object.defineProperty(Sprite2.prototype, "_afterNew", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this.setPrivateRaw("visible", true);
      _super.prototype._afterNew.call(this);
    }
  });
  Object.defineProperty(Sprite2.prototype, "_markDirtyKey", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key) {
      _super.prototype._markDirtyKey.call(this, key);
      if (key == "x" || key == "y" || key == "dx" || key == "dy") {
        this.markDirtyBounds();
        this._addPercentagePositionChildren();
        this.markDirtyPosition();
      }
    }
  });
  Object.defineProperty(Sprite2.prototype, "_markDirtyPrivateKey", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key) {
      _super.prototype._markDirtyPrivateKey.call(this, key);
      if (key == "x" || key == "y") {
        this.markDirtyPosition();
      }
    }
  });
  Object.defineProperty(Sprite2.prototype, "_removeTemplateField", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (this._templateField) {
        this._templateField._removeObjectTemplate(this);
      }
    }
  });
  Object.defineProperty(Sprite2.prototype, "_createEvents", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return new SpriteEventDispatcher(this);
    }
  });
  Object.defineProperty(Sprite2.prototype, "_processTemplateField", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var template;
      var field = this.get("templateField");
      if (field) {
        var dataItem = this.dataItem;
        if (dataItem) {
          var context = dataItem.dataContext;
          if (context) {
            template = context[field];
            if (!(template instanceof Template) && template) {
              template = Template.new(template);
            }
          }
        }
      }
      if (this._templateField !== template) {
        this._removeTemplateField();
        this._templateField = template;
        if (template) {
          template._setObjectTemplate(this);
        }
        this._applyTemplates();
      }
    }
  });
  Object.defineProperty(Sprite2.prototype, "_setDataItem", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(dataItem) {
      var oldDataItem = this._dataItem;
      this._dataItem = dataItem;
      this._processTemplateField();
      var eventType = "dataitemchanged";
      if (this.events.isEnabled(eventType)) {
        this.events.dispatch(eventType, {
          type: eventType,
          target: this,
          oldDataItem,
          newDataItem: dataItem
        });
      }
    }
  });
  Object.defineProperty(Sprite2.prototype, "dataItem", {
    get: function() {
      if (this._dataItem) {
        return this._dataItem;
      } else {
        var parent_1 = this._parent;
        while (parent_1) {
          if (parent_1._dataItem) {
            return parent_1._dataItem;
          } else {
            parent_1 = parent_1._parent;
          }
        }
      }
    },
    set: function(value) {
      this._setDataItem(value);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Sprite2.prototype, "_addPercentageSizeChildren", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var parent = this.parent;
      if (parent) {
        if (this.get("width") instanceof Percent || this.get("height") instanceof Percent) {
          pushOne(parent._percentageSizeChildren, this);
        } else {
          removeFirst(parent._percentageSizeChildren, this);
        }
      }
    }
  });
  Object.defineProperty(Sprite2.prototype, "_addPercentagePositionChildren", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var parent = this.parent;
      if (parent) {
        if (this.get("x") instanceof Percent || this.get("y") instanceof Percent) {
          pushOne(parent._percentagePositionChildren, this);
        } else {
          removeFirst(parent._percentagePositionChildren, this);
        }
      }
    }
  });
  Object.defineProperty(Sprite2.prototype, "markDirtyPosition", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._root._addDirtyPosition(this);
    }
  });
  Object.defineProperty(Sprite2.prototype, "updatePivotPoint", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var bounds = this._localBounds;
      if (bounds) {
        var centerX = this.get("centerX");
        if (centerX != null) {
          this._display.pivot.x = bounds.left + relativeToValue(centerX, bounds.right - bounds.left);
        }
        var centerY = this.get("centerY");
        if (centerY != null) {
          this._display.pivot.y = bounds.top + relativeToValue(centerY, bounds.bottom - bounds.top);
        }
      }
    }
  });
  Object.defineProperty(Sprite2.prototype, "_beforeChanged", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      _super.prototype._beforeChanged.call(this);
      this._handleStates();
      if (this.isDirty("tooltip")) {
        var previous = this._prevSettings.tooltip;
        if (previous) {
          previous.dispose();
        }
      }
      if (this.isDirty("layer")) {
        this._display.setLayer(this.get("layer"));
        this.markDirtyLayer();
      }
      if (this.isDirty("tooltipPosition")) {
        var tooltipMoveDp = this._tooltipMoveDp;
        if (tooltipMoveDp) {
          tooltipMoveDp.dispose();
          this._tooltipMoveDp = void 0;
        }
        var tooltipPointerDp = this._tooltipPointerDp;
        if (tooltipPointerDp) {
          tooltipPointerDp.dispose();
          this._tooltipPointerDp = void 0;
        }
        if (this.get("tooltipPosition") == "pointer") {
          this._tooltipPointerDp = new MultiDisposer([
            this.events.on("pointerover", function() {
              _this._tooltipMoveDp = _this.events.on("globalpointermove", function(e) {
                _this.showTooltip(e.point);
              });
            }),
            this.events.on("pointerout", function() {
              var tooltipMoveDp2 = _this._tooltipMoveDp;
              if (tooltipMoveDp2) {
                tooltipMoveDp2.dispose();
                _this._tooltipMoveDp = void 0;
              }
            })
          ]);
        }
      }
    }
  });
  Object.defineProperty(Sprite2.prototype, "_handleStates", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (!this._statesHandled) {
        if (this.isDirty("active")) {
          if (this.get("active")) {
            this.states.applyAnimate("active");
            this.set("ariaChecked", true);
          } else {
            if (!this.isHidden()) {
              this.states.applyAnimate("default");
            }
            this.set("ariaChecked", false);
          }
          this.markDirtyAccessibility();
        }
        if (this.isDirty("disabled")) {
          if (this.get("disabled")) {
            this.states.applyAnimate("disabled");
            this.set("ariaChecked", false);
          } else {
            if (!this.isHidden()) {
              this.states.applyAnimate("default");
            }
            this.set("ariaChecked", true);
          }
          this.markDirtyAccessibility();
        }
        this._statesHandled = true;
      }
    }
  });
  Object.defineProperty(Sprite2.prototype, "_changed", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      _super.prototype._changed.call(this);
      var display = this._display;
      var events = this.events;
      if (this.isDirty("draggable")) {
        var draggable = this.get("draggable");
        if (draggable) {
          this.set("interactive", true);
          this._dragDp = new MultiDisposer([
            events.on("pointerdown", function(ev) {
              _this.dragStart(ev);
            }),
            events.on("globalpointermove", function(ev) {
              _this.dragMove(ev);
            }),
            events.on("globalpointerup", function(ev) {
              _this.dragStop(ev);
            })
          ]);
        } else {
          if (this._dragDp) {
            this._dragDp.dispose();
            this._dragDp = void 0;
          }
        }
        display.cancelTouch = draggable ? true : false;
      }
      if (this.isDirty("tooltipText") || this.isDirty("tooltipHTML")) {
        var tooltipText = this.get("tooltipText");
        var tooltipHTML = this.get("tooltipHTML");
        if (tooltipText || tooltipHTML) {
          if (!this._tooltipDp) {
            this._tooltipDp = new MultiDisposer([
              events.on("pointerover", function() {
                _this.showTooltip();
              }),
              events.on("pointerout", function() {
                if (_this.get("showTooltipOn") != "always") {
                  _this.hideTooltip();
                }
              })
            ]);
          }
        } else {
          if (this._tooltipDp) {
            this._tooltipDp.dispose();
            this._tooltipDp = void 0;
          }
        }
      }
      if (this.isDirty("toggleKey")) {
        var toggleKey_1 = this.get("toggleKey");
        if (toggleKey_1 && toggleKey_1 != "none") {
          this._toggleDp = events.on("click", function() {
            if (!_this._isDragging) {
              _this.set(toggleKey_1, !_this.get(toggleKey_1));
            }
          });
        } else {
          if (this._toggleDp) {
            this._toggleDp.dispose();
            this._toggleDp = void 0;
          }
        }
      }
      if (this.isDirty("opacity")) {
        display.alpha = Math.max(0, this.get("opacity", 1));
      }
      if (this.isDirty("rotation")) {
        this.markDirtyBounds();
        display.angle = this.get("rotation", 0);
      }
      if (this.isDirty("scale")) {
        this.markDirtyBounds();
        display.scale = this.get("scale", 0);
      }
      if (this.isDirty("centerX") || this.isDirty("centerY")) {
        this.markDirtyBounds();
        this.updatePivotPoint();
      }
      if (this.isDirty("visible") || this.isPrivateDirty("visible") || this.isDirty("forceHidden")) {
        if (!this.get("visible") || !this.getPrivate("visible") || this.get("forceHidden")) {
          display.visible = false;
          this.hideTooltip();
        } else {
          display.visible = true;
        }
        this.markDirtyBounds();
        if (this.get("focusable")) {
          this.markDirtyAccessibility();
        }
      }
      if (this.isDirty("width") || this.isDirty("height")) {
        this.markDirtyBounds();
        this._addPercentageSizeChildren();
        var parent_2 = this.parent;
        if (parent_2) {
          if (this.isDirty("width") && this.get("width") instanceof Percent || this.isDirty("height") && this.get("height") instanceof Percent) {
            parent_2.markDirty();
            parent_2._prevWidth = 0;
          }
        }
        this._sizeDirty = true;
      }
      if (this.isDirty("maxWidth") || this.isDirty("maxHeight") || this.isPrivateDirty("width") || this.isPrivateDirty("height") || this.isDirty("minWidth") || this.isDirty("minHeight") || this.isPrivateDirty("maxWidth") || this.isPrivateDirty("maxHeight") || this.isPrivateDirty("minWidth") || this.isPrivateDirty("minHeight")) {
        this.markDirtyBounds();
        this._sizeDirty = true;
      }
      if (this._sizeDirty) {
        this._updateSize();
      }
      if (this.isDirty("wheelable")) {
        var wheelable = this.get("wheelable");
        if (wheelable) {
          this.set("interactive", true);
        }
        display.wheelable = wheelable ? true : false;
      }
      if (this.isDirty("tabindexOrder") || this.isDirty("focusableGroup")) {
        if (this.get("focusable")) {
          this._root._registerTabindexOrder(this);
        } else {
          this._root._unregisterTabindexOrder(this);
        }
      }
      if (this.isDirty("filter")) {
        display.filter = this.get("filter");
      }
      if (this.isDirty("cursorOverStyle")) {
        display.cursorOverStyle = this.get("cursorOverStyle");
      }
      if (this.isDirty("hoverOnFocus")) {
        if (this.get("hoverOnFocus")) {
          this._focusDp = new MultiDisposer([
            events.on("focus", function() {
              _this.showTooltip();
            }),
            events.on("blur", function() {
              _this.hideTooltip();
            })
          ]);
        } else {
          if (this._focusDp) {
            this._focusDp.dispose();
            this._focusDp = void 0;
          }
        }
      }
      if (this.isDirty("focusable")) {
        if (this.get("focusable")) {
          this._root._registerTabindexOrder(this);
        } else {
          this._root._unregisterTabindexOrder(this);
        }
        this.markDirtyAccessibility();
      }
      if (this.isDirty("role") || this.isDirty("ariaLive") || this.isDirty("ariaChecked") || this.isDirty("ariaHidden") || this.isDirty("ariaOrientation") || this.isDirty("ariaValueNow") || this.isDirty("ariaValueMin") || this.isDirty("ariaValueMax") || this.isDirty("ariaValueText") || this.isDirty("ariaLabel") || this.isDirty("ariaControls")) {
        this.markDirtyAccessibility();
      }
      if (this.isDirty("exportable")) {
        display.exportable = this.get("exportable");
      }
      if (this.isDirty("interactive")) {
        var events_1 = this.events;
        if (this.get("interactive")) {
          this._hoverDp = new MultiDisposer([
            events_1.on("click", function(ev) {
              if (isTouchEvent(ev.originalEvent)) {
                if (!_this.getPrivate("touchHovering")) {
                  _this.setTimeout(function() {
                    _this._handleOver();
                    if (_this.get("tooltipText") || _this.get("tooltipHTML")) {
                      _this.showTooltip();
                    }
                    _this.setPrivateRaw("touchHovering", true);
                    _this.events.dispatch("pointerover", {
                      type: "pointerover",
                      target: ev.target,
                      originalEvent: ev.originalEvent,
                      point: ev.point,
                      simulated: ev.simulated
                    });
                  }, 10);
                }
              }
            }),
            events_1.on("globalpointerup", function(ev) {
              if (isTouchEvent(ev.originalEvent)) {
                if (_this.getPrivate("touchHovering")) {
                  _this._handleOut();
                  if (_this.get("tooltipText") || _this.get("tooltipHTML")) {
                    _this.hideTooltip();
                  }
                }
                _this.setPrivateRaw("touchHovering", false);
                _this.events.dispatch("pointerout", {
                  type: "pointerout",
                  target: ev.target,
                  originalEvent: ev.originalEvent,
                  point: ev.point,
                  simulated: ev.simulated
                });
              }
              if (_this._isDown) {
                _this._handleUp(ev);
              }
            }),
            events_1.on("pointerover", function() {
              _this._handleOver();
            }),
            events_1.on("pointerout", function() {
              _this._handleOut();
            }),
            events_1.on("pointerdown", function(e) {
              _this._handleDown(e);
            })
          ]);
        } else {
          this._display.interactive = false;
          if (this._hoverDp) {
            this._hoverDp.dispose();
            this._hoverDp = void 0;
          }
        }
      }
      if (this.isDirty("forceInactive")) {
        this._display.inactive = this.get("forceInactive", false);
      }
      if (this.get("showTooltipOn") == "always" && this._display.visible) {
        this.showTooltip();
      }
    }
  });
  Object.defineProperty(Sprite2.prototype, "dragStart", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(e) {
      this._dragEvent = e;
      this.events.stopParentDispatch();
    }
  });
  Object.defineProperty(Sprite2.prototype, "dragStop", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(e) {
      this._dragEvent = void 0;
      this._dragPoint = void 0;
      this.events.stopParentDispatch();
      if (this._isDragging) {
        this._isDragging = false;
        var type = "dragstop";
        if (this.events.isEnabled(type)) {
          this.events.dispatch(type, {
            type,
            target: this,
            originalEvent: e.originalEvent,
            point: e.point,
            simulated: e.simulated
          });
        }
      }
    }
  });
  Object.defineProperty(Sprite2.prototype, "_handleOver", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (!this.isHidden()) {
        if (this.get("active") && this.states.lookup("hoverActive")) {
          this.states.applyAnimate("hoverActive");
        } else if (this.get("disabled") && this.states.lookup("hoverDisabled")) {
          this.states.applyAnimate("hoverDisabled");
        } else {
          this.states.applyAnimate("hover");
        }
      }
    }
  });
  Object.defineProperty(Sprite2.prototype, "_handleOut", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (!this.isHidden()) {
        if (this.get("active") && this.states.lookup("active")) {
          this.states.applyAnimate("active");
        } else if (this.get("disabled") && this.states.lookup("disabled")) {
          this.states.applyAnimate("disabled");
        } else {
          if (this.states.lookup("hover") || this.states.lookup("hoverActive")) {
            this.states.applyAnimate("default");
          }
        }
      }
    }
  });
  Object.defineProperty(Sprite2.prototype, "_handleUp", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(e) {
      if (!this.isHidden()) {
        if (this.get("active") && this.states.lookup("active")) {
          this.states.applyAnimate("active");
        } else if (this.get("disabled") && this.states.lookup("disabled")) {
          this.states.applyAnimate("disabled");
        } else if (this.states.lookup("down")) {
          if (this.isHover()) {
            this.states.applyAnimate("hover");
          } else {
            this.states.applyAnimate("default");
          }
        }
        this._downPoint = void 0;
        var pointerId = getPointerId(e.originalEvent);
        delete this._downPoints[pointerId];
        if (keys(this._downPoints).length == 0) {
          this._isDown = false;
        }
      }
    }
  });
  Object.defineProperty(Sprite2.prototype, "_hasMoved", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(e) {
      var pointerId = getPointerId(e.originalEvent);
      var downPoint = this._downPoints[pointerId];
      if (downPoint) {
        var x = Math.abs(downPoint.x - e.point.x);
        var y = Math.abs(downPoint.y - e.point.y);
        return x > 5 || y > 5;
      }
      return false;
    }
  });
  Object.defineProperty(Sprite2.prototype, "_hasDown", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return keys(this._downPoints).length > 0;
    }
  });
  Object.defineProperty(Sprite2.prototype, "_handleDown", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(e) {
      var parent = this.parent;
      if (parent && !this.get("draggable")) {
        parent._handleDown(e);
      }
      if (this.get("interactive") && !this.isHidden()) {
        if (this.states.lookup("down")) {
          this.states.applyAnimate("down");
        }
        this._downPoint = {
          x: e.point.x,
          y: e.point.y
        };
        this._isDown = true;
        var pointerId = getPointerId(e.originalEvent);
        this._downPoints[pointerId] = {
          x: e.point.x,
          y: e.point.y
        };
      }
    }
  });
  Object.defineProperty(Sprite2.prototype, "dragMove", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(e) {
      var dragEvent = this._dragEvent;
      if (dragEvent) {
        var angle = 0;
        var parent_3 = this.parent;
        while (parent_3 != null) {
          angle += parent_3.get("rotation", 0);
          parent_3 = parent_3.parent;
        }
        var x = e.point.x - dragEvent.point.x;
        var y = e.point.y - dragEvent.point.y;
        var events = this.events;
        if (dragEvent.simulated && !this._isDragging) {
          this._isDragging = true;
          this._dragEvent = e;
          this._dragPoint = {
            x: this.x(),
            y: this.y()
          };
          var type = "dragstart";
          if (events.isEnabled(type)) {
            events.dispatch(type, {
              type,
              target: this,
              originalEvent: e.originalEvent,
              point: e.point,
              simulated: e.simulated
            });
          }
        }
        if (this._isDragging) {
          var dragPoint = this._dragPoint;
          this.set("x", dragPoint.x + x * cos(angle) + y * sin(angle));
          this.set("y", dragPoint.y + y * cos(angle) - x * sin(angle));
          var type = "dragged";
          if (events.isEnabled(type)) {
            events.dispatch(type, {
              type,
              target: this,
              originalEvent: e.originalEvent,
              point: e.point,
              simulated: e.simulated
            });
          }
        } else {
          if (Math.hypot(x, y) > 5) {
            this._isDragging = true;
            this._dragEvent = e;
            this._dragPoint = {
              x: this.x(),
              y: this.y()
            };
            var type = "dragstart";
            if (events.isEnabled(type)) {
              events.dispatch(type, {
                type,
                target: this,
                originalEvent: e.originalEvent,
                point: e.point,
                simulated: e.simulated
              });
            }
          }
        }
      }
    }
  });
  Object.defineProperty(Sprite2.prototype, "_updateSize", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
    }
  });
  Object.defineProperty(Sprite2.prototype, "_getBounds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._localBounds = this._display.getLocalBounds();
    }
  });
  Object.defineProperty(Sprite2.prototype, "depth", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var self = this.parent;
      var depth = 0;
      while (true) {
        if (self) {
          ++depth;
          self = self.parent;
        } else {
          return depth;
        }
      }
    }
  });
  Object.defineProperty(Sprite2.prototype, "markDirtySize", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._sizeDirty = true;
      this.markDirty();
    }
  });
  Object.defineProperty(Sprite2.prototype, "markDirtyBounds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var display = this._display;
      if (this.get("isMeasured")) {
        this._root._addDirtyBounds(this);
        display.isMeasured = true;
        display.invalidateBounds();
        var parent_4 = this.parent;
        if (parent_4 && this.get("position") != "absolute") {
          if (parent_4.get("width") == null || parent_4.get("height") == null || parent_4.get("layout")) {
            parent_4.markDirtyBounds();
          }
        }
        if (this.get("focusable") && this.isFocus()) {
          this.markDirtyAccessibility();
        }
      }
    }
  });
  Object.defineProperty(Sprite2.prototype, "markDirtyAccessibility", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._root._invalidateAccessibility(this);
    }
  });
  Object.defineProperty(Sprite2.prototype, "markDirtyLayer", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._display.markDirtyLayer(true);
    }
  });
  Object.defineProperty(Sprite2.prototype, "markDirty", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype.markDirty.call(this);
      this.markDirtyLayer();
    }
  });
  Object.defineProperty(Sprite2.prototype, "_updateBounds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var oldBounds = this._adjustedLocalBounds;
      var newBounds;
      if (!this.get("visible") || !this.getPrivate("visible") || this.get("forceHidden")) {
        newBounds = {
          left: 0,
          right: 0,
          top: 0,
          bottom: 0
        };
        this._localBounds = newBounds;
        this._adjustedLocalBounds = newBounds;
      } else {
        this._getBounds();
        this._fixMinBounds(this._localBounds);
        this.updatePivotPoint();
        this._adjustedLocalBounds = this._display.getAdjustedBounds(this._localBounds);
        newBounds = this._adjustedLocalBounds;
      }
      if (!oldBounds || (oldBounds.left !== newBounds.left || oldBounds.top !== newBounds.top || oldBounds.right !== newBounds.right || oldBounds.bottom !== newBounds.bottom)) {
        var eventType = "boundschanged";
        if (this.events.isEnabled(eventType)) {
          this.events.dispatch(eventType, { type: eventType, target: this });
        }
        if (this.parent) {
          this.parent.markDirty();
          this.parent.markDirtyBounds();
        }
      }
    }
  });
  Object.defineProperty(Sprite2.prototype, "_fixMinBounds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(bounds) {
      var minWidth = this.get("minWidth", this.getPrivate("minWidth"));
      var minHeight = this.get("minHeight", this.getPrivate("minHeight"));
      if (isNumber(minWidth)) {
        if (bounds.right - bounds.left < minWidth) {
          bounds.right = bounds.left + minWidth;
        }
      }
      if (isNumber(minHeight)) {
        if (bounds.bottom - bounds.top < minHeight) {
          bounds.bottom = bounds.top + minHeight;
        }
      }
      var privateWidth = this.getPrivate("width");
      var privateHeight = this.getPrivate("height");
      if (isNumber(privateWidth)) {
        bounds.right = bounds.left + privateWidth;
      }
      if (isNumber(privateHeight)) {
        bounds.bottom = bounds.top + privateHeight;
      }
    }
  });
  Object.defineProperty(Sprite2.prototype, "_removeParent", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(parent) {
      if (parent) {
        parent.children.removeValue(this);
        removeFirst(parent._percentageSizeChildren, this);
        removeFirst(parent._percentagePositionChildren, this);
      }
    }
  });
  Object.defineProperty(Sprite2.prototype, "_clearDirty", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._clearDirty.call(this);
      this._sizeDirty = false;
      this._statesHandled = false;
    }
  });
  Object.defineProperty(Sprite2.prototype, "hover", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this.showTooltip();
      this._handleOver();
    }
  });
  Object.defineProperty(Sprite2.prototype, "unhover", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this.hideTooltip();
      this._handleOut();
    }
  });
  Object.defineProperty(Sprite2.prototype, "showTooltip", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(point) {
      var tooltip = this.getTooltip();
      var tooltipText = this.get("tooltipText");
      var tooltipHTML = this.get("tooltipHTML");
      if ((tooltipText || tooltipHTML) && tooltip) {
        var tooltipPosition = this.get("tooltipPosition");
        var tooltipTarget = this.getPrivate("tooltipTarget", this);
        if (tooltipPosition == "fixed" || !point) {
          this._display._setMatrix();
          point = this.toGlobal(tooltipTarget._getTooltipPoint());
        }
        tooltip.set("pointTo", point);
        tooltip.set("tooltipTarget", tooltipTarget);
        if (!tooltip.get("x")) {
          tooltip.set("x", point.x);
        }
        if (!tooltip.get("y")) {
          tooltip.set("y", point.y);
        }
        if (tooltipText) {
          tooltip.label.set("text", tooltipText);
        }
        if (tooltipHTML) {
          tooltip.label.set("html", tooltipHTML);
        }
        var dataItem = this.dataItem;
        if (dataItem) {
          tooltip.label._setDataItem(dataItem);
        }
        if (this.get("showTooltipOn") == "always" && (point.x < 0 || point.x > this._root.width() || point.y < 0 || point.y > this._root.height())) {
          this.hideTooltip();
          return;
        }
        tooltip.label.text.markDirtyText();
        var promise = tooltip.show();
        this.setPrivateRaw("showingTooltip", true);
        return promise;
      }
    }
  });
  Object.defineProperty(Sprite2.prototype, "hideTooltip", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var tooltip = this.getTooltip();
      if (tooltip) {
        var promise = tooltip.hide();
        this.setPrivateRaw("showingTooltip", false);
        return promise;
      }
    }
  });
  Object.defineProperty(Sprite2.prototype, "_getTooltipPoint", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var bounds = this._localBounds;
      if (bounds) {
        var x = 0;
        var y = 0;
        if (!this.get("isMeasured")) {
          x = relativeToValue(this.get("tooltipX", 0), this.width());
          y = relativeToValue(this.get("tooltipY", 0), this.height());
        } else {
          x = bounds.left + relativeToValue(this.get("tooltipX", 0), bounds.right - bounds.left);
          y = bounds.top + relativeToValue(this.get("tooltipY", 0), bounds.bottom - bounds.top);
        }
        return { x, y };
      }
      return { x: 0, y: 0 };
    }
  });
  Object.defineProperty(Sprite2.prototype, "getTooltip", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var tooltip = this.get("tooltip");
      if (!tooltip) {
        var parent_5 = this.parent;
        if (parent_5) {
          return parent_5.getTooltip();
        }
      } else {
        return tooltip;
      }
    }
  });
  Object.defineProperty(Sprite2.prototype, "_updatePosition", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var parent = this.parent;
      var dx = this.get("dx", 0);
      var dy = this.get("dy", 0);
      var x = this.get("x");
      var _x = this.getPrivate("x");
      var xx = 0;
      var yy = 0;
      var position = this.get("position");
      if (x instanceof Percent) {
        if (parent) {
          x = parent.innerWidth() * x.value + parent.get("paddingLeft", 0);
        } else {
          x = 0;
        }
      }
      if (isNumber(x)) {
        xx = x + dx;
      } else {
        if (_x != null) {
          xx = _x;
        } else if (parent) {
          if (position == "relative") {
            xx = parent.get("paddingLeft", 0) + dx;
          }
        }
      }
      var y = this.get("y");
      var _y = this.getPrivate("y");
      if (y instanceof Percent) {
        if (parent) {
          y = parent.innerHeight() * y.value + parent.get("paddingTop", 0);
        } else {
          y = 0;
        }
      }
      if (isNumber(y)) {
        yy = y + dy;
      } else {
        if (_y != null) {
          yy = _y;
        } else if (parent) {
          if (position == "relative") {
            yy = parent.get("paddingTop", 0) + dy;
          }
        }
      }
      var display = this._display;
      if (display.x != xx || display.y != yy) {
        display.invalidateBounds();
        display.x = xx;
        display.y = yy;
        var eventType = "positionchanged";
        if (this.events.isEnabled(eventType)) {
          this.events.dispatch(eventType, { type: eventType, target: this });
        }
      }
      if (this.getPrivate("showingTooltip")) {
        this.showTooltip();
      }
    }
  });
  Object.defineProperty(Sprite2.prototype, "x", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var x = this.get("x");
      var _x = this.getPrivate("x");
      var parent = this.parent;
      if (parent) {
        if (x instanceof Percent) {
          return relativeToValue(x, parent.innerWidth()) + parent.get("paddingLeft", 0);
        } else {
          if (!isNumber(x)) {
            if (_x != null) {
              return _x;
            } else {
              return parent.get("paddingLeft", this._display.x);
            }
          } else {
            return x;
          }
        }
      }
      return this._display.x;
    }
  });
  Object.defineProperty(Sprite2.prototype, "y", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _y = this.getPrivate("y");
      if (_y != null) {
        return _y;
      }
      var y = this.get("y");
      var parent = this.parent;
      if (parent) {
        if (y instanceof Percent) {
          return relativeToValue(y, parent.innerHeight()) + parent.get("paddingTop", 0);
        } else {
          if (!isNumber(y)) {
            if (_y != null) {
              return _y;
            } else {
              return parent.get("paddingTop", this._display.y);
            }
          } else {
            return y;
          }
        }
      }
      return this._display.y;
    }
  });
  Object.defineProperty(Sprite2.prototype, "_dispose", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._dispose.call(this);
      this._display.dispose();
      this._removeTemplateField();
      this._removeParent(this.parent);
      this._root._removeFocusElement(this);
      var tooltip = this.get("tooltip");
      if (tooltip) {
        tooltip.dispose();
      }
      this.markDirty();
    }
  });
  Object.defineProperty(Sprite2.prototype, "adjustedLocalBounds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._fixMinBounds(this._adjustedLocalBounds);
      return this._adjustedLocalBounds;
    }
  });
  Object.defineProperty(Sprite2.prototype, "localBounds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this._localBounds;
    }
  });
  Object.defineProperty(Sprite2.prototype, "bounds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var bounds = this._adjustedLocalBounds;
      var x = this.x();
      var y = this.y();
      return { left: bounds.left + x, right: bounds.right + x, top: bounds.top + y, bottom: bounds.bottom + y };
    }
  });
  Object.defineProperty(Sprite2.prototype, "globalBounds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var bounds = this.localBounds();
      var p02 = this.toGlobal({ x: bounds.left, y: bounds.top });
      var p1 = this.toGlobal({ x: bounds.right, y: bounds.top });
      var p2 = this.toGlobal({ x: bounds.right, y: bounds.bottom });
      var p3 = this.toGlobal({ x: bounds.left, y: bounds.bottom });
      return {
        left: Math.min(p02.x, p1.x, p2.x, p3.x),
        top: Math.min(p02.y, p1.y, p2.y, p3.y),
        right: Math.max(p02.x, p1.x, p2.x, p3.x),
        bottom: Math.max(p02.y, p1.y, p2.y, p3.y)
      };
    }
  });
  Object.defineProperty(Sprite2.prototype, "_onShow", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(_duration) {
    }
  });
  Object.defineProperty(Sprite2.prototype, "_onHide", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(_duration) {
    }
  });
  Object.defineProperty(Sprite2.prototype, "appear", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(duration, delay) {
      return __awaiter(this, void 0, void 0, function() {
        var _this = this;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.hide(0)];
            case 1:
              _a.sent();
              if (delay) {
                return [2, new Promise(function(success, _error) {
                  _this.setTimeout(function() {
                    success(_this.show(duration));
                  }, delay);
                })];
              } else {
                return [2, this.show(duration)];
              }
              return [2];
          }
        });
      });
    }
  });
  Object.defineProperty(Sprite2.prototype, "show", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(duration) {
      return __awaiter(this, void 0, void 0, function() {
        var animations;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!!this._isShowing)
                return [3, 2];
              this._isHidden = false;
              this._isShowing = true;
              this._isHiding = false;
              if (this.states.lookup("default").get("visible")) {
                this.set("visible", true);
              }
              this._onShow(duration);
              animations = this.states.applyAnimate("default", duration);
              return [4, waitForAnimations(animations)];
            case 1:
              _a.sent();
              this._isShowing = false;
              _a.label = 2;
            case 2:
              return [2];
          }
        });
      });
    }
  });
  Object.defineProperty(Sprite2.prototype, "hide", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(duration) {
      return __awaiter(this, void 0, void 0, function() {
        var state, animations;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!(!this._isHiding && !this._isHidden))
                return [3, 2];
              this._isHiding = true;
              this._isShowing = false;
              state = this.states.lookup("hidden");
              if (!state) {
                state = this.states.create("hidden", {
                  "opacity": 0,
                  "visible": false
                });
              }
              this._isHidden = true;
              this._onHide(duration);
              animations = this.states.applyAnimate("hidden", duration);
              return [4, waitForAnimations(animations)];
            case 1:
              _a.sent();
              this._isHiding = false;
              _a.label = 2;
            case 2:
              return [2];
          }
        });
      });
    }
  });
  Object.defineProperty(Sprite2.prototype, "isHidden", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this._isHidden;
    }
  });
  Object.defineProperty(Sprite2.prototype, "isShowing", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this._isShowing;
    }
  });
  Object.defineProperty(Sprite2.prototype, "isHiding", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this._isHiding;
    }
  });
  Object.defineProperty(Sprite2.prototype, "isHover", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this._display.hovering();
    }
  });
  Object.defineProperty(Sprite2.prototype, "isFocus", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this._root.focused(this);
    }
  });
  Object.defineProperty(Sprite2.prototype, "isDragging", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this._isDragging;
    }
  });
  Object.defineProperty(Sprite2.prototype, "isVisible", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (this.get("visible") && this.getPrivate("visible") && !this.get("forceHidden")) {
        return true;
      }
      return false;
    }
  });
  Object.defineProperty(Sprite2.prototype, "isVisibleDeep", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this._parent ? this._parent.isVisibleDeep() && this.isVisible() : this.isVisible();
    }
  });
  Object.defineProperty(Sprite2.prototype, "compositeOpacity", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var opacity = this.get("opacity", 1);
      return this._parent ? this._parent.compositeOpacity() * opacity : opacity;
    }
  });
  Object.defineProperty(Sprite2.prototype, "width", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var width = this.get("width");
      var maxWidth = this.get("maxWidth", this.getPrivate("maxWidth"));
      var minWidth = this.get("minWidth", this.getPrivate("minWidth"));
      var privateWidth = this.getPrivate("width");
      var w = 0;
      if (isNumber(privateWidth)) {
        w = privateWidth;
      } else {
        if (width == null) {
          if (this._adjustedLocalBounds) {
            w = this._adjustedLocalBounds.right - this._adjustedLocalBounds.left;
          }
        } else {
          if (width instanceof Percent) {
            var parent_6 = this.parent;
            if (parent_6) {
              w = parent_6.innerWidth() * width.value;
            } else {
              w = this._root.width() * width.value;
            }
          } else if (isNumber(width)) {
            w = width;
          }
        }
      }
      if (isNumber(minWidth)) {
        w = Math.max(minWidth, w);
      }
      if (isNumber(maxWidth)) {
        w = Math.min(maxWidth, w);
      }
      return w;
    }
  });
  Object.defineProperty(Sprite2.prototype, "maxWidth", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var maxWidth = this.get("maxWidth", this.getPrivate("maxWidth"));
      if (isNumber(maxWidth)) {
        return maxWidth;
      } else {
        var width = this.get("width");
        if (isNumber(width)) {
          return width;
        }
      }
      var parent = this.parent;
      if (parent) {
        return parent.innerWidth();
      }
      return this._root.width();
    }
  });
  Object.defineProperty(Sprite2.prototype, "maxHeight", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var maxHeight = this.get("maxHeight", this.getPrivate("maxHeight"));
      if (isNumber(maxHeight)) {
        return maxHeight;
      } else {
        var height = this.get("height");
        if (isNumber(height)) {
          return height;
        }
      }
      var parent = this.parent;
      if (parent) {
        return parent.innerHeight();
      }
      return this._root.height();
    }
  });
  Object.defineProperty(Sprite2.prototype, "height", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var height = this.get("height");
      var maxHeight = this.get("maxHeight", this.getPrivate("maxHeight"));
      var minHeight = this.get("minHeight", this.getPrivate("minHeight"));
      var privateHeight = this.getPrivate("height");
      var h = 0;
      if (isNumber(privateHeight)) {
        h = privateHeight;
      } else {
        if (height == null) {
          if (this._adjustedLocalBounds) {
            h = this._adjustedLocalBounds.bottom - this._adjustedLocalBounds.top;
          }
        } else {
          if (height instanceof Percent) {
            var parent_7 = this.parent;
            if (parent_7) {
              h = parent_7.innerHeight() * height.value;
            } else {
              h = this._root.height() * height.value;
            }
          } else if (isNumber(height)) {
            h = height;
          }
        }
      }
      if (isNumber(minHeight)) {
        h = Math.max(minHeight, h);
      }
      if (isNumber(maxHeight)) {
        h = Math.min(maxHeight, h);
      }
      return h;
    }
  });
  Object.defineProperty(Sprite2.prototype, "_findStaticTemplate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(f) {
      if (this._templateField && f(this._templateField)) {
        return this._templateField;
      }
      return _super.prototype._findStaticTemplate.call(this, f);
    }
  });
  Object.defineProperty(Sprite2.prototype, "_walkParents", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(f) {
      if (this._parent) {
        this._walkParent(f);
      }
    }
  });
  Object.defineProperty(Sprite2.prototype, "_walkParent", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(f) {
      if (this._parent) {
        this._parent._walkParent(f);
      }
      f(this);
    }
  });
  Object.defineProperty(Sprite2.prototype, "parent", {
    get: function() {
      return this._parent;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Sprite2.prototype, "_setParent", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(parent, updateChildren) {
      if (updateChildren === void 0) {
        updateChildren = false;
      }
      var prevParent = this._parent;
      if (parent !== prevParent) {
        this.markDirtyBounds();
        parent.markDirty();
        this._parent = parent;
        if (updateChildren) {
          this._removeParent(prevParent);
          if (parent) {
            this._addPercentageSizeChildren();
            this._addPercentagePositionChildren();
          }
        }
        this.markDirtyPosition();
        this._applyThemes();
      }
    }
  });
  Object.defineProperty(Sprite2.prototype, "getNumberFormatter", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this.get("numberFormatter", this._root.numberFormatter);
    }
  });
  Object.defineProperty(Sprite2.prototype, "getDateFormatter", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this.get("dateFormatter", this._root.dateFormatter);
    }
  });
  Object.defineProperty(Sprite2.prototype, "getDurationFormatter", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this.get("durationFormatter", this._root.durationFormatter);
    }
  });
  Object.defineProperty(Sprite2.prototype, "toGlobal", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(point) {
      return this._display.toGlobal(point);
    }
  });
  Object.defineProperty(Sprite2.prototype, "toLocal", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(point) {
      return this._display.toLocal(point);
    }
  });
  Object.defineProperty(Sprite2.prototype, "_getDownPoint", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var id = this._getDownPointId();
      if (id) {
        return this._downPoints[id];
      }
    }
  });
  Object.defineProperty(Sprite2.prototype, "_getDownPointId", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (this._downPoints) {
        return keysOrdered(this._downPoints, function(a, b) {
          if (a > b) {
            return 1;
          }
          if (a < b) {
            return -1;
          }
          return 0;
        })[0];
      }
    }
  });
  Object.defineProperty(Sprite2.prototype, "toFront", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var parent = this.parent;
      if (parent) {
        parent.children.moveValue(this, parent.children.length - 1);
      }
    }
  });
  Object.defineProperty(Sprite2.prototype, "toBack", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var parent = this.parent;
      if (parent) {
        parent.children.moveValue(this, 0);
      }
    }
  });
  Object.defineProperty(Sprite2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Sprite"
  });
  Object.defineProperty(Sprite2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Entity.classNames.concat([Sprite2.className])
  });
  return Sprite2;
}(Entity);

// node_modules/@amcharts/amcharts5/.internal/core/render/backend/Renderer.js
var BlendMode;
(function(BlendMode2) {
  BlendMode2["ADD"] = "lighter";
  BlendMode2["COLOR"] = "color";
  BlendMode2["COLOR_BURN"] = "color-burn";
  BlendMode2["COLOR_DODGE"] = "color-dodge";
  BlendMode2["DARKEN"] = "darken";
  BlendMode2["DIFFERENCE"] = "difference";
  BlendMode2["DST_OVER"] = "destination-over";
  BlendMode2["EXCLUSION"] = "exclusion";
  BlendMode2["HARD_LIGHT"] = "hard-light";
  BlendMode2["HUE"] = "hue";
  BlendMode2["LIGHTEN"] = "lighten";
  BlendMode2["LUMINOSITY"] = "luminosity";
  BlendMode2["MULTIPLY"] = "multiply";
  BlendMode2["NORMAL"] = "source-over";
  BlendMode2["OVERLAY"] = "overlay";
  BlendMode2["SATURATION"] = "saturation";
  BlendMode2["SCREEN"] = "screen";
  BlendMode2["SOFT_LIGHT"] = "soft-light";
  BlendMode2["SRC_ATOP"] = "source-atop";
  BlendMode2["XOR"] = "xor";
})(BlendMode || (BlendMode = {}));

// node_modules/@amcharts/amcharts5/.internal/core/render/Graphics.js
var Graphics = function(_super) {
  __extends(Graphics2, _super);
  function Graphics2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    Object.defineProperty(_this, "_display", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this._root._renderer.makeGraphics()
    });
    Object.defineProperty(_this, "_clear", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    return _this;
  }
  Object.defineProperty(Graphics2.prototype, "_beforeChanged", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      _super.prototype._beforeChanged.call(this);
      if (this.isDirty("draw") || this.isDirty("svgPath")) {
        this.markDirtyBounds();
      }
      if (this.isDirty("fill") || this.isDirty("stroke") || this.isDirty("visible") || this.isDirty("forceHidden") || this.isDirty("fillGradient") || this.isDirty("strokeGradient") || this.isDirty("fillPattern") || this.isDirty("strokePattern") || this.isDirty("fillOpacity") || this.isDirty("strokeOpacity") || this.isDirty("strokeWidth") || this.isDirty("draw") || this.isDirty("blendMode") || this.isDirty("strokeDasharray") || this.isDirty("strokeDashoffset") || this.isDirty("svgPath") || this.isDirty("lineJoin") || this.isDirty("shadowColor") || this.isDirty("shadowBlur") || this.isDirty("shadowOffsetX") || this.isDirty("shadowOffsetY")) {
        this._clear = true;
      }
      if (this.isDirty("fillGradient")) {
        var gradient = this.get("fillGradient");
        if (gradient) {
          this._display.isMeasured = true;
          var gradientTarget = gradient.get("target");
          if (gradientTarget) {
            this._disposers.push(gradientTarget.events.on("boundschanged", function() {
              _this._markDirtyKey("fill");
            }));
            this._disposers.push(gradientTarget.events.on("positionchanged", function() {
              _this._markDirtyKey("fill");
            }));
          }
        }
      }
      if (this.isDirty("strokeGradient")) {
        var gradient = this.get("strokeGradient");
        if (gradient) {
          this._display.isMeasured = true;
          var gradientTarget = gradient.get("target");
          if (gradientTarget) {
            this._disposers.push(gradientTarget.events.on("boundschanged", function() {
              _this._markDirtyKey("stroke");
            }));
            this._disposers.push(gradientTarget.events.on("positionchanged", function() {
              _this._markDirtyKey("stroke");
            }));
          }
        }
      }
    }
  });
  Object.defineProperty(Graphics2.prototype, "_changed", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._changed.call(this);
      if (this._clear) {
        this.markDirtyLayer();
        this._display.clear();
        var strokeDasharray = this.get("strokeDasharray");
        if (isNumber(strokeDasharray)) {
          if (strokeDasharray < 0.5) {
            strokeDasharray = [0];
          } else {
            strokeDasharray = [strokeDasharray];
          }
        }
        this._display.setLineDash(strokeDasharray);
        var strokeDashoffset = this.get("strokeDashoffset");
        if (strokeDashoffset) {
          this._display.setLineDashOffset(strokeDashoffset);
        }
        var blendMode = this.get("blendMode", BlendMode.NORMAL);
        this._display.blendMode = blendMode;
        var draw = this.get("draw");
        if (draw) {
          draw(this._display, this);
        }
        var svgPath = this.get("svgPath");
        if (svgPath != null) {
          this._display.svgPath(svgPath);
        }
      }
    }
  });
  Object.defineProperty(Graphics2.prototype, "_afterChanged", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._afterChanged.call(this);
      if (this._clear) {
        var fill_1 = this.get("fill");
        var fillGradient = this.get("fillGradient");
        var fillPattern = this.get("fillPattern");
        var fillOpacity_1 = this.get("fillOpacity");
        var stroke_1 = this.get("stroke");
        var strokeGradient = this.get("strokeGradient");
        var strokePattern = this.get("strokePattern");
        var shadowColor = this.get("shadowColor");
        var shadowBlur = this.get("shadowBlur");
        var shadowOffsetX = this.get("shadowOffsetX");
        var shadowOffsetY = this.get("shadowOffsetY");
        var shadowOpacity = this.get("shadowOpacity");
        if (shadowColor && (shadowBlur || shadowOffsetX || shadowOffsetY)) {
          this._display.shadow(shadowColor, shadowBlur, shadowOffsetX, shadowOffsetY, shadowOpacity);
        }
        if (fillPattern) {
          var changed = false;
          if (fill_1 && (!fillPattern.get("fill") || fillPattern.get("fillInherited"))) {
            fillPattern.set("fill", fill_1);
            fillPattern.set("fillInherited", true);
            changed = true;
          }
          if (stroke_1 && (!fillPattern.get("color") || fillPattern.get("colorInherited"))) {
            fillPattern.set("color", stroke_1);
            fillPattern.set("colorInherited", true);
            changed = true;
          }
          if (changed) {
            fillPattern._changed();
          }
          var pattern = fillPattern.pattern;
          if (pattern) {
            this._display.beginFill(pattern, fillOpacity_1);
            this._display.endFill();
          }
        } else if (fillGradient) {
          if (fill_1) {
            var stops = fillGradient.get("stops", []);
            if (stops.length) {
              each(stops, function(stop) {
                if ((!stop.color || stop.colorInherited) && fill_1) {
                  stop.color = fill_1;
                  stop.colorInherited = true;
                }
                if (stop.opacity == null || stop.opacityInherited) {
                  stop.opacity = fillOpacity_1;
                  stop.opacityInherited = true;
                }
              });
            }
          }
          var gradient = fillGradient.getFill(this);
          if (gradient) {
            this._display.beginFill(gradient, fillOpacity_1);
            this._display.endFill();
          }
        } else if (fill_1) {
          this._display.beginFill(fill_1, fillOpacity_1);
          this._display.endFill();
        }
        if (stroke_1 || strokeGradient || strokePattern) {
          var strokeOpacity_1 = this.get("strokeOpacity");
          var strokeWidth = this.get("strokeWidth", 1);
          var lineJoin = this.get("lineJoin");
          if (strokePattern) {
            var changed = false;
            if (stroke_1 && (!strokePattern.get("color") || strokePattern.get("colorInherited"))) {
              strokePattern.set("color", stroke_1);
              strokePattern.set("colorInherited", true);
              changed = true;
            }
            if (changed) {
              strokePattern._changed();
            }
            var pattern = strokePattern.pattern;
            if (pattern) {
              this._display.lineStyle(strokeWidth, pattern, strokeOpacity_1, lineJoin);
              this._display.endStroke();
            }
          } else if (strokeGradient) {
            var stops = strokeGradient.get("stops", []);
            if (stops.length) {
              each(stops, function(stop) {
                if ((!stop.color || stop.colorInherited) && stroke_1) {
                  stop.color = stroke_1;
                  stop.colorInherited = true;
                }
                if (stop.opacity == null || stop.opacityInherited) {
                  stop.opacity = strokeOpacity_1;
                  stop.opacityInherited = true;
                }
              });
            }
            var gradient = strokeGradient.getFill(this);
            if (gradient) {
              this._display.lineStyle(strokeWidth, gradient, strokeOpacity_1, lineJoin);
              this._display.endStroke();
            }
          } else if (stroke_1) {
            this._display.lineStyle(strokeWidth, stroke_1, strokeOpacity_1, lineJoin);
            this._display.endStroke();
          }
        }
      }
      this._clear = false;
    }
  });
  Object.defineProperty(Graphics2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Graphics"
  });
  Object.defineProperty(Graphics2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Sprite.classNames.concat([Graphics2.className])
  });
  return Graphics2;
}(Sprite);

// node_modules/@amcharts/amcharts5/.internal/core/render/Rectangle.js
var Rectangle = function(_super) {
  __extends(Rectangle2, _super);
  function Rectangle2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(Rectangle2.prototype, "_beforeChanged", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._beforeChanged.call(this);
      if (this.isDirty("width") || this.isDirty("height") || this.isPrivateDirty("width") || this.isPrivateDirty("height")) {
        this._clear = true;
      }
    }
  });
  Object.defineProperty(Rectangle2.prototype, "_changed", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._changed.call(this);
      if (this._clear && !this.get("draw")) {
        this._draw();
      }
    }
  });
  Object.defineProperty(Rectangle2.prototype, "_draw", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._display.drawRect(0, 0, this.width(), this.height());
    }
  });
  Object.defineProperty(Rectangle2.prototype, "_updateSize", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this.markDirty();
      this._clear = true;
    }
  });
  Object.defineProperty(Rectangle2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Rectangle"
  });
  Object.defineProperty(Rectangle2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Graphics.classNames.concat([Rectangle2.className])
  });
  return Rectangle2;
}(Graphics);

// node_modules/@amcharts/amcharts5/.internal/core/render/Layout.js
function eachChildren(container, f) {
  if (container.get("reverseChildren", false)) {
    container.children.eachReverse(f);
  } else {
    container.children.each(f);
  }
}
var Layout = function(_super) {
  __extends(Layout2, _super);
  function Layout2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(Layout2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Layout"
  });
  Object.defineProperty(Layout2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Entity.classNames.concat([Layout2.className])
  });
  return Layout2;
}(Entity);

// node_modules/@amcharts/amcharts5/.internal/core/render/HorizontalLayout.js
var HorizontalLayout = function(_super) {
  __extends(HorizontalLayout2, _super);
  function HorizontalLayout2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(HorizontalLayout2.prototype, "updateContainer", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(container) {
      var paddingLeft = container.get("paddingLeft", 0);
      var availableWidth = container.innerWidth();
      var totalPercent = 0;
      eachChildren(container, function(child) {
        if (child.isVisible()) {
          if (child.get("position") == "relative") {
            var childWidth = child.get("width");
            if (childWidth instanceof Percent) {
              totalPercent += childWidth.value;
              var w = availableWidth * childWidth.value;
              var minWidth = child.get("minWidth", child.getPrivate("minWidth", -Infinity));
              if (minWidth > w) {
                availableWidth -= minWidth;
                totalPercent -= childWidth.value;
              }
              var maxWidth = child.get("maxWidth", child.getPrivate("maxWidth", Infinity));
              if (w > maxWidth) {
                availableWidth -= maxWidth;
                totalPercent -= childWidth.value;
              }
            } else {
              if (!isNumber(childWidth)) {
                childWidth = child.width();
              }
              availableWidth -= childWidth + child.get("marginLeft", 0) + child.get("marginRight", 0);
            }
          }
        }
      });
      if (availableWidth < 0) {
        availableWidth = 0.01;
      }
      eachChildren(container, function(child) {
        if (child.isVisible()) {
          if (child.get("position") == "relative") {
            var childWidth = child.get("width");
            if (childWidth instanceof Percent) {
              var privateWidth = availableWidth * childWidth.value / totalPercent - child.get("marginLeft", 0) - child.get("marginRight", 0);
              var minWidth = child.get("minWidth", child.getPrivate("minWidth", -Infinity));
              var maxWidth = child.get("maxWidth", child.getPrivate("maxWidth", Infinity));
              privateWidth = Math.min(Math.max(minWidth, privateWidth), maxWidth);
              child.setPrivate("width", privateWidth);
            }
          }
        }
      });
      var prevX = paddingLeft;
      eachChildren(container, function(child) {
        if (child.get("position") == "relative") {
          if (child.isVisible()) {
            var bounds = child.adjustedLocalBounds();
            var marginLeft = child.get("marginLeft", 0);
            var marginRight = child.get("marginRight", 0);
            var x = prevX + marginLeft - bounds.left;
            child.setPrivate("x", x);
            prevX = x + bounds.right + marginRight;
          } else {
            child.setPrivate("x", void 0);
          }
        }
      });
    }
  });
  Object.defineProperty(HorizontalLayout2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "HorizontalLayout"
  });
  Object.defineProperty(HorizontalLayout2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Layout.classNames.concat([HorizontalLayout2.className])
  });
  return HorizontalLayout2;
}(Layout);

// node_modules/@amcharts/amcharts5/.internal/core/render/VerticalLayout.js
var VerticalLayout = function(_super) {
  __extends(VerticalLayout2, _super);
  function VerticalLayout2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(VerticalLayout2.prototype, "updateContainer", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(container) {
      var paddingTop = container.get("paddingTop", 0);
      var availableHeight = container.innerHeight();
      var totalPercent = 0;
      eachChildren(container, function(child) {
        if (child.isVisible()) {
          if (child.get("position") == "relative") {
            var childHeight = child.get("height");
            if (childHeight instanceof Percent) {
              totalPercent += childHeight.value;
              var h = availableHeight * childHeight.value;
              var minHeight = child.get("minHeight", child.getPrivate("minHeight", -Infinity));
              if (minHeight > h) {
                availableHeight -= minHeight;
                totalPercent -= childHeight.value;
              }
              var maxHeight = child.get("maxHeight", child.getPrivate("maxHeight", Infinity));
              if (h > maxHeight) {
                availableHeight -= maxHeight;
                totalPercent -= childHeight.value;
              }
            } else {
              if (!isNumber(childHeight)) {
                childHeight = child.height();
              }
              availableHeight -= childHeight + child.get("marginTop", 0) + child.get("marginBottom", 0);
            }
          }
        }
      });
      if (availableHeight < 0) {
        availableHeight = 0.01;
      }
      eachChildren(container, function(child) {
        if (child.isVisible()) {
          if (child.get("position") == "relative") {
            var childHeight = child.get("height");
            if (childHeight instanceof Percent) {
              var privateHeight = availableHeight * childHeight.value / totalPercent - child.get("marginTop", 0) - child.get("marginBottom", 0);
              var minHeight = child.get("minHeight", child.getPrivate("minHeight", -Infinity));
              var maxHeight = child.get("maxHeight", child.getPrivate("maxHeight", Infinity));
              privateHeight = Math.min(Math.max(minHeight, privateHeight), maxHeight);
              child.setPrivate("height", privateHeight);
            }
          }
        }
      });
      var prevY = paddingTop;
      eachChildren(container, function(child) {
        if (child.get("position") == "relative") {
          if (child.isVisible()) {
            var bounds = child.adjustedLocalBounds();
            var marginTop = child.get("marginTop", 0);
            var marginBottom = child.get("marginBottom", 0);
            var y = prevY + marginTop - bounds.top;
            child.setPrivate("y", y);
            prevY = y + bounds.bottom + marginBottom;
          } else {
            child.setPrivate("y", void 0);
          }
        }
      });
    }
  });
  Object.defineProperty(VerticalLayout2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "VerticalLayout"
  });
  Object.defineProperty(VerticalLayout2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Layout.classNames.concat([VerticalLayout2.className])
  });
  return VerticalLayout2;
}(Layout);

// node_modules/@amcharts/amcharts5/.internal/core/render/GridLayout.js
var GridLayout = function(_super) {
  __extends(GridLayout2, _super);
  function GridLayout2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(GridLayout2.prototype, "_afterNew", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._setRawDefault("maxColumns", Number.MAX_VALUE);
      _super.prototype._afterNew.call(this);
    }
  });
  Object.defineProperty(GridLayout2.prototype, "updateContainer", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(container) {
      var paddingLeft = container.get("paddingLeft", 0);
      var paddingRight = container.get("paddingRight", 0);
      var paddingTop = container.get("paddingTop", 0);
      var availableWidth = container.maxWidth() - paddingLeft - paddingRight;
      var minCellWidth = availableWidth;
      var maxCellWidth = 1;
      eachChildren(container, function(child) {
        if (child.get("visible") && child.getPrivate("visible") && !child.get("forceHidden")) {
          if (child.get("position") != "absolute") {
            var childWidth = child.width();
            if (childWidth < minCellWidth) {
              minCellWidth = childWidth;
            }
            if (childWidth > maxCellWidth) {
              maxCellWidth = childWidth;
            }
          }
        }
      });
      minCellWidth = fitToRange(minCellWidth, 1, availableWidth);
      maxCellWidth = fitToRange(maxCellWidth, 1, availableWidth);
      var columnCount = 1;
      if (this.get("fixedWidthGrid")) {
        columnCount = availableWidth / maxCellWidth;
      } else {
        columnCount = availableWidth / minCellWidth;
      }
      columnCount = Math.max(1, Math.floor(columnCount));
      columnCount = Math.min(this.get("maxColumns", Number.MAX_VALUE), columnCount);
      var columnWidths = this.getColumnWidths(container, columnCount, maxCellWidth, availableWidth);
      var prevY = paddingTop;
      var column = 0;
      var maxColumnHeight = 0;
      columnCount = columnWidths.length;
      var prevX = paddingLeft;
      eachChildren(container, function(child) {
        if (child.get("position") == "relative" && child.isVisible()) {
          var marginTop = child.get("marginTop", 0);
          var marginBottom = child.get("marginBottom", 0);
          var bounds = child.adjustedLocalBounds();
          var marginLeft = child.get("marginLeft", 0);
          var marginRight = child.get("marginRight", 0);
          var x = prevX + marginLeft - bounds.left;
          var y = prevY + marginTop - bounds.top;
          child.setPrivate("x", x);
          child.setPrivate("y", y);
          prevX += columnWidths[column] + marginRight;
          maxColumnHeight = Math.max(maxColumnHeight, child.height() + marginTop + marginBottom);
          column++;
          if (column >= columnCount) {
            column = 0;
            prevX = paddingLeft;
            prevY += maxColumnHeight;
          }
        }
      });
    }
  });
  Object.defineProperty(GridLayout2.prototype, "getColumnWidths", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(container, columnCount, maxCellWidth, availableWidth) {
      var _this = this;
      var totalWidth = 0;
      var columnWidths = [];
      var column = 0;
      eachChildren(container, function(child) {
        var bounds = child.adjustedLocalBounds();
        if (child.get("position") != "absolute" && child.isVisible()) {
          if (_this.get("fixedWidthGrid")) {
            columnWidths[column] = maxCellWidth;
          } else {
            columnWidths[column] = Math.max(columnWidths[column] | 0, bounds.right - bounds.left + child.get("marginLeft", 0) + child.get("marginRight", 0));
          }
          if (column < container.children.length - 1) {
            column++;
            if (column == columnCount) {
              column = 0;
            }
          }
        }
      });
      each(columnWidths, function(w) {
        totalWidth += w;
      });
      if (totalWidth > availableWidth) {
        if (columnCount > 2) {
          columnCount -= 1;
          return this.getColumnWidths(container, columnCount, maxCellWidth, availableWidth);
        } else {
          return [availableWidth];
        }
      }
      return columnWidths;
    }
  });
  Object.defineProperty(GridLayout2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "GridLayout"
  });
  Object.defineProperty(GridLayout2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Layout.classNames.concat([GridLayout2.className])
  });
  return GridLayout2;
}(Layout);

// node_modules/@amcharts/amcharts5/.internal/core/util/TextFormatter.js
var TextFormatter = function() {
  function TextFormatter2() {
  }
  Object.defineProperty(TextFormatter2, "escape", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(text) {
      return text.replace(/\[\[/g, this.prefix + "1").replace(/([^\/\]]{1})\]\]/g, "$1" + this.prefix + "2").replace(/\]\]/g, this.prefix + "2").replace(/\{\{/g, this.prefix + "3").replace(/\}\}/g, this.prefix + "4").replace(/\'\'/g, this.prefix + "5");
    }
  });
  Object.defineProperty(TextFormatter2, "unescape", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(text) {
      return text.replace(new RegExp(this.prefix + "1", "g"), "[[").replace(new RegExp(this.prefix + "2", "g"), "]]").replace(new RegExp(this.prefix + "3", "g"), "{{").replace(new RegExp(this.prefix + "4", "g"), "}}").replace(new RegExp(this.prefix + "5", "g"), "''");
    }
  });
  Object.defineProperty(TextFormatter2, "cleanUp", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(text) {
      return text.replace(/\[\[/g, "[").replace(/\]\]/g, "]").replace(/\{\{/g, "{").replace(/\}\}/g, "}").replace(/\'\'/g, "'");
    }
  });
  Object.defineProperty(TextFormatter2, "chunk", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(text, quotedBlocks, noFormatting) {
      if (quotedBlocks === void 0) {
        quotedBlocks = false;
      }
      if (noFormatting === void 0) {
        noFormatting = false;
      }
      var res = [];
      text = this.escape(text);
      var chunks = quotedBlocks ? text.split("'") : [text];
      for (var i = 0; i < chunks.length; i++) {
        var chunk = chunks[i];
        if (chunk === "") {
          continue;
        }
        if (i % 2 === 0) {
          chunk = chunk.replace(/\]\[/g, "]" + PLACEHOLDER + "[");
          chunk = chunk.replace(/\[\]/g, "[ ]");
          var chunks2 = chunk.split(/[\[\]]+/);
          for (var i2 = 0; i2 < chunks2.length; i2++) {
            var chunk2 = this.cleanUp(this.unescape(chunks2[i2]));
            if (chunk2 === PLACEHOLDER) {
              continue;
            }
            if (chunk2 === "") {
              continue;
            }
            if (i2 % 2 === 0) {
              res.push({
                "type": "value",
                "text": chunk2
              });
            } else {
              res.push({
                "type": noFormatting ? "value" : "format",
                "text": "[" + chunk2 + "]"
              });
            }
          }
        } else {
          var chunks2 = chunk.split(/[\[\]]+/);
          for (var i2 = 0; i2 < chunks2.length; i2++) {
            var chunk2 = this.cleanUp(this.unescape(chunks2[i2]));
            if (chunk2 === "") {
              continue;
            }
            if (i2 % 2 === 0) {
              res.push({
                "type": "text",
                "text": chunk2
              });
            } else if (this.isImage(chunk2)) {
              res.push({
                "type": "image",
                "text": "[" + chunk2 + "]"
              });
            } else {
              res.push({
                "type": "format",
                "text": "[" + chunk2 + "]"
              });
            }
          }
        }
      }
      return res;
    }
  });
  Object.defineProperty(TextFormatter2, "isImage", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(text) {
      return text.match(/img[ ]?:/) ? true : false;
    }
  });
  Object.defineProperty(TextFormatter2, "getTextStyle", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(style) {
      var format = {};
      if (style == "" || style == "[ ]") {
        return {};
      }
      var q = style.match(/('[^']*')|("[^"]*")/gi);
      if (q) {
        for (var i = 0; i < q.length; i++) {
          style = style.replace(q[i], q[i].replace(/['"]*/g, "").replace(/[ ]+/g, "+"));
        }
      }
      var b = style.match(/([\w\-]*:[\s]?[^;\s\]]*)|(\#[\w]{1,6})|([\w\-]+)|(\/)/gi);
      if (!b) {
        return {};
      }
      for (var i = 0; i < b.length; i++) {
        if (b[i].match(/^(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)$/i)) {
          format.fontWeight = b[i];
        } else if (b[i].match(/^(underline|line-through)$/i)) {
          format.textDecoration = b[i];
        } else if (b[i] == "/") {
        } else if (!b[i].match(/:/)) {
          format.fill = Color.fromString(b[i]);
        } else {
          var p = b[i].replace("+", " ").split(/:[ ]*/);
          format[p[0]] = p[1];
        }
      }
      return format;
    }
  });
  Object.defineProperty(TextFormatter2, "prefix", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "__amcharts__"
  });
  return TextFormatter2;
}();

// node_modules/@amcharts/amcharts5/.internal/core/util/List.js
function checkBounds(index, len) {
  if (!(index >= 0 && index < len)) {
    throw new Error("Index out of bounds: " + index);
  }
}
var List = function() {
  function List2(initial) {
    if (initial === void 0) {
      initial = [];
    }
    Object.defineProperty(this, "_values", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "events", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new EventDispatcher()
    });
    this._values = initial;
  }
  Object.defineProperty(List2.prototype, "values", {
    get: function() {
      return this._values;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(List2.prototype, "contains", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(value) {
      return this._values.indexOf(value) !== -1;
    }
  });
  Object.defineProperty(List2.prototype, "removeValue", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(value) {
      var i = 0;
      var length = this._values.length;
      while (i < length) {
        if (this._values[i] === value) {
          this.removeIndex(i);
          --length;
        } else {
          ++i;
        }
      }
    }
  });
  Object.defineProperty(List2.prototype, "indexOf", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(value) {
      return indexOf(this._values, value);
    }
  });
  Object.defineProperty(List2.prototype, "length", {
    get: function() {
      return this._values.length;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(List2.prototype, "hasIndex", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(index) {
      return index >= 0 && index < this._values.length;
    }
  });
  Object.defineProperty(List2.prototype, "getIndex", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(index) {
      return this._values[index];
    }
  });
  Object.defineProperty(List2.prototype, "_onPush", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(newValue) {
      if (this.events.isEnabled("push")) {
        this.events.dispatch("push", {
          type: "push",
          target: this,
          newValue
        });
      }
    }
  });
  Object.defineProperty(List2.prototype, "_onInsertIndex", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(index, newValue) {
      if (this.events.isEnabled("insertIndex")) {
        this.events.dispatch("insertIndex", {
          type: "insertIndex",
          target: this,
          index,
          newValue
        });
      }
    }
  });
  Object.defineProperty(List2.prototype, "_onSetIndex", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(index, oldValue, newValue) {
      if (this.events.isEnabled("setIndex")) {
        this.events.dispatch("setIndex", {
          type: "setIndex",
          target: this,
          index,
          oldValue,
          newValue
        });
      }
    }
  });
  Object.defineProperty(List2.prototype, "_onRemoveIndex", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(index, oldValue) {
      if (this.events.isEnabled("removeIndex")) {
        this.events.dispatch("removeIndex", {
          type: "removeIndex",
          target: this,
          index,
          oldValue
        });
      }
    }
  });
  Object.defineProperty(List2.prototype, "_onMoveIndex", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(oldIndex, newIndex, value) {
      if (this.events.isEnabled("moveIndex")) {
        this.events.dispatch("moveIndex", {
          type: "moveIndex",
          target: this,
          oldIndex,
          newIndex,
          value
        });
      }
    }
  });
  Object.defineProperty(List2.prototype, "_onClear", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(oldValues) {
      if (this.events.isEnabled("clear")) {
        this.events.dispatch("clear", {
          type: "clear",
          target: this,
          oldValues
        });
      }
    }
  });
  Object.defineProperty(List2.prototype, "setIndex", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(index, value) {
      checkBounds(index, this._values.length);
      var oldValue = this._values[index];
      if (oldValue !== value) {
        this._values[index] = value;
        this._onSetIndex(index, oldValue, value);
      }
      return oldValue;
    }
  });
  Object.defineProperty(List2.prototype, "insertIndex", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(index, value) {
      checkBounds(index, this._values.length + 1);
      insertIndex(this._values, index, value);
      this._onInsertIndex(index, value);
      return value;
    }
  });
  Object.defineProperty(List2.prototype, "swap", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(a, b) {
      var len = this._values.length;
      checkBounds(a, len);
      checkBounds(b, len);
      if (a !== b) {
        var value_a = this._values[a];
        var value_b = this._values[b];
        this._values[a] = value_b;
        this._onSetIndex(a, value_a, value_b);
        this._values[b] = value_a;
        this._onSetIndex(b, value_b, value_a);
      }
    }
  });
  Object.defineProperty(List2.prototype, "removeIndex", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(index) {
      checkBounds(index, this._values.length);
      var oldValue = this._values[index];
      removeIndex(this._values, index);
      this._onRemoveIndex(index, oldValue);
      return oldValue;
    }
  });
  Object.defineProperty(List2.prototype, "moveValue", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(value, toIndex) {
      var index = this.indexOf(value);
      if (index !== -1) {
        removeIndex(this._values, index);
        if (toIndex == null) {
          var toIndex_1 = this._values.length;
          this._values.push(value);
          this._onMoveIndex(index, toIndex_1, value);
        } else {
          insertIndex(this._values, toIndex, value);
          this._onMoveIndex(index, toIndex, value);
        }
      } else if (toIndex == null) {
        this._values.push(value);
        this._onPush(value);
      } else {
        insertIndex(this._values, toIndex, value);
        this._onInsertIndex(toIndex, value);
      }
      return value;
    }
  });
  Object.defineProperty(List2.prototype, "push", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(value) {
      this._values.push(value);
      this._onPush(value);
      return value;
    }
  });
  Object.defineProperty(List2.prototype, "unshift", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(value) {
      this.insertIndex(0, value);
      return value;
    }
  });
  Object.defineProperty(List2.prototype, "pushAll", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(values) {
      var _this = this;
      each(values, function(value) {
        _this.push(value);
      });
    }
  });
  Object.defineProperty(List2.prototype, "copyFrom", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(source) {
      this.pushAll(source._values);
    }
  });
  Object.defineProperty(List2.prototype, "pop", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var index = this._values.length - 1;
      return index < 0 ? void 0 : this.removeIndex(this._values.length - 1);
    }
  });
  Object.defineProperty(List2.prototype, "shift", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this._values.length ? this.removeIndex(0) : void 0;
    }
  });
  Object.defineProperty(List2.prototype, "setAll", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(newArray) {
      var _this = this;
      var old = this._values;
      this._values = [];
      this._onClear(old);
      each(newArray, function(value) {
        _this._values.push(value);
        _this._onPush(value);
      });
    }
  });
  Object.defineProperty(List2.prototype, "clear", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this.setAll([]);
    }
  });
  Object.defineProperty(List2.prototype, Symbol.iterator, {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var length, i;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            length = this._values.length;
            i = 0;
            _a.label = 1;
          case 1:
            if (!(i < length))
              return [3, 4];
            return [4, this._values[i]];
          case 2:
            _a.sent();
            _a.label = 3;
          case 3:
            ++i;
            return [3, 1];
          case 4:
            return [2];
        }
      });
    }
  });
  Object.defineProperty(List2.prototype, "each", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(f) {
      each(this._values, f);
    }
  });
  Object.defineProperty(List2.prototype, "eachReverse", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(f) {
      eachReverse(this._values, f);
    }
  });
  return List2;
}();
var ListAutoDispose = function(_super) {
  __extends(ListAutoDispose2, _super);
  function ListAutoDispose2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    Object.defineProperty(_this, "autoDispose", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true
    });
    Object.defineProperty(_this, "_disposed", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    return _this;
  }
  Object.defineProperty(ListAutoDispose2.prototype, "_onSetIndex", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(index, oldValue, newValue) {
      if (this.autoDispose) {
        oldValue.dispose();
      }
      _super.prototype._onSetIndex.call(this, index, oldValue, newValue);
    }
  });
  Object.defineProperty(ListAutoDispose2.prototype, "_onRemoveIndex", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(index, oldValue) {
      if (this.autoDispose) {
        oldValue.dispose();
      }
      _super.prototype._onRemoveIndex.call(this, index, oldValue);
    }
  });
  Object.defineProperty(ListAutoDispose2.prototype, "_onClear", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(oldValues) {
      if (this.autoDispose) {
        each(oldValues, function(x) {
          x.dispose();
        });
      }
      _super.prototype._onClear.call(this, oldValues);
    }
  });
  Object.defineProperty(ListAutoDispose2.prototype, "isDisposed", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this._disposed;
    }
  });
  Object.defineProperty(ListAutoDispose2.prototype, "dispose", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (!this._disposed) {
        this._disposed = true;
        if (this.autoDispose) {
          each(this._values, function(x) {
            x.dispose();
          });
        }
      }
    }
  });
  return ListAutoDispose2;
}(List);
var ListTemplate = function(_super) {
  __extends(ListTemplate2, _super);
  function ListTemplate2(template, make) {
    var _this = _super.call(this) || this;
    Object.defineProperty(_this, "template", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "make", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    _this.template = template;
    _this.make = make;
    return _this;
  }
  return ListTemplate2;
}(ListAutoDispose);

// node_modules/@amcharts/amcharts5/.internal/core/util/Children.js
var Children = function(_super) {
  __extends(Children2, _super);
  function Children2(container) {
    var _this = _super.call(this) || this;
    Object.defineProperty(_this, "_disposed", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "_container", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_events", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    _this._container = container;
    _this._events = _this.events.onAll(function(change) {
      if (change.type === "clear") {
        each(change.oldValues, function(x) {
          _this._onRemoved(x);
        });
      } else if (change.type === "push") {
        _this._onInserted(change.newValue);
      } else if (change.type === "setIndex") {
        _this._onRemoved(change.oldValue);
        _this._onInserted(change.newValue, change.index);
      } else if (change.type === "insertIndex") {
        _this._onInserted(change.newValue, change.index);
      } else if (change.type === "removeIndex") {
        _this._onRemoved(change.oldValue);
      } else if (change.type === "moveIndex") {
        _this._onRemoved(change.value);
        _this._onInserted(change.value, change.newIndex);
      } else {
        throw new Error("Unknown IListEvent type");
      }
    });
    return _this;
  }
  Object.defineProperty(Children2.prototype, "_onInserted", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(child, index) {
      child._setParent(this._container, true);
      var childrenDisplay = this._container._childrenDisplay;
      if (index === void 0) {
        childrenDisplay.addChild(child._display);
      } else {
        childrenDisplay.addChildAt(child._display, index);
      }
    }
  });
  Object.defineProperty(Children2.prototype, "_onRemoved", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(child) {
      this._container._childrenDisplay.removeChild(child._display);
      this._container.markDirtyBounds();
      this._container.markDirty();
    }
  });
  Object.defineProperty(Children2.prototype, "isDisposed", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this._disposed;
    }
  });
  Object.defineProperty(Children2.prototype, "dispose", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (!this._disposed) {
        this._disposed = true;
        this._events.dispose();
        each(this.values, function(child) {
          child.dispose();
        });
      }
    }
  });
  return Children2;
}(List);

// node_modules/@amcharts/amcharts5/.internal/core/util/PopulateString.js
function populateString(target, string) {
  if (string != null) {
    string = "" + string;
    string = TextFormatter.escape(string);
    var tags = string.match(/\{([^}]+)\}/g);
    var i = void 0;
    if (tags) {
      for (i = 0; i < tags.length; i++) {
        var tag = tags[i].replace(/\{([^}]+)\}/, "$1");
        var value = getTagValue(target, tag, "");
        if (value == null) {
          value = "";
        }
        string = string.split(tags[i]).join(value);
      }
    }
    string = TextFormatter.unescape(string);
  } else {
    string = "";
  }
  return string;
}
function getTagValue(target, tagName, format) {
  var value;
  var dataItem = target.dataItem;
  var parts = [];
  var reg = /([^.]+)\(([^)]*)\)|([^.]+)/g;
  ;
  var matches;
  while (true) {
    matches = reg.exec(tagName);
    if (matches === null) {
      break;
    }
    if (matches[3]) {
      parts.push({
        prop: matches[3]
      });
      var dateFields = target.getDateFormatter().get("dateFields", []);
      var numericFields = target.getNumberFormatter().get("numericFields", []);
      var durationFields = target.getDurationFormatter().get("durationFields", []);
      if (dateFields.indexOf(matches[3]) !== -1) {
        parts.push({
          method: "formatDate",
          params: []
        });
      } else if (numericFields.indexOf(matches[3]) !== -1) {
        parts.push({
          method: "formatNumber",
          params: []
        });
      } else if (durationFields.indexOf(matches[3]) !== -1) {
        parts.push({
          method: "formatDuration",
          params: []
        });
      }
    } else {
      var params = [];
      if (trim(matches[2]) != "") {
        var reg2 = /'([^']*)'|"([^"]*)"|([0-9\-]+)/g;
        var matches2 = void 0;
        while (true) {
          matches2 = reg2.exec(matches[2]);
          if (matches2 === null) {
            break;
          }
          params.push(matches2[1] || matches2[2] || matches2[3]);
        }
      }
      parts.push({
        method: matches[1],
        params
      });
    }
  }
  if (dataItem) {
    value = getTagValueFromObject(target, parts, dataItem._settings);
    if (value == null || isObject(value)) {
      value = getTagValueFromObject(target, parts, dataItem);
    }
    var dataContext = dataItem.dataContext;
    if (value == null && dataContext) {
      value = getTagValueFromObject(target, parts, dataContext);
      if (value == null) {
        value = getTagValueFromObject(target, [{
          prop: tagName
        }], dataContext);
      }
      if (value == null && dataContext.dataContext) {
        value = getTagValueFromObject(target, parts, dataContext.dataContext);
      }
    }
    if (value == null && dataItem.component && dataItem.component.dataItem !== dataItem) {
      value = getTagValue(dataItem.component, tagName, format);
    }
  }
  if (value == null) {
    value = getTagValueFromObject(target, parts, target);
  }
  if (value == null && target.parent) {
    value = getTagValue(target.parent, tagName, format);
  }
  return value;
}
function getCustomDataValue(target, prop) {
  var customData = target.getPrivate("customData");
  if (isObject(customData)) {
    return customData[prop];
  }
}
function getTagValueFromObject(target, parts, object, format) {
  var current = object;
  var formatApplied = false;
  for (var i = 0, len = parts.length; i < len; i++) {
    var part = parts[i];
    if (part.prop) {
      if (current instanceof Sprite) {
        var tmp = current.get(part.prop);
        if (tmp == null)
          tmp = current.getPrivate(part.prop);
        if (tmp == null)
          tmp = current[part.prop];
        if (tmp == null)
          tmp = getCustomDataValue(current, part.prop);
        current = tmp;
      } else if (current.get) {
        var tmp = current.get(part.prop);
        if (tmp == null)
          tmp = current[part.prop];
        current = tmp;
      } else {
        current = current[part.prop];
      }
      if (current == null) {
        return;
      }
    } else {
      switch (part.method) {
        case "formatNumber":
          var numberValue = toNumber(current);
          if (numberValue != null) {
            current = target.getNumberFormatter().format(numberValue, format || part.params[0] || void 0);
            formatApplied = true;
          }
          break;
        case "formatDate":
          var dateValue = toDate(current);
          if (!isDate(dateValue) || isNaN(dateValue.getTime())) {
            return;
          }
          if (dateValue != null) {
            current = target.getDateFormatter().format(dateValue, format || part.params[0] || void 0);
            formatApplied = true;
          }
          break;
        case "formatDuration":
          var durationValue = toNumber(current);
          if (durationValue != null) {
            current = target.getDurationFormatter().format(durationValue, format || part.params[0] || void 0, part.params[1] || void 0);
            formatApplied = true;
          }
          break;
        case "urlEncode":
        case "encodeURIComponent":
          current = encodeURIComponent(current);
          break;
        default:
          if (current[part.method]) {
            current[part.method].apply(object, part.params);
          }
          break;
      }
    }
  }
  if (!formatApplied) {
    var formatParts = [{
      method: "",
      params: format
    }];
    if (format == null) {
      if (isNumber(current)) {
        formatParts[0].method = "formatNumber";
        formatParts[0].params = "";
      } else if (isDate(current)) {
        formatParts[0].method = "formatDate";
        formatParts[0].params = "";
      }
    } else {
      var formatterType = getFormat(format);
      if (formatterType === "number") {
        formatParts[0].method = "formatNumber";
      } else if (formatterType === "date") {
        formatParts[0].method = "formatDate";
      } else if (formatterType === "duration") {
        formatParts[0].method = "formatDuration";
      }
    }
    if (formatParts[0].method) {
      current = getTagValueFromObject(target, formatParts, current);
    }
  }
  return current;
}

// node_modules/@amcharts/amcharts5/.internal/core/render/Container.js
var Container = function(_super) {
  __extends(Container2, _super);
  function Container2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    Object.defineProperty(_this, "_display", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this._root._renderer.makeContainer()
    });
    Object.defineProperty(_this, "_childrenDisplay", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this._root._renderer.makeContainer()
    });
    Object.defineProperty(_this, "children", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new Children(_this)
    });
    Object.defineProperty(_this, "_percentageSizeChildren", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    Object.defineProperty(_this, "_percentagePositionChildren", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    Object.defineProperty(_this, "_prevWidth", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(_this, "_prevHeight", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(_this, "_contentWidth", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(_this, "_contentHeight", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(_this, "_contentMask", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_vsbd0", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_vsbd1", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    return _this;
  }
  Object.defineProperty(Container2.prototype, "_afterNew", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._afterNew.call(this);
      this._display.addChild(this._childrenDisplay);
    }
  });
  Object.defineProperty(Container2.prototype, "_dispose", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      eachReverse(this.allChildren(), function(child) {
        child.dispose();
      });
      if (this.getPrivate("htmlElement")) {
        this._root._removeHTMLContent(this);
      }
      _super.prototype._dispose.call(this);
    }
  });
  Object.defineProperty(Container2.prototype, "_changed", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._changed.call(this);
      if (this.isDirty("interactiveChildren")) {
        this._display.interactiveChildren = this.get("interactiveChildren", false);
      }
      if (this.isDirty("layout")) {
        this._prevWidth = 0;
        this._prevHeight = 0;
        this.markDirtyBounds();
        if (this._prevSettings.layout) {
          this.children.each(function(child) {
            child.removePrivate("x");
            child.removePrivate("y");
          });
        }
      }
      if (this.isDirty("paddingTop") || this.isDirty("paddingBottom") || this.isDirty("paddingLeft") || this.isDirty("paddingRight")) {
        this.children.each(function(child) {
          child.markDirtyPosition();
        });
      }
      if (this.isDirty("maskContent")) {
        var childrenDisplay = this._childrenDisplay;
        var contentMask = this._contentMask;
        if (this.get("maskContent")) {
          if (!contentMask) {
            contentMask = Rectangle.new(this._root, {
              width: this.width(),
              height: this.height()
            });
            this._contentMask = contentMask;
            childrenDisplay.addChildAt(contentMask._display, 0);
            childrenDisplay.mask = contentMask._display;
          }
        } else {
          if (contentMask) {
            childrenDisplay.removeChild(contentMask._display);
            childrenDisplay.mask = null;
            contentMask.dispose();
          }
        }
      }
      if (this.isDirty("html")) {
        var html = this.get("html");
        if (html && html !== "") {
          this._root._setHTMLContent(this, populateString(this, this.get("html", "")));
        } else {
          this._root._removeHTMLContent(this);
        }
      }
    }
  });
  Object.defineProperty(Container2.prototype, "_updateSize", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._updateSize.call(this);
      each(this._percentageSizeChildren, function(child) {
        child._updateSize();
      });
      each(this._percentagePositionChildren, function(child) {
        child.markDirtyPosition();
        child._updateSize();
      });
      this.updateBackground();
    }
  });
  Object.defineProperty(Container2.prototype, "updateBackground", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var background = this.get("background");
      var bounds = this._localBounds;
      if (bounds && !this.isHidden()) {
        var x = bounds.left;
        var y = bounds.top;
        var w = bounds.right - x;
        var h = bounds.bottom - y;
        var width = this.width();
        var height = this.height();
        if (background) {
          background.setAll({ width: w, height: h, x, y });
          if (this._display.interactive) {
            background._display.interactive = true;
          }
        }
        var contentMask = this._contentMask;
        if (contentMask) {
          contentMask.setAll({ width, height });
        }
        var verticalScrollbar = this.get("verticalScrollbar");
        if (verticalScrollbar) {
          verticalScrollbar.set("height", height);
          verticalScrollbar.set("x", width - verticalScrollbar.width() - verticalScrollbar.get("marginRight", 0));
          verticalScrollbar.set("end", verticalScrollbar.get("start", 0) + height / this._contentHeight);
          var bg = verticalScrollbar.get("background");
          if (bg) {
            bg.setAll({ width: verticalScrollbar.width(), height });
          }
          var visible = true;
          if (this._contentHeight <= height) {
            visible = false;
          }
          verticalScrollbar.setPrivate("visible", visible);
        }
      }
    }
  });
  Object.defineProperty(Container2.prototype, "_applyThemes", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (_super.prototype._applyThemes.call(this)) {
        this.eachChildren(function(child) {
          child._applyThemes();
        });
        return true;
      } else {
        return false;
      }
    }
  });
  Object.defineProperty(Container2.prototype, "_applyState", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(name) {
      _super.prototype._applyState.call(this, name);
      if (this.get("setStateOnChildren")) {
        this.eachChildren(function(child) {
          child.states.apply(name);
        });
      }
    }
  });
  Object.defineProperty(Container2.prototype, "_applyStateAnimated", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(name, duration) {
      _super.prototype._applyStateAnimated.call(this, name, duration);
      if (this.get("setStateOnChildren")) {
        this.eachChildren(function(child) {
          child.states.applyAnimate(name, duration);
        });
      }
    }
  });
  Object.defineProperty(Container2.prototype, "innerWidth", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this.width() - this.get("paddingRight", 0) - this.get("paddingLeft", 0);
    }
  });
  Object.defineProperty(Container2.prototype, "innerHeight", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this.height() - this.get("paddingTop", 0) - this.get("paddingBottom", 0);
    }
  });
  Object.defineProperty(Container2.prototype, "_getBounds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var width = this.get("width");
      var height = this.get("height");
      var pWidth = this.getPrivate("width");
      var pHeight = this.getPrivate("height");
      var bounds = {
        left: 0,
        top: 0,
        right: this.width(),
        bottom: this.height()
      };
      var layout = this.get("layout");
      var horizontal = false;
      var vertical = false;
      if (layout instanceof HorizontalLayout || layout instanceof GridLayout) {
        horizontal = true;
      }
      if (layout instanceof VerticalLayout) {
        vertical = true;
      }
      if ((width != null || pWidth != null) && (height != null || pHeight != null) && !this.get("verticalScrollbar")) {
      } else {
        var m = Number.MAX_VALUE;
        var l_1 = m;
        var r_1 = -m;
        var t_1 = m;
        var b_1 = -m;
        var paddingLeft = this.get("paddingLeft", 0);
        var paddingTop = this.get("paddingTop", 0);
        var paddingRight = this.get("paddingRight", 0);
        var paddingBottom = this.get("paddingBottom", 0);
        this.children.each(function(child) {
          if (child.get("position") != "absolute" && child.get("isMeasured")) {
            var childBounds = child.adjustedLocalBounds();
            var childX = child.x();
            var childY = child.y();
            var cl = childX + childBounds.left;
            var cr = childX + childBounds.right;
            var ct = childY + childBounds.top;
            var cb = childY + childBounds.bottom;
            if (horizontal) {
              cl -= child.get("marginLeft", 0);
              cr += child.get("marginRight", 0);
            }
            if (vertical) {
              ct -= child.get("marginTop", 0);
              cb += child.get("marginBottom", 0);
            }
            if (cl < l_1) {
              l_1 = cl;
            }
            if (cr > r_1) {
              r_1 = cr;
            }
            if (ct < t_1) {
              t_1 = ct;
            }
            if (cb > b_1) {
              b_1 = cb;
            }
          }
        });
        if (l_1 == m) {
          l_1 = 0;
        }
        if (r_1 == -m) {
          r_1 = 0;
        }
        if (t_1 == m) {
          t_1 = 0;
        }
        if (b_1 == -m) {
          b_1 = 0;
        }
        bounds.left = l_1 - paddingLeft;
        bounds.top = t_1 - paddingTop;
        bounds.right = r_1 + paddingRight;
        bounds.bottom = b_1 + paddingBottom;
      }
      this._contentWidth = bounds.right - bounds.left;
      this._contentHeight = bounds.bottom - bounds.top;
      if (isNumber(width)) {
        bounds.left = 0;
        bounds.right = width;
      }
      if (isNumber(pWidth)) {
        bounds.left = 0;
        bounds.right = pWidth;
      }
      if (isNumber(height)) {
        bounds.top = 0;
        bounds.bottom = height;
      }
      if (isNumber(pHeight)) {
        bounds.top = 0;
        bounds.bottom = pHeight;
      }
      this._localBounds = bounds;
    }
  });
  Object.defineProperty(Container2.prototype, "_updateBounds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var layout = this.get("layout");
      if (layout) {
        layout.updateContainer(this);
      }
      _super.prototype._updateBounds.call(this);
      this.updateBackground();
    }
  });
  Object.defineProperty(Container2.prototype, "markDirty", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype.markDirty.call(this);
      this._root._addDirtyParent(this);
    }
  });
  Object.defineProperty(Container2.prototype, "_prepareChildren", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var innerWidth = this.innerWidth();
      var innerHeight = this.innerHeight();
      if (innerWidth != this._prevWidth || innerHeight != this._prevHeight) {
        var layout = this.get("layout");
        var horizontal_1 = false;
        var vertical_1 = false;
        if (layout) {
          if (layout instanceof HorizontalLayout || layout instanceof GridLayout) {
            horizontal_1 = true;
          }
          if (layout instanceof VerticalLayout) {
            vertical_1 = true;
          }
        }
        each(this._percentageSizeChildren, function(child) {
          if (!horizontal_1) {
            var width = child.get("width");
            if (width instanceof Percent) {
              child.setPrivate("width", width.value * innerWidth);
            }
          }
          if (!vertical_1) {
            var height = child.get("height");
            if (height instanceof Percent) {
              child.setPrivate("height", height.value * innerHeight);
            }
          }
        });
        each(this._percentagePositionChildren, function(child) {
          child.markDirtyPosition();
          child.markDirtyBounds();
        });
        this._prevWidth = innerWidth;
        this._prevHeight = innerHeight;
        this._sizeDirty = true;
        this.updateBackground();
      }
      this._handleStates();
    }
  });
  Object.defineProperty(Container2.prototype, "_updateChildren", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      if (this.isDirty("verticalScrollbar")) {
        var verticalScrollbar_1 = this.get("verticalScrollbar");
        if (verticalScrollbar_1) {
          verticalScrollbar_1._setParent(this);
          verticalScrollbar_1.children.removeValue(verticalScrollbar_1.startGrip);
          verticalScrollbar_1.children.removeValue(verticalScrollbar_1.endGrip);
          this.set("maskContent", true);
          this.set("paddingRight", verticalScrollbar_1.width() + verticalScrollbar_1.get("marginRight", 0) + verticalScrollbar_1.get("marginLeft", 0));
          var background = this.get("background");
          if (!background) {
            background = this.set("background", Rectangle.new(this._root, {
              themeTags: ["background"],
              fillOpacity: 0,
              fill: this._root.interfaceColors.get("alternativeBackground")
            }));
          }
          this._vsbd0 = this.events.on("wheel", function(event) {
            var wheelEvent = event.originalEvent;
            if (isLocalEvent(wheelEvent, _this)) {
              wheelEvent.preventDefault();
            } else {
              return;
            }
            var shiftY = wheelEvent.deltaY / 5e3;
            var start = verticalScrollbar_1.get("start", 0);
            var end = verticalScrollbar_1.get("end", 1);
            if (start + shiftY > 0 && end + shiftY < 1) {
              verticalScrollbar_1.set("start", start + shiftY);
              verticalScrollbar_1.set("end", end + shiftY);
            }
          });
          this._disposers.push(this._vsbd0);
          this._vsbd1 = verticalScrollbar_1.events.on("rangechanged", function() {
            var h = _this._contentHeight;
            var childrenDisplay = _this._childrenDisplay;
            var contentMask = _this._contentMask;
            childrenDisplay.y = -verticalScrollbar_1.get("start") * h;
            childrenDisplay.markDirtyLayer();
            if (contentMask) {
              contentMask._display.y = -childrenDisplay.y;
              childrenDisplay.mask = contentMask._display;
            }
          });
          this._disposers.push(this._vsbd1);
          this._display.addChild(verticalScrollbar_1._display);
        } else {
          var previous = this._prevSettings.verticalScrollbar;
          if (previous) {
            this._display.removeChild(previous._display);
            if (this._vsbd0) {
              this._vsbd0.dispose();
            }
            if (this._vsbd1) {
              this._vsbd1.dispose();
            }
            this.set("maskContent", false);
            this.set("paddingRight", void 0);
          }
        }
      }
      if (this.isDirty("background")) {
        var previous = this._prevSettings["background"];
        if (previous) {
          this._display.removeChild(previous._display);
        }
        var background = this.get("background");
        if (background instanceof Sprite) {
          background.set("isMeasured", false);
          background._setParent(this);
          this._display.addChildAt(background._display, 0);
        }
      }
      if (this.isDirty("mask")) {
        var mask = this.get("mask");
        var previous = this._prevSettings["mask"];
        if (previous) {
          this._display.removeChild(previous._display);
          if (previous != mask) {
            previous.dispose();
          }
        }
        if (mask) {
          var parent = mask.parent;
          if (parent) {
            parent.children.removeValue(mask);
          }
          mask._setParent(this);
          this._display.addChildAt(mask._display, 0);
          this._childrenDisplay.mask = mask._display;
        }
      }
    }
  });
  Object.defineProperty(Container2.prototype, "_processTemplateField", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._processTemplateField.call(this);
      this.children.each(function(child) {
        child._processTemplateField();
      });
    }
  });
  Object.defineProperty(Container2.prototype, "walkChildren", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(f) {
      this.children.each(function(child) {
        if (child instanceof Container2) {
          child.walkChildren(f);
        }
        f(child);
      });
    }
  });
  Object.defineProperty(Container2.prototype, "eachChildren", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(f) {
      var background = this.get("background");
      if (background) {
        f(background);
      }
      var verticalScrollbar = this.get("verticalScrollbar");
      if (verticalScrollbar) {
        f(verticalScrollbar);
      }
      var mask = this.get("mask");
      if (mask) {
        f(mask);
      }
      this.children.values.forEach(function(child) {
        f(child);
      });
    }
  });
  Object.defineProperty(Container2.prototype, "allChildren", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var output = [];
      this.eachChildren(function(x) {
        output.push(x);
      });
      return output;
    }
  });
  Object.defineProperty(Container2.prototype, "_setDataItem", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(dataItem) {
      var updated = dataItem !== this._dataItem;
      _super.prototype._setDataItem.call(this, dataItem);
      var html = this.get("html", "");
      if (html && html !== "" && updated) {
        this._root._setHTMLContent(this, populateString(this, html));
      }
    }
  });
  Object.defineProperty(Container2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Container"
  });
  Object.defineProperty(Container2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Sprite.classNames.concat([Container2.className])
  });
  return Container2;
}(Sprite);

// node_modules/@amcharts/amcharts5/.internal/core/render/Text.js
var Text = function(_super) {
  __extends(Text2, _super);
  function Text2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    Object.defineProperty(_this, "textStyle", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this._root._renderer.makeTextStyle()
    });
    Object.defineProperty(_this, "_display", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this._root._renderer.makeText("", _this.textStyle)
    });
    Object.defineProperty(_this, "_textStyles", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: [
        "textAlign",
        "fontFamily",
        "fontSize",
        "fontStyle",
        "fontWeight",
        "fontStyle",
        "fontVariant",
        "textDecoration",
        "shadowColor",
        "shadowBlur",
        "shadowOffsetX",
        "shadowOffsetY",
        "shadowOpacity",
        "lineHeight",
        "baselineRatio",
        "direction",
        "textBaseline",
        "oversizedBehavior",
        "breakWords",
        "ellipsis",
        "minScale"
      ]
    });
    Object.defineProperty(_this, "_originalScale", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    return _this;
  }
  Object.defineProperty(Text2.prototype, "_updateBounds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (!this.get("text")) {
        var newBounds = {
          left: 0,
          right: 0,
          top: 0,
          bottom: 0
        };
        this._adjustedLocalBounds = newBounds;
      } else {
        _super.prototype._updateBounds.call(this);
      }
    }
  });
  Object.defineProperty(Text2.prototype, "_changed", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      _super.prototype._changed.call(this);
      this._display.clear();
      var textStyle = this.textStyle;
      if (this.isDirty("opacity")) {
        var opacity = this.get("opacity", 1);
        this._display.alpha = opacity;
      }
      if (this.isDirty("text") || this.isDirty("populateText")) {
        this._display.text = this._getText();
        this.markDirtyBounds();
        if (this.get("role") == "tooltip") {
          this._root.updateTooltip(this);
        }
      }
      if (this.isDirty("width")) {
        textStyle.wordWrapWidth = this.width();
        this.markDirtyBounds();
      }
      if (this.isDirty("oversizedBehavior")) {
        textStyle.oversizedBehavior = this.get("oversizedBehavior", "none");
        this.markDirtyBounds();
      }
      if (this.isDirty("breakWords")) {
        textStyle.breakWords = this.get("breakWords", false);
        this.markDirtyBounds();
      }
      if (this.isDirty("ellipsis")) {
        textStyle.ellipsis = this.get("ellipsis");
        this.markDirtyBounds();
      }
      if (this.isDirty("ignoreFormatting")) {
        textStyle.ignoreFormatting = this.get("ignoreFormatting", false);
        this.markDirtyBounds();
      }
      if (this.isDirty("minScale")) {
        textStyle.minScale = this.get("minScale", 0);
        this.markDirtyBounds();
      }
      if (this.isDirty("fill")) {
        var fill = this.get("fill");
        if (fill) {
          textStyle.fill = fill;
        }
      }
      if (this.isDirty("maxWidth") || this.isPrivateDirty("maxWidth")) {
        textStyle.maxWidth = this.get("maxWidth", this.getPrivate("maxWidth"));
        this.markDirtyBounds();
      }
      if (this.isDirty("maxHeight") || this.isPrivateDirty("maxHeight")) {
        textStyle.maxHeight = this.get("maxHeight", this.getPrivate("maxHeight"));
        this.markDirtyBounds();
      }
      each(this._textStyles, function(styleName) {
        if (_this._dirty[styleName]) {
          textStyle[styleName] = _this.get(styleName);
          _this.markDirtyBounds();
        }
      });
      textStyle["fontSize"] = this.get("fontSize");
      textStyle["fontFamily"] = this.get("fontFamily");
      this._display.style = textStyle;
      if (this.isDirty("role") && this.get("role") == "tooltip") {
        this._root.updateTooltip(this);
      }
    }
  });
  Object.defineProperty(Text2.prototype, "_getText", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var text = this.get("text", "");
      return this.get("populateText") ? populateString(this, text) : text;
    }
  });
  Object.defineProperty(Text2.prototype, "markDirtyText", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._display.text = this._getText();
      if (this.get("role") == "tooltip") {
        this._root.updateTooltip(this);
      }
      this.markDirtyBounds();
      this.markDirty();
    }
  });
  Object.defineProperty(Text2.prototype, "_setDataItem", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(dataItem) {
      _super.prototype._setDataItem.call(this, dataItem);
      if (this.get("populateText")) {
        this.markDirtyText();
      }
    }
  });
  Object.defineProperty(Text2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Text"
  });
  Object.defineProperty(Text2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Sprite.classNames.concat([Text2.className])
  });
  return Text2;
}(Sprite);

// node_modules/@amcharts/amcharts5/.internal/core/render/Label.js
var Label = function(_super) {
  __extends(Label2, _super);
  function Label2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    Object.defineProperty(_this, "_text", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_textKeys", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: [
        "text",
        "fill",
        "textAlign",
        "fontFamily",
        "fontSize",
        "fontStyle",
        "fontWeight",
        "fontStyle",
        "fontVariant",
        "textDecoration",
        "shadowColor",
        "shadowBlur",
        "shadowOffsetX",
        "shadowOffsetY",
        "shadowOpacity",
        "lineHeight",
        "baselineRatio",
        "direction",
        "textBaseline",
        "oversizedBehavior",
        "breakWords",
        "ellipsis",
        "minScale",
        "populateText",
        "role",
        "ignoreFormatting"
      ]
    });
    return _this;
  }
  Object.defineProperty(Label2.prototype, "text", {
    get: function() {
      return this._text;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Label2.prototype, "_afterNew", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      _super.prototype._afterNew.call(this);
      this._makeText();
      each(this._textKeys, function(property) {
        var propValue = _this.get(property);
        if (propValue != void 0) {
          _this._text.set(property, propValue);
        }
      });
      if (this.get("html", "") !== "") {
        this._text.set("text", "");
      }
      this.onPrivate("maxWidth", function() {
        _this._setMaxDimentions();
      });
      this.onPrivate("maxHeight", function() {
        _this._setMaxDimentions();
      });
    }
  });
  Object.defineProperty(Label2.prototype, "_makeText", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._text = this.children.push(Text.new(this._root, {}));
    }
  });
  Object.defineProperty(Label2.prototype, "_updateChildren", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      _super.prototype._updateChildren.call(this);
      each(this._textKeys, function(property) {
        _this._text.set(property, _this.get(property));
      });
      if (this.isDirty("maxWidth")) {
        this._setMaxDimentions();
      }
      if (this.isDirty("maxHeight")) {
        this._setMaxDimentions();
      }
      if (this.isDirty("rotation")) {
        this._setMaxDimentions();
      }
      if (this.get("html", "") !== "") {
        this._text.set("text", "");
      } else {
        this._text.set("text", this.get("text"));
      }
      if (this.isDirty("textAlign") || this.isDirty("width")) {
        var textAlign = this.get("textAlign");
        var x = void 0;
        if (this.get("width") != null) {
          if (textAlign == "right") {
            x = p100;
          } else if (textAlign == "center") {
            x = p50;
          } else {
            x = 0;
          }
        } else {
          if (textAlign == "left" || textAlign == "start") {
            x = this.get("paddingLeft");
          } else if (textAlign == "right" || textAlign == "end") {
            x = -this.get("paddingRight");
          }
        }
        this.text.set("x", x);
      }
    }
  });
  Object.defineProperty(Label2.prototype, "_setMaxDimentions", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var rotation = this.get("rotation");
      var vertical = rotation == 90 || rotation == 270;
      var maxWidth = this.get("maxWidth", this.getPrivate("maxWidth", Infinity));
      if (isNumber(maxWidth)) {
        this.text.set(vertical ? "maxHeight" : "maxWidth", maxWidth - this.get("paddingLeft", 0) - this.get("paddingRight", 0));
      } else {
        this.text.set(vertical ? "maxHeight" : "maxWidth", void 0);
      }
      var maxHeight = this.get("maxHeight", this.getPrivate("maxHeight", Infinity));
      if (isNumber(maxHeight)) {
        this.text.set(vertical ? "maxWidth" : "maxHeight", maxHeight - this.get("paddingTop", 0) - this.get("paddingBottom", 0));
      } else {
        this.text.set(vertical ? "maxWidth" : "maxHeight", void 0);
      }
    }
  });
  Object.defineProperty(Label2.prototype, "_setDataItem", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(dataItem) {
      _super.prototype._setDataItem.call(this, dataItem);
      this._markDirtyKey("text");
      if (this.text.get("populateText")) {
        this.text.markDirtyText();
      }
    }
  });
  Object.defineProperty(Label2.prototype, "getText", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this._text._getText();
    }
  });
  Object.defineProperty(Label2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Label"
  });
  Object.defineProperty(Label2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Container.classNames.concat([Label2.className])
  });
  return Label2;
}(Container);

// node_modules/@amcharts/amcharts5/.internal/core/render/RoundedRectangle.js
var RoundedRectangle = function(_super) {
  __extends(RoundedRectangle2, _super);
  function RoundedRectangle2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(RoundedRectangle2.prototype, "_beforeChanged", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._beforeChanged.call(this);
      if (this.isDirty("cornerRadiusTL") || this.isDirty("cornerRadiusTR") || this.isDirty("cornerRadiusBR") || this.isDirty("cornerRadiusBL")) {
        this._clear = true;
      }
    }
  });
  Object.defineProperty(RoundedRectangle2.prototype, "_draw", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var width = this.width();
      var height = this.height();
      var w = width;
      var h = height;
      var wSign = w / Math.abs(width);
      var hSign = h / Math.abs(height);
      if (isNumber(w) && isNumber(h)) {
        var minSide = Math.min(w, h) / 2;
        var crtl = relativeToValue(this.get("cornerRadiusTL", 8), minSide);
        var crtr = relativeToValue(this.get("cornerRadiusTR", 8), minSide);
        var crbr = relativeToValue(this.get("cornerRadiusBR", 8), minSide);
        var crbl = relativeToValue(this.get("cornerRadiusBL", 8), minSide);
        var maxcr = Math.min(Math.abs(w / 2), Math.abs(h / 2));
        crtl = fitToRange(crtl, 0, maxcr);
        crtr = fitToRange(crtr, 0, maxcr);
        crbr = fitToRange(crbr, 0, maxcr);
        crbl = fitToRange(crbl, 0, maxcr);
        this._display.moveTo(crtl * wSign, 0);
        this._display.lineTo(w - crtr * wSign, 0);
        if (crtr > 0) {
          this._display.arcTo(w, 0, w, crtr * hSign, crtr);
        }
        this._display.lineTo(w, h - crbr * hSign);
        if (crbr > 0) {
          this._display.arcTo(w, h, w - crbr * wSign, h, crbr);
        }
        this._display.lineTo(crbl * wSign, h);
        if (crbl > 0) {
          this._display.arcTo(0, h, 0, h - crbl * hSign, crbl);
        }
        this._display.lineTo(0, crtl * hSign);
        if (crtl > 0) {
          this._display.arcTo(0, 0, crtl * wSign, 0, crtl);
        }
      }
    }
  });
  Object.defineProperty(RoundedRectangle2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "RoundedRectangle"
  });
  Object.defineProperty(RoundedRectangle2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Rectangle.classNames.concat([RoundedRectangle2.className])
  });
  return RoundedRectangle2;
}(Rectangle);

// node_modules/@amcharts/amcharts5/.internal/core/render/Button.js
var Button = function(_super) {
  __extends(Button2, _super);
  function Button2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(Button2.prototype, "_afterNew", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._settings.themeTags = mergeTags(this._settings.themeTags, ["button"]);
      _super.prototype._afterNew.call(this);
      if (!this._settings.background) {
        this.set("background", RoundedRectangle.new(this._root, {
          themeTags: mergeTags(this._settings.themeTags, ["background"])
        }));
      }
    }
  });
  Object.defineProperty(Button2.prototype, "_prepareChildren", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._prepareChildren.call(this);
      if (this.isDirty("icon")) {
        var previous = this._prevSettings.icon;
        var icon = this.get("icon");
        if (icon !== previous) {
          this._disposeProperty("icon");
          if (previous) {
            previous.dispose();
          }
          if (icon) {
            this.children.push(icon);
          }
          this._prevSettings.icon = icon;
        }
      }
      if (this.isDirty("label")) {
        var previous = this._prevSettings.label;
        var label = this.get("label");
        if (label !== previous) {
          this._disposeProperty("label");
          if (previous) {
            previous.dispose();
          }
          if (label) {
            this.children.push(label);
          }
          this._prevSettings.label = label;
        }
      }
    }
  });
  Object.defineProperty(Button2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Button"
  });
  Object.defineProperty(Button2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Container.classNames.concat([Button2.className])
  });
  return Button2;
}(Container);

// node_modules/@amcharts/amcharts5/.internal/core/util/Data.js
var ListData = function(_super) {
  __extends(ListData2, _super);
  function ListData2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    Object.defineProperty(_this, "processor", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    return _this;
  }
  Object.defineProperty(ListData2.prototype, "incrementRef", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
    }
  });
  Object.defineProperty(ListData2.prototype, "decrementRef", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
    }
  });
  Object.defineProperty(ListData2.prototype, "_onPush", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(newValue) {
      if (this.processor) {
        this.processor.processRow(newValue);
      }
      _super.prototype._onPush.call(this, newValue);
    }
  });
  Object.defineProperty(ListData2.prototype, "_onInsertIndex", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(index, newValue) {
      if (this.processor) {
        this.processor.processRow(newValue);
      }
      _super.prototype._onInsertIndex.call(this, index, newValue);
    }
  });
  Object.defineProperty(ListData2.prototype, "_onSetIndex", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(index, oldValue, newValue) {
      if (this.processor) {
        this.processor.processRow(newValue);
      }
      _super.prototype._onSetIndex.call(this, index, oldValue, newValue);
    }
  });
  return ListData2;
}(List);
var JsonData = function() {
  function JsonData2(value) {
    Object.defineProperty(this, "processor", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_value", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this._value = value;
  }
  Object.defineProperty(JsonData2.prototype, "incrementRef", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
    }
  });
  Object.defineProperty(JsonData2.prototype, "decrementRef", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
    }
  });
  return JsonData2;
}();

// node_modules/@amcharts/amcharts5/.internal/core/render/Component.js
var DataItem = function(_super) {
  __extends(DataItem2, _super);
  function DataItem2(component, dataContext, settings) {
    var _this = _super.call(this, settings) || this;
    Object.defineProperty(_this, "component", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "dataContext", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "bullets", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "open", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "close", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    _this.dataContext = dataContext;
    _this.component = component;
    _this._settings.visible = true;
    _this._checkDirty();
    return _this;
  }
  Object.defineProperty(DataItem2.prototype, "markDirty", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this.component.markDirtyValues(this);
    }
  });
  Object.defineProperty(DataItem2.prototype, "_startAnimation", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this.component._root._addAnimation(this);
    }
  });
  Object.defineProperty(DataItem2.prototype, "_animationTime", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this.component._root.animationTime;
    }
  });
  Object.defineProperty(DataItem2.prototype, "_dispose", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (this.component) {
        this.component.disposeDataItem(this);
      }
      _super.prototype._dispose.call(this);
    }
  });
  Object.defineProperty(DataItem2.prototype, "show", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(duration) {
      this.setRaw("visible", true);
      if (this.component) {
        this.component.showDataItem(this, duration);
      }
    }
  });
  Object.defineProperty(DataItem2.prototype, "hide", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(duration) {
      this.setRaw("visible", false);
      if (this.component) {
        this.component.hideDataItem(this, duration);
      }
    }
  });
  Object.defineProperty(DataItem2.prototype, "isHidden", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return !this.get("visible");
    }
  });
  return DataItem2;
}(Settings);
var Component = function(_super) {
  __extends(Component2, _super);
  function Component2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    Object.defineProperty(_this, "_data", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new ListData()
    });
    Object.defineProperty(_this, "_dataItems", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    Object.defineProperty(_this, "_mainDataItems", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this._dataItems
    });
    Object.defineProperty(_this, "valueFields", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    Object.defineProperty(_this, "fields", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: ["id"]
    });
    Object.defineProperty(_this, "_valueFields", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_valueFieldsF", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_fields", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_fieldsF", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_valuesDirty", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "_dataChanged", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "_dataGrouped", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "inited", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    return _this;
  }
  Object.defineProperty(Component2.prototype, "data", {
    get: function() {
      return this._data;
    },
    set: function(data) {
      data.incrementRef();
      this._data.decrementRef();
      this._data = data;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Component2.prototype, "_dispose", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._dispose.call(this);
      this._data.decrementRef();
    }
  });
  Object.defineProperty(Component2.prototype, "_onDataClear", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
    }
  });
  Object.defineProperty(Component2.prototype, "_afterNew", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      _super.prototype._afterNew.call(this);
      this._data.incrementRef();
      this._updateFields();
      this._disposers.push(this.data.events.onAll(function(change) {
        var dataItems = _this._mainDataItems;
        _this.markDirtyValues();
        _this._markDirtyGroup();
        _this._dataChanged = true;
        if (change.type === "clear") {
          each(dataItems, function(dataItem2) {
            dataItem2.dispose();
          });
          dataItems.length = 0;
          _this._onDataClear();
        } else if (change.type === "push") {
          var dataItem = new DataItem(_this, change.newValue, _this._makeDataItem(change.newValue));
          dataItems.push(dataItem);
          _this.processDataItem(dataItem);
        } else if (change.type === "setIndex") {
          var dataItem_1 = dataItems[change.index];
          var properties_1 = _this._makeDataItem(change.newValue);
          keys(properties_1).forEach(function(key) {
            dataItem_1.animate({
              key,
              to: properties_1[key],
              duration: _this.get("interpolationDuration", 0),
              easing: _this.get("interpolationEasing")
            });
          });
          dataItem_1.dataContext = change.newValue;
        } else if (change.type === "insertIndex") {
          var dataItem = new DataItem(_this, change.newValue, _this._makeDataItem(change.newValue));
          dataItems.splice(change.index, 0, dataItem);
          _this.processDataItem(dataItem);
        } else if (change.type === "removeIndex") {
          var dataItem = dataItems[change.index];
          dataItem.dispose();
          dataItems.splice(change.index, 1);
        } else if (change.type === "moveIndex") {
          var dataItem = dataItems[change.oldIndex];
          dataItems.splice(change.oldIndex, 1);
          dataItems.splice(change.newIndex, 0, dataItem);
        } else {
          throw new Error("Unknown IStreamEvent type");
        }
        _this._afterDataChange();
      }));
    }
  });
  Object.defineProperty(Component2.prototype, "_updateFields", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      if (this.valueFields) {
        this._valueFields = [];
        this._valueFieldsF = {};
        each(this.valueFields, function(key) {
          var field = _this.get(key + "Field");
          if (field) {
            _this._valueFields.push(key);
            _this._valueFieldsF[key] = { fieldKey: key + "Field", workingKey: key + "Working" };
          }
        });
      }
      if (this.fields) {
        this._fields = [];
        this._fieldsF = {};
        each(this.fields, function(key) {
          var field = _this.get(key + "Field");
          if (field) {
            _this._fields.push(key);
            _this._fieldsF[key] = key + "Field";
          }
        });
      }
    }
  });
  Object.defineProperty(Component2.prototype, "dataItems", {
    get: function() {
      return this._dataItems;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Component2.prototype, "processDataItem", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(_dataItem) {
    }
  });
  Object.defineProperty(Component2.prototype, "_makeDataItem", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(data) {
      var _this = this;
      var output = {};
      if (this._valueFields) {
        each(this._valueFields, function(key) {
          var field = _this.get(_this._valueFieldsF[key].fieldKey);
          output[key] = data[field];
          output[_this._valueFieldsF[key].workingKey] = output[key];
        });
      }
      if (this._fields) {
        each(this._fields, function(key) {
          var field = _this.get(_this._fieldsF[key]);
          output[key] = data[field];
        });
      }
      return output;
    }
  });
  Object.defineProperty(Component2.prototype, "makeDataItem", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(data) {
      var dataItem = new DataItem(this, void 0, data);
      this.processDataItem(dataItem);
      return dataItem;
    }
  });
  Object.defineProperty(Component2.prototype, "pushDataItem", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(data) {
      var dataItem = this.makeDataItem(data);
      this._mainDataItems.push(dataItem);
      return dataItem;
    }
  });
  Object.defineProperty(Component2.prototype, "disposeDataItem", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(_dataItem) {
    }
  });
  Object.defineProperty(Component2.prototype, "showDataItem", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(dataItem, _duration) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          dataItem.set("visible", true);
          return [2];
        });
      });
    }
  });
  Object.defineProperty(Component2.prototype, "hideDataItem", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(dataItem, _duration) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a) {
          dataItem.set("visible", false);
          return [2];
        });
      });
    }
  });
  Object.defineProperty(Component2.prototype, "_clearDirty", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._clearDirty.call(this);
      this._valuesDirty = false;
    }
  });
  Object.defineProperty(Component2.prototype, "_afterDataChange", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
    }
  });
  Object.defineProperty(Component2.prototype, "_afterChanged", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._afterChanged.call(this);
      if (this._dataChanged) {
        var type = "datavalidated";
        if (this.events.isEnabled(type)) {
          this.events.dispatch(type, { type, target: this });
        }
        this._dataChanged = false;
      }
      this.inited = true;
    }
  });
  Object.defineProperty(Component2.prototype, "markDirtyValues", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(_dataItem) {
      this.markDirty();
      this._valuesDirty = true;
    }
  });
  Object.defineProperty(Component2.prototype, "_markDirtyGroup", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._dataGrouped = false;
    }
  });
  Object.defineProperty(Component2.prototype, "markDirtySize", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._sizeDirty = true;
      this.markDirty();
    }
  });
  Object.defineProperty(Component2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Component"
  });
  Object.defineProperty(Component2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Container.classNames.concat([Component2.className])
  });
  return Component2;
}(Container);

// node_modules/@amcharts/amcharts5/.internal/core/util/Time.js
var Time_exports = {};
__export(Time_exports, {
  add: () => add,
  checkChange: () => checkChange,
  chooseInterval: () => chooseInterval,
  copy: () => copy,
  getDateIntervalDuration: () => getDateIntervalDuration,
  getDuration: () => getDuration,
  getIntervalDuration: () => getIntervalDuration,
  getNextUnit: () => getNextUnit,
  getTime: () => getTime,
  getUnitValue: () => getUnitValue,
  now: () => now,
  round: () => round2,
  sleep: () => sleep,
  timeUnitDurations: () => timeUnitDurations
});
function sleep(ms) {
  return new Promise(function(resolve, _reject) {
    setTimeout(resolve, ms);
  });
}
var timeUnitDurations = {
  millisecond: 1,
  second: 1e3,
  minute: 6e4,
  hour: 36e5,
  day: 864e5,
  week: 6048e5,
  month: 365.242 / 12 * 864e5,
  year: 31536e6
};
function getNextUnit(unit) {
  switch (unit) {
    case "year":
      return;
    case "month":
      return "year";
    case "week":
      return "month";
    case "day":
      return "month";
    case "hour":
      return "day";
    case "minute":
      return "hour";
    case "second":
      return "minute";
    case "millisecond":
      return "second";
  }
}
function getDuration(unit, count) {
  if (count == null) {
    count = 1;
  }
  return timeUnitDurations[unit] * count;
}
function getIntervalDuration(interval) {
  if (interval) {
    return timeUnitDurations[interval.timeUnit] * interval.count;
  }
  return 0;
}
function getDateIntervalDuration(interval, date, firstDateOfWeek, utc, timezone) {
  var unit = interval.timeUnit;
  var count = interval.count;
  if (unit == "hour" || unit == "minute" || unit == "second" || unit == "millisecond") {
    return timeUnitDurations[interval.timeUnit] * interval.count;
  } else {
    var firstTime = round2(new Date(date.getTime()), unit, count, firstDateOfWeek, utc, void 0, timezone).getTime();
    var lastTime = add(new Date(firstTime), unit, count, utc).getTime();
    return lastTime - firstTime;
  }
}
function now() {
  return new Date();
}
function getTime() {
  return now().getTime();
}
function copy(date) {
  return new Date(date.getTime());
}
function checkChange(timeOne, timeTwo, unit, utc, timezone) {
  if (timeTwo - timeOne > getDuration(unit, 1.2)) {
    return true;
  }
  var dateOne = new Date(timeOne);
  var dateTwo = new Date(timeTwo);
  if (timezone) {
    dateOne = timezone.convertLocal(dateOne);
    dateTwo = timezone.convertLocal(dateTwo);
  }
  var timeZoneOffset1 = 0;
  var timeZoneOffset2 = 0;
  if (!utc && unit != "millisecond") {
    timeZoneOffset1 = dateOne.getTimezoneOffset();
    dateOne.setUTCMinutes(dateOne.getUTCMinutes() - timeZoneOffset1);
    timeZoneOffset2 = dateTwo.getTimezoneOffset();
    dateTwo.setUTCMinutes(dateTwo.getUTCMinutes() - timeZoneOffset2);
  }
  var changed = false;
  switch (unit) {
    case "year":
      if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {
        changed = true;
      }
      break;
    case "month":
      if (dateOne.getUTCFullYear() != dateTwo.getUTCFullYear()) {
        changed = true;
      } else if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {
        changed = true;
      }
      break;
    case "day":
      if (dateOne.getUTCMonth() != dateTwo.getUTCMonth()) {
        changed = true;
      } else if (dateOne.getUTCDate() != dateTwo.getUTCDate()) {
        changed = true;
      }
      break;
    case "hour":
      if (dateOne.getUTCHours() != dateTwo.getUTCHours()) {
        changed = true;
      }
      break;
    case "minute":
      if (dateOne.getUTCMinutes() != dateTwo.getUTCMinutes()) {
        changed = true;
      }
      break;
    case "second":
      if (dateOne.getUTCSeconds() != dateTwo.getUTCSeconds()) {
        changed = true;
      }
      break;
    case "millisecond":
      if (dateOne.getTime() != dateTwo.getTime()) {
        changed = true;
      }
      break;
  }
  if (changed) {
    return changed;
  }
  var nextUnit = getNextUnit(unit);
  if (nextUnit) {
    return checkChange(timeOne, timeTwo, nextUnit, utc, timezone);
  } else {
    return false;
  }
}
function add(date, unit, count, utc) {
  var timeZoneOffset = 0;
  if (!utc && unit != "millisecond") {
    timeZoneOffset = date.getTimezoneOffset();
    date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);
  }
  switch (unit) {
    case "day":
      var day = date.getUTCDate();
      date.setUTCDate(day + count);
      break;
    case "second":
      var seconds = date.getUTCSeconds();
      date.setUTCSeconds(seconds + count);
      break;
    case "millisecond":
      var milliseconds = date.getUTCMilliseconds();
      date.setUTCMilliseconds(milliseconds + count);
      break;
    case "hour":
      var hours = date.getUTCHours();
      date.setUTCHours(hours + count);
      break;
    case "minute":
      var minutes = date.getUTCMinutes();
      date.setUTCMinutes(minutes + count);
      break;
    case "year":
      var year = date.getUTCFullYear();
      date.setUTCFullYear(year + count);
      break;
    case "month":
      var month = date.getUTCMonth();
      date.setUTCMonth(month + count);
      break;
    case "week":
      var wday = date.getUTCDate();
      date.setUTCDate(wday + count * 7);
      break;
  }
  if (!utc && unit != "millisecond") {
    date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);
    if (unit == "day" || unit == "week" || unit == "month" || unit == "year") {
      var newTimeZoneOffset = date.getTimezoneOffset();
      if (newTimeZoneOffset != timeZoneOffset) {
        var diff = newTimeZoneOffset - timeZoneOffset;
        date.setUTCMinutes(date.getUTCMinutes() + diff);
        if (date.getTimezoneOffset() != newTimeZoneOffset) {
          date.setUTCMinutes(date.getUTCMinutes() - diff);
        }
      }
    }
  }
  return date;
}
function round2(date, unit, count, firstDateOfWeek, utc, firstDate, timezone) {
  if (!timezone || utc) {
    var timeZoneOffset = 0;
    if (!utc && unit != "millisecond") {
      timeZoneOffset = date.getTimezoneOffset();
      date.setUTCMinutes(date.getUTCMinutes() - timeZoneOffset);
    }
    switch (unit) {
      case "day":
        var day = date.getUTCDate();
        if (count > 1) {
          if (firstDate) {
            firstDate = round2(firstDate, "day", 1);
            var difference = date.getTime() - firstDate.getTime();
            var unitCount = Math.floor(difference / getDuration("day") / count);
            var duration = getDuration("day", unitCount * count);
            date.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration("minute"));
          }
        } else {
          date.setUTCDate(day);
        }
        date.setUTCHours(0, 0, 0, 0);
        break;
      case "second":
        var seconds = date.getUTCSeconds();
        if (count > 1) {
          seconds = Math.floor(seconds / count) * count;
        }
        date.setUTCSeconds(seconds, 0);
        break;
      case "millisecond":
        if (count == 1) {
          return date;
        }
        var milliseconds = date.getUTCMilliseconds();
        milliseconds = Math.floor(milliseconds / count) * count;
        date.setUTCMilliseconds(milliseconds);
        break;
      case "hour":
        var hours = date.getUTCHours();
        if (count > 1) {
          hours = Math.floor(hours / count) * count;
        }
        date.setUTCHours(hours, 0, 0, 0);
        break;
      case "minute":
        var minutes = date.getUTCMinutes();
        milliseconds = date.getUTCMilliseconds();
        if (count > 1) {
          minutes = Math.floor(minutes / count) * count;
        }
        date.setUTCMinutes(minutes, 0, 0);
        break;
      case "month":
        var month = date.getUTCMonth();
        if (count > 1) {
          month = Math.floor(month / count) * count;
        }
        date.setUTCMonth(month, 1);
        date.setUTCHours(0, 0, 0, 0);
        break;
      case "year":
        var year = date.getUTCFullYear();
        if (count > 1) {
          year = Math.floor(year / count) * count;
        }
        date.setUTCFullYear(year, 0, 1);
        date.setUTCHours(0, 0, 0, 0);
        break;
      case "week":
        var wday = date.getUTCDate();
        var weekDay = date.getUTCDay();
        if (!isNumber(firstDateOfWeek)) {
          firstDateOfWeek = 1;
        }
        if (weekDay >= firstDateOfWeek) {
          wday = wday - weekDay + firstDateOfWeek;
        } else {
          wday = wday - (7 + weekDay) + firstDateOfWeek;
        }
        date.setUTCDate(wday);
        date.setUTCHours(0, 0, 0, 0);
        break;
    }
    if (!utc && unit != "millisecond") {
      date.setUTCMinutes(date.getUTCMinutes() + timeZoneOffset);
      if (unit == "day" || unit == "week" || unit == "month" || unit == "year") {
        var newTimeZoneOffset = date.getTimezoneOffset();
        if (newTimeZoneOffset != timeZoneOffset) {
          var diff = newTimeZoneOffset - timeZoneOffset;
          date.setUTCMinutes(date.getUTCMinutes() + diff);
        }
      }
    }
    return date;
  } else {
    var tzoffset = timezone.offsetUTC(date);
    var timeZoneOffset = date.getTimezoneOffset();
    var parsedDate = timezone.parseDate(date);
    var year = parsedDate.year;
    var month = parsedDate.month;
    var day = parsedDate.day;
    var hour = parsedDate.hour;
    var minute = parsedDate.minute;
    var second = parsedDate.second;
    var millisecond = parsedDate.millisecond;
    var weekday = parsedDate.weekday;
    switch (unit) {
      case "day":
        if (firstDate) {
          firstDate = round2(firstDate, "day", 1);
          var difference = date.getTime() - firstDate.getTime();
          var unitCount = Math.floor(difference / getDuration("day") / count);
          var duration = getDuration("day", unitCount * count);
          date.setTime(firstDate.getTime() + duration - timeZoneOffset * getDuration("minute"));
          parsedDate = timezone.parseDate(date);
          year = parsedDate.year;
          month = parsedDate.month;
          day = parsedDate.day;
        }
        hour = 0;
        minute = 0;
        second = 0;
        millisecond = 0;
        break;
      case "second":
        if (count > 1) {
          second = Math.floor(second / count) * count;
        }
        millisecond = 0;
        break;
      case "millisecond":
        if (count > 1) {
          millisecond = Math.floor(millisecond / count) * count;
        }
        break;
      case "hour":
        if (count > 1) {
          hour = Math.floor(hour / count) * count;
        }
        minute = 0;
        second = 0;
        millisecond = 0;
        break;
      case "minute":
        if (count > 1) {
          minute = Math.floor(minute / count) * count;
        }
        second = 0;
        millisecond = 0;
        break;
      case "month":
        if (count > 1) {
          month = Math.floor(month / count) * count;
        }
        day = 1;
        hour = 0;
        minute = 0;
        second = 0;
        millisecond = 0;
        break;
      case "year":
        if (count > 1) {
          year = Math.floor(year / count) * count;
        }
        month = 0;
        day = 1;
        hour = 0;
        minute = 0;
        second = 0;
        millisecond = 0;
        break;
      case "week":
        if (!isNumber(firstDateOfWeek)) {
          firstDateOfWeek = 1;
        }
        if (weekday >= firstDateOfWeek) {
          day = day - weekday + firstDateOfWeek;
        } else {
          day = day - (7 + weekday) + firstDateOfWeek;
        }
        hour = 0;
        minute = 0;
        second = 0;
        millisecond = 0;
        break;
    }
    minute += tzoffset - timeZoneOffset;
    date = new Date(year, month, day, hour, minute, second, millisecond);
    var newOffset = date.getTimezoneOffset();
    if (newOffset != timeZoneOffset) {
      date.setTime(date.getTime() + (timeZoneOffset - newOffset) * 6e4);
    }
    return date;
  }
}
function chooseInterval(index, duration, gridCount, intervals) {
  var gridInterval = intervals[index];
  var intervalDuration = getIntervalDuration(gridInterval);
  var lastIndex = intervals.length - 1;
  if (index >= lastIndex) {
    return __assign({}, intervals[lastIndex]);
  }
  var count = Math.ceil(duration / intervalDuration);
  if (duration < intervalDuration && index > 0) {
    return __assign({}, intervals[index - 1]);
  }
  if (count <= gridCount) {
    return __assign({}, intervals[index]);
  } else {
    if (index + 1 < intervals.length) {
      return chooseInterval(index + 1, duration, gridCount, intervals);
    } else {
      return __assign({}, intervals[index]);
    }
  }
}
function getUnitValue(date, unit) {
  switch (unit) {
    case "day":
      return date.getDate();
    case "second":
      return date.getSeconds();
    case "millisecond":
      return date.getMilliseconds();
    case "hour":
      return date.getHours();
    case "minute":
      return date.getMinutes();
    case "month":
      return date.getMonth();
    case "year":
      return date.getFullYear();
    case "week":
      return getWeek(date);
  }
}

// node_modules/@amcharts/amcharts5/.internal/core/render/Series.js
var Series = function(_super) {
  __extends(Series2, _super);
  function Series2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    Object.defineProperty(_this, "_aggregatesCalculated", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "_selectionAggregatesCalculated", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "_dataProcessed", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "_psi", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_pei", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "chart", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "bullets", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new List()
    });
    Object.defineProperty(_this, "bulletsContainer", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: Container.new(_this._root, { width: p100, height: p100, position: "absolute" })
    });
    return _this;
  }
  Object.defineProperty(Series2.prototype, "_afterNew", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      this.valueFields.push("value");
      _super.prototype._afterNew.call(this);
      this.setPrivate("customData", {});
      this._disposers.push(this.bullets.events.onAll(function(change) {
        if (change.type === "clear") {
          _this._handleBullets(_this.dataItems);
        } else if (change.type === "push") {
          _this._handleBullets(_this.dataItems);
        } else if (change.type === "setIndex") {
          _this._handleBullets(_this.dataItems);
        } else if (change.type === "insertIndex") {
          _this._handleBullets(_this.dataItems);
        } else if (change.type === "removeIndex") {
          _this._handleBullets(_this.dataItems);
        } else if (change.type === "moveIndex") {
          _this._handleBullets(_this.dataItems);
        } else {
          throw new Error("Unknown IListEvent type");
        }
      }));
    }
  });
  Object.defineProperty(Series2.prototype, "_dispose", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this.bulletsContainer.dispose();
      _super.prototype._dispose.call(this);
    }
  });
  Object.defineProperty(Series2.prototype, "startIndex", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var len = this.dataItems.length;
      return Math.min(this.getPrivate("startIndex", 0), len);
    }
  });
  Object.defineProperty(Series2.prototype, "endIndex", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var len = this.dataItems.length;
      return Math.min(this.getPrivate("endIndex", len), len);
    }
  });
  Object.defineProperty(Series2.prototype, "_handleBullets", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(dataItems) {
      each(dataItems, function(dataItem) {
        var bullets = dataItem.bullets;
        if (bullets) {
          each(bullets, function(bullet) {
            bullet.dispose();
          });
          dataItem.bullets = void 0;
        }
      });
      this.markDirtyValues();
    }
  });
  Object.defineProperty(Series2.prototype, "getDataItemById", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(id) {
      return find(this.dataItems, function(dataItem) {
        return dataItem.get("id") == id;
      });
    }
  });
  Object.defineProperty(Series2.prototype, "_makeBullets", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(dataItem) {
      var _this = this;
      if (this._shouldMakeBullet(dataItem)) {
        dataItem.bullets = [];
        this.bullets.each(function(bulletFunction) {
          _this._makeBullet(dataItem, bulletFunction);
        });
      }
    }
  });
  Object.defineProperty(Series2.prototype, "_shouldMakeBullet", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(_dataItem) {
      return true;
    }
  });
  Object.defineProperty(Series2.prototype, "_makeBullet", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(dataItem, bulletFunction, index) {
      var bullet = bulletFunction(this._root, this, dataItem);
      if (bullet) {
        var sprite = bullet.get("sprite");
        if (sprite) {
          sprite._setDataItem(dataItem);
          sprite.setRaw("position", "absolute");
          this.bulletsContainer.children.push(sprite);
        }
        bullet._index = index;
        bullet.series = this;
        dataItem.bullets.push(bullet);
      }
      return bullet;
    }
  });
  Object.defineProperty(Series2.prototype, "_clearDirty", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._clearDirty.call(this);
      this._aggregatesCalculated = false;
      this._selectionAggregatesCalculated = false;
    }
  });
  Object.defineProperty(Series2.prototype, "_prepareChildren", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      _super.prototype._prepareChildren.call(this);
      var startIndex = this.startIndex();
      var endIndex = this.endIndex();
      if (this.isPrivateDirty("baseValueSeries")) {
        var baseValueSeries = this.getPrivate("baseValueSeries");
        if (baseValueSeries) {
          this._disposers.push(baseValueSeries.onPrivate("startIndex", function() {
            _this.markDirtyValues();
          }));
        }
      }
      var calculateAggregates = this.get("calculateAggregates");
      if (calculateAggregates) {
        if (this._valuesDirty && !this._dataProcessed) {
          if (!this._aggregatesCalculated) {
            this._calculateAggregates(0, this.dataItems.length);
            this._aggregatesCalculated = true;
          }
        }
        if ((this._psi != startIndex || this._pei != endIndex) && !this._selectionAggregatesCalculated) {
          if (startIndex === 0 && endIndex === this.dataItems.length && this._aggregatesCalculated) {
          } else {
            this._calculateAggregates(startIndex, endIndex);
          }
          this._selectionAggregatesCalculated = true;
        }
      }
      if (this.isDirty("tooltip")) {
        var tooltip = this.get("tooltip");
        if (tooltip) {
          tooltip.hide(0);
          tooltip.set("tooltipTarget", this);
        }
      }
      if (this.isDirty("fill") || this.isDirty("stroke")) {
        var markerRectangle = void 0;
        var legendDataItem = this.get("legendDataItem");
        if (legendDataItem) {
          markerRectangle = legendDataItem.get("markerRectangle");
          if (markerRectangle) {
            if (this.isVisible()) {
              if (this.isDirty("stroke")) {
                var stroke = this.get("stroke");
                markerRectangle.set("stroke", stroke);
              }
              if (this.isDirty("fill")) {
                var fill = this.get("fill");
                markerRectangle.set("fill", fill);
              }
            }
          }
        }
        this.updateLegendMarker(void 0);
      }
      if (this.bullets.length > 0) {
        var startIndex_1 = this.startIndex();
        var endIndex_1 = this.endIndex();
        for (var i = startIndex_1; i < endIndex_1; i++) {
          var dataItem = this.dataItems[i];
          if (!dataItem.bullets) {
            this._makeBullets(dataItem);
          }
        }
      }
    }
  });
  Object.defineProperty(Series2.prototype, "_calculateAggregates", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(startIndex, endIndex) {
      var _this = this;
      var fields = this._valueFields;
      if (!fields) {
        throw new Error("No value fields are set for the series.");
      }
      var sum = {};
      var absSum = {};
      var count = {};
      var low = {};
      var high = {};
      var open = {};
      var close = {};
      var average = {};
      var previous = {};
      each(fields, function(key) {
        sum[key] = 0;
        absSum[key] = 0;
        count[key] = 0;
      });
      each(fields, function(key) {
        var change = key + "Change";
        var changePercent = key + "ChangePercent";
        var changePrevious = key + "ChangePrevious";
        var changePreviousPercent = key + "ChangePreviousPercent";
        var changeSelection = key + "ChangeSelection";
        var changeSelectionPercent = key + "ChangeSelectionPercent";
        var openKey = "valueY";
        if (key == "valueX" || key == "openValueX" || key == "lowValueX" || key == "highValueX") {
          openKey = "valueX";
        }
        var baseValueSeries = _this.getPrivate("baseValueSeries");
        for (var i = startIndex; i < endIndex; i++) {
          var dataItem = _this.dataItems[i];
          var value = dataItem.get(key);
          if (value != null) {
            count[key]++;
            sum[key] += value;
            absSum[key] += Math.abs(value);
            average[key] = sum[key] / count[key];
            if (low[key] > value || low[key] == null) {
              low[key] = value;
            }
            if (high[key] < value || high[key] == null) {
              high[key] = value;
            }
            close[key] = value;
            if (open[key] == null) {
              open[key] = value;
              previous[key] = value;
              if (baseValueSeries) {
                open[openKey] = baseValueSeries._getBase(openKey);
              }
            }
            if (startIndex === 0) {
              dataItem.setRaw(change, value - open[openKey]);
              dataItem.setRaw(changePercent, (value - open[openKey]) / open[openKey] * 100);
            }
            dataItem.setRaw(changePrevious, value - previous[openKey]);
            dataItem.setRaw(changePreviousPercent, (value - previous[openKey]) / previous[openKey] * 100);
            dataItem.setRaw(changeSelection, value - open[openKey]);
            dataItem.setRaw(changeSelectionPercent, (value - open[openKey]) / open[openKey] * 100);
            previous[key] = value;
          }
        }
      });
      each(fields, function(key) {
        _this.setPrivate(key + "AverageSelection", average[key]);
        _this.setPrivate(key + "CountSelection", count[key]);
        _this.setPrivate(key + "SumSelection", sum[key]);
        _this.setPrivate(key + "AbsoluteSumSelection", absSum[key]);
        _this.setPrivate(key + "LowSelection", low[key]);
        _this.setPrivate(key + "HighSelection", high[key]);
        _this.setPrivate(key + "OpenSelection", open[key]);
        _this.setPrivate(key + "CloseSelection", close[key]);
      });
      if (startIndex === 0 && endIndex === this.dataItems.length) {
        each(fields, function(key) {
          _this.setPrivate(key + "Average", average[key]);
          _this.setPrivate(key + "Count", count[key]);
          _this.setPrivate(key + "Sum", sum[key]);
          _this.setPrivate(key + "AbsoluteSum", absSum[key]);
          _this.setPrivate(key + "Low", low[key]);
          _this.setPrivate(key + "High", high[key]);
          _this.setPrivate(key + "Open", open[key]);
          _this.setPrivate(key + "Close", close[key]);
        });
      }
    }
  });
  Object.defineProperty(Series2.prototype, "_updateChildren", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      _super.prototype._updateChildren.call(this);
      this._psi = this.startIndex();
      this._pei = this.endIndex();
      if (this.isDirty("visible")) {
        this.bulletsContainer.set("visible", this.get("visible"));
      }
      if (this._valuesDirty && this.get("heatRules") != null) {
        var rules = this.get("heatRules", []);
        each(rules, function(rule) {
          var minValue = rule.minValue || _this.getPrivate(rule.dataField + "Low") || 0;
          var maxValue = rule.maxValue || _this.getPrivate(rule.dataField + "High") || 0;
          each(rule.target._entities, function(target) {
            var value = target.dataItem.get(rule.dataField);
            if (!isNumber(value)) {
              return;
            }
            var percent2;
            if (rule.logarithmic) {
              percent2 = (Math.log(value) * Math.LOG10E - Math.log(minValue) * Math.LOG10E) / (Math.log(maxValue) * Math.LOG10E - Math.log(minValue) * Math.LOG10E);
            } else {
              percent2 = (value - minValue) / (maxValue - minValue);
            }
            if (isNumber(value) && (!isNumber(percent2) || Math.abs(percent2) == Infinity)) {
              percent2 = 0.5;
            }
            var propertyValue;
            if (isNumber(rule.min)) {
              propertyValue = rule.min + (rule.max - rule.min) * percent2;
            } else if (rule.min instanceof Color) {
              propertyValue = Color.interpolate(percent2, rule.min, rule.max);
            } else if (rule.min instanceof Percent) {
              propertyValue = percentInterpolate(percent2, rule.min, rule.max);
            }
            if (rule.customFunction) {
              rule.customFunction.call(_this, target, minValue, maxValue, value);
            } else {
              target.set(rule.key, propertyValue);
            }
          });
        });
      }
      if (this.bullets.length > 0) {
        var count = this.dataItems.length;
        var startIndex = this.startIndex();
        var endIndex = this.endIndex();
        if (endIndex < count) {
          endIndex++;
        }
        if (startIndex > 0) {
          startIndex--;
        }
        for (var i = 0; i < startIndex; i++) {
          this._hideBullets(this.dataItems[i]);
        }
        for (var i = startIndex; i < endIndex; i++) {
          this._positionBullets(this.dataItems[i]);
        }
        for (var i = endIndex; i < count; i++) {
          this._hideBullets(this.dataItems[i]);
        }
      }
    }
  });
  Object.defineProperty(Series2.prototype, "_positionBullets", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(dataItem) {
      var _this = this;
      if (dataItem.bullets) {
        each(dataItem.bullets, function(bullet) {
          _this._positionBullet(bullet);
          var sprite = bullet.get("sprite");
          if (bullet.get("dynamic")) {
            if (sprite) {
              sprite._markDirtyKey("fill");
              sprite.markDirtySize();
            }
            if (sprite instanceof Container) {
              sprite.walkChildren(function(child) {
                child._markDirtyKey("fill");
                child.markDirtySize();
                if (child instanceof Label) {
                  child.text.markDirtyText();
                }
              });
            }
          }
          if (sprite instanceof Label && sprite.get("populateText")) {
            sprite.text.markDirtyText();
          }
        });
      }
    }
  });
  Object.defineProperty(Series2.prototype, "_hideBullets", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(dataItem) {
      if (dataItem.bullets) {
        each(dataItem.bullets, function(bullet) {
          var sprite = bullet.get("sprite");
          if (sprite) {
            sprite.setPrivate("visible", false);
          }
        });
      }
    }
  });
  Object.defineProperty(Series2.prototype, "_positionBullet", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(_bullet) {
    }
  });
  Object.defineProperty(Series2.prototype, "_placeBulletsContainer", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(chart) {
      chart.bulletsContainer.children.moveValue(this.bulletsContainer);
    }
  });
  Object.defineProperty(Series2.prototype, "_removeBulletsContainer", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var bulletsContainer = this.bulletsContainer;
      if (bulletsContainer.parent) {
        bulletsContainer.parent.children.removeValue(bulletsContainer);
      }
    }
  });
  Object.defineProperty(Series2.prototype, "disposeDataItem", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(dataItem) {
      var bullets = dataItem.bullets;
      if (bullets) {
        each(bullets, function(bullet) {
          bullet.dispose();
        });
      }
    }
  });
  Object.defineProperty(Series2.prototype, "_getItemReaderLabel", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return "";
    }
  });
  Object.defineProperty(Series2.prototype, "showDataItem", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(dataItem, duration) {
      return __awaiter(this, void 0, void 0, function() {
        var promises, bullets;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              promises = [_super.prototype.showDataItem.call(this, dataItem, duration)];
              bullets = dataItem.bullets;
              if (bullets) {
                each(bullets, function(bullet) {
                  promises.push(bullet.get("sprite").show(duration));
                });
              }
              return [4, Promise.all(promises)];
            case 1:
              _a.sent();
              return [2];
          }
        });
      });
    }
  });
  Object.defineProperty(Series2.prototype, "hideDataItem", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(dataItem, duration) {
      return __awaiter(this, void 0, void 0, function() {
        var promises, bullets;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              promises = [_super.prototype.hideDataItem.call(this, dataItem, duration)];
              bullets = dataItem.bullets;
              if (bullets) {
                each(bullets, function(bullet) {
                  promises.push(bullet.get("sprite").hide(duration));
                });
              }
              return [4, Promise.all(promises)];
            case 1:
              _a.sent();
              return [2];
          }
        });
      });
    }
  });
  Object.defineProperty(Series2.prototype, "_sequencedShowHide", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(show, duration) {
      return __awaiter(this, void 0, void 0, function() {
        var startIndex_2, endIndex_2;
        var _this = this;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!this.get("sequencedInterpolation"))
                return [3, 4];
              if (!isNumber(duration)) {
                duration = this.get("interpolationDuration", 0);
              }
              if (!(duration > 0))
                return [3, 2];
              startIndex_2 = this.startIndex();
              endIndex_2 = this.endIndex();
              return [4, Promise.all(map(this.dataItems, function(dataItem, i) {
                return __awaiter(_this, void 0, void 0, function() {
                  var realDuration, delay;
                  return __generator(this, function(_a2) {
                    switch (_a2.label) {
                      case 0:
                        realDuration = duration || 0;
                        if (i < startIndex_2 - 10 || i > endIndex_2 + 10) {
                          realDuration = 0;
                        }
                        delay = this.get("sequencedDelay", 0) + realDuration / (endIndex_2 - startIndex_2);
                        return [4, sleep(delay * (i - startIndex_2))];
                      case 1:
                        _a2.sent();
                        if (!show)
                          return [3, 3];
                        return [4, this.showDataItem(dataItem, realDuration)];
                      case 2:
                        _a2.sent();
                        return [3, 5];
                      case 3:
                        return [4, this.hideDataItem(dataItem, realDuration)];
                      case 4:
                        _a2.sent();
                        _a2.label = 5;
                      case 5:
                        return [2];
                    }
                  });
                });
              }))];
            case 1:
              _a.sent();
              return [3, 4];
            case 2:
              return [4, Promise.all(map(this.dataItems, function(dataItem) {
                if (show) {
                  return _this.showDataItem(dataItem, 0);
                } else {
                  return _this.hideDataItem(dataItem, 0);
                }
              }))];
            case 3:
              _a.sent();
              _a.label = 4;
            case 4:
              return [2];
          }
        });
      });
    }
  });
  Object.defineProperty(Series2.prototype, "updateLegendValue", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(dataItem) {
      var legendDataItem = dataItem.get("legendDataItem");
      if (legendDataItem) {
        var valueLabel = legendDataItem.get("valueLabel");
        if (valueLabel) {
          var text = valueLabel.text;
          var txt = "";
          valueLabel._setDataItem(dataItem);
          txt = this.get("legendValueText", text.get("text", ""));
          valueLabel.set("text", txt);
          text.markDirtyText();
        }
        var label = legendDataItem.get("label");
        if (label) {
          var text = label.text;
          var txt = "";
          label._setDataItem(dataItem);
          txt = this.get("legendLabelText", text.get("text", ""));
          label.set("text", txt);
          text.markDirtyText();
        }
      }
    }
  });
  Object.defineProperty(Series2.prototype, "updateLegendMarker", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(_dataItem) {
    }
  });
  Object.defineProperty(Series2.prototype, "_onHide", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._onHide.call(this);
      var tooltip = this.getTooltip();
      if (tooltip) {
        tooltip.hide();
      }
    }
  });
  Object.defineProperty(Series2.prototype, "hoverDataItem", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(_dataItem) {
    }
  });
  Object.defineProperty(Series2.prototype, "unhoverDataItem", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(_dataItem) {
    }
  });
  Object.defineProperty(Series2.prototype, "_getBase", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key) {
      var dataItem = this.dataItems[this.startIndex()];
      if (dataItem) {
        return dataItem.get(key);
      }
      return 0;
    }
  });
  Object.defineProperty(Series2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Series"
  });
  Object.defineProperty(Series2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Component.classNames.concat([Series2.className])
  });
  return Series2;
}(Component);

// node_modules/@amcharts/amcharts5/.internal/core/render/Chart.js
var Chart = function(_super) {
  __extends(Chart2, _super);
  function Chart2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    Object.defineProperty(_this, "chartContainer", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this.children.push(Container.new(_this._root, { width: p100, height: p100, interactiveChildren: false }))
    });
    Object.defineProperty(_this, "bulletsContainer", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: Container.new(_this._root, { interactiveChildren: false, isMeasured: false, position: "absolute", width: p100, height: p100 })
    });
    return _this;
  }
  Object.defineProperty(Chart2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Chart"
  });
  Object.defineProperty(Chart2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Container.classNames.concat([Chart2.className])
  });
  return Chart2;
}(Container);

// node_modules/@amcharts/amcharts5/.internal/core/render/SerialChart.js
var SerialChart = function(_super) {
  __extends(SerialChart2, _super);
  function SerialChart2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    Object.defineProperty(_this, "seriesContainer", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: Container.new(_this._root, { width: p100, height: p100, isMeasured: false })
    });
    Object.defineProperty(_this, "series", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new ListAutoDispose()
    });
    return _this;
  }
  Object.defineProperty(SerialChart2.prototype, "_afterNew", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      _super.prototype._afterNew.call(this);
      this._disposers.push(this.series);
      var children = this.seriesContainer.children;
      this._disposers.push(this.series.events.onAll(function(change) {
        if (change.type === "clear") {
          each(change.oldValues, function(series) {
            _this._removeSeries(series);
          });
          var colors = _this.get("colors");
          if (colors) {
            colors.reset();
          }
        } else if (change.type === "push") {
          children.moveValue(change.newValue);
          _this._processSeries(change.newValue);
        } else if (change.type === "setIndex") {
          children.setIndex(change.index, change.newValue);
          _this._processSeries(change.newValue);
        } else if (change.type === "insertIndex") {
          children.insertIndex(change.index, change.newValue);
          _this._processSeries(change.newValue);
        } else if (change.type === "removeIndex") {
          _this._removeSeries(change.oldValue);
        } else if (change.type === "moveIndex") {
          children.moveValue(change.value, change.newIndex);
          _this._processSeries(change.value);
        } else {
          throw new Error("Unknown IListEvent type");
        }
      }));
    }
  });
  Object.defineProperty(SerialChart2.prototype, "_processSeries", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(series) {
      series.chart = this;
      series._placeBulletsContainer(this);
    }
  });
  Object.defineProperty(SerialChart2.prototype, "_removeSeries", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(series) {
      if (!series.isDisposed()) {
        this.seriesContainer.children.removeValue(series);
        series._removeBulletsContainer();
      }
    }
  });
  Object.defineProperty(SerialChart2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "SerialChart"
  });
  Object.defineProperty(SerialChart2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Chart.classNames.concat([SerialChart2.className])
  });
  return SerialChart2;
}(Chart);

// node_modules/@amcharts/amcharts5/.internal/themes/DefaultTheme.js
function setColor(rule, key, ic, name) {
  rule.set(key, ic.get(name));
  ic.on(name, function(value) {
    rule.set(key, value);
  });
}
var DefaultTheme = function(_super) {
  __extends(DefaultTheme2, _super);
  function DefaultTheme2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(DefaultTheme2.prototype, "setupDefaultRules", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype.setupDefaultRules.call(this);
      var language = this._root.language;
      var ic = this._root.interfaceColors;
      var horizontalLayout = this._root.horizontalLayout;
      var verticalLayout = this._root.verticalLayout;
      var r = this.rule.bind(this);
      r("InterfaceColors").setAll({
        stroke: Color.fromHex(15066597),
        fill: Color.fromHex(15987699),
        primaryButton: Color.fromHex(6788316),
        primaryButtonHover: Color.fromHex(6779356),
        primaryButtonDown: Color.fromHex(6872182),
        primaryButtonActive: Color.fromHex(6872182),
        primaryButtonText: Color.fromHex(16777215),
        primaryButtonStroke: Color.fromHex(16777215),
        secondaryButton: Color.fromHex(14277081),
        secondaryButtonHover: Color.fromHex(10724259),
        secondaryButtonDown: Color.fromHex(9276813),
        secondaryButtonActive: Color.fromHex(15132390),
        secondaryButtonText: Color.fromHex(0),
        secondaryButtonStroke: Color.fromHex(16777215),
        grid: Color.fromHex(0),
        background: Color.fromHex(16777215),
        alternativeBackground: Color.fromHex(0),
        text: Color.fromHex(0),
        alternativeText: Color.fromHex(16777215),
        disabled: Color.fromHex(11382189),
        positive: Color.fromHex(5288704),
        negative: Color.fromHex(11730944)
      });
      {
        var rule = r("ColorSet");
        rule.setAll({
          passOptions: {
            hue: 0.05,
            saturation: 0,
            lightness: 0
          },
          colors: [
            Color.fromHex(6797276)
          ],
          step: 1,
          reuse: false,
          startIndex: 0
        });
        rule.setPrivate("currentStep", 0);
        rule.setPrivate("currentPass", 0);
      }
      r("Entity").setAll({
        stateAnimationDuration: 0,
        stateAnimationEasing: out(cubic)
      });
      r("Component").setAll({
        interpolationDuration: 0,
        interpolationEasing: out(cubic)
      });
      r("Sprite").setAll({
        visible: true,
        scale: 1,
        opacity: 1,
        rotation: 0,
        position: "relative",
        tooltipX: p50,
        tooltipY: p50,
        tooltipPosition: "fixed",
        isMeasured: true
      });
      r("Sprite").states.create("default", { "visible": true, opacity: 1 });
      r("Container").setAll({
        interactiveChildren: true,
        setStateOnChildren: false
      });
      r("Graphics").setAll({
        strokeWidth: 1
      });
      r("Chart").setAll({
        width: p100,
        height: p100,
        interactiveChildren: false
      });
      r("Sprite", ["horizontal", "center"]).setAll({
        centerX: p50,
        x: p50
      });
      r("Sprite", ["vertical", "center"]).setAll({
        centerY: p50,
        y: p50
      });
      r("Container", ["horizontal", "layout"]).setAll({
        layout: horizontalLayout
      });
      r("Container", ["vertical", "layout"]).setAll({
        layout: verticalLayout
      });
      r("Pattern").setAll({
        repetition: "repeat",
        width: 50,
        height: 50,
        rotation: 0,
        fillOpacity: 1
      });
      r("LinePattern").setAll({
        gap: 6,
        colorOpacity: 1,
        width: 49,
        height: 49
      });
      r("RectanglePattern").setAll({
        gap: 6,
        checkered: false,
        centered: true,
        maxWidth: 5,
        maxHeight: 5,
        width: 48,
        height: 48,
        strokeWidth: 0
      });
      r("CirclePattern").setAll({
        gap: 5,
        checkered: false,
        centered: false,
        radius: 3,
        strokeWidth: 0,
        width: 45,
        height: 45
      });
      r("LinearGradient").setAll({
        rotation: 90
      });
      r("Legend").setAll({
        fillField: "fill",
        strokeField: "stroke",
        nameField: "name",
        layout: GridLayout.new(this._root, {}),
        layer: 30,
        clickTarget: "itemContainer"
      });
      r("Container", ["legend", "item", "itemcontainer"]).setAll({
        paddingLeft: 5,
        paddingRight: 5,
        paddingBottom: 5,
        paddingTop: 5,
        layout: horizontalLayout,
        setStateOnChildren: true,
        interactiveChildren: false,
        ariaChecked: true,
        focusable: true,
        ariaLabel: language.translate("Press ENTER to toggle")
      });
      {
        var rule = r("Rectangle", ["legend", "item", "background"]);
        rule.setAll({
          fillOpacity: 0
        });
        setColor(rule, "fill", ic, "background");
      }
      r("Container", ["legend", "marker"]).setAll({
        setStateOnChildren: true,
        centerY: p50,
        paddingLeft: 0,
        paddingRight: 0,
        paddingBottom: 0,
        paddingTop: 0,
        width: 18,
        height: 18
      });
      r("RoundedRectangle", ["legend", "marker", "rectangle"]).setAll({
        width: p100,
        height: p100,
        cornerRadiusBL: 3,
        cornerRadiusTL: 3,
        cornerRadiusBR: 3,
        cornerRadiusTR: 3
      });
      {
        var rule = r("RoundedRectangle", ["legend", "marker", "rectangle"]).states.create("disabled", {});
        setColor(rule, "fill", ic, "disabled");
        setColor(rule, "stroke", ic, "disabled");
      }
      r("Label", ["legend", "label"]).setAll({
        centerY: p50,
        marginLeft: 5,
        paddingRight: 0,
        paddingLeft: 0,
        paddingTop: 0,
        paddingBottom: 0,
        populateText: true
      });
      {
        var rule = r("Label", ["legend", "label"]).states.create("disabled", {});
        setColor(rule, "fill", ic, "disabled");
      }
      r("Label", ["legend", "value", "label"]).setAll({
        centerY: p50,
        marginLeft: 5,
        paddingRight: 0,
        paddingLeft: 0,
        paddingTop: 0,
        paddingBottom: 0,
        width: 50,
        centerX: p100,
        populateText: true
      });
      {
        var rule = r("Label", ["legend", "value", "label"]).states.create("disabled", {});
        setColor(rule, "fill", ic, "disabled");
      }
      r("HeatLegend").setAll({
        stepCount: 1
      });
      r("RoundedRectangle", ["heatlegend", "marker"]).setAll({
        cornerRadiusTR: 0,
        cornerRadiusBR: 0,
        cornerRadiusTL: 0,
        cornerRadiusBL: 0
      });
      r("RoundedRectangle", ["vertical", "heatlegend", "marker"]).setAll({
        height: p100,
        width: 15
      });
      r("RoundedRectangle", ["horizontal", "heatlegend", "marker"]).setAll({
        width: p100,
        height: 15
      });
      r("HeatLegend", ["vertical"]).setAll({
        height: p100
      });
      r("HeatLegend", ["horizontal"]).setAll({
        width: p100
      });
      r("Label", ["heatlegend", "start"]).setAll({
        paddingLeft: 5,
        paddingRight: 5,
        paddingTop: 5,
        paddingBottom: 5
      });
      r("Label", ["heatlegend", "end"]).setAll({
        paddingLeft: 5,
        paddingRight: 5,
        paddingTop: 5,
        paddingBottom: 5
      });
      {
        var rule = r("Label");
        rule.setAll({
          paddingTop: 8,
          paddingBottom: 8,
          paddingLeft: 10,
          paddingRight: 10,
          fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
          fontSize: "1em",
          populateText: false
        });
        setColor(rule, "fill", ic, "text");
      }
      r("RadialLabel").setAll({
        textType: "regular",
        centerY: p50,
        centerX: p50,
        inside: false,
        radius: 0,
        baseRadius: p100,
        orientation: "auto",
        textAlign: "center"
      });
      r("RoundedRectangle").setAll({
        cornerRadiusTL: 8,
        cornerRadiusBL: 8,
        cornerRadiusTR: 8,
        cornerRadiusBR: 8
      });
      r("PointedRectangle").setAll({
        pointerBaseWidth: 15,
        pointerLength: 10,
        cornerRadius: 8
      });
      r("Slice").setAll({
        shiftRadius: 0,
        dRadius: 0,
        dInnerRadius: 0
      });
      {
        var rule = r("Tick");
        rule.setAll({
          strokeOpacity: 0.15,
          isMeasured: false,
          length: 5,
          position: "absolute"
        });
        setColor(rule, "stroke", ic, "grid");
      }
      r("Bullet").setAll({
        locationX: 0.5,
        locationY: 0.5
      });
      r("Tooltip").setAll({
        position: "absolute",
        getFillFromSprite: true,
        getStrokeFromSprite: false,
        autoTextColor: true,
        paddingTop: 9,
        paddingBottom: 8,
        paddingLeft: 10,
        paddingRight: 10,
        marginBottom: 5,
        pointerOrientation: "vertical",
        centerX: p50,
        centerY: p50,
        animationEasing: out(cubic),
        exportable: false
      });
      {
        var rule = r("PointedRectangle", ["tooltip", "background"]);
        rule.setAll({
          strokeOpacity: 0.9,
          cornerRadius: 4,
          pointerLength: 4,
          pointerBaseWidth: 8,
          fillOpacity: 0.9,
          stroke: Color.fromHex(16777215)
        });
      }
      {
        var rule = r("Label", ["tooltip"]);
        rule.setAll({
          role: "tooltip",
          populateText: true,
          paddingRight: 0,
          paddingTop: 0,
          paddingLeft: 0,
          paddingBottom: 0
        });
        setColor(rule, "fill", ic, "alternativeText");
      }
      r("Button").setAll({
        paddingTop: 8,
        paddingBottom: 8,
        paddingLeft: 10,
        paddingRight: 10,
        interactive: true,
        layout: horizontalLayout,
        interactiveChildren: false,
        setStateOnChildren: true,
        focusable: true
      });
      r("Button").states.create("hover", {});
      r("Button").states.create("down", { stateAnimationDuration: 0 });
      r("Button").states.create("active", {});
      {
        var rule = r("RoundedRectangle", ["button", "background"]);
        setColor(rule, "fill", ic, "primaryButton");
        setColor(rule, "stroke", ic, "primaryButtonStroke");
      }
      {
        var rule = r("RoundedRectangle", ["button", "background"]).states.create("hover", {});
        setColor(rule, "fill", ic, "primaryButtonHover");
      }
      {
        var rule = r("RoundedRectangle", ["button", "background"]).states.create("down", { stateAnimationDuration: 0 });
        setColor(rule, "fill", ic, "primaryButtonDown");
      }
      {
        var rule = r("RoundedRectangle", ["button", "background"]).states.create("active", {});
        setColor(rule, "fill", ic, "primaryButtonActive");
      }
      {
        var rule = r("Graphics", ["button", "icon"]);
        setColor(rule, "stroke", ic, "primaryButtonText");
      }
      {
        var rule = r("Label", ["button"]);
        setColor(rule, "fill", ic, "primaryButtonText");
      }
      r("Button", ["zoom"]).setAll({
        paddingTop: 18,
        paddingBottom: 18,
        paddingLeft: 12,
        paddingRight: 12,
        centerX: 46,
        centerY: -10,
        y: 0,
        x: p100,
        role: "button",
        ariaLabel: language.translate("Zoom Out"),
        layer: 30
      });
      {
        var rule = r("RoundedRectangle", ["background", "button", "zoom"]);
        rule.setAll({
          cornerRadiusBL: 40,
          cornerRadiusBR: 40,
          cornerRadiusTL: 40,
          cornerRadiusTR: 40
        });
        setColor(rule, "fill", ic, "primaryButton");
      }
      {
        var rule = r("RoundedRectangle", ["background", "button", "zoom"]).states.create("hover", {});
        setColor(rule, "fill", ic, "primaryButtonHover");
      }
      {
        var rule = r("RoundedRectangle", ["background", "button", "zoom"]).states.create("down", { stateAnimationDuration: 0 });
        setColor(rule, "fill", ic, "primaryButtonDown");
      }
      {
        var rule = r("Graphics", ["icon", "button", "zoom"]);
        rule.setAll({
          strokeOpacity: 0.7,
          draw: function(display) {
            display.moveTo(0, 0);
            display.lineTo(12, 0);
          }
        });
        setColor(rule, "stroke", ic, "primaryButtonText");
      }
      r("Button", ["resize"]).setAll({
        paddingTop: 9,
        paddingBottom: 9,
        paddingLeft: 13,
        paddingRight: 13,
        draggable: true,
        centerX: p50,
        centerY: p50,
        position: "absolute",
        role: "slider",
        ariaValueMin: "0",
        ariaValueMax: "100",
        ariaLabel: language.translate("Use up and down arrows to move selection")
      });
      {
        var rule = r("RoundedRectangle", ["background", "resize", "button"]);
        rule.setAll({
          cornerRadiusBL: 40,
          cornerRadiusBR: 40,
          cornerRadiusTL: 40,
          cornerRadiusTR: 40
        });
        setColor(rule, "fill", ic, "secondaryButton");
        setColor(rule, "stroke", ic, "secondaryButtonStroke");
      }
      {
        var rule = r("RoundedRectangle", ["background", "resize", "button"]).states.create("hover", {});
        setColor(rule, "fill", ic, "secondaryButtonHover");
      }
      {
        var rule = r("RoundedRectangle", ["background", "resize", "button"]).states.create("down", { stateAnimationDuration: 0 });
        setColor(rule, "fill", ic, "secondaryButtonDown");
      }
      {
        var rule = r("Graphics", ["resize", "button", "icon"]);
        rule.setAll({
          strokeOpacity: 0.7,
          draw: function(display) {
            display.moveTo(0, 0);
            display.lineTo(0, 12);
            display.moveTo(4, 0);
            display.lineTo(4, 12);
          }
        });
        setColor(rule, "stroke", ic, "secondaryButtonText");
      }
      r("Button", ["resize", "vertical"]).setAll({
        rotation: 90,
        cursorOverStyle: "ns-resize"
      });
      r("Button", ["resize", "horizontal"]).setAll({
        cursorOverStyle: "ew-resize"
      });
      r("Button", ["play"]).setAll({
        paddingTop: 13,
        paddingBottom: 13,
        paddingLeft: 14,
        paddingRight: 14,
        ariaLabel: language.translate("Play"),
        toggleKey: "active"
      });
      {
        var rule = r("RoundedRectangle", ["play", "background"]);
        rule.setAll({
          strokeOpacity: 0.5,
          cornerRadiusBL: 100,
          cornerRadiusBR: 100,
          cornerRadiusTL: 100,
          cornerRadiusTR: 100
        });
        setColor(rule, "fill", ic, "primaryButton");
      }
      {
        var rule = r("Graphics", ["play", "icon"]);
        rule.setAll({
          stateAnimationDuration: 0,
          dx: 1,
          draw: function(display) {
            display.moveTo(0, -5);
            display.lineTo(8, 0);
            display.lineTo(0, 5);
            display.lineTo(0, -5);
          }
        });
        setColor(rule, "fill", ic, "primaryButtonText");
      }
      r("Graphics", ["play", "icon"]).states.create("default", {
        stateAnimationDuration: 0
      });
      r("Graphics", ["play", "icon"]).states.create("active", {
        stateAnimationDuration: 0,
        draw: function(display) {
          display.moveTo(-4, -5);
          display.lineTo(-1, -5);
          display.lineTo(-1, 5);
          display.lineTo(-4, 5);
          display.lineTo(-4, -5);
          display.moveTo(4, -5);
          display.lineTo(1, -5);
          display.lineTo(1, 5);
          display.lineTo(4, 5);
          display.lineTo(4, -5);
        }
      });
      r("Button", ["switch"]).setAll({
        paddingTop: 4,
        paddingBottom: 4,
        paddingLeft: 4,
        paddingRight: 4,
        ariaLabel: language.translate("Press ENTER to toggle"),
        toggleKey: "active",
        width: 40,
        height: 24,
        layout: null
      });
      {
        var rule = r("RoundedRectangle", ["switch", "background"]);
        rule.setAll({
          strokeOpacity: 0.5,
          cornerRadiusBL: 100,
          cornerRadiusBR: 100,
          cornerRadiusTL: 100,
          cornerRadiusTR: 100
        });
        setColor(rule, "fill", ic, "primaryButton");
      }
      {
        var rule = r("Circle", ["switch", "icon"]);
        rule.setAll({
          radius: 8,
          centerY: 0,
          centerX: 0,
          dx: 0
        });
        setColor(rule, "fill", ic, "primaryButtonText");
      }
      r("Graphics", ["switch", "icon"]).states.create("active", {
        dx: 16
      });
      r("Scrollbar").setAll({
        start: 0,
        end: 1,
        layer: 30,
        animationEasing: out(cubic)
      });
      r("Scrollbar", ["vertical"]).setAll({
        marginRight: 13,
        marginLeft: 13,
        minWidth: 12,
        height: p100
      });
      r("Scrollbar", ["horizontal"]).setAll({
        marginTop: 13,
        marginBottom: 13,
        minHeight: 12,
        width: p100
      });
      this.rule("Button", ["scrollbar"]).setAll({
        exportable: false
      });
      {
        var rule = r("RoundedRectangle", ["scrollbar", "main", "background"]);
        rule.setAll({
          cornerRadiusTL: 8,
          cornerRadiusBL: 8,
          cornerRadiusTR: 8,
          cornerRadiusBR: 8,
          fillOpacity: 0.8
        });
        setColor(rule, "fill", ic, "fill");
      }
      {
        var rule = r("RoundedRectangle", ["scrollbar", "thumb"]);
        rule.setAll({
          role: "slider",
          ariaLive: "polite",
          position: "absolute",
          draggable: true
        });
        setColor(rule, "fill", ic, "secondaryButton");
      }
      {
        var rule = r("RoundedRectangle", ["scrollbar", "thumb"]).states.create("hover", {});
        setColor(rule, "fill", ic, "secondaryButtonHover");
      }
      {
        var rule = r("RoundedRectangle", ["scrollbar", "thumb"]).states.create("down", { stateAnimationDuration: 0 });
        setColor(rule, "fill", ic, "secondaryButtonDown");
      }
      r("RoundedRectangle", ["scrollbar", "thumb", "vertical"]).setAll({
        x: p50,
        width: p100,
        centerX: p50,
        ariaLabel: language.translate("Use up and down arrows to move selection")
      });
      r("RoundedRectangle", ["scrollbar", "thumb", "horizontal"]).setAll({
        y: p50,
        centerY: p50,
        height: p100,
        ariaLabel: language.translate("Use left and right arrows to move selection")
      });
      {
        var rule = r("PointedRectangle", ["axis", "tooltip", "background"]);
        rule.setAll({
          cornerRadius: 0
        });
        setColor(rule, "fill", ic, "alternativeBackground");
      }
      r("Label", ["axis", "tooltip"]).setAll({
        role: void 0
      });
      r("Label", ["axis", "tooltip", "y"]).setAll({
        textAlign: "right"
      });
      r("Label", ["axis", "tooltip", "y", "opposite"]).setAll({
        textAlign: "left"
      });
      r("Label", ["axis", "tooltip", "x"]).setAll({
        textAlign: "center"
      });
      r("Tooltip", ["categoryaxis"]).setAll({
        labelText: "{category}"
      });
      r("Star").setAll({
        spikes: 5,
        innerRadius: 5,
        radius: 10
      });
      r("Tooltip", ["stock"]).setAll({
        paddingTop: 6,
        paddingBottom: 5,
        paddingLeft: 7,
        paddingRight: 7
      });
      r("PointedRectangle", ["tooltip", "stock", "axis"]).setAll({
        pointerLength: 0,
        pointerBaseWidth: 0,
        cornerRadius: 3
      });
      r("Label", ["tooltip", "stock"]).setAll({
        fontSize: "0.8em"
      });
    }
  });
  return DefaultTheme2;
}(Theme);

export {
  ListTemplate,
  Percent,
  percent,
  p0,
  p100,
  p50,
  ready,
  removeElement,
  addEventListener,
  supports,
  blur,
  focus,
  getRendererEvent,
  setStyle,
  getStyle,
  isLocalEvent,
  setInteractive,
  getShadowRoot,
  StyleRule,
  getSafeResolution,
  relativeToValue,
  padString,
  trim,
  cleanFormat,
  stripTags,
  escapeForRgex,
  getYearDay,
  getWeek,
  getMonthWeek,
  getDayFromWeek,
  get12Hours,
  getTimeZone,
  mergeTags,
  sameBounds,
  Utils_exports,
  color,
  Color,
  RADIANS,
  DEGREES,
  round,
  fitToRange,
  sin,
  cos,
  normalizeAngle,
  getArcBounds,
  getAngle,
  Math_exports,
  cubic,
  out,
  Ease_exports,
  registry,
  addLicense,
  disposeAllRootElements,
  Entity,
  Sprite,
  BlendMode,
  Graphics,
  Rectangle,
  Layout,
  HorizontalLayout,
  VerticalLayout,
  GridLayout,
  TextFormatter,
  populateString,
  Container,
  Text,
  Label,
  setColor,
  DefaultTheme,
  RoundedRectangle,
  Button,
  ListData,
  JsonData,
  DataItem,
  Component,
  Time_exports,
  Series,
  Chart,
  SerialChart
};
//# sourceMappingURL=chunk-5JVNVA2M.js.map
