import {
  BlendMode,
  Button,
  Chart,
  Color,
  Component,
  Container,
  DEGREES,
  DataItem,
  DefaultTheme,
  Ease_exports,
  Entity,
  Graphics,
  GridLayout,
  HorizontalLayout,
  JsonData,
  Label,
  Layout,
  ListData,
  ListTemplate,
  Math_exports,
  Percent,
  RADIANS,
  Rectangle,
  RoundedRectangle,
  SerialChart,
  Series,
  Sprite,
  StyleRule,
  Text,
  TextFormatter,
  Time_exports,
  Utils_exports,
  VerticalLayout,
  addEventListener,
  addLicense,
  blur,
  cleanFormat,
  color,
  cos,
  disposeAllRootElements,
  escapeForRgex,
  fitToRange,
  focus,
  get12Hours,
  getArcBounds,
  getDayFromWeek,
  getMonthWeek,
  getRendererEvent,
  getSafeResolution,
  getShadowRoot,
  getStyle,
  getTimeZone,
  getWeek,
  getYearDay,
  isLocalEvent,
  mergeTags,
  normalizeAngle,
  p0,
  p100,
  p50,
  padString,
  percent,
  populateString,
  ready,
  registry,
  relativeToValue,
  removeElement,
  setInteractive,
  setStyle,
  sin,
  stripTags,
  supports,
  trim
} from "./chunk-5JVNVA2M.js";
import {
  ArrayDisposer,
  Array_exports,
  CounterDisposer,
  Disposer,
  DisposerClass,
  EventDispatcher,
  MultiDisposer,
  Object_exports,
  PLACEHOLDER,
  PLACEHOLDER2,
  Template,
  Theme,
  Type_exports,
  __extends,
  __read,
  __spreadArray,
  compare,
  copy,
  copy2,
  each,
  each2,
  eachContinue,
  eachContinue2,
  indexOf,
  isArray,
  isNumber,
  isObject,
  isString,
  keepIf,
  keys,
  map,
  numberToString,
  pushOne,
  remove,
  removeFirst,
  toNumber
} from "./chunk-7QRRFINT.js";
import {
  __export
} from "./chunk-QOVRSCHT.js";

// node_modules/@amcharts/amcharts5/.internal/core/util/ResizeSensor.js
var Native = function() {
  function Native2() {
    var _this = this;
    Object.defineProperty(this, "_observer", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_targets", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    this._observer = new ResizeObserver(function(entries) {
      each(entries, function(entry) {
        each(_this._targets, function(x2) {
          if (x2.target === entry.target) {
            x2.callback();
          }
        });
      });
    });
  }
  Object.defineProperty(Native2.prototype, "addTarget", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(target, callback) {
      this._observer.observe(target, { box: "border-box" });
      this._targets.push({ target, callback });
    }
  });
  Object.defineProperty(Native2.prototype, "removeTarget", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(target) {
      this._observer.unobserve(target);
      keepIf(this._targets, function(x2) {
        return x2.target !== target;
      });
    }
  });
  return Native2;
}();
var Raf = function() {
  function Raf2() {
    Object.defineProperty(this, "_timer", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: null
    });
    Object.defineProperty(this, "_targets", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
  }
  Object.defineProperty(Raf2.prototype, "addTarget", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(target, callback) {
      var _this = this;
      if (this._timer === null) {
        var lastTime_1 = null;
        var loop_1 = function() {
          var currentTime = Date.now();
          if (lastTime_1 === null || currentTime > lastTime_1 + Raf2.delay) {
            lastTime_1 = currentTime;
            each(_this._targets, function(x2) {
              var newSize = x2.target.getBoundingClientRect();
              if (newSize.width !== x2.size.width || newSize.height !== x2.size.height) {
                x2.size = newSize;
                x2.callback();
              }
            });
          }
          if (_this._targets.length === 0) {
            _this._timer = null;
          } else {
            _this._timer = requestAnimationFrame(loop_1);
          }
        };
        this._timer = requestAnimationFrame(loop_1);
      }
      var size = { width: 0, height: 0, left: 0, right: 0, top: 0, bottom: 0, x: 0, y: 0 };
      this._targets.push({ target, callback, size });
    }
  });
  Object.defineProperty(Raf2.prototype, "removeTarget", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(target) {
      keepIf(this._targets, function(x2) {
        return x2.target !== target;
      });
      if (this._targets.length === 0) {
        if (this._timer !== null) {
          cancelAnimationFrame(this._timer);
          this._timer = null;
        }
      }
    }
  });
  Object.defineProperty(Raf2, "delay", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: 200
  });
  return Raf2;
}();
var observer = null;
function makeSensor() {
  if (observer === null) {
    if (typeof ResizeObserver !== "undefined") {
      observer = new Native();
    } else {
      observer = new Raf();
    }
  }
  return observer;
}
var ResizeSensor = function() {
  function ResizeSensor2(element, callback) {
    Object.defineProperty(this, "_sensor", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_element", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_disposed", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    this._sensor = makeSensor();
    this._element = element;
    this._sensor.addTarget(element, callback);
  }
  Object.defineProperty(ResizeSensor2.prototype, "isDisposed", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this._disposed;
    }
  });
  Object.defineProperty(ResizeSensor2.prototype, "dispose", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (!this._disposed) {
        this._disposed = true;
        this._sensor.removeTarget(this._element);
      }
    }
  });
  Object.defineProperty(ResizeSensor2.prototype, "sensor", {
    get: function() {
      return this._sensor;
    },
    enumerable: false,
    configurable: true
  });
  return ResizeSensor2;
}();

// node_modules/@amcharts/amcharts5/.internal/core/util/InterfaceColors.js
var InterfaceColors = function(_super) {
  __extends(InterfaceColors2, _super);
  function InterfaceColors2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(InterfaceColors2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "InterfaceColors"
  });
  Object.defineProperty(InterfaceColors2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Entity.classNames.concat([InterfaceColors2.className])
  });
  return InterfaceColors2;
}(Entity);

// node_modules/@amcharts/amcharts5/.internal/core/render/PointedRectangle.js
var PointedRectangle = function(_super) {
  __extends(PointedRectangle2, _super);
  function PointedRectangle2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(PointedRectangle2.prototype, "_beforeChanged", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._beforeChanged.call(this);
      if (this.isDirty("pointerBaseWidth") || this.isDirty("cornerRadius") || this.isDirty("pointerLength") || this.isDirty("pointerX") || this.isDirty("pointerY") || this.isDirty("width") || this.isDirty("height")) {
        this._clear = true;
      }
    }
  });
  Object.defineProperty(PointedRectangle2.prototype, "_changed", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._changed.call(this);
      if (this._clear) {
        this.markDirtyBounds();
        var w = this.width();
        var h = this.height();
        if (w > 0 && h > 0) {
          var cr = this.get("cornerRadius", 8);
          cr = fitToRange(cr, 0, Math.min(w / 2, h / 2));
          var x2 = this.get("pointerX", 0);
          var y2 = this.get("pointerY", 0);
          var bwh = this.get("pointerBaseWidth", 15) / 2;
          var xtl = 0;
          var ytl = 0;
          var xtr = w;
          var ytr = 0;
          var xbr = w;
          var ybr = h;
          var xbl = 0;
          var ybl = h;
          var d1 = (x2 - xtl) * (ybr - ytl) - (y2 - ytl) * (xbr - xtl);
          var d2 = (x2 - xbl) * (ytr - ybl) - (y2 - ybl) * (xtr - xbl);
          var display = this._display;
          display.moveTo(cr, 0);
          if (d1 > 0 && d2 > 0) {
            var stemX = Math.round(fitToRange(x2, cr + bwh, w - bwh - cr));
            y2 = fitToRange(y2, -Infinity, 0);
            display.lineTo(stemX - bwh, 0);
            display.lineTo(x2, y2);
            display.lineTo(stemX + bwh, 0);
          }
          display.lineTo(w - cr, 0);
          display.arcTo(w, 0, w, cr, cr);
          if (d1 > 0 && d2 < 0) {
            var stemY = Math.round(fitToRange(y2, cr + bwh, h - bwh - cr));
            x2 = fitToRange(x2, w, Infinity);
            display.lineTo(w, cr);
            display.lineTo(w, stemY - bwh);
            display.lineTo(x2, y2);
            display.lineTo(w, stemY + bwh);
          }
          display.lineTo(w, h - cr);
          display.arcTo(w, h, w - cr, h, cr);
          if (d1 < 0 && d2 < 0) {
            var stemX = Math.round(fitToRange(x2, cr + bwh, w - bwh - cr));
            y2 = fitToRange(y2, h, Infinity);
            display.lineTo(w - cr, h);
            display.lineTo(stemX + bwh, h);
            display.lineTo(x2, y2);
            display.lineTo(stemX - bwh, h);
          }
          display.lineTo(cr, h);
          display.arcTo(0, h, 0, h - cr, cr);
          if (d1 < 0 && d2 > 0) {
            var stemY = Math.round(fitToRange(y2, cr + bwh, h - cr - bwh));
            x2 = fitToRange(x2, -Infinity, 0);
            display.lineTo(0, h - cr);
            display.lineTo(0, stemY + bwh);
            display.lineTo(x2, y2);
            display.lineTo(0, stemY - bwh);
          }
          display.lineTo(0, cr);
          display.arcTo(0, 0, cr, 0, cr);
        }
      }
    }
  });
  Object.defineProperty(PointedRectangle2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "PointedRectangle"
  });
  Object.defineProperty(PointedRectangle2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Graphics.classNames.concat([PointedRectangle2.className])
  });
  return PointedRectangle2;
}(Graphics);

// node_modules/@amcharts/amcharts5/.internal/core/render/Tooltip.js
var Tooltip = function(_super) {
  __extends(Tooltip2, _super);
  function Tooltip2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    Object.defineProperty(_this, "_arrangeDisposer", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_fx", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(_this, "_fy", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(_this, "_label", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_fillDp", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_strokeDp", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_labelDp", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_w", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(_this, "_h", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    return _this;
  }
  Object.defineProperty(Tooltip2.prototype, "_afterNew", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      this._settings.themeTags = mergeTags(this._settings.themeTags, ["tooltip"]);
      _super.prototype._afterNew.call(this);
      this.set("background", PointedRectangle.new(this._root, {
        themeTags: ["tooltip", "background"]
      }));
      this._label = this.children.push(Label.new(this._root, {}));
      this._disposers.push(this._label.events.on("boundschanged", function() {
        _this._updateBackground();
      }));
      this.on("bounds", function() {
        _this._updateBackground();
      });
      this._updateTextColor();
      this._root.tooltipContainer.children.push(this);
      this.hide(0);
      this._root._tooltips.push(this);
    }
  });
  Object.defineProperty(Tooltip2.prototype, "label", {
    get: function() {
      return this._label;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Tooltip2.prototype, "dispose", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype.dispose.call(this);
      remove(this._root._tooltips, this);
    }
  });
  Object.defineProperty(Tooltip2.prototype, "_updateChildren", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._updateChildren.call(this);
      var labelText = this.get("labelText");
      if (labelText != null) {
        this.label.set("text", this.get("labelText"));
      }
      var labelHTML = this.get("labelHTML");
      if (labelHTML != null) {
        this.label.set("html", this.get("labelHTML"));
      }
    }
  });
  Object.defineProperty(Tooltip2.prototype, "_changed", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._changed.call(this);
      if (this.isDirty("pointTo")) {
        this._updateBackground();
      }
      if (this.isDirty("tooltipTarget")) {
        this.updateBackgroundColor();
      }
    }
  });
  Object.defineProperty(Tooltip2.prototype, "_onShow", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._onShow.call(this);
      this.updateBackgroundColor();
    }
  });
  Object.defineProperty(Tooltip2.prototype, "updateBackgroundColor", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      var tooltipTarget = this.get("tooltipTarget");
      var background = this.get("background");
      var fill;
      var stroke;
      if (tooltipTarget && background) {
        fill = tooltipTarget.get("fill");
        stroke = tooltipTarget.get("stroke");
        if (fill == null) {
          fill = stroke;
        }
        if (this.get("getFillFromSprite")) {
          if (this._fillDp) {
            this._fillDp.dispose();
          }
          if (fill != null) {
            background.set("fill", fill);
          }
          this._fillDp = tooltipTarget.on("fill", function(fill2) {
            if (fill2 != null) {
              background.set("fill", fill2);
              _this._updateTextColor(fill2);
            }
          });
        }
        if (this.get("getStrokeFromSprite")) {
          if (this._strokeDp) {
            this._strokeDp.dispose();
          }
          if (fill != null) {
            background.set("stroke", fill);
          }
          this._strokeDp = tooltipTarget.on("fill", function(fill2) {
            if (fill2 != null) {
              background.set("stroke", fill2);
            }
          });
        }
        if (this.get("getLabelFillFromSprite")) {
          if (this._labelDp) {
            this._labelDp.dispose();
          }
          if (fill != null) {
            this.label.set("fill", fill);
          }
          this._labelDp = tooltipTarget.on("fill", function(fill2) {
            if (fill2 != null) {
              _this.label.set("fill", fill2);
            }
          });
        }
      }
      this._updateTextColor(fill);
    }
  });
  Object.defineProperty(Tooltip2.prototype, "_updateTextColor", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(fill) {
      if (this.get("autoTextColor")) {
        if (fill == null) {
          fill = this.get("background").get("fill");
        }
        if (fill == null) {
          fill = this._root.interfaceColors.get("background");
        }
        if (fill instanceof Color) {
          this.label.set("fill", Color.alternative(fill, this._root.interfaceColors.get("alternativeText"), this._root.interfaceColors.get("text")));
        }
      }
    }
  });
  Object.defineProperty(Tooltip2.prototype, "_setDataItem", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(dataItem) {
      _super.prototype._setDataItem.call(this, dataItem);
      this.label._setDataItem(dataItem);
    }
  });
  Object.defineProperty(Tooltip2.prototype, "_updateBackground", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype.updateBackground.call(this);
      var parent = this._root.container;
      if (parent) {
        var cw = 0.5;
        var ch = 0.5;
        var centerX = this.get("centerX");
        if (centerX instanceof Percent) {
          cw = centerX.value;
        }
        var centerY = this.get("centerY");
        if (centerY instanceof Percent) {
          ch = centerY.value;
        }
        var parentW = parent.width();
        var parentH = parent.height();
        var bounds = this.get("bounds", { left: 0, top: 0, right: parentW, bottom: parentH });
        this._updateBounds();
        var w = this.width();
        var h = this.height();
        if (w === 0) {
          w = this._w;
        }
        if (h === 0) {
          h = this._h;
        }
        var pointTo = this.get("pointTo", { x: parentW / 2, y: parentH / 2 });
        var x2 = pointTo.x;
        var y2 = pointTo.y;
        var pointerOrientation = this.get("pointerOrientation");
        var background = this.get("background");
        var pointerLength = 0;
        var bgStrokeSizeY = 0;
        var bgStrokeSizeX = 0;
        if (background instanceof PointedRectangle) {
          pointerLength = background.get("pointerLength", 0);
          bgStrokeSizeY = background.get("strokeWidth", 0) / 2;
          bgStrokeSizeX = bgStrokeSizeY;
        }
        var pointerX = 0;
        var pointerY = 0;
        var boundsW = bounds.right - bounds.left;
        var boundsH = bounds.bottom - bounds.top;
        if (pointerOrientation == "horizontal" || pointerOrientation == "left" || pointerOrientation == "right") {
          bgStrokeSizeY = 0;
          if (pointerOrientation == "horizontal") {
            if (x2 > bounds.left + boundsW / 2) {
              x2 -= w * (1 - cw) + pointerLength;
              bgStrokeSizeX *= -1;
            } else {
              x2 += w * cw + pointerLength;
            }
          } else if (pointerOrientation == "left") {
            x2 += w * (1 - cw) + pointerLength;
          } else {
            x2 -= w * cw + pointerLength;
            bgStrokeSizeX *= -1;
          }
        } else {
          bgStrokeSizeX = 0;
          if (pointerOrientation == "vertical") {
            if (y2 > bounds.top + h / 2 + pointerLength) {
              y2 -= h * (1 - ch) + pointerLength;
            } else {
              y2 += h * ch + pointerLength;
              bgStrokeSizeY *= -1;
            }
          } else if (pointerOrientation == "down") {
            y2 -= h * (1 - ch) + pointerLength;
          } else {
            y2 += h * ch + pointerLength;
            bgStrokeSizeY *= -1;
          }
        }
        x2 = fitToRange(x2, bounds.left + w * cw, bounds.left + boundsW - w * (1 - cw)) + bgStrokeSizeX;
        y2 = fitToRange(y2, bounds.top + h * ch, bounds.top + boundsH - h * (1 - ch)) - bgStrokeSizeY;
        pointerX = pointTo.x - x2 + w * cw + bgStrokeSizeX;
        pointerY = pointTo.y - y2 + h * ch - bgStrokeSizeY;
        this._fx = x2;
        this._fy = y2;
        var animationDuration = this.get("animationDuration", 0);
        if (animationDuration > 0 && this.get("visible") && this.get("opacity") > 0.1) {
          var animationEasing = this.get("animationEasing");
          this.animate({ key: "x", to: x2, duration: animationDuration, easing: animationEasing });
          this.animate({ key: "y", to: y2, duration: animationDuration, easing: animationEasing });
        } else {
          this.set("x", x2);
          this.set("y", y2);
        }
        if (background instanceof PointedRectangle) {
          background.set("pointerX", pointerX);
          background.set("pointerY", pointerY);
        }
        if (w > 0) {
          this._w = w;
        }
        if (h > 0) {
          this._h = h;
        }
      }
    }
  });
  Object.defineProperty(Tooltip2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Tooltip"
  });
  Object.defineProperty(Tooltip2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Container.classNames.concat([Tooltip2.className])
  });
  return Tooltip2;
}(Container);

// node_modules/@amcharts/amcharts5/.internal/core/util/NumberFormatter.js
var NumberFormatter = function(_super) {
  __extends(NumberFormatter2, _super);
  function NumberFormatter2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(NumberFormatter2.prototype, "_setDefaults", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._setDefault("negativeBase", 0);
      this._setDefault("numberFormat", "#,###.#####");
      this._setDefault("smallNumberThreshold", 1);
      var bns = "_big_number_suffix_";
      var sns = "_small_number_suffix_";
      var bs = "_byte_suffix_";
      this._setDefault("bigNumberPrefixes", [
        { "number": 1e3, "suffix": this._t(bns + "3") },
        { "number": 1e6, "suffix": this._t(bns + "6") },
        { "number": 1e9, "suffix": this._t(bns + "9") },
        { "number": 1e12, "suffix": this._t(bns + "12") },
        { "number": 1e15, "suffix": this._t(bns + "15") },
        { "number": 1e18, "suffix": this._t(bns + "18") },
        { "number": 1e21, "suffix": this._t(bns + "21") },
        { "number": 1e24, "suffix": this._t(bns + "24") }
      ]);
      this._setDefault("smallNumberPrefixes", [
        { "number": 1e-24, "suffix": this._t(sns + "24") },
        { "number": 1e-21, "suffix": this._t(sns + "21") },
        { "number": 1e-18, "suffix": this._t(sns + "18") },
        { "number": 1e-15, "suffix": this._t(sns + "15") },
        { "number": 1e-12, "suffix": this._t(sns + "12") },
        { "number": 1e-9, "suffix": this._t(sns + "9") },
        { "number": 1e-6, "suffix": this._t(sns + "6") },
        { "number": 1e-3, "suffix": this._t(sns + "3") }
      ]);
      this._setDefault("bytePrefixes", [
        { "number": 1, suffix: this._t(bs + "B") },
        { "number": 1024, suffix: this._t(bs + "KB") },
        { "number": 1048576, suffix: this._t(bs + "MB") },
        { "number": 1073741824, suffix: this._t(bs + "GB") },
        { "number": 1099511627776, suffix: this._t(bs + "TB") },
        { "number": 1125899906842624, suffix: this._t(bs + "PB") }
      ]);
      _super.prototype._setDefaults.call(this);
    }
  });
  Object.defineProperty(NumberFormatter2.prototype, "_beforeChanged", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._beforeChanged.call(this);
    }
  });
  Object.defineProperty(NumberFormatter2.prototype, "format", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(value, format, precision) {
      if (format == null || isString(format) && format.toLowerCase() === "number") {
        format = this.get("numberFormat", "");
      }
      var formatted;
      var source = Number(value);
      if (isObject(format)) {
        try {
          if (this.get("intlLocales")) {
            return new Intl.NumberFormat(this.get("intlLocales"), format).format(source);
          } else {
            return new Intl.NumberFormat(void 0, format).format(source);
          }
        } catch (e) {
          return "Invalid";
        }
      } else {
        format = cleanFormat(format);
        var info = this.parseFormat(format, this._root.language);
        var details = void 0;
        if (source > this.get("negativeBase")) {
          details = info.positive;
        } else if (source < this.get("negativeBase")) {
          details = info.negative;
        } else {
          details = info.zero;
        }
        if (precision != null && !details.mod) {
          details = copy2(details);
          details.decimals.active = source == 0 ? 0 : precision;
        }
        formatted = details.template.split(PLACEHOLDER).join(this.applyFormat(source, details));
      }
      return formatted;
    }
  });
  Object.defineProperty(NumberFormatter2.prototype, "parseFormat", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(format, language) {
      var _this = this;
      var thousandSeparator = language.translateEmpty("_thousandSeparator");
      var decimalSeparator = language.translateEmpty("_decimalSeparator");
      var info = {
        "positive": {
          "thousands": {
            "active": -1,
            "passive": -1,
            "interval": -1,
            "separator": thousandSeparator
          },
          "decimals": {
            "active": -1,
            "passive": -1,
            "separator": decimalSeparator
          },
          "template": "",
          "source": "",
          "parsed": false
        },
        "negative": {
          "thousands": {
            "active": -1,
            "passive": -1,
            "interval": -1,
            "separator": thousandSeparator
          },
          "decimals": {
            "active": -1,
            "passive": -1,
            "separator": decimalSeparator
          },
          "template": "",
          "source": "",
          "parsed": false
        },
        "zero": {
          "thousands": {
            "active": -1,
            "passive": -1,
            "interval": -1,
            "separator": thousandSeparator
          },
          "decimals": {
            "active": -1,
            "passive": -1,
            "separator": decimalSeparator
          },
          "template": "",
          "source": "",
          "parsed": false
        }
      };
      format = format.replace("||", PLACEHOLDER2);
      var parts = format.split("|");
      info.positive.source = parts[0];
      if (typeof parts[2] === "undefined") {
        info.zero = info.positive;
      } else {
        info.zero.source = parts[2];
      }
      if (typeof parts[1] === "undefined") {
        info.negative = info.positive;
      } else {
        info.negative.source = parts[1];
      }
      each2(info, function(_part, item) {
        if (item.parsed) {
          return;
        }
        var partFormat = item.source;
        if (partFormat.toLowerCase() === "number") {
          partFormat = _this.get("numberFormat", "#,###.#####");
        }
        var chunks = TextFormatter.chunk(partFormat, true);
        for (var i = 0; i < chunks.length; i++) {
          var chunk = chunks[i];
          chunk.text = chunk.text.replace(PLACEHOLDER2, "|");
          if (chunk.type === "value") {
            var matches = chunk.text.match(/[#0.,]+[ ]?[abesABES%!]?[abesABES‰!]?/);
            if (matches) {
              if (matches === null || matches[0] === "") {
                item.template += chunk.text;
              } else {
                var mods = matches[0].match(/[abesABES%‰!]{2}|[abesABES%‰]{1}$/);
                if (mods) {
                  item.mod = mods[0].toLowerCase();
                  item.modSpacing = matches[0].match(/[ ]{1}[abesABES%‰!]{1}$/) ? true : false;
                }
                var a2 = matches[0].split(".");
                if (a2[0] === "") {
                } else {
                  item.thousands.active = (a2[0].match(/0/g) || []).length;
                  item.thousands.passive = (a2[0].match(/\#/g) || []).length + item.thousands.active;
                  var b = a2[0].split(",");
                  if (b.length === 1) {
                  } else {
                    item.thousands.interval = (b.pop() || "").length;
                    if (item.thousands.interval === 0) {
                      item.thousands.interval = -1;
                    }
                  }
                }
                if (typeof a2[1] === "undefined") {
                } else {
                  item.decimals.active = (a2[1].match(/0/g) || []).length;
                  item.decimals.passive = (a2[1].match(/\#/g) || []).length + item.decimals.active;
                }
                item.template += chunk.text.split(matches[0]).join(PLACEHOLDER);
              }
            }
          } else {
            item.template += chunk.text;
          }
        }
        item.parsed = true;
      });
      return info;
    }
  });
  Object.defineProperty(NumberFormatter2.prototype, "applyFormat", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(value, details) {
      var negative = value < 0;
      value = Math.abs(value);
      var prefix = "", suffix = "";
      var mods = details.mod ? details.mod.split("") : [];
      if (mods.indexOf("b") !== -1) {
        var a_1 = this.applyPrefix(value, this.get("bytePrefixes"), mods.indexOf("!") !== -1);
        value = a_1[0];
        prefix = a_1[1];
        suffix = a_1[2];
        if (details.modSpacing) {
          suffix = " " + suffix;
        }
      } else if (mods.indexOf("a") !== -1) {
        var a_2 = this.applyPrefix(value, value < this.get("smallNumberThreshold") ? this.get("smallNumberPrefixes") : this.get("bigNumberPrefixes"), mods.indexOf("!") !== -1);
        value = a_2[0];
        prefix = a_2[1];
        suffix = a_2[2];
        if (details.modSpacing) {
          suffix = " " + suffix;
        }
      } else if (mods.indexOf("%") !== -1) {
        var ol = Math.min(value.toString().length + 2, 21);
        value *= 100;
        value = parseFloat(value.toPrecision(ol));
        suffix = "%";
      } else if (mods.indexOf("\u2030") !== -1) {
        var ol = Math.min(value.toString().length + 3, 21);
        value *= 1e3;
        value = parseFloat(value.toPrecision(ol));
        suffix = "\u2030";
      }
      if (mods.indexOf("e") !== -1) {
        var exp = void 0;
        if (details.decimals.passive >= 0) {
          exp = value.toExponential(details.decimals.passive).split("e");
        } else {
          exp = value.toExponential().split("e");
        }
        value = Number(exp[0]);
        suffix = "e" + exp[1];
        if (details.modSpacing) {
          suffix = " " + suffix;
        }
      } else if (details.decimals.passive === 0) {
        value = Math.round(value);
      } else if (details.decimals.passive > 0) {
        var d = Math.pow(10, details.decimals.passive);
        value = Math.round(value * d) / d;
      }
      var res = "";
      var a2 = numberToString(value).split(".");
      var ints = a2[0];
      if (ints.length < details.thousands.active) {
        ints = Array(details.thousands.active - ints.length + 1).join("0") + ints;
      }
      if (details.thousands.interval > 0) {
        var ip = [];
        var intsr = ints.split("").reverse().join("");
        for (var i = 0, len = ints.length; i <= len; i += details.thousands.interval) {
          var c = intsr.substr(i, details.thousands.interval).split("").reverse().join("");
          if (c !== "") {
            ip.unshift(c);
          }
        }
        ints = ip.join(details.thousands.separator);
      }
      res += ints;
      if (a2.length === 1) {
        a2.push("");
      }
      var decs = a2[1];
      if (decs.length < details.decimals.active) {
        decs += Array(details.decimals.active - decs.length + 1).join("0");
      }
      if (decs !== "") {
        res += details.decimals.separator + decs;
      }
      if (res === "") {
        res = "0";
      }
      if (value !== 0 && negative && mods.indexOf("s") === -1) {
        res = "-" + res;
      }
      if (prefix) {
        res = prefix + res;
      }
      if (suffix) {
        res += suffix;
      }
      return res;
    }
  });
  Object.defineProperty(NumberFormatter2.prototype, "applyPrefix", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(value, prefixes, force) {
      if (force === void 0) {
        force = false;
      }
      var newvalue = value;
      var prefix = "";
      var suffix = "";
      var applied = false;
      var k2 = 1;
      for (var i = 0, len = prefixes.length; i < len; i++) {
        if (prefixes[i].number <= value) {
          if (prefixes[i].number === 0) {
            newvalue = 0;
          } else {
            newvalue = value / prefixes[i].number;
            k2 = prefixes[i].number;
          }
          prefix = prefixes[i].prefix;
          suffix = prefixes[i].suffix;
          applied = true;
        }
      }
      if (!applied && force && prefixes.length && value != 0) {
        newvalue = value / prefixes[0].number;
        prefix = prefixes[0].prefix;
        suffix = prefixes[0].suffix;
        applied = true;
      }
      if (applied) {
        newvalue = parseFloat(newvalue.toPrecision(Math.min(k2.toString().length + Math.floor(newvalue).toString().replace(/[^0-9]*/g, "").length, 21)));
      }
      return [newvalue, prefix, suffix];
    }
  });
  Object.defineProperty(NumberFormatter2.prototype, "escape", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(text) {
      return text.replace("||", PLACEHOLDER2);
    }
  });
  Object.defineProperty(NumberFormatter2.prototype, "unescape", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(text) {
      return text.replace(PLACEHOLDER2, "|");
    }
  });
  return NumberFormatter2;
}(Entity);

// node_modules/@amcharts/amcharts5/.internal/core/util/DateFormatter.js
var DateFormatter = function(_super) {
  __extends(DateFormatter2, _super);
  function DateFormatter2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(DateFormatter2.prototype, "_setDefaults", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._setDefault("capitalize", true);
      this._setDefault("dateFormat", "yyyy-MM-dd");
      _super.prototype._setDefaults.call(this);
    }
  });
  Object.defineProperty(DateFormatter2.prototype, "_beforeChanged", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._beforeChanged.call(this);
    }
  });
  Object.defineProperty(DateFormatter2.prototype, "format", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(source, format) {
      if (typeof format === "undefined" || format === "") {
        format = this.get("dateFormat", "yyyy-MM-dd");
      }
      var formatted;
      var date = source;
      if (isObject(format)) {
        try {
          var locales = this.get("intlLocales");
          if (locales) {
            return new Intl.DateTimeFormat(locales, format).format(date);
          } else {
            return new Intl.DateTimeFormat(void 0, format).format(date);
          }
        } catch (e) {
          return "Invalid";
        }
      }
      var info = this.parseFormat(format);
      var timezone = this._root.timezone;
      if (timezone && !this._root.utc) {
        date = timezone.convertLocal(date);
      }
      if (!isNumber(date.getTime())) {
        return "Invalid date";
      }
      formatted = this.applyFormat(date, info);
      if (this.get("capitalize")) {
        formatted = formatted.replace(/^.{1}/, formatted.substr(0, 1).toUpperCase());
      }
      return formatted;
    }
  });
  Object.defineProperty(DateFormatter2.prototype, "applyFormat", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(date, info) {
      var res = info.template;
      var fullYear, month, weekday, day, hours, minutes, seconds, milliseconds, offset = date.getTimezoneOffset(), timestamp = date.getTime();
      if (this._root.utc) {
        fullYear = date.getUTCFullYear();
        month = date.getUTCMonth();
        weekday = date.getUTCDay();
        day = date.getUTCDate();
        hours = date.getUTCHours();
        minutes = date.getUTCMinutes();
        seconds = date.getUTCSeconds();
        milliseconds = date.getUTCMilliseconds();
      } else {
        fullYear = date.getFullYear();
        month = date.getMonth();
        weekday = date.getDay();
        day = date.getDate();
        hours = date.getHours();
        minutes = date.getMinutes();
        seconds = date.getSeconds();
        milliseconds = date.getMilliseconds();
      }
      for (var i = 0, len = info.parts.length; i < len; i++) {
        var value = "";
        switch (info.parts[i]) {
          case "G":
            value = this._t(fullYear < 0 ? "_era_bc" : "_era_ad");
            break;
          case "yyyy":
            value = Math.abs(fullYear).toString();
            if (fullYear < 0) {
              value += this._t("_era_bc");
            }
            break;
          case "yyy":
          case "yy":
          case "y":
            value = Math.abs(fullYear).toString().substr(-info.parts[i].length);
            if (fullYear < 0) {
              value += this._t("_era_bc");
            }
            break;
          case "YYYY":
          case "YYY":
          case "YY":
          case "Y":
            var week = getWeek(date);
            var year = fullYear;
            if (week == 1 && weekday > 4) {
              year--;
            }
            if (info.parts[i] == "YYYY") {
              value = Math.abs(year).toString();
            } else {
              value = Math.abs(year).toString().substr(-info.parts[i].length);
            }
            if (year < 0) {
              value += this._t("_era_bc");
            }
            break;
          case "u":
            break;
          case "q":
            value = "" + Math.ceil((date.getMonth() + 1) / 3);
            break;
          case "MMMMM":
            value = this._t(this._getMonth(month)).substr(0, 1);
            break;
          case "MMMM":
            value = this._t(this._getMonth(month));
            break;
          case "MMM":
            value = this._t(this._getShortMonth(month));
            break;
          case "MM":
            value = padString(month + 1, 2, "0");
            break;
          case "M":
            value = (month + 1).toString();
            break;
          case "ww":
            value = padString(getWeek(date, this._root.utc), 2, "0");
            break;
          case "w":
            value = getWeek(date, this._root.utc).toString();
            break;
          case "W":
            value = getMonthWeek(date, this._root.utc).toString();
            break;
          case "dd":
            value = padString(day, 2, "0");
            break;
          case "d":
            value = day.toString();
            break;
          case "DD":
          case "DDD":
            value = padString(getYearDay(date, this._root.utc).toString(), info.parts[i].length, "0");
            break;
          case "D":
            value = getYearDay(date, this._root.utc).toString();
            break;
          case "F":
            break;
          case "g":
            break;
          case "t":
            value = this._root.language.translateFunc("_dateOrd").call(this, day);
            break;
          case "E":
            value = (weekday || 7).toString();
            break;
          case "EE":
            value = padString((weekday || 7).toString(), 2, "0");
            break;
          case "EEE":
          case "eee":
            value = this._t(this._getShortWeekday(weekday));
            break;
          case "EEEE":
          case "eeee":
            value = this._t(this._getShortWeekday(weekday));
            break;
          case "EEEEE":
          case "eeeee":
            value = this._t(this._getShortWeekday(weekday)).substr(0, 1);
            break;
          case "e":
          case "ee":
            value = (weekday - (this._root.locale.firstDayOfWeek || 1) + 1).toString();
            if (info.parts[i] == "ee") {
              value = padString(value, 2, "0");
            }
            break;
          case "a":
            if (hours >= 12) {
              value = this._t("PM");
            } else {
              value = this._t("AM");
            }
            break;
          case "aa":
            if (hours >= 12) {
              value = this._t("P.M.");
            } else {
              value = this._t("A.M.");
            }
            break;
          case "aaa":
            if (hours >= 12) {
              value = this._t("P");
            } else {
              value = this._t("A");
            }
            break;
          case "h":
            value = get12Hours(hours).toString();
            break;
          case "hh":
            value = padString(get12Hours(hours), 2, "0");
            break;
          case "H":
            value = hours.toString();
            break;
          case "HH":
            value = padString(hours, 2, "0");
            break;
          case "K":
            value = get12Hours(hours, 0).toString();
            break;
          case "KK":
            value = padString(get12Hours(hours, 0), 2, "0");
            break;
          case "k":
            value = (hours + 1).toString();
            break;
          case "kk":
            value = padString(hours + 1, 2, "0");
            break;
          case "m":
            value = minutes.toString();
            break;
          case "mm":
            value = padString(minutes, 2, "0");
            break;
          case "s":
            value = seconds.toString();
            break;
          case "ss":
            value = padString(seconds, 2, "0");
            break;
          case "S":
          case "SS":
          case "SSS":
            value = Math.round(milliseconds / 1e3 * Math.pow(10, info.parts[i].length)).toString();
            break;
          case "x":
            value = timestamp.toString();
            break;
          case "n":
          case "nn":
          case "nnn":
            value = padString(milliseconds, info.parts[i].length, "0");
            break;
          case "z":
            value = getTimeZone(date, false, false, this._root.utc);
            break;
          case "zz":
            value = getTimeZone(date, true, false, this._root.utc);
            break;
          case "zzz":
            value = getTimeZone(date, false, true, this._root.utc);
            break;
          case "zzzz":
            value = getTimeZone(date, true, true, this._root.utc);
            break;
          case "Z":
          case "ZZ":
            var tz = Math.abs(offset) / 60;
            var tzh = Math.floor(tz);
            var tzm = tz * 60 - tzh * 60;
            if (this._root.utc) {
              tzh = 0;
              tzm = 0;
            }
            if (info.parts[i] == "Z") {
              value = "GMT";
              value += offset > 0 ? "-" : "+";
              value += padString(tzh, 2) + ":" + padString(tzm, 2);
            } else {
              value = offset > 0 ? "-" : "+";
              value += padString(tzh, 2) + padString(tzm, 2);
            }
            break;
          case "i":
            value = date.toISOString();
            break;
          case "I":
            value = date.toUTCString();
            break;
        }
        res = res.replace(PLACEHOLDER, value);
      }
      return res;
    }
  });
  Object.defineProperty(DateFormatter2.prototype, "parseFormat", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(format) {
      var info = {
        "template": "",
        "parts": []
      };
      var chunks = TextFormatter.chunk(format, true);
      for (var i = 0; i < chunks.length; i++) {
        var chunk = chunks[i];
        if (chunk.type === "value") {
          if (chunk.text.match(/^date$/i)) {
            var dateFormat = this.get("dateFormat", "yyyy-MM-dd");
            if (!isString(dateFormat)) {
              dateFormat = "yyyy-MM-dd";
            }
            chunk.text = dateFormat;
          }
          var matches = chunk.text.match(/G|yyyy|yyy|yy|y|YYYY|YYY|YY|Y|u|q|MMMMM|MMMM|MMM|MM|M|ww|w|W|dd|d|DDD|DD|D|F|g|EEEEE|EEEE|EEE|EE|E|eeeee|eeee|eee|ee|e|aaa|aa|a|hh|h|HH|H|KK|K|kk|k|mm|m|ss|s|SSS|SS|S|A|zzzz|zzz|zz|z|ZZ|Z|t|x|nnn|nn|n|i|I/g);
          if (matches) {
            for (var x2 = 0; x2 < matches.length; x2++) {
              info.parts.push(matches[x2]);
              chunk.text = chunk.text.replace(matches[x2], PLACEHOLDER);
            }
          }
        }
        info.template += chunk.text;
      }
      return info;
    }
  });
  Object.defineProperty(DateFormatter2.prototype, "_months", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    }
  });
  Object.defineProperty(DateFormatter2.prototype, "_getMonth", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(index) {
      return this._months()[index];
    }
  });
  Object.defineProperty(DateFormatter2.prototype, "_shortMonths", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return ["Jan", "Feb", "Mar", "Apr", "May(short)", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    }
  });
  Object.defineProperty(DateFormatter2.prototype, "_getShortMonth", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(index) {
      return this._shortMonths()[index];
    }
  });
  Object.defineProperty(DateFormatter2.prototype, "_weekdays", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
    }
  });
  Object.defineProperty(DateFormatter2.prototype, "_getWeekday", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(index) {
      return this._weekdays()[index];
    }
  });
  Object.defineProperty(DateFormatter2.prototype, "_shortWeekdays", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    }
  });
  Object.defineProperty(DateFormatter2.prototype, "_getShortWeekday", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(index) {
      return this._shortWeekdays()[index];
    }
  });
  Object.defineProperty(DateFormatter2.prototype, "parse", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(source, format) {
      if (source instanceof Date) {
        return source;
      }
      if (isNumber(source)) {
        return new Date(source);
      }
      if (!isString(source)) {
        source = source.toString();
      }
      var res;
      var reg = "";
      format = cleanFormat(format);
      format = format.substr(0, source.length);
      var info = this.parseFormat(format);
      var parsedIndexes = {
        "year": -1,
        "year3": -1,
        "year2": -1,
        "year1": -1,
        "month": -1,
        "monthShort": -1,
        "monthLong": -1,
        "weekdayShort": -1,
        "weekdayLong": -1,
        "day": -1,
        "yearDay": -1,
        "week": -1,
        "hourBase0": -1,
        "hour12Base0": -1,
        "hourBase1": -1,
        "hour12Base1": -1,
        "minute": -1,
        "second": -1,
        "millisecond": -1,
        "millisecondDigits": -1,
        "am": -1,
        "zone": -1,
        "timestamp": -1,
        "iso": -1
      };
      var resValues = {
        "year": 1970,
        "month": 0,
        "day": 1,
        "hour": 0,
        "minute": 0,
        "second": 0,
        "millisecond": 0,
        "timestamp": null,
        "offset": 0,
        "utc": this._root.utc
      };
      var indexAdjust = 0;
      var index = 0;
      for (var i = 0; i < info.parts.length; i++) {
        index = i + indexAdjust + 1;
        switch (info.parts[i]) {
          case "yyyy":
          case "YYYY":
            reg += "([0-9]{4})";
            parsedIndexes.year = index;
            break;
          case "yyy":
          case "YYY":
            reg += "([0-9]{3})";
            parsedIndexes.year3 = index;
            break;
          case "yy":
          case "YY":
            reg += "([0-9]{2})";
            parsedIndexes.year2 = index;
            break;
          case "y":
          case "Y":
            reg += "([0-9]{1})";
            parsedIndexes.year1 = index;
            break;
          case "MMMM":
            reg += "(" + this.getStringList(this._months()).join("|") + ")";
            parsedIndexes.monthLong = index;
            break;
          case "MMM":
            reg += "(" + this.getStringList(this._shortMonths()).join("|") + ")";
            parsedIndexes.monthShort = index;
            break;
          case "MM":
          case "M":
            reg += "([0-9]{2}|[0-9]{1})";
            parsedIndexes.month = index;
            break;
          case "ww":
          case "w":
            reg += "([0-9]{2}|[0-9]{1})";
            parsedIndexes.week = index;
            break;
          case "dd":
          case "d":
            reg += "([0-9]{2}|[0-9]{1})";
            parsedIndexes.day = index;
            break;
          case "DDD":
          case "DD":
          case "D":
            reg += "([0-9]{3}|[0-9]{2}|[0-9]{1})";
            parsedIndexes.yearDay = index;
            break;
          case "dddd":
            reg += "(" + this.getStringList(this._weekdays()).join("|") + ")";
            parsedIndexes.weekdayLong = index;
            break;
          case "ddd":
            reg += "(" + this.getStringList(this._shortWeekdays()).join("|") + ")";
            parsedIndexes.weekdayShort = index;
            break;
          case "aaa":
          case "aa":
          case "a":
            reg += "(" + this.getStringList(["AM", "PM", "A.M.", "P.M.", "A", "P"]).join("|") + ")";
            parsedIndexes.am = index;
            break;
          case "hh":
          case "h":
            reg += "([0-9]{2}|[0-9]{1})";
            parsedIndexes.hour12Base1 = index;
            break;
          case "HH":
          case "H":
            reg += "([0-9]{2}|[0-9]{1})";
            parsedIndexes.hourBase0 = index;
            break;
          case "KK":
          case "K":
            reg += "([0-9]{2}|[0-9]{1})";
            parsedIndexes.hour12Base0 = index;
            break;
          case "kk":
          case "k":
            reg += "([0-9]{2}|[0-9]{1})";
            parsedIndexes.hourBase1 = index;
            break;
          case "mm":
          case "m":
            reg += "([0-9]{2}|[0-9]{1})";
            parsedIndexes.minute = index;
            break;
          case "ss":
          case "s":
            reg += "([0-9]{2}|[0-9]{1})";
            parsedIndexes.second = index;
            break;
          case "SSS":
          case "SS":
          case "S":
            reg += "([0-9]{3}|[0-9]{2}|[0-9]{1})";
            parsedIndexes.millisecond = index;
            parsedIndexes.millisecondDigits = info.parts[i].length;
            break;
          case "nnn":
          case "nn":
          case "n":
            reg += "([0-9]{3}|[0-9]{2}|[0-9]{1})";
            parsedIndexes.millisecond = index;
            break;
          case "x":
            reg += "([0-9]{1,})";
            parsedIndexes.timestamp = index;
            break;
          case "Z":
            reg += "GMT([-+]+[0-9]{2}:[0-9]{2})";
            parsedIndexes.zone = index;
            break;
          case "ZZ":
            reg += "([\\-+]+[0-9]{2}[0-9]{2})";
            parsedIndexes.zone = index;
            break;
          case "i":
            reg += "([0-9]{4})-?([0-9]{2})-?([0-9]{2})T?([0-9]{2}):?([0-9]{2}):?([0-9]{2})\\.?([0-9]{0,3})([zZ]|[+\\-][0-9]{2}:?[0-9]{2}|$)";
            parsedIndexes.iso = index;
            indexAdjust += 7;
            break;
          case "G":
          case "YYYY":
          case "YYY":
          case "YY":
          case "Y":
          case "MMMMM":
          case "W":
          case "EEEEE":
          case "EEEE":
          case "EEE":
          case "EE":
          case "E":
          case "eeeee":
          case "eeee":
          case "eee":
          case "ee":
          case "e":
          case "zzzz":
          case "zzz":
          case "zz":
          case "z":
          case "t":
            indexAdjust--;
            break;
        }
        reg += "[^0-9]*";
      }
      var regex = new RegExp(reg);
      var matches = source.match(regex);
      if (matches) {
        if (parsedIndexes.year > -1) {
          resValues.year = parseInt(matches[parsedIndexes.year]);
        }
        if (parsedIndexes.year3 > -1) {
          var val = parseInt(matches[parsedIndexes.year3]);
          val += 1e3;
          resValues.year = val;
        }
        if (parsedIndexes.year2 > -1) {
          var val = parseInt(matches[parsedIndexes.year2]);
          if (val > 50) {
            val += 1e3;
          } else {
            val += 2e3;
          }
          resValues.year = val;
        }
        if (parsedIndexes.year1 > -1) {
          var val = parseInt(matches[parsedIndexes.year1]);
          val = Math.floor(new Date().getFullYear() / 10) * 10 + val;
          resValues.year = val;
        }
        if (parsedIndexes.monthLong > -1) {
          resValues.month = this.resolveMonth(matches[parsedIndexes.monthLong]);
        }
        if (parsedIndexes.monthShort > -1) {
          resValues.month = this.resolveShortMonth(matches[parsedIndexes.monthShort]);
        }
        if (parsedIndexes.month > -1) {
          resValues.month = parseInt(matches[parsedIndexes.month]) - 1;
        }
        if (parsedIndexes.week > -1 && parsedIndexes.day === -1) {
          resValues.month = 0;
          resValues.day = getDayFromWeek(parseInt(matches[parsedIndexes.week]), resValues.year, 1, this._root.utc);
        }
        if (parsedIndexes.day > -1) {
          resValues.day = parseInt(matches[parsedIndexes.day]);
        }
        if (parsedIndexes.yearDay > -1) {
          resValues.month = 0;
          resValues.day = parseInt(matches[parsedIndexes.yearDay]);
        }
        if (parsedIndexes.hourBase0 > -1) {
          resValues.hour = parseInt(matches[parsedIndexes.hourBase0]);
        }
        if (parsedIndexes.hourBase1 > -1) {
          resValues.hour = parseInt(matches[parsedIndexes.hourBase1]) - 1;
        }
        if (parsedIndexes.hour12Base0 > -1) {
          var val = parseInt(matches[parsedIndexes.hour12Base0]);
          if (val == 11) {
            val = 0;
          }
          if (parsedIndexes.am > -1 && !this.isAm(matches[parsedIndexes.am])) {
            val += 12;
          }
          resValues.hour = val;
        }
        if (parsedIndexes.hour12Base1 > -1) {
          var val = parseInt(matches[parsedIndexes.hour12Base1]);
          if (val == 12) {
            val = 0;
          }
          if (parsedIndexes.am > -1 && !this.isAm(matches[parsedIndexes.am])) {
            val += 12;
          }
          resValues.hour = val;
        }
        if (parsedIndexes.minute > -1) {
          resValues.minute = parseInt(matches[parsedIndexes.minute]);
        }
        if (parsedIndexes.second > -1) {
          resValues.second = parseInt(matches[parsedIndexes.second]);
        }
        if (parsedIndexes.millisecond > -1) {
          var val = parseInt(matches[parsedIndexes.millisecond]);
          if (parsedIndexes.millisecondDigits == 2) {
            val *= 10;
          } else if (parsedIndexes.millisecondDigits == 1) {
            val *= 100;
          }
          resValues.millisecond = val;
        }
        if (parsedIndexes.timestamp > -1) {
          resValues.timestamp = parseInt(matches[parsedIndexes.timestamp]);
          var ts = new Date(resValues.timestamp);
          resValues.year = ts.getUTCFullYear();
          resValues.month = ts.getUTCMonth();
          resValues.day = ts.getUTCDate();
          resValues.hour = ts.getUTCHours();
          resValues.minute = ts.getUTCMinutes();
          resValues.second = ts.getUTCSeconds();
          resValues.millisecond = ts.getUTCMilliseconds();
        }
        if (parsedIndexes.zone > -1) {
          resValues.offset = this.resolveTimezoneOffset(new Date(resValues.year, resValues.month, resValues.day), matches[parsedIndexes.zone]);
        }
        if (parsedIndexes.iso > -1) {
          resValues.year = toNumber(matches[parsedIndexes.iso + 0]);
          resValues.month = toNumber(matches[parsedIndexes.iso + 1]) - 1;
          resValues.day = toNumber(matches[parsedIndexes.iso + 2]);
          resValues.hour = toNumber(matches[parsedIndexes.iso + 3]);
          resValues.minute = toNumber(matches[parsedIndexes.iso + 4]);
          resValues.second = toNumber(matches[parsedIndexes.iso + 5]);
          resValues.millisecond = toNumber(matches[parsedIndexes.iso + 6]);
          if (matches[parsedIndexes.iso + 7] == "Z" || matches[parsedIndexes.iso + 7] == "z") {
            resValues.utc = true;
          } else if (matches[parsedIndexes.iso + 7] != "") {
            resValues.offset = this.resolveTimezoneOffset(new Date(resValues.year, resValues.month, resValues.day), matches[parsedIndexes.iso + 7]);
          }
        }
        if (resValues.utc) {
          res = new Date(Date.UTC(resValues.year, resValues.month, resValues.day, resValues.hour, resValues.minute, resValues.second, resValues.millisecond));
        } else {
          res = new Date(resValues.year, resValues.month, resValues.day, resValues.hour, resValues.minute + resValues.offset, resValues.second, resValues.millisecond);
        }
      } else {
        res = new Date(source);
      }
      return res;
    }
  });
  Object.defineProperty(DateFormatter2.prototype, "resolveTimezoneOffset", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(date, zone) {
      var value = zone.match(/([+\-]?)([0-9]{2}):?([0-9]{2})/);
      if (value) {
        var match = zone.match(/([+\-]?)([0-9]{2}):?([0-9]{2})/);
        var dir = match[1];
        var hour = match[2];
        var minute = match[3];
        var offset = parseInt(hour) * 60 + parseInt(minute);
        if (dir == "+") {
          offset *= -1;
        }
        var originalOffset = (date || new Date()).getTimezoneOffset();
        var diff = offset - originalOffset;
        return diff;
      }
      return 0;
    }
  });
  Object.defineProperty(DateFormatter2.prototype, "resolveMonth", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(value) {
      var month = this._months().indexOf(value);
      if (month > -1) {
        return month;
      }
      if (!this._root.language.isDefault()) {
        month = this._root.language.translateAll(this._months()).indexOf(value);
        if (month > -1) {
          return month;
        }
      }
      return 0;
    }
  });
  Object.defineProperty(DateFormatter2.prototype, "resolveShortMonth", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(value) {
      var month = this._shortMonths().indexOf(value);
      if (month > -1) {
        return month;
      }
      month = this._months().indexOf(value);
      if (month > -1) {
        return month;
      }
      if (this._root.language && !this._root.language.isDefault()) {
        month = this._root.language.translateAll(this._shortMonths()).indexOf(value);
        if (month > -1) {
          return month;
        }
      }
      return 0;
    }
  });
  Object.defineProperty(DateFormatter2.prototype, "isAm", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(value) {
      var list = this.getStringList(["AM", "A.M.", "A"]);
      return list.indexOf(value.toUpperCase()) > -1;
    }
  });
  Object.defineProperty(DateFormatter2.prototype, "getStringList", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(list) {
      var res = [];
      for (var i = 0; i < list.length; i++) {
        if (this._root.language) {
          res.push(escapeForRgex(this._t(list[i])));
        } else {
          res.push(escapeForRgex(list[i]));
        }
      }
      return res;
    }
  });
  return DateFormatter2;
}(Entity);

// node_modules/@amcharts/amcharts5/.internal/core/util/DurationFormatter.js
var DurationFormatter = function(_super) {
  __extends(DurationFormatter2, _super);
  function DurationFormatter2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    Object.defineProperty(_this, "_unitAliases", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {
        "Y": "y",
        "D": "d",
        "H": "h",
        "K": "h",
        "k": "h",
        "n": "S"
      }
    });
    return _this;
  }
  Object.defineProperty(DurationFormatter2.prototype, "_setDefaults", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var dmillisecond = "_duration_millisecond";
      var dsecond = "_duration_second";
      var dminute = "_duration_minute";
      var dhour = "_duration_hour";
      var dday = "_duration_day";
      var dweek = "_duration_week";
      var dmonth = "_duration_month";
      var dyear = "_duration_year";
      var asecond = "_second";
      var aminute = "_minute";
      var ahour = "_hour";
      var aday = "_day";
      var aweek = "_week";
      var amonth = "_week";
      var ayear = "_year";
      this._setDefault("negativeBase", 0);
      this._setDefault("baseUnit", "second");
      this._setDefault("durationFormats", {
        "millisecond": {
          "millisecond": this._t(dmillisecond),
          "second": this._t(dmillisecond + asecond),
          "minute": this._t(dmillisecond + aminute),
          "hour": this._t(dmillisecond + ahour),
          "day": this._t(dmillisecond + aday),
          "week": this._t(dmillisecond + aweek),
          "month": this._t(dmillisecond + amonth),
          "year": this._t(dmillisecond + ayear)
        },
        "second": {
          "second": this._t(dsecond),
          "minute": this._t(dsecond + aminute),
          "hour": this._t(dsecond + ahour),
          "day": this._t(dsecond + aday),
          "week": this._t(dsecond + aweek),
          "month": this._t(dsecond + amonth),
          "year": this._t(dsecond + ayear)
        },
        "minute": {
          "minute": this._t(dminute),
          "hour": this._t(dminute + ahour),
          "day": this._t(dminute + aday),
          "week": this._t(dminute + aweek),
          "month": this._t(dminute + amonth),
          "year": this._t(dminute + ayear)
        },
        "hour": {
          "hour": this._t(dhour),
          "day": this._t(dhour + aday),
          "week": this._t(dhour + aweek),
          "month": this._t(dhour + amonth),
          "year": this._t(dhour + ayear)
        },
        "day": {
          "day": this._t(dday),
          "week": this._t(dday + aweek),
          "month": this._t(dday + amonth),
          "year": this._t(dday + ayear)
        },
        "week": {
          "week": this._t(dweek),
          "month": this._t(dweek + amonth),
          "year": this._t(dweek + ayear)
        },
        "month": {
          "month": this._t(dmonth),
          "year": this._t(dmonth + ayear)
        },
        "year": {
          "year": this._t(dyear)
        }
      });
      _super.prototype._setDefaults.call(this);
    }
  });
  Object.defineProperty(DurationFormatter2.prototype, "_beforeChanged", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._beforeChanged.call(this);
    }
  });
  Object.defineProperty(DurationFormatter2.prototype, "format", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(value, format, base) {
      var baseUnit = base || this.get("baseUnit");
      if (typeof format === "undefined" || format === "") {
        if (this.get("durationFormat") != null) {
          format = this.get("durationFormat");
        } else {
          format = this.getFormat(toNumber(value), void 0, baseUnit);
        }
      }
      format = cleanFormat(format);
      var info = this.parseFormat(format, baseUnit);
      var source = Number(value);
      var details;
      if (source > this.get("negativeBase")) {
        details = info.positive;
      } else if (source < this.get("negativeBase")) {
        details = info.negative;
      } else {
        details = info.zero;
      }
      var formatted = this.applyFormat(source, details);
      if (details.color !== "") {
        formatted = "[" + details.color + "]" + formatted + "[/]";
      }
      return formatted;
    }
  });
  Object.defineProperty(DurationFormatter2.prototype, "parseFormat", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(format, base) {
      var _this = this;
      var baseUnit = base || this.get("baseUnit");
      var info = {
        "positive": {
          "color": "",
          "template": "",
          "parts": [],
          "source": "",
          "baseUnit": baseUnit,
          "parsed": false,
          "absolute": false
        },
        "negative": {
          "color": "",
          "template": "",
          "parts": [],
          "source": "",
          "baseUnit": baseUnit,
          "parsed": false,
          "absolute": false
        },
        "zero": {
          "color": "",
          "template": "",
          "parts": [],
          "source": "",
          "baseUnit": baseUnit,
          "parsed": false,
          "absolute": false
        }
      };
      format = format.replace("||", PLACEHOLDER2);
      var parts = format.split("|");
      info.positive.source = parts[0];
      if (typeof parts[2] === "undefined") {
        info.zero = info.positive;
      } else {
        info.zero.source = parts[2];
      }
      if (typeof parts[1] === "undefined") {
        info.negative = info.positive;
      } else {
        info.negative.source = parts[1];
      }
      each2(info, function(_part, item) {
        if (item.parsed) {
          return;
        }
        var partFormat = item.source;
        var dirs = [];
        dirs = item.source.match(/^\[([^\]]*)\]/);
        if (dirs && dirs.length && dirs[0] !== "") {
          partFormat = item.source.substr(dirs[0].length);
          item.color = dirs[1];
        }
        var chunks = TextFormatter.chunk(partFormat, true);
        for (var i = 0; i < chunks.length; i++) {
          var chunk = chunks[i];
          chunk.text = chunk.text.replace(PLACEHOLDER2, "|");
          if (chunk.type === "value") {
            if (chunk.text.match(/[yYMdDwhHKkmsSn]+a/)) {
              item.absolute = true;
              chunk.text = chunk.text.replace(/([yYMdDwhHKkmsSn]+)a/, "$1");
            }
            var matches = chunk.text.match(/y+|Y+|M+|d+|D+|w+|h+|H+|K+|k+|m+|s+|S+|n+/g);
            if (matches) {
              for (var x2 = 0; x2 < matches.length; x2++) {
                if (matches[x2] == null) {
                  matches[x2] = _this._unitAliases[matches[x2]];
                }
                item.parts.push(matches[x2]);
                chunk.text = chunk.text.replace(matches[x2], PLACEHOLDER);
              }
            }
          }
          item.template += chunk.text;
        }
        item.parsed = true;
      });
      return info;
    }
  });
  Object.defineProperty(DurationFormatter2.prototype, "applyFormat", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(value, details) {
      var negative = !details.absolute && value < this.get("negativeBase");
      value = Math.abs(value);
      var tstamp = this.toTimeStamp(value, details.baseUnit);
      var res = details.template;
      for (var i = 0, len = details.parts.length; i < len; i++) {
        var part = details.parts[i];
        var unit = this._toTimeUnit(part.substr(0, 1));
        var digits = part.length;
        var ints = Math.floor(tstamp / this._getUnitValue(unit));
        res = res.replace(PLACEHOLDER, padString(ints, digits, "0"));
        tstamp -= ints * this._getUnitValue(unit);
      }
      if (negative) {
        res = "-" + res;
      }
      return res;
    }
  });
  Object.defineProperty(DurationFormatter2.prototype, "toTimeStamp", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(value, baseUnit) {
      return value * this._getUnitValue(baseUnit);
    }
  });
  Object.defineProperty(DurationFormatter2.prototype, "_toTimeUnit", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(code) {
      switch (code) {
        case "S":
          return "millisecond";
        case "s":
          return "second";
        case "m":
          return "minute";
        case "h":
          return "hour";
        case "d":
          return "day";
        case "w":
          return "week";
        case "M":
          return "month";
        case "y":
          return "year";
      }
      ;
    }
  });
  Object.defineProperty(DurationFormatter2.prototype, "getFormat", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(value, maxValue, baseUnit) {
      if (this.get("durationFormat") != null) {
        return this.get("durationFormat");
      }
      if (!baseUnit) {
        baseUnit = this.get("baseUnit");
      }
      if (maxValue != null && value != maxValue) {
        value = Math.abs(value);
        maxValue = Math.abs(maxValue);
        var maxUnit = this.getValueUnit(Math.max(value, maxValue), baseUnit);
        return this.get("durationFormats")[baseUnit][maxUnit];
      } else {
        var unit = this.getValueUnit(value, baseUnit);
        return this.get("durationFormats")[baseUnit][unit];
      }
    }
  });
  Object.defineProperty(DurationFormatter2.prototype, "getValueUnit", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(value, baseUnit) {
      if (!baseUnit) {
        baseUnit = this.get("baseUnit");
      }
      var currentUnit;
      var ms = this.getMilliseconds(value, baseUnit);
      eachContinue2(this._getUnitValues(), function(key, val) {
        if (key == baseUnit || currentUnit) {
          var num = ms / val;
          if (num <= 1) {
            if (!currentUnit) {
              currentUnit = key;
            }
            return false;
          }
          currentUnit = key;
        }
        return true;
      });
      return currentUnit;
    }
  });
  Object.defineProperty(DurationFormatter2.prototype, "getMilliseconds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(value, baseUnit) {
      if (!baseUnit) {
        baseUnit = this.get("baseUnit");
      }
      return value * this._getUnitValue(baseUnit);
    }
  });
  Object.defineProperty(DurationFormatter2.prototype, "_getUnitValue", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(timeUnit) {
      return this._getUnitValues()[timeUnit];
    }
  });
  Object.defineProperty(DurationFormatter2.prototype, "_getUnitValues", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return {
        "millisecond": 1,
        "second": 1e3,
        "minute": 6e4,
        "hour": 36e5,
        "day": 864e5,
        "week": 6048e5,
        "month": 2592e6,
        "year": 31536e6
      };
    }
  });
  return DurationFormatter2;
}(Entity);

// node_modules/@amcharts/amcharts5/locales/en.js
var en_default = {
  "firstDayOfWeek": 1,
  "_decimalSeparator": ".",
  "_thousandSeparator": ",",
  "_big_number_suffix_3": "k",
  "_big_number_suffix_6": "M",
  "_big_number_suffix_9": "G",
  "_big_number_suffix_12": "T",
  "_big_number_suffix_15": "P",
  "_big_number_suffix_18": "E",
  "_big_number_suffix_21": "Z",
  "_big_number_suffix_24": "Y",
  "_small_number_suffix_3": "m",
  "_small_number_suffix_6": "\u03BC",
  "_small_number_suffix_9": "n",
  "_small_number_suffix_12": "p",
  "_small_number_suffix_15": "f",
  "_small_number_suffix_18": "a",
  "_small_number_suffix_21": "z",
  "_small_number_suffix_24": "y",
  "_byte_suffix_B": "B",
  "_byte_suffix_KB": "KB",
  "_byte_suffix_MB": "MB",
  "_byte_suffix_GB": "GB",
  "_byte_suffix_TB": "TB",
  "_byte_suffix_PB": "PB",
  "_date": "yyyy-MM-dd",
  "_date_millisecond": "mm:ss SSS",
  "_date_millisecond_full": "HH:mm:ss SSS",
  "_date_second": "HH:mm:ss",
  "_date_second_full": "HH:mm:ss",
  "_date_minute": "HH:mm",
  "_date_minute_full": "HH:mm - MMM dd, yyyy",
  "_date_hour": "HH:mm",
  "_date_hour_full": "HH:mm - MMM dd, yyyy",
  "_date_day": "MMM dd",
  "_date_day_full": "MMM dd, yyyy",
  "_date_week": "ww",
  "_date_week_full": "MMM dd, yyyy",
  "_date_month": "MMM",
  "_date_month_full": "MMM, yyyy",
  "_date_year": "yyyy",
  "_duration_millisecond": "SSS",
  "_duration_millisecond_second": "ss.SSS",
  "_duration_millisecond_minute": "mm:ss SSS",
  "_duration_millisecond_hour": "hh:mm:ss SSS",
  "_duration_millisecond_day": "d'd' mm:ss SSS",
  "_duration_millisecond_week": "d'd' mm:ss SSS",
  "_duration_millisecond_month": "M'm' dd'd' mm:ss SSS",
  "_duration_millisecond_year": "y'y' MM'm' dd'd' mm:ss SSS",
  "_duration_second": "ss",
  "_duration_second_minute": "mm:ss",
  "_duration_second_hour": "hh:mm:ss",
  "_duration_second_day": "d'd' hh:mm:ss",
  "_duration_second_week": "d'd' hh:mm:ss",
  "_duration_second_month": "M'm' dd'd' hh:mm:ss",
  "_duration_second_year": "y'y' MM'm' dd'd' hh:mm:ss",
  "_duration_minute": "mm",
  "_duration_minute_hour": "hh:mm",
  "_duration_minute_day": "d'd' hh:mm",
  "_duration_minute_week": "d'd' hh:mm",
  "_duration_minute_month": "M'm' dd'd' hh:mm",
  "_duration_minute_year": "y'y' MM'm' dd'd' hh:mm",
  "_duration_hour": "hh'h'",
  "_duration_hour_day": "d'd' hh'h'",
  "_duration_hour_week": "d'd' hh'h'",
  "_duration_hour_month": "M'm' dd'd' hh'h'",
  "_duration_hour_year": "y'y' MM'm' dd'd' hh'h'",
  "_duration_day": "d'd'",
  "_duration_day_week": "d'd'",
  "_duration_day_month": "M'm' dd'd'",
  "_duration_day_year": "y'y' MM'm' dd'd'",
  "_duration_week": "w'w'",
  "_duration_week_month": "w'w'",
  "_duration_week_year": "w'w'",
  "_duration_month": "M'm'",
  "_duration_month_year": "y'y' MM'm'",
  "_duration_year": "y'y'",
  "_era_ad": "AD",
  "_era_bc": "BC",
  "A": "",
  "P": "",
  "AM": "",
  "PM": "",
  "A.M.": "",
  "P.M.": "",
  "January": "",
  "February": "",
  "March": "",
  "April": "",
  "May": "",
  "June": "",
  "July": "",
  "August": "",
  "September": "",
  "October": "",
  "November": "",
  "December": "",
  "Jan": "",
  "Feb": "",
  "Mar": "",
  "Apr": "",
  "May(short)": "May",
  "Jun": "",
  "Jul": "",
  "Aug": "",
  "Sep": "",
  "Oct": "",
  "Nov": "",
  "Dec": "",
  "Sunday": "",
  "Monday": "",
  "Tuesday": "",
  "Wednesday": "",
  "Thursday": "",
  "Friday": "",
  "Saturday": "",
  "Sun": "",
  "Mon": "",
  "Tue": "",
  "Wed": "",
  "Thu": "",
  "Fri": "",
  "Sat": "",
  "_dateOrd": function(day) {
    var res = "th";
    if (day < 11 || day > 13) {
      switch (day % 10) {
        case 1:
          res = "st";
          break;
        case 2:
          res = "nd";
          break;
        case 3:
          res = "rd";
          break;
      }
    }
    return res;
  },
  "Zoom Out": "",
  "Play": "",
  "Stop": "",
  "Legend": "",
  "Press ENTER to toggle": "",
  "Loading": "",
  "Home": "",
  "Chart": "",
  "Serial chart": "",
  "X/Y chart": "",
  "Pie chart": "",
  "Gauge chart": "",
  "Radar chart": "",
  "Sankey diagram": "",
  "Flow diagram": "",
  "Chord diagram": "",
  "TreeMap chart": "",
  "Force directed tree": "",
  "Sliced chart": "",
  "Series": "",
  "Candlestick Series": "",
  "OHLC Series": "",
  "Column Series": "",
  "Line Series": "",
  "Pie Slice Series": "",
  "Funnel Series": "",
  "Pyramid Series": "",
  "X/Y Series": "",
  "Map": "",
  "Press ENTER to zoom in": "",
  "Press ENTER to zoom out": "",
  "Use arrow keys to zoom in and out": "",
  "Use plus and minus keys on your keyboard to zoom in and out": "",
  "Export": "",
  "Image": "",
  "Data": "",
  "Print": "",
  "Press ENTER or use arrow keys to navigate": "",
  "Press ENTER to open": "",
  "Press ENTER to print.": "",
  "Press ENTER to export as %1.": "",
  "(Press ESC to close this message)": "",
  "Image Export Complete": "",
  "Export operation took longer than expected. Something might have gone wrong.": "",
  "Saved from": "",
  "PNG": "",
  "JPG": "",
  "GIF": "",
  "SVG": "",
  "PDF": "",
  "JSON": "",
  "CSV": "",
  "XLSX": "",
  "HTML": "",
  "Use TAB to select grip buttons or left and right arrows to change selection": "",
  "Use left and right arrows to move selection": "",
  "Use left and right arrows to move left selection": "",
  "Use left and right arrows to move right selection": "",
  "Use TAB select grip buttons or up and down arrows to change selection": "",
  "Use up and down arrows to move selection": "",
  "Use up and down arrows to move lower selection": "",
  "Use up and down arrows to move upper selection": "",
  "From %1 to %2": "",
  "From %1": "",
  "To %1": "",
  "No parser available for file: %1": "",
  "Error parsing file: %1": "",
  "Unable to load file: %1": "",
  "Invalid date": "",
  "Close": "",
  "Minimize": ""
};

// node_modules/@amcharts/amcharts5/.internal/core/util/Language.js
var Language = function(_super) {
  __extends(Language2, _super);
  function Language2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(Language2.prototype, "_setDefaults", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this.setPrivate("defaultLocale", en_default);
      _super.prototype._setDefaults.call(this);
    }
  });
  Object.defineProperty(Language2.prototype, "translate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(prompt, locale) {
      var rest = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        rest[_i - 2] = arguments[_i];
      }
      if (!locale) {
        locale = this._root.locale || this.getPrivate("defaultLocale");
      }
      var translation = prompt;
      var value = locale[prompt];
      if (value === null) {
        translation = "";
      } else if (value != null) {
        if (value) {
          translation = value;
        }
      } else if (locale !== this.getPrivate("defaultLocale")) {
        return this.translate.apply(this, __spreadArray([prompt, this.getPrivate("defaultLocale")], __read(rest), false));
      }
      if (rest.length) {
        for (var len = rest.length, i = 0; i < len; ++i) {
          translation = translation.split("%" + (i + 1)).join(rest[i]);
        }
      }
      return translation;
    }
  });
  Object.defineProperty(Language2.prototype, "translateAny", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(prompt, locale) {
      var rest = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        rest[_i - 2] = arguments[_i];
      }
      return this.translate.apply(this, __spreadArray([prompt, locale], __read(rest), false));
    }
  });
  Object.defineProperty(Language2.prototype, "setTranslationAny", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(prompt, translation, locale) {
      var localeTarget = locale || this._root.locale;
      localeTarget[prompt] = translation;
    }
  });
  Object.defineProperty(Language2.prototype, "translateEmpty", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(prompt, locale) {
      var rest = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        rest[_i - 2] = arguments[_i];
      }
      var translation = this.translate.apply(this, __spreadArray([prompt, locale], __read(rest), false));
      return translation == prompt ? "" : translation;
    }
  });
  Object.defineProperty(Language2.prototype, "translateFunc", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(prompt, locale) {
      if (this._root.locale[prompt]) {
        return this._root.locale[prompt];
      }
      if (locale !== this.getPrivate("defaultLocale")) {
        return this.translateFunc(prompt, this.getPrivate("defaultLocale"));
      }
      return function() {
        return "";
      };
    }
  });
  Object.defineProperty(Language2.prototype, "translateAll", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(list, locale) {
      var _this = this;
      if (!this.isDefault()) {
        return map(list, function(x2) {
          return _this.translate(x2, locale);
        });
      } else {
        return list;
      }
    }
  });
  Object.defineProperty(Language2.prototype, "isDefault", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this.getPrivate("defaultLocale") === this._root.locale;
    }
  });
  return Language2;
}(Entity);

// node_modules/@amcharts/amcharts5/.internal/core/util/Matrix.js
var Matrix = function() {
  function Matrix2(a2, b, c, d, tx, ty) {
    if (a2 === void 0) {
      a2 = 1;
    }
    if (b === void 0) {
      b = 0;
    }
    if (c === void 0) {
      c = 0;
    }
    if (d === void 0) {
      d = 1;
    }
    if (tx === void 0) {
      tx = 0;
    }
    if (ty === void 0) {
      ty = 0;
    }
    Object.defineProperty(this, "a", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "b", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "c", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "d", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "tx", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "ty", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.a = a2;
    this.b = b;
    this.c = c;
    this.d = d;
    this.tx = tx;
    this.ty = ty;
  }
  Object.defineProperty(Matrix2.prototype, "setTransform", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(x2, y2, pivotX, pivotY, rotation, scale) {
      if (scale === void 0) {
        scale = 1;
      }
      this.a = Math.cos(rotation) * scale;
      this.b = Math.sin(rotation) * scale;
      this.c = -Math.sin(rotation) * scale;
      this.d = Math.cos(rotation) * scale;
      this.tx = x2 - (pivotX * this.a + pivotY * this.c);
      this.ty = y2 - (pivotX * this.b + pivotY * this.d);
    }
  });
  Object.defineProperty(Matrix2.prototype, "apply", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(origin) {
      return {
        x: this.a * origin.x + this.c * origin.y + this.tx,
        y: this.b * origin.x + this.d * origin.y + this.ty
      };
    }
  });
  Object.defineProperty(Matrix2.prototype, "applyInverse", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(origin) {
      var id = 1 / (this.a * this.d + this.c * -this.b);
      return {
        x: this.d * id * origin.x + -this.c * id * origin.y + (this.ty * this.c - this.tx * this.d) * id,
        y: this.a * id * origin.y + -this.b * id * origin.x + (-this.ty * this.a + this.tx * this.b) * id
      };
    }
  });
  Object.defineProperty(Matrix2.prototype, "append", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(matrix) {
      var a1 = this.a;
      var b1 = this.b;
      var c1 = this.c;
      var d1 = this.d;
      this.a = matrix.a * a1 + matrix.b * c1;
      this.b = matrix.a * b1 + matrix.b * d1;
      this.c = matrix.c * a1 + matrix.d * c1;
      this.d = matrix.c * b1 + matrix.d * d1;
      this.tx = matrix.tx * a1 + matrix.ty * c1 + this.tx;
      this.ty = matrix.tx * b1 + matrix.ty * d1 + this.ty;
    }
  });
  Object.defineProperty(Matrix2.prototype, "prepend", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(matrix) {
      var tx1 = this.tx;
      if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1) {
        var a1 = this.a;
        var c1 = this.c;
        this.a = a1 * matrix.a + this.b * matrix.c;
        this.b = a1 * matrix.b + this.b * matrix.d;
        this.c = c1 * matrix.a + this.d * matrix.c;
        this.d = c1 * matrix.b + this.d * matrix.d;
      }
      this.tx = tx1 * matrix.a + this.ty * matrix.c + matrix.tx;
      this.ty = tx1 * matrix.b + this.ty * matrix.d + matrix.ty;
    }
  });
  Object.defineProperty(Matrix2.prototype, "copyFrom", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(matrix) {
      this.a = matrix.a;
      this.b = matrix.b;
      this.c = matrix.c;
      this.d = matrix.d;
      this.tx = matrix.tx;
      this.ty = matrix.ty;
    }
  });
  return Matrix2;
}();

// node_modules/svg-arc-to-cubic-bezier/modules/index.js
var _slicedToArray = function() {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = void 0;
    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i)
          break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"])
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  return function(arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();
var TAU = Math.PI * 2;
var mapToEllipse = function mapToEllipse2(_ref, rx, ry, cosphi, sinphi, centerx, centery) {
  var x2 = _ref.x, y2 = _ref.y;
  x2 *= rx;
  y2 *= ry;
  var xp = cosphi * x2 - sinphi * y2;
  var yp = sinphi * x2 + cosphi * y2;
  return {
    x: xp + centerx,
    y: yp + centery
  };
};
var approxUnitArc = function approxUnitArc2(ang1, ang2) {
  var a2 = ang2 === 1.5707963267948966 ? 0.551915024494 : ang2 === -1.5707963267948966 ? -0.551915024494 : 4 / 3 * Math.tan(ang2 / 4);
  var x1 = Math.cos(ang1);
  var y1 = Math.sin(ang1);
  var x2 = Math.cos(ang1 + ang2);
  var y2 = Math.sin(ang1 + ang2);
  return [{
    x: x1 - y1 * a2,
    y: y1 + x1 * a2
  }, {
    x: x2 + y2 * a2,
    y: y2 - x2 * a2
  }, {
    x: x2,
    y: y2
  }];
};
var vectorAngle = function vectorAngle2(ux, uy, vx, vy) {
  var sign2 = ux * vy - uy * vx < 0 ? -1 : 1;
  var dot = ux * vx + uy * vy;
  if (dot > 1) {
    dot = 1;
  }
  if (dot < -1) {
    dot = -1;
  }
  return sign2 * Math.acos(dot);
};
var getArcCenter = function getArcCenter2(px, py, cx, cy, rx, ry, largeArcFlag, sweepFlag, sinphi, cosphi, pxp, pyp) {
  var rxsq = Math.pow(rx, 2);
  var rysq = Math.pow(ry, 2);
  var pxpsq = Math.pow(pxp, 2);
  var pypsq = Math.pow(pyp, 2);
  var radicant = rxsq * rysq - rxsq * pypsq - rysq * pxpsq;
  if (radicant < 0) {
    radicant = 0;
  }
  radicant /= rxsq * pypsq + rysq * pxpsq;
  radicant = Math.sqrt(radicant) * (largeArcFlag === sweepFlag ? -1 : 1);
  var centerxp = radicant * rx / ry * pyp;
  var centeryp = radicant * -ry / rx * pxp;
  var centerx = cosphi * centerxp - sinphi * centeryp + (px + cx) / 2;
  var centery = sinphi * centerxp + cosphi * centeryp + (py + cy) / 2;
  var vx1 = (pxp - centerxp) / rx;
  var vy1 = (pyp - centeryp) / ry;
  var vx2 = (-pxp - centerxp) / rx;
  var vy2 = (-pyp - centeryp) / ry;
  var ang1 = vectorAngle(1, 0, vx1, vy1);
  var ang2 = vectorAngle(vx1, vy1, vx2, vy2);
  if (sweepFlag === 0 && ang2 > 0) {
    ang2 -= TAU;
  }
  if (sweepFlag === 1 && ang2 < 0) {
    ang2 += TAU;
  }
  return [centerx, centery, ang1, ang2];
};
var arcToBezier = function arcToBezier2(_ref2) {
  var px = _ref2.px, py = _ref2.py, cx = _ref2.cx, cy = _ref2.cy, rx = _ref2.rx, ry = _ref2.ry, _ref2$xAxisRotation = _ref2.xAxisRotation, xAxisRotation = _ref2$xAxisRotation === void 0 ? 0 : _ref2$xAxisRotation, _ref2$largeArcFlag = _ref2.largeArcFlag, largeArcFlag = _ref2$largeArcFlag === void 0 ? 0 : _ref2$largeArcFlag, _ref2$sweepFlag = _ref2.sweepFlag, sweepFlag = _ref2$sweepFlag === void 0 ? 0 : _ref2$sweepFlag;
  var curves = [];
  if (rx === 0 || ry === 0) {
    return [];
  }
  var sinphi = Math.sin(xAxisRotation * TAU / 360);
  var cosphi = Math.cos(xAxisRotation * TAU / 360);
  var pxp = cosphi * (px - cx) / 2 + sinphi * (py - cy) / 2;
  var pyp = -sinphi * (px - cx) / 2 + cosphi * (py - cy) / 2;
  if (pxp === 0 && pyp === 0) {
    return [];
  }
  rx = Math.abs(rx);
  ry = Math.abs(ry);
  var lambda = Math.pow(pxp, 2) / Math.pow(rx, 2) + Math.pow(pyp, 2) / Math.pow(ry, 2);
  if (lambda > 1) {
    rx *= Math.sqrt(lambda);
    ry *= Math.sqrt(lambda);
  }
  var _getArcCenter = getArcCenter(px, py, cx, cy, rx, ry, largeArcFlag, sweepFlag, sinphi, cosphi, pxp, pyp), _getArcCenter2 = _slicedToArray(_getArcCenter, 4), centerx = _getArcCenter2[0], centery = _getArcCenter2[1], ang1 = _getArcCenter2[2], ang2 = _getArcCenter2[3];
  var ratio = Math.abs(ang2) / (TAU / 4);
  if (Math.abs(1 - ratio) < 1e-7) {
    ratio = 1;
  }
  var segments = Math.max(Math.ceil(ratio), 1);
  ang2 /= segments;
  for (var i = 0; i < segments; i++) {
    curves.push(approxUnitArc(ang1, ang2));
    ang1 += ang2;
  }
  return curves.map(function(curve) {
    var _mapToEllipse = mapToEllipse(curve[0], rx, ry, cosphi, sinphi, centerx, centery), x1 = _mapToEllipse.x, y1 = _mapToEllipse.y;
    var _mapToEllipse2 = mapToEllipse(curve[1], rx, ry, cosphi, sinphi, centerx, centery), x2 = _mapToEllipse2.x, y2 = _mapToEllipse2.y;
    var _mapToEllipse3 = mapToEllipse(curve[2], rx, ry, cosphi, sinphi, centerx, centery), x3 = _mapToEllipse3.x, y3 = _mapToEllipse3.y;
    return { x1, y1, x2, y2, x: x3, y: y3 };
  });
};
var modules_default = arcToBezier;

// node_modules/@amcharts/amcharts5/.internal/core/render/backend/CanvasRenderer.js
function checkArgs(name, actual, expected) {
  if (actual !== expected) {
    throw new Error("Required " + expected + " arguments for " + name + " but got " + actual);
  }
}
function checkMinArgs(name, actual, expected) {
  if (actual < expected) {
    throw new Error("Required at least " + expected + " arguments for " + name + " but got " + actual);
  }
}
function checkEvenArgs(name, actual, expected) {
  checkMinArgs(name, actual, expected);
  if (actual % expected !== 0) {
    throw new Error("Arguments for " + name + " must be in pairs of " + expected);
  }
}
function assertBinary(value) {
  if (value === 0 || value === 1) {
    return value;
  } else {
    throw new Error("Flag must be 0 or 1");
  }
}
function distributeId(id) {
  var rgb = [0, 0, 0];
  for (var i = 0; i < 24; i++) {
    rgb[i % 3] <<= 1;
    rgb[i % 3] |= id & 1;
    id >>= 1;
  }
  return (rgb[2] | 0) + (rgb[1] << 8) + (rgb[0] << 16);
}
function eachTargets(hitTarget, f) {
  for (; ; ) {
    if (hitTarget.interactive) {
      if (!f(hitTarget)) {
        break;
      }
    }
    if (hitTarget._parent) {
      hitTarget = hitTarget._parent;
    } else {
      break;
    }
  }
}
function onPointerEvent(element, name, f) {
  return addEventListener(element, getRendererEvent(name), function(event) {
    var touches = event.touches;
    if (touches) {
      if (touches.length == 0) {
        touches = event.changedTouches;
      }
      f(copy(touches));
    } else {
      f([event]);
    }
  });
}
function isTainted(image) {
  var canvas = document.createElement("canvas");
  canvas.width = 1;
  canvas.height = 1;
  var context = canvas.getContext("2d");
  context.drawImage(image, 0, 0, 1, 1);
  try {
    context.getImageData(0, 0, 1, 1);
    return false;
  } catch (err) {
    console.warn('Image "' + image.src + '" is loaded from different host and is not covered by CORS policy. For more information about the implications read here: https://www.amcharts.com/docs/v5/concepts/cors');
    return true;
  }
}
function clearCanvas(view) {
  view.width = 0;
  view.height = 0;
  view.style.width = "0px";
  view.style.height = "0px";
}
var CanvasPivot = function() {
  function CanvasPivot2() {
    Object.defineProperty(this, "_x", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(this, "_y", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
  }
  Object.defineProperty(CanvasPivot2.prototype, "x", {
    get: function() {
      return this._x;
    },
    set: function(value) {
      this._x = value;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(CanvasPivot2.prototype, "y", {
    get: function() {
      return this._y;
    },
    set: function(value) {
      this._y = value;
    },
    enumerable: false,
    configurable: true
  });
  return CanvasPivot2;
}();
var CanvasDisplayObject = function(_super) {
  __extends(CanvasDisplayObject2, _super);
  function CanvasDisplayObject2(renderer) {
    var _this = _super.call(this) || this;
    Object.defineProperty(_this, "_layer", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "mask", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: null
    });
    Object.defineProperty(_this, "visible", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true
    });
    Object.defineProperty(_this, "exportable", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true
    });
    Object.defineProperty(_this, "interactive", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "inactive", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "wheelable", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "cancelTouch", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "isMeasured", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "buttonMode", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "alpha", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 1
    });
    Object.defineProperty(_this, "compoundAlpha", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 1
    });
    Object.defineProperty(_this, "angle", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(_this, "scale", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 1
    });
    Object.defineProperty(_this, "x", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(_this, "y", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(_this, "pivot", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new CanvasPivot()
    });
    Object.defineProperty(_this, "filter", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "cursorOverStyle", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_replacedCursorStyle", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_localMatrix", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new Matrix()
    });
    Object.defineProperty(_this, "_matrix", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new Matrix()
    });
    Object.defineProperty(_this, "_uMatrix", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new Matrix()
    });
    Object.defineProperty(_this, "_renderer", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_parent", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_localBounds", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_bounds", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_colorId", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    _this._renderer = renderer;
    return _this;
  }
  Object.defineProperty(CanvasDisplayObject2.prototype, "_dispose", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._renderer._removeObject(this);
    }
  });
  Object.defineProperty(CanvasDisplayObject2.prototype, "getCanvas", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this.getLayer().view;
    }
  });
  Object.defineProperty(CanvasDisplayObject2.prototype, "getLayer", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var self = this;
      for (; ; ) {
        if (self._layer) {
          return self._layer;
        } else if (self._parent) {
          self = self._parent;
        } else {
          return this._renderer.defaultLayer;
        }
      }
    }
  });
  Object.defineProperty(CanvasDisplayObject2.prototype, "setLayer", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(order, visible) {
      if (visible === void 0) {
        visible = true;
      }
      if (order == null) {
        this._layer = void 0;
      } else {
        this._layer = this._renderer.getLayer(order, visible);
        this._layer.visible = visible;
        if (this._parent) {
          this._parent.registerChildLayer(this._layer);
        }
      }
    }
  });
  Object.defineProperty(CanvasDisplayObject2.prototype, "markDirtyLayer", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this.getLayer().dirty = true;
    }
  });
  Object.defineProperty(CanvasDisplayObject2.prototype, "clear", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this.invalidateBounds();
    }
  });
  Object.defineProperty(CanvasDisplayObject2.prototype, "invalidateBounds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._localBounds = void 0;
    }
  });
  Object.defineProperty(CanvasDisplayObject2.prototype, "_addBounds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(_bounds) {
    }
  });
  Object.defineProperty(CanvasDisplayObject2.prototype, "_getColorId", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (this._colorId === void 0) {
        this._colorId = this._renderer.paintId(this);
      }
      return this._colorId;
    }
  });
  Object.defineProperty(CanvasDisplayObject2.prototype, "_isInteractive", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this.inactive == false && (this.interactive || this._renderer._forceInteractive > 0);
    }
  });
  Object.defineProperty(CanvasDisplayObject2.prototype, "_isInteractiveMask", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this._isInteractive();
    }
  });
  Object.defineProperty(CanvasDisplayObject2.prototype, "contains", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(child) {
      for (; ; ) {
        if (child === this) {
          return true;
        } else if (child._parent) {
          child = child._parent;
        } else {
          return false;
        }
      }
    }
  });
  Object.defineProperty(CanvasDisplayObject2.prototype, "toGlobal", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(point5) {
      return this._matrix.apply(point5);
    }
  });
  Object.defineProperty(CanvasDisplayObject2.prototype, "toLocal", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(point5) {
      return this._matrix.applyInverse(point5);
    }
  });
  Object.defineProperty(CanvasDisplayObject2.prototype, "getLocalMatrix", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._uMatrix.setTransform(0, 0, this.pivot.x, this.pivot.y, this.angle * Math.PI / 180, this.scale);
      return this._uMatrix;
    }
  });
  Object.defineProperty(CanvasDisplayObject2.prototype, "getLocalBounds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (!this._localBounds) {
        var bn = 1e7;
        this._localBounds = {
          left: bn,
          top: bn,
          right: -bn,
          bottom: -bn
        };
        this._addBounds(this._localBounds);
      }
      return this._localBounds;
    }
  });
  Object.defineProperty(CanvasDisplayObject2.prototype, "getAdjustedBounds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(bounds) {
      this._setMatrix();
      var matrix = this.getLocalMatrix();
      var p02 = matrix.apply({ x: bounds.left, y: bounds.top });
      var p1 = matrix.apply({ x: bounds.right, y: bounds.top });
      var p2 = matrix.apply({ x: bounds.right, y: bounds.bottom });
      var p3 = matrix.apply({ x: bounds.left, y: bounds.bottom });
      return {
        left: Math.min(p02.x, p1.x, p2.x, p3.x),
        top: Math.min(p02.y, p1.y, p2.y, p3.y),
        right: Math.max(p02.x, p1.x, p2.x, p3.x),
        bottom: Math.max(p02.y, p1.y, p2.y, p3.y)
      };
    }
  });
  Object.defineProperty(CanvasDisplayObject2.prototype, "on", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, callback, context) {
      if (this.interactive) {
        return this._renderer._addEvent(this, key, callback, context);
      } else {
        return new Disposer(function() {
        });
      }
    }
  });
  Object.defineProperty(CanvasDisplayObject2.prototype, "_setMatrix", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._localMatrix.setTransform(this.x, this.y, this.pivot.x, this.pivot.y, this.angle * Math.PI / 180, this.scale);
      this._matrix.copyFrom(this._localMatrix);
      if (this._parent) {
        this._matrix.prepend(this._parent._matrix);
      }
    }
  });
  Object.defineProperty(CanvasDisplayObject2.prototype, "_transform", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(context, resolution) {
      var m = this._matrix;
      context.setTransform(m.a * resolution, m.b * resolution, m.c * resolution, m.d * resolution, m.tx * resolution, m.ty * resolution);
    }
  });
  Object.defineProperty(CanvasDisplayObject2.prototype, "render", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(parentLayer) {
      var _this = this;
      if (this.visible && (this.exportable !== false || !this._renderer._omitTainted)) {
        this._setMatrix();
        var resolution_1 = this._renderer.resolution;
        var layers = this._renderer.layers;
        var ghostContext = this._renderer._ghostContext;
        var mask_1 = this.mask;
        if (mask_1) {
          mask_1._setMatrix();
        }
        each(layers, function(layer) {
          if (layer) {
            var context = layer.context;
            context.save();
            if (mask_1) {
              mask_1._transform(context, layer.scale || resolution_1);
              mask_1._runPath(context);
              context.clip();
            }
            context.globalAlpha = _this.compoundAlpha * _this.alpha;
            _this._transform(context, layer.scale || resolution_1);
            if (_this.filter) {
              context.filter = _this.filter;
            }
          }
        });
        ghostContext.save();
        if (mask_1 && this._isInteractiveMask()) {
          mask_1._transform(ghostContext, resolution_1);
          mask_1._runPath(ghostContext);
          ghostContext.clip();
        }
        this._transform(ghostContext, resolution_1);
        this._render(parentLayer);
        ghostContext.restore();
        each(layers, function(layer) {
          if (layer) {
            layer.context.restore();
          }
        });
      }
    }
  });
  Object.defineProperty(CanvasDisplayObject2.prototype, "_render", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(parentLayer) {
      if (this.exportable === false) {
        var layer = this._layer || parentLayer;
        layer.tainted = true;
      }
    }
  });
  Object.defineProperty(CanvasDisplayObject2.prototype, "hovering", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this._renderer._hovering.has(this);
    }
  });
  Object.defineProperty(CanvasDisplayObject2.prototype, "dragging", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      return this._renderer._dragging.some(function(x2) {
        return x2.value === _this;
      });
    }
  });
  Object.defineProperty(CanvasDisplayObject2.prototype, "dispose", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this.getLayer().dirty = true;
    }
  });
  Object.defineProperty(CanvasDisplayObject2.prototype, "shouldCancelTouch", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var renderer = this._renderer;
      if (renderer.tapToActivate && !renderer._touchActive) {
        return false;
      }
      if (this.cancelTouch) {
        return true;
      } else if (this._parent) {
        return this._parent.shouldCancelTouch();
      }
      return false;
    }
  });
  return CanvasDisplayObject2;
}(DisposerClass);
var CanvasContainer = function(_super) {
  __extends(CanvasContainer2, _super);
  function CanvasContainer2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    Object.defineProperty(_this, "interactiveChildren", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true
    });
    Object.defineProperty(_this, "_childLayers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_children", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    return _this;
  }
  Object.defineProperty(CanvasContainer2.prototype, "_isInteractiveMask", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this.interactiveChildren || _super.prototype._isInteractiveMask.call(this);
    }
  });
  Object.defineProperty(CanvasContainer2.prototype, "addChild", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(child) {
      child._parent = this;
      this._children.push(child);
      if (child._layer) {
        this.registerChildLayer(child._layer);
      }
    }
  });
  Object.defineProperty(CanvasContainer2.prototype, "addChildAt", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(child, index) {
      child._parent = this;
      this._children.splice(index, 0, child);
      if (child._layer) {
        this.registerChildLayer(child._layer);
      }
    }
  });
  Object.defineProperty(CanvasContainer2.prototype, "removeChild", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(child) {
      child._parent = void 0;
      removeFirst(this._children, child);
    }
  });
  Object.defineProperty(CanvasContainer2.prototype, "_render", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(parentLayer) {
      var _this = this;
      _super.prototype._render.call(this, parentLayer);
      var renderer = this._renderer;
      if (this.interactive && this.interactiveChildren) {
        ++renderer._forceInteractive;
      }
      var layer = this._layer || parentLayer;
      each(this._children, function(child) {
        child.compoundAlpha = _this.compoundAlpha * _this.alpha;
        child.render(layer);
      });
      if (this.interactive && this.interactiveChildren) {
        --renderer._forceInteractive;
      }
    }
  });
  Object.defineProperty(CanvasContainer2.prototype, "registerChildLayer", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(layer) {
      if (!this._childLayers) {
        this._childLayers = [];
      }
      pushOne(this._childLayers, layer);
      if (this._parent) {
        this._parent.registerChildLayer(layer);
      }
    }
  });
  Object.defineProperty(CanvasContainer2.prototype, "markDirtyLayer", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(deep) {
      if (deep === void 0) {
        deep = false;
      }
      _super.prototype.markDirtyLayer.call(this);
      if (deep && this._childLayers) {
        each(this._childLayers, function(layer) {
          return layer.dirty = true;
        });
      }
    }
  });
  Object.defineProperty(CanvasContainer2.prototype, "dispose", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype.dispose.call(this);
      if (this._childLayers) {
        each(this._childLayers, function(layer) {
          layer.dirty = true;
        });
      }
    }
  });
  return CanvasContainer2;
}(CanvasDisplayObject);
function setPoint(bounds, point5) {
  bounds.left = Math.min(bounds.left, point5.x);
  bounds.top = Math.min(bounds.top, point5.y);
  bounds.right = Math.max(bounds.right, point5.x);
  bounds.bottom = Math.max(bounds.bottom, point5.y);
}
var Op = function() {
  function Op2() {
  }
  Object.defineProperty(Op2.prototype, "colorize", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(_context, _forceColor) {
    }
  });
  Object.defineProperty(Op2.prototype, "path", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(_context) {
    }
  });
  Object.defineProperty(Op2.prototype, "addBounds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(_bounds) {
    }
  });
  return Op2;
}();
var BeginFill = function(_super) {
  __extends(BeginFill2, _super);
  function BeginFill2(color2) {
    var _this = _super.call(this) || this;
    Object.defineProperty(_this, "color", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: color2
    });
    return _this;
  }
  Object.defineProperty(BeginFill2.prototype, "colorize", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(context, forceColor) {
      if (forceColor !== void 0) {
        context.fillStyle = forceColor;
      } else {
        context.fillStyle = this.color;
      }
    }
  });
  return BeginFill2;
}(Op);
var EndFill = function(_super) {
  __extends(EndFill2, _super);
  function EndFill2(clearShadow) {
    var _this = _super.call(this) || this;
    Object.defineProperty(_this, "clearShadow", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: clearShadow
    });
    return _this;
  }
  Object.defineProperty(EndFill2.prototype, "colorize", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(context, _forceColor) {
      context.fill();
      if (this.clearShadow) {
        context.shadowColor = "";
        context.shadowBlur = 0;
        context.shadowOffsetX = 0;
        context.shadowOffsetY = 0;
      }
    }
  });
  return EndFill2;
}(Op);
var EndStroke = function(_super) {
  __extends(EndStroke2, _super);
  function EndStroke2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(EndStroke2.prototype, "colorize", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(context, _forceColor) {
      context.stroke();
    }
  });
  return EndStroke2;
}(Op);
var LineStyle = function(_super) {
  __extends(LineStyle2, _super);
  function LineStyle2(width, color2, lineJoin) {
    var _this = _super.call(this) || this;
    Object.defineProperty(_this, "width", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: width
    });
    Object.defineProperty(_this, "color", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: color2
    });
    Object.defineProperty(_this, "lineJoin", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: lineJoin
    });
    return _this;
  }
  Object.defineProperty(LineStyle2.prototype, "colorize", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(context, forceColor) {
      if (forceColor !== void 0) {
        context.strokeStyle = forceColor;
      } else {
        context.strokeStyle = this.color;
      }
      context.lineWidth = this.width;
      if (this.lineJoin) {
        context.lineJoin = this.lineJoin;
      }
    }
  });
  return LineStyle2;
}(Op);
var LineDash = function(_super) {
  __extends(LineDash2, _super);
  function LineDash2(dash) {
    var _this = _super.call(this) || this;
    Object.defineProperty(_this, "dash", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: dash
    });
    return _this;
  }
  Object.defineProperty(LineDash2.prototype, "colorize", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(context, _forceColor) {
      context.setLineDash(this.dash);
    }
  });
  return LineDash2;
}(Op);
var LineDashOffset = function(_super) {
  __extends(LineDashOffset2, _super);
  function LineDashOffset2(dashOffset) {
    var _this = _super.call(this) || this;
    Object.defineProperty(_this, "dashOffset", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: dashOffset
    });
    return _this;
  }
  Object.defineProperty(LineDashOffset2.prototype, "colorize", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(context, _forceColor) {
      context.lineDashOffset = this.dashOffset;
    }
  });
  return LineDashOffset2;
}(Op);
var DrawRect = function(_super) {
  __extends(DrawRect2, _super);
  function DrawRect2(x2, y2, width, height) {
    var _this = _super.call(this) || this;
    Object.defineProperty(_this, "x", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: x2
    });
    Object.defineProperty(_this, "y", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: y2
    });
    Object.defineProperty(_this, "width", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: width
    });
    Object.defineProperty(_this, "height", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: height
    });
    return _this;
  }
  Object.defineProperty(DrawRect2.prototype, "path", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(context) {
      context.rect(this.x, this.y, this.width, this.height);
    }
  });
  Object.defineProperty(DrawRect2.prototype, "addBounds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(bounds) {
      var l = this.x;
      var t = this.y;
      var r = l + this.width;
      var b = t + this.height;
      setPoint(bounds, { x: l, y: t });
      setPoint(bounds, { x: r, y: t });
      setPoint(bounds, { x: l, y: b });
      setPoint(bounds, { x: r, y: b });
    }
  });
  return DrawRect2;
}(Op);
var DrawCircle = function(_super) {
  __extends(DrawCircle2, _super);
  function DrawCircle2(x2, y2, radius) {
    var _this = _super.call(this) || this;
    Object.defineProperty(_this, "x", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: x2
    });
    Object.defineProperty(_this, "y", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: y2
    });
    Object.defineProperty(_this, "radius", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: radius
    });
    return _this;
  }
  Object.defineProperty(DrawCircle2.prototype, "path", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(context) {
      context.moveTo(this.x + this.radius, this.y);
      context.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);
    }
  });
  Object.defineProperty(DrawCircle2.prototype, "addBounds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(bounds) {
      setPoint(bounds, { x: this.x - this.radius, y: this.y - this.radius });
      setPoint(bounds, { x: this.x + this.radius, y: this.y + this.radius });
    }
  });
  return DrawCircle2;
}(Op);
var DrawEllipse = function(_super) {
  __extends(DrawEllipse2, _super);
  function DrawEllipse2(x2, y2, radiusX, radiusY) {
    var _this = _super.call(this) || this;
    Object.defineProperty(_this, "x", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: x2
    });
    Object.defineProperty(_this, "y", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: y2
    });
    Object.defineProperty(_this, "radiusX", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: radiusX
    });
    Object.defineProperty(_this, "radiusY", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: radiusY
    });
    return _this;
  }
  Object.defineProperty(DrawEllipse2.prototype, "path", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(context) {
      context.ellipse(0, 0, this.radiusX, this.radiusY, 0, 0, Math.PI * 2);
    }
  });
  Object.defineProperty(DrawEllipse2.prototype, "addBounds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(bounds) {
      setPoint(bounds, { x: this.x - this.radiusX, y: this.y - this.radiusY });
      setPoint(bounds, { x: this.x + this.radiusX, y: this.y + this.radiusY });
    }
  });
  return DrawEllipse2;
}(Op);
var Arc = function(_super) {
  __extends(Arc2, _super);
  function Arc2(cx, cy, radius, startAngle, endAngle, anticlockwise) {
    var _this = _super.call(this) || this;
    Object.defineProperty(_this, "cx", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: cx
    });
    Object.defineProperty(_this, "cy", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: cy
    });
    Object.defineProperty(_this, "radius", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: radius
    });
    Object.defineProperty(_this, "startAngle", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: startAngle
    });
    Object.defineProperty(_this, "endAngle", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: endAngle
    });
    Object.defineProperty(_this, "anticlockwise", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: anticlockwise
    });
    return _this;
  }
  Object.defineProperty(Arc2.prototype, "path", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(context) {
      if (this.radius > 0) {
        context.arc(this.cx, this.cy, this.radius, this.startAngle, this.endAngle, this.anticlockwise);
      }
    }
  });
  Object.defineProperty(Arc2.prototype, "addBounds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(bounds) {
      var arcBounds = getArcBounds(this.cx, this.cy, this.startAngle * DEGREES, this.endAngle * DEGREES, this.radius);
      setPoint(bounds, { x: arcBounds.left, y: arcBounds.top });
      setPoint(bounds, { x: arcBounds.right, y: arcBounds.bottom });
    }
  });
  return Arc2;
}(Op);
var ArcTo = function(_super) {
  __extends(ArcTo2, _super);
  function ArcTo2(x1, y1, x2, y2, radius) {
    var _this = _super.call(this) || this;
    Object.defineProperty(_this, "x1", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: x1
    });
    Object.defineProperty(_this, "y1", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: y1
    });
    Object.defineProperty(_this, "x2", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: x2
    });
    Object.defineProperty(_this, "y2", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: y2
    });
    Object.defineProperty(_this, "radius", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: radius
    });
    return _this;
  }
  Object.defineProperty(ArcTo2.prototype, "path", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(context) {
      if (this.radius > 0) {
        context.arcTo(this.x1, this.y1, this.x2, this.y2, this.radius);
      }
    }
  });
  Object.defineProperty(ArcTo2.prototype, "addBounds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(_bounds) {
    }
  });
  return ArcTo2;
}(Op);
var LineTo = function(_super) {
  __extends(LineTo2, _super);
  function LineTo2(x2, y2) {
    var _this = _super.call(this) || this;
    Object.defineProperty(_this, "x", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: x2
    });
    Object.defineProperty(_this, "y", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: y2
    });
    return _this;
  }
  Object.defineProperty(LineTo2.prototype, "path", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(context) {
      context.lineTo(this.x, this.y);
    }
  });
  Object.defineProperty(LineTo2.prototype, "addBounds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(bounds) {
      setPoint(bounds, { x: this.x, y: this.y });
    }
  });
  return LineTo2;
}(Op);
var MoveTo = function(_super) {
  __extends(MoveTo2, _super);
  function MoveTo2(x2, y2) {
    var _this = _super.call(this) || this;
    Object.defineProperty(_this, "x", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: x2
    });
    Object.defineProperty(_this, "y", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: y2
    });
    return _this;
  }
  Object.defineProperty(MoveTo2.prototype, "path", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(context) {
      context.moveTo(this.x, this.y);
    }
  });
  Object.defineProperty(MoveTo2.prototype, "addBounds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(bounds) {
      setPoint(bounds, { x: this.x, y: this.y });
    }
  });
  return MoveTo2;
}(Op);
var ClosePath = function(_super) {
  __extends(ClosePath2, _super);
  function ClosePath2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(ClosePath2.prototype, "path", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(context) {
      context.closePath();
    }
  });
  return ClosePath2;
}(Op);
var BezierCurveTo = function(_super) {
  __extends(BezierCurveTo2, _super);
  function BezierCurveTo2(cpX, cpY, cpX2, cpY2, toX, toY) {
    var _this = _super.call(this) || this;
    Object.defineProperty(_this, "cpX", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: cpX
    });
    Object.defineProperty(_this, "cpY", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: cpY
    });
    Object.defineProperty(_this, "cpX2", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: cpX2
    });
    Object.defineProperty(_this, "cpY2", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: cpY2
    });
    Object.defineProperty(_this, "toX", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: toX
    });
    Object.defineProperty(_this, "toY", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: toY
    });
    return _this;
  }
  Object.defineProperty(BezierCurveTo2.prototype, "path", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(context) {
      context.bezierCurveTo(this.cpX, this.cpY, this.cpX2, this.cpY2, this.toX, this.toY);
    }
  });
  Object.defineProperty(BezierCurveTo2.prototype, "addBounds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(bounds) {
      setPoint(bounds, { x: this.cpX, y: this.cpY });
      setPoint(bounds, { x: this.cpX2, y: this.cpY2 });
      setPoint(bounds, { x: this.toX, y: this.toY });
    }
  });
  return BezierCurveTo2;
}(Op);
var QuadraticCurveTo = function(_super) {
  __extends(QuadraticCurveTo2, _super);
  function QuadraticCurveTo2(cpX, cpY, toX, toY) {
    var _this = _super.call(this) || this;
    Object.defineProperty(_this, "cpX", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: cpX
    });
    Object.defineProperty(_this, "cpY", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: cpY
    });
    Object.defineProperty(_this, "toX", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: toX
    });
    Object.defineProperty(_this, "toY", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: toY
    });
    return _this;
  }
  Object.defineProperty(QuadraticCurveTo2.prototype, "path", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(context) {
      context.quadraticCurveTo(this.cpX, this.cpY, this.toX, this.toY);
    }
  });
  Object.defineProperty(QuadraticCurveTo2.prototype, "addBounds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(bounds) {
      setPoint(bounds, { x: this.cpX, y: this.cpY });
      setPoint(bounds, { x: this.toX, y: this.toY });
    }
  });
  return QuadraticCurveTo2;
}(Op);
var Shadow = function(_super) {
  __extends(Shadow2, _super);
  function Shadow2(color2, blur2, offsetX, offsetY, opacity) {
    var _this = _super.call(this) || this;
    Object.defineProperty(_this, "color", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: color2
    });
    Object.defineProperty(_this, "blur", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: blur2
    });
    Object.defineProperty(_this, "offsetX", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: offsetX
    });
    Object.defineProperty(_this, "offsetY", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: offsetY
    });
    Object.defineProperty(_this, "opacity", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: opacity
    });
    return _this;
  }
  Object.defineProperty(Shadow2.prototype, "colorize", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(context, _forceColor) {
      if (this.opacity) {
        context.fillStyle = this.color;
      }
      context.shadowColor = this.color;
      context.shadowBlur = this.blur;
      context.shadowOffsetX = this.offsetX;
      context.shadowOffsetY = this.offsetY;
    }
  });
  return Shadow2;
}(Op);
var CanvasGraphics = function(_super) {
  __extends(CanvasGraphics2, _super);
  function CanvasGraphics2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    Object.defineProperty(_this, "_operations", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    Object.defineProperty(_this, "blendMode", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: BlendMode.NORMAL
    });
    Object.defineProperty(_this, "_hasShadows", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "_fillAlpha", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_strokeAlpha", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    return _this;
  }
  Object.defineProperty(CanvasGraphics2.prototype, "clear", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype.clear.call(this);
      this._operations.length = 0;
    }
  });
  Object.defineProperty(CanvasGraphics2.prototype, "_pushOp", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(op) {
      this._operations.push(op);
    }
  });
  Object.defineProperty(CanvasGraphics2.prototype, "beginFill", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(color2, alpha) {
      if (alpha === void 0) {
        alpha = 1;
      }
      this._fillAlpha = alpha;
      if (color2) {
        if (color2 instanceof Color) {
          this._pushOp(new BeginFill(color2.toCSS(alpha)));
        } else {
          this.isMeasured = true;
          this._pushOp(new BeginFill(color2));
        }
      } else {
        this._pushOp(new BeginFill("rgba(0, 0, 0, " + alpha + ")"));
      }
    }
  });
  Object.defineProperty(CanvasGraphics2.prototype, "endFill", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._pushOp(new EndFill(this._hasShadows));
    }
  });
  Object.defineProperty(CanvasGraphics2.prototype, "endStroke", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._pushOp(new EndStroke());
    }
  });
  Object.defineProperty(CanvasGraphics2.prototype, "lineStyle", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(width, color2, alpha, lineJoin) {
      if (width === void 0) {
        width = 0;
      }
      if (alpha === void 0) {
        alpha = 1;
      }
      this._strokeAlpha = alpha;
      if (color2) {
        if (color2 instanceof Color) {
          this._pushOp(new LineStyle(width, color2.toCSS(alpha), lineJoin));
        } else {
          this._pushOp(new LineStyle(width, color2, lineJoin));
        }
      } else {
        this._pushOp(new LineStyle(width, "rgba(0, 0, 0, " + alpha + ")", lineJoin));
      }
    }
  });
  Object.defineProperty(CanvasGraphics2.prototype, "setLineDash", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(dash) {
      this._pushOp(new LineDash(dash ? dash : []));
    }
  });
  Object.defineProperty(CanvasGraphics2.prototype, "setLineDashOffset", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(dashOffset) {
      if (dashOffset === void 0) {
        dashOffset = 0;
      }
      this._pushOp(new LineDashOffset(dashOffset));
    }
  });
  Object.defineProperty(CanvasGraphics2.prototype, "drawRect", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(x2, y2, width, height) {
      this._pushOp(new DrawRect(x2, y2, width, height));
    }
  });
  Object.defineProperty(CanvasGraphics2.prototype, "drawCircle", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(x2, y2, radius) {
      this._pushOp(new DrawCircle(x2, y2, radius));
    }
  });
  Object.defineProperty(CanvasGraphics2.prototype, "drawEllipse", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(x2, y2, radiusX, radiusY) {
      this._pushOp(new DrawEllipse(x2, y2, radiusX, radiusY));
    }
  });
  Object.defineProperty(CanvasGraphics2.prototype, "arc", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(cx, cy, radius, startAngle, endAngle, anticlockwise) {
      if (anticlockwise === void 0) {
        anticlockwise = false;
      }
      this._pushOp(new Arc(cx, cy, radius, startAngle, endAngle, anticlockwise));
    }
  });
  Object.defineProperty(CanvasGraphics2.prototype, "arcTo", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(x1, y1, x2, y2, radius) {
      this._pushOp(new ArcTo(x1, y1, x2, y2, radius));
    }
  });
  Object.defineProperty(CanvasGraphics2.prototype, "lineTo", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(x2, y2) {
      this._pushOp(new LineTo(x2, y2));
    }
  });
  Object.defineProperty(CanvasGraphics2.prototype, "moveTo", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(x2, y2) {
      this._pushOp(new MoveTo(x2, y2));
    }
  });
  Object.defineProperty(CanvasGraphics2.prototype, "bezierCurveTo", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(cpX, cpY, cpX2, cpY2, toX, toY) {
      this._pushOp(new BezierCurveTo(cpX, cpY, cpX2, cpY2, toX, toY));
    }
  });
  Object.defineProperty(CanvasGraphics2.prototype, "quadraticCurveTo", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(cpX, cpY, toX, toY) {
      this._pushOp(new QuadraticCurveTo(cpX, cpY, toX, toY));
    }
  });
  Object.defineProperty(CanvasGraphics2.prototype, "closePath", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._pushOp(new ClosePath());
    }
  });
  Object.defineProperty(CanvasGraphics2.prototype, "shadow", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(color2, blur2, offsetX, offsetY, opacity) {
      if (blur2 === void 0) {
        blur2 = 0;
      }
      if (offsetX === void 0) {
        offsetX = 0;
      }
      if (offsetY === void 0) {
        offsetY = 0;
      }
      this._hasShadows = true;
      this._pushOp(new Shadow(opacity ? color2.toCSS(opacity) : color2.toCSS(this._fillAlpha || this._strokeAlpha), blur2, offsetX, offsetY));
    }
  });
  Object.defineProperty(CanvasGraphics2.prototype, "svgPath", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(path2) {
      var _this = this;
      var x2 = 0;
      var y2 = 0;
      var cpx = null;
      var cpy = null;
      var qcpx = null;
      var qcpy = null;
      var SEGMENTS_REGEXP = /([MmZzLlHhVvCcSsQqTtAa])([^MmZzLlHhVvCcSsQqTtAa]*)/g;
      var ARGS_REGEXP = /[\u0009\u0020\u000A\u000C\u000D]*([\+\-]?[0-9]*\.?[0-9]+(?:[eE][\+\-]?[0-9]+)?)[\u0009\u0020\u000A\u000C\u000D]*,?/g;
      var match;
      while ((match = SEGMENTS_REGEXP.exec(path2)) !== null) {
        var name_1 = match[1];
        var rest = match[2];
        var args = [];
        while ((match = ARGS_REGEXP.exec(rest)) !== null) {
          args.push(+match[1]);
        }
        if (name_1 !== "S" && name_1 !== "s" && name_1 !== "C" && name_1 !== "c") {
          cpx = null;
          cpy = null;
        }
        if (name_1 !== "Q" && name_1 !== "q" && name_1 !== "T" && name_1 !== "t") {
          qcpx = null;
          qcpy = null;
        }
        switch (name_1) {
          case "M":
            checkEvenArgs(name_1, args.length, 2);
            x2 = args[0];
            y2 = args[1];
            this.moveTo(x2, y2);
            for (var i = 2; i < args.length; i += 2) {
              x2 = args[i];
              y2 = args[i + 1];
              this.lineTo(x2, y2);
            }
            break;
          case "m":
            checkEvenArgs(name_1, args.length, 2);
            x2 += args[0];
            y2 += args[1];
            this.moveTo(x2, y2);
            for (var i = 2; i < args.length; i += 2) {
              x2 += args[i];
              y2 += args[i + 1];
              this.lineTo(x2, y2);
            }
            break;
          case "L":
            checkEvenArgs(name_1, args.length, 2);
            for (var i = 0; i < args.length; i += 2) {
              x2 = args[i];
              y2 = args[i + 1];
              this.lineTo(x2, y2);
            }
            break;
          case "l":
            checkEvenArgs(name_1, args.length, 2);
            for (var i = 0; i < args.length; i += 2) {
              x2 += args[i];
              y2 += args[i + 1];
              this.lineTo(x2, y2);
            }
            break;
          case "H":
            checkMinArgs(name_1, args.length, 1);
            for (var i = 0; i < args.length; ++i) {
              x2 = args[i];
              this.lineTo(x2, y2);
            }
            break;
          case "h":
            checkMinArgs(name_1, args.length, 1);
            for (var i = 0; i < args.length; ++i) {
              x2 += args[i];
              this.lineTo(x2, y2);
            }
            break;
          case "V":
            checkMinArgs(name_1, args.length, 1);
            for (var i = 0; i < args.length; ++i) {
              y2 = args[i];
              this.lineTo(x2, y2);
            }
            break;
          case "v":
            checkMinArgs(name_1, args.length, 1);
            for (var i = 0; i < args.length; ++i) {
              y2 += args[i];
              this.lineTo(x2, y2);
            }
            break;
          case "C":
            checkEvenArgs(name_1, args.length, 6);
            for (var i = 0; i < args.length; i += 6) {
              var x1 = args[i];
              var y1 = args[i + 1];
              cpx = args[i + 2];
              cpy = args[i + 3];
              x2 = args[i + 4];
              y2 = args[i + 5];
              this.bezierCurveTo(x1, y1, cpx, cpy, x2, y2);
            }
            break;
          case "c":
            checkEvenArgs(name_1, args.length, 6);
            for (var i = 0; i < args.length; i += 6) {
              var x1 = args[i] + x2;
              var y1 = args[i + 1] + y2;
              cpx = args[i + 2] + x2;
              cpy = args[i + 3] + y2;
              x2 += args[i + 4];
              y2 += args[i + 5];
              this.bezierCurveTo(x1, y1, cpx, cpy, x2, y2);
            }
            break;
          case "S":
            checkEvenArgs(name_1, args.length, 4);
            if (cpx === null || cpy === null) {
              cpx = x2;
              cpy = y2;
            }
            for (var i = 0; i < args.length; i += 4) {
              var x1 = 2 * x2 - cpx;
              var y1 = 2 * y2 - cpy;
              cpx = args[i];
              cpy = args[i + 1];
              x2 = args[i + 2];
              y2 = args[i + 3];
              this.bezierCurveTo(x1, y1, cpx, cpy, x2, y2);
            }
            break;
          case "s":
            checkEvenArgs(name_1, args.length, 4);
            if (cpx === null || cpy === null) {
              cpx = x2;
              cpy = y2;
            }
            for (var i = 0; i < args.length; i += 4) {
              var x1 = 2 * x2 - cpx;
              var y1 = 2 * y2 - cpy;
              cpx = args[i] + x2;
              cpy = args[i + 1] + y2;
              x2 += args[i + 2];
              y2 += args[i + 3];
              this.bezierCurveTo(x1, y1, cpx, cpy, x2, y2);
            }
            break;
          case "Q":
            checkEvenArgs(name_1, args.length, 4);
            for (var i = 0; i < args.length; i += 4) {
              qcpx = args[i];
              qcpy = args[i + 1];
              x2 = args[i + 2];
              y2 = args[i + 3];
              this.quadraticCurveTo(qcpx, qcpy, x2, y2);
            }
            break;
          case "q":
            checkEvenArgs(name_1, args.length, 4);
            for (var i = 0; i < args.length; i += 4) {
              qcpx = args[i] + x2;
              qcpy = args[i + 1] + y2;
              x2 += args[i + 2];
              y2 += args[i + 3];
              this.quadraticCurveTo(qcpx, qcpy, x2, y2);
            }
            break;
          case "T":
            checkEvenArgs(name_1, args.length, 2);
            if (qcpx === null || qcpy === null) {
              qcpx = x2;
              qcpy = y2;
            }
            for (var i = 0; i < args.length; i += 2) {
              qcpx = 2 * x2 - qcpx;
              qcpy = 2 * y2 - qcpy;
              x2 = args[i];
              y2 = args[i + 1];
              this.quadraticCurveTo(qcpx, qcpy, x2, y2);
            }
            break;
          case "t":
            checkEvenArgs(name_1, args.length, 2);
            if (qcpx === null || qcpy === null) {
              qcpx = x2;
              qcpy = y2;
            }
            for (var i = 0; i < args.length; i += 2) {
              qcpx = 2 * x2 - qcpx;
              qcpy = 2 * y2 - qcpy;
              x2 += args[i];
              y2 += args[i + 1];
              this.quadraticCurveTo(qcpx, qcpy, x2, y2);
            }
            break;
          case "A":
          case "a":
            var relative = name_1 === "a";
            checkEvenArgs(name_1, args.length, 7);
            for (var i = 0; i < args.length; i += 7) {
              var cx = args[i + 5];
              var cy = args[i + 6];
              if (relative) {
                cx += x2;
                cy += y2;
              }
              var bs = modules_default({
                px: x2,
                py: y2,
                rx: args[i],
                ry: args[i + 1],
                xAxisRotation: args[i + 2],
                largeArcFlag: assertBinary(args[i + 3]),
                sweepFlag: assertBinary(args[i + 4]),
                cx,
                cy
              });
              each(bs, function(b) {
                _this.bezierCurveTo(b.x1, b.y1, b.x2, b.y2, b.x, b.y);
                x2 = b.x;
                y2 = b.y;
              });
            }
            break;
          case "Z":
          case "z":
            checkArgs(name_1, args.length, 0);
            this.closePath();
            break;
        }
      }
    }
  });
  Object.defineProperty(CanvasGraphics2.prototype, "_runPath", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(context) {
      context.beginPath();
      each(this._operations, function(op) {
        op.path(context);
      });
    }
  });
  Object.defineProperty(CanvasGraphics2.prototype, "_render", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(parentLayer) {
      _super.prototype._render.call(this, parentLayer);
      var layer = this._layer || parentLayer;
      var layerDirty = layer.dirty;
      var interactive = this._isInteractive();
      if (layerDirty || interactive) {
        var context_1 = layer.context;
        var ghostContext_1 = this._renderer._ghostContext;
        if (layerDirty) {
          context_1.globalCompositeOperation = this.blendMode;
          context_1.beginPath();
        }
        var color_1;
        if (interactive) {
          ghostContext_1.beginPath();
          color_1 = this._getColorId();
        }
        each(this._operations, function(op) {
          if (layerDirty) {
            op.path(context_1);
            op.colorize(context_1, void 0);
          }
          if (interactive) {
            op.path(ghostContext_1);
            op.colorize(ghostContext_1, color_1);
          }
        });
      }
    }
  });
  Object.defineProperty(CanvasGraphics2.prototype, "renderDetached", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(context) {
      if (this.visible) {
        this._setMatrix();
        context.save();
        var mask = this.mask;
        if (mask) {
          mask._setMatrix();
          mask._transform(context, 1);
          mask._runPath(context);
          context.clip();
        }
        context.globalAlpha = this.compoundAlpha * this.alpha;
        this._transform(context, 1);
        if (this.filter) {
          context.filter = this.filter;
        }
        context.globalCompositeOperation = this.blendMode;
        context.beginPath();
        each(this._operations, function(op) {
          op.path(context);
          op.colorize(context, void 0);
        });
        context.restore();
      }
    }
  });
  Object.defineProperty(CanvasGraphics2.prototype, "_addBounds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(bounds) {
      if (this.visible && this.isMeasured) {
        each(this._operations, function(op) {
          op.addBounds(bounds);
        });
      }
    }
  });
  return CanvasGraphics2;
}(CanvasDisplayObject);
var CanvasText = function(_super) {
  __extends(CanvasText2, _super);
  function CanvasText2(renderer, text, style) {
    var _this = _super.call(this, renderer) || this;
    Object.defineProperty(_this, "text", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "style", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "resolution", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 1
    });
    Object.defineProperty(_this, "_textInfo", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_textVisible", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true
    });
    Object.defineProperty(_this, "_originalScale", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 1
    });
    _this.text = text;
    _this.style = style;
    return _this;
  }
  Object.defineProperty(CanvasText2.prototype, "invalidateBounds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype.invalidateBounds.call(this);
      this._textInfo = void 0;
    }
  });
  Object.defineProperty(CanvasText2.prototype, "_shared", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(context) {
      if (this.style.textAlign) {
        context.textAlign = this.style.textAlign;
      }
      if (this.style.direction) {
        context.direction = this.style.direction;
      }
      if (this.style.textBaseline) {
        context.textBaseline = this.style.textBaseline;
      }
    }
  });
  Object.defineProperty(CanvasText2.prototype, "_prerender", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(layer, ignoreGhost, ignoreFontWeight) {
      if (ignoreGhost === void 0) {
        ignoreGhost = false;
      }
      if (ignoreFontWeight === void 0) {
        ignoreFontWeight = false;
      }
      _super.prototype._render.call(this, layer);
      var context = layer.context;
      var ghostContext = this._renderer._ghostContext;
      var style = this.style;
      var fontStyle = this._getFontStyle(void 0, ignoreFontWeight);
      context.font = fontStyle;
      if (this._isInteractive() && !ignoreGhost) {
        ghostContext.font = fontStyle;
      }
      if (style.fill) {
        if (style.fill instanceof Color) {
          context.fillStyle = style.fill.toCSS();
        } else {
          context.fillStyle = style.fill;
        }
      }
      if (style.shadowColor) {
        layer.context.shadowColor = style.shadowColor.toCSS(style.shadowOpacity || 1);
      }
      if (style.shadowBlur) {
        layer.context.shadowBlur = style.shadowBlur;
      }
      if (style.shadowOffsetX) {
        layer.context.shadowOffsetX = style.shadowOffsetX;
      }
      if (style.shadowOffsetY) {
        layer.context.shadowOffsetY = style.shadowOffsetY;
      }
      this._shared(context);
      if (this._isInteractive() && !ignoreGhost) {
        ghostContext.fillStyle = this._getColorId();
        this._shared(ghostContext);
      }
    }
  });
  Object.defineProperty(CanvasText2.prototype, "_getFontStyle", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(style2, ignoreFontWeight) {
      if (ignoreFontWeight === void 0) {
        ignoreFontWeight = false;
      }
      var style = this.style;
      var fontStyle = [];
      if (style2 && style2.fontVariant) {
        fontStyle.push(style2.fontVariant);
      } else if (style.fontVariant) {
        fontStyle.push(style.fontVariant);
      }
      if (!ignoreFontWeight) {
        if (style2 && style2.fontWeight) {
          fontStyle.push(style2.fontWeight);
        } else if (style.fontWeight) {
          fontStyle.push(style.fontWeight);
        }
      }
      if (style2 && style2.fontStyle) {
        fontStyle.push(style2.fontStyle);
      } else if (style.fontStyle) {
        fontStyle.push(style.fontStyle);
      }
      if (style2 && style2.fontSize) {
        if (isNumber(style2.fontSize)) {
          style2.fontSize = style2.fontSize + "px";
        }
        fontStyle.push(style2.fontSize);
      } else if (style.fontSize) {
        if (isNumber(style.fontSize)) {
          style.fontSize = style.fontSize + "px";
        }
        fontStyle.push(style.fontSize);
      }
      if (style2 && style2.fontFamily) {
        fontStyle.push(style2.fontFamily);
      } else if (style.fontFamily) {
        fontStyle.push(style.fontFamily);
      } else if (fontStyle.length) {
        fontStyle.push("Arial");
      }
      return fontStyle.join(" ");
    }
  });
  Object.defineProperty(CanvasText2.prototype, "_render", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(parentLayer) {
      var _this = this;
      var layer = this._layer || parentLayer;
      if (!this._textInfo) {
        this._measure(layer);
      }
      if (this._textVisible) {
        var interactive_1 = this._isInteractive();
        var context_2 = layer.context;
        var layerDirty_1 = layer.dirty;
        var ghostContext_2 = this._renderer._ghostContext;
        context_2.save();
        ghostContext_2.save();
        this._prerender(layer);
        each(this._textInfo, function(line2, _index) {
          each(line2.textChunks, function(chunk, _index2) {
            if (chunk.style) {
              context_2.save();
              ghostContext_2.save();
              context_2.font = chunk.style;
              if (_this._isInteractive()) {
                ghostContext_2.font = chunk.style;
              }
            }
            if (chunk.fill) {
              context_2.save();
              context_2.fillStyle = chunk.fill.toCSS();
            }
            if (layerDirty_1) {
              context_2.fillText(chunk.text, chunk.offsetX, line2.offsetY + chunk.offsetY);
            }
            if (chunk.textDecoration == "underline" || chunk.textDecoration == "line-through") {
              var thickness = 1;
              var offset = 1;
              var fontSize = chunk.height;
              var offsetX = chunk.offsetX;
              switch (_this.style.textAlign) {
                case "right":
                case "end":
                  offsetX -= chunk.width;
                  break;
                case "center":
                  offsetX -= chunk.width / 2;
                  break;
              }
              if (chunk.style) {
                var format = TextFormatter.getTextStyle(chunk.style);
                switch (format.fontWeight) {
                  case "bolder":
                  case "bold":
                  case "700":
                  case "800":
                  case "900":
                    thickness = 2;
                    break;
                }
              }
              if (fontSize) {
                offset = fontSize / 20;
              }
              var y2 = void 0;
              if (chunk.textDecoration == "line-through") {
                y2 = thickness + line2.offsetY + chunk.offsetY - chunk.height / 2;
              } else {
                y2 = thickness + offset * 1.5 + line2.offsetY + chunk.offsetY;
              }
              context_2.save();
              context_2.beginPath();
              if (chunk.fill) {
                context_2.strokeStyle = chunk.fill.toCSS();
              } else if (_this.style.fill && _this.style.fill instanceof Color) {
                context_2.strokeStyle = _this.style.fill.toCSS();
              }
              context_2.lineWidth = thickness * offset;
              context_2.moveTo(offsetX, y2);
              context_2.lineTo(offsetX + chunk.width, y2);
              context_2.stroke();
              context_2.restore();
            }
            if (interactive_1 && _this.interactive) {
              ghostContext_2.fillText(chunk.text, chunk.offsetX, line2.offsetY + chunk.offsetY);
            }
            if (chunk.fill) {
              context_2.restore();
            }
            if (chunk.style) {
              context_2.restore();
              ghostContext_2.restore();
            }
          });
        });
        context_2.restore();
        ghostContext_2.restore();
      }
    }
  });
  Object.defineProperty(CanvasText2.prototype, "_addBounds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(bounds) {
      if (this.visible && this.isMeasured) {
        var x2 = this._measure(this.getLayer());
        setPoint(bounds, { x: x2.left, y: x2.top });
        setPoint(bounds, { x: x2.right, y: x2.bottom });
      }
    }
  });
  Object.defineProperty(CanvasText2.prototype, "_measure", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(layer) {
      var _this = this;
      var context = layer.context;
      var ghostContext = this._renderer._ghostContext;
      var rtl = this.style.direction == "rtl";
      this._textInfo = [];
      var oversizedBehavior = this.style.oversizedBehavior;
      var maxWidth = this.style.maxWidth;
      var truncate = isNumber(maxWidth) && oversizedBehavior == "truncate";
      var wrap = isNumber(maxWidth) && oversizedBehavior == "wrap";
      context.save();
      ghostContext.save();
      this._prerender(layer, true, true);
      var refText = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 ";
      var lines = this.text.toString().replace(/\r/g, "").split(/\n/);
      var styleRestored = true;
      var minX = 0;
      var maxX = 0;
      var offsetY = 0;
      var currentStyle;
      each(lines, function(line2, _index) {
        var chunks;
        if (line2 == "") {
          chunks = [{
            type: "value",
            text: ""
          }];
        } else {
          chunks = TextFormatter.chunk(line2, false, _this.style.ignoreFormatting);
        }
        var _loop_1 = function() {
          var lineInfo = {
            offsetY,
            ascent: 0,
            width: 0,
            height: 0,
            left: 0,
            right: 0,
            textChunks: []
          };
          var metrics = _this._measureText(refText, context);
          var height = metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent;
          lineInfo.height = height;
          lineInfo.ascent = metrics.actualBoundingBoxAscent;
          var currentFormat;
          var currentDecoration = _this.style.textDecoration;
          var currentFill;
          var currentChunkWidth;
          var skipFurtherText = false;
          var firstTextChunk = true;
          var leftoverChunks = [];
          var currentVerticalAlign;
          eachContinue(chunks, function(chunk, index) {
            if (chunk.type == "format") {
              if (chunk.text == "[/]") {
                if (!styleRestored) {
                  context.restore();
                  ghostContext.restore();
                  styleRestored = true;
                }
                currentFill = void 0;
                currentStyle = void 0;
                currentChunkWidth = void 0;
                currentDecoration = _this.style.textDecoration;
                currentVerticalAlign = void 0;
                currentFormat = chunk.text;
              } else {
                if (!styleRestored) {
                  context.restore();
                  ghostContext.restore();
                }
                var format = TextFormatter.getTextStyle(chunk.text);
                var fontStyle = _this._getFontStyle(format);
                context.save();
                ghostContext.save();
                context.font = fontStyle;
                currentStyle = fontStyle;
                currentFormat = chunk.text;
                if (format.textDecoration) {
                  currentDecoration = format.textDecoration;
                }
                if (format.fill) {
                  currentFill = format.fill;
                }
                if (format.width) {
                  currentChunkWidth = toNumber(format.width);
                }
                if (format.verticalAlign) {
                  currentVerticalAlign = format.verticalAlign;
                }
                styleRestored = false;
                var metrics_1 = _this._measureText(refText, context);
                var height_1 = metrics_1.actualBoundingBoxAscent + metrics_1.actualBoundingBoxDescent;
                if (height_1 > lineInfo.height) {
                  lineInfo.height = height_1;
                }
                if (metrics_1.actualBoundingBoxAscent > lineInfo.ascent) {
                  lineInfo.ascent = metrics_1.actualBoundingBoxAscent;
                }
              }
            } else if (chunk.type == "value" && !skipFurtherText) {
              var metrics_2 = _this._measureText(chunk.text, context);
              var chunkWidth = metrics_2.actualBoundingBoxLeft + metrics_2.actualBoundingBoxRight;
              if (truncate) {
                var breakWords = firstTextChunk || _this.style.breakWords || false;
                var ellipsis = _this.style.ellipsis || "";
                var ellipsisMetrics = _this._measureText(ellipsis, context);
                var ellipsisWidth = ellipsisMetrics.actualBoundingBoxLeft + ellipsisMetrics.actualBoundingBoxRight;
                if (lineInfo.width + chunkWidth > maxWidth) {
                  var excessWidth = maxWidth - lineInfo.width - ellipsisWidth;
                  chunk.text = _this._truncateText(context, chunk.text, excessWidth, breakWords);
                  chunk.text += ellipsis;
                  skipFurtherText = true;
                }
              } else if (wrap) {
                if (lineInfo.width + chunkWidth > maxWidth) {
                  var excessWidth = maxWidth - lineInfo.width;
                  var tmpText = _this._truncateText(context, chunk.text, excessWidth, false, firstTextChunk);
                  if (tmpText == "") {
                    _this._textVisible = true;
                    return false;
                  }
                  leftoverChunks = chunks.slice(index + 1);
                  if (trim(tmpText) != trim(chunk.text)) {
                    leftoverChunks.unshift({
                      type: "value",
                      text: chunk.text.substr(tmpText.length)
                    });
                    if (currentFormat) {
                      leftoverChunks.unshift({
                        type: "format",
                        text: currentFormat
                      });
                    }
                  }
                  chunk.text = trim(tmpText);
                  chunks = [];
                  skipFurtherText = true;
                }
              }
              var leftBoundMod = 1;
              var rightBoundMod = 1;
              if (currentStyle && currentChunkWidth && currentChunkWidth > chunkWidth) {
                var boundsMod = chunkWidth / currentChunkWidth;
                switch (_this.style.textAlign) {
                  case "right":
                  case "end":
                    leftBoundMod = boundsMod;
                    break;
                  case "center":
                    leftBoundMod = boundsMod;
                    rightBoundMod = boundsMod;
                    break;
                  default:
                    rightBoundMod = boundsMod;
                }
                chunkWidth = currentChunkWidth;
              }
              var chunkHeight = metrics_2.actualBoundingBoxAscent + metrics_2.actualBoundingBoxDescent;
              if (chunkHeight > lineInfo.height) {
                lineInfo.height = chunkHeight;
              }
              if (metrics_2.actualBoundingBoxAscent > lineInfo.ascent) {
                lineInfo.ascent = metrics_2.actualBoundingBoxAscent;
              }
              lineInfo.width += chunkWidth;
              lineInfo.left += metrics_2.actualBoundingBoxLeft / leftBoundMod;
              lineInfo.right += metrics_2.actualBoundingBoxRight / rightBoundMod;
              lineInfo.textChunks.push({
                style: currentStyle,
                fill: currentFill,
                text: chunk.text,
                width: chunkWidth,
                height: chunkHeight,
                left: metrics_2.actualBoundingBoxLeft,
                right: metrics_2.actualBoundingBoxRight,
                ascent: metrics_2.actualBoundingBoxAscent,
                offsetX: 0,
                offsetY: 0,
                textDecoration: currentDecoration,
                verticalAlign: currentVerticalAlign
              });
              firstTextChunk = false;
            }
            if (leftoverChunks) {
            }
            return true;
          });
          if (_this.style.lineHeight instanceof Percent) {
            lineInfo.height *= _this.style.lineHeight.value;
            lineInfo.ascent *= _this.style.lineHeight.value;
          } else {
            lineInfo.height *= _this.style.lineHeight || 1.2;
            lineInfo.ascent *= _this.style.lineHeight || 1.2;
          }
          if (minX < lineInfo.left) {
            minX = lineInfo.left;
          }
          if (maxX < lineInfo.right) {
            maxX = lineInfo.right;
          }
          _this._textInfo.push(lineInfo);
          offsetY += lineInfo.height;
          chunks = leftoverChunks || [];
        };
        while (chunks.length > 0) {
          _loop_1();
        }
      });
      if (!styleRestored) {
        context.restore();
        ghostContext.restore();
      }
      each(this._textInfo, function(lineInfo, _index) {
        var currentChunkOffset = 0;
        each(lineInfo.textChunks, function(chunk) {
          chunk.offsetX = currentChunkOffset + chunk.left - lineInfo.left;
          chunk.offsetY += lineInfo.height - lineInfo.height * (_this.style.baselineRatio || 0.19);
          currentChunkOffset += chunk.width;
          if (chunk.verticalAlign) {
            switch (chunk.verticalAlign) {
              case "super":
                chunk.offsetY -= lineInfo.height / 2 - chunk.height / 2;
                break;
              case "sub":
                chunk.offsetY += chunk.height / 2;
                break;
            }
          }
        });
      });
      var bounds = {
        left: rtl ? -maxX : -minX,
        top: 0,
        right: rtl ? minX : maxX,
        bottom: offsetY
      };
      if (oversizedBehavior !== "none") {
        var ratio = this._fitRatio(bounds);
        if (ratio < 1) {
          if (oversizedBehavior == "fit") {
            if (isNumber(this.style.minScale) && ratio < this.style.minScale) {
              this._textVisible = false;
            } else {
              if (!this._originalScale || this._originalScale == 1) {
                this._originalScale = this.scale;
              }
              this.scale = ratio;
              this._textVisible = true;
            }
          } else if (oversizedBehavior == "hide") {
            this._textVisible = false;
          } else {
            switch (this.style.textAlign) {
              case "right":
              case "end":
                bounds.left = -maxWidth;
                bounds.right = 0;
                break;
              case "center":
                bounds.left = -maxWidth / 2;
                bounds.right = maxWidth / 2;
                break;
              default:
                bounds.left = 0;
                bounds.right = maxWidth;
            }
            this.scale = this._originalScale || 1;
            this._originalScale = void 0;
            this._textVisible = true;
          }
        } else {
          this.scale = this._originalScale || 1;
          this._originalScale = void 0;
          this._textVisible = true;
        }
      }
      context.restore();
      ghostContext.restore();
      return bounds;
    }
  });
  Object.defineProperty(CanvasText2.prototype, "_fitRatio", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(bounds) {
      var maxW = this.style.maxWidth;
      var maxH = this.style.maxHeight;
      if (!isNumber(maxW) && !isNumber(maxH)) {
        return 1;
      }
      var w = bounds.right - bounds.left;
      var h = bounds.bottom - bounds.top;
      return Math.min(maxW / w || 1, maxH / h || 1);
    }
  });
  Object.defineProperty(CanvasText2.prototype, "_truncateText", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(context, text, maxWidth, breakWords, fallbackBreakWords) {
      if (breakWords === void 0) {
        breakWords = false;
      }
      if (fallbackBreakWords === void 0) {
        fallbackBreakWords = true;
      }
      var width;
      do {
        if (breakWords) {
          text = text.slice(0, -1);
        } else {
          var tmp = text.replace(/[^,;:!?\\\/\s]+[,;:!?\\\/\s]*$/g, "");
          if (tmp == "" && fallbackBreakWords) {
            breakWords = true;
          } else {
            text = tmp;
          }
        }
        var metrics = this._measureText(text, context);
        width = metrics.actualBoundingBoxLeft + metrics.actualBoundingBoxRight;
      } while (width > maxWidth && text != "");
      return text;
    }
  });
  Object.defineProperty(CanvasText2.prototype, "_measureText", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(text, context) {
      var metrics = context.measureText(text);
      var fakeMetrics = {};
      if (metrics.actualBoundingBoxAscent == null) {
        var div = document.createElement("div");
        div.innerText = text;
        div.style.visibility = "hidden";
        div.style.position = "absolute";
        div.style.top = "-1000000px;";
        div.style.fontFamily = this.style.fontFamily || "";
        div.style.fontSize = this.style.fontSize + "";
        document.body.appendChild(div);
        var bbox = div.getBoundingClientRect();
        document.body.removeChild(div);
        var h = bbox.height;
        var w_1 = metrics.width;
        var left = 0;
        var right = w_1;
        fakeMetrics = {
          actualBoundingBoxAscent: h,
          actualBoundingBoxDescent: 0,
          actualBoundingBoxLeft: left,
          actualBoundingBoxRight: right,
          fontBoundingBoxAscent: h,
          fontBoundingBoxDescent: 0,
          width: w_1
        };
      } else {
        fakeMetrics = {
          actualBoundingBoxAscent: metrics.actualBoundingBoxAscent,
          actualBoundingBoxDescent: metrics.actualBoundingBoxDescent,
          actualBoundingBoxLeft: metrics.actualBoundingBoxLeft,
          actualBoundingBoxRight: metrics.actualBoundingBoxRight,
          fontBoundingBoxAscent: metrics.actualBoundingBoxAscent,
          fontBoundingBoxDescent: metrics.actualBoundingBoxDescent,
          width: metrics.width
        };
      }
      var w = metrics.width;
      switch (this.style.textAlign) {
        case "right":
        case "end":
          fakeMetrics.actualBoundingBoxLeft = w;
          fakeMetrics.actualBoundingBoxRight = 0;
          break;
        case "center":
          fakeMetrics.actualBoundingBoxLeft = w / 2;
          fakeMetrics.actualBoundingBoxRight = w / 2;
          break;
        default:
          fakeMetrics.actualBoundingBoxLeft = 0;
          fakeMetrics.actualBoundingBoxRight = w;
      }
      return fakeMetrics;
    }
  });
  return CanvasText2;
}(CanvasDisplayObject);
var CanvasTextStyle = function() {
  function CanvasTextStyle2() {
    Object.defineProperty(this, "fill", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "textAlign", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fontFamily", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fontSize", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fontWeight", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fontStyle", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fontVariant", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "textDecoration", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "shadowColor", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "shadowBlur", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "shadowOffsetX", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "shadowOffsetY", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "shadowOpacity", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "lineHeight", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: percent(120)
    });
    Object.defineProperty(this, "baselineRatio", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0.19
    });
    Object.defineProperty(this, "direction", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "textBaseline", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "oversizedBehavior", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "none"
    });
    Object.defineProperty(this, "breakWords", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(this, "ellipsis", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "\u2026"
    });
    Object.defineProperty(this, "maxWidth", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "maxHeight", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "minScale", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "ignoreFormatting", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
  }
  return CanvasTextStyle2;
}();
var CanvasRadialText = function(_super) {
  __extends(CanvasRadialText2, _super);
  function CanvasRadialText2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    Object.defineProperty(_this, "textType", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "circular"
    });
    Object.defineProperty(_this, "radius", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "startAngle", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "inside", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "orientation", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "auto"
    });
    Object.defineProperty(_this, "kerning", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(_this, "_textReversed", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    return _this;
  }
  Object.defineProperty(CanvasRadialText2.prototype, "_render", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(parentLayer) {
      switch (this.textType) {
        case "circular":
          this._renderCircular(parentLayer);
          break;
        default:
          _super.prototype._render.call(this, parentLayer);
          break;
      }
    }
  });
  Object.defineProperty(CanvasRadialText2.prototype, "_renderCircular", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(parentLayer) {
      var layer = this._layer || parentLayer;
      this._prerender(layer);
      var interactive = this._isInteractive();
      var context = layer.context;
      var layerDirty = layer.dirty;
      var ghostContext = this._renderer._ghostContext;
      context.save();
      if (interactive) {
        ghostContext.save();
      }
      var radius = this.radius || 0;
      var startAngle = this.startAngle || 0;
      var deltaAngle = 0;
      var orientation = this.orientation;
      var inward = orientation == "auto" ? "auto" : orientation == "inward";
      var inside = this.inside;
      var align = this.style.textAlign || "left";
      var kerning = this.kerning || 0;
      var clockwise = align == "left" ? 1 : -1;
      var shouldReverse = !this._textReversed;
      if (!this._textInfo) {
        this._measure(layer);
      }
      if (inward == "auto") {
        var maxAngle_1 = 0;
        var midAngle = 0;
        each(this._textInfo, function(line2, _index) {
          var deltaAngle2 = startAngle + line2.width / (radius - line2.height) / 2 * -clockwise;
          if (deltaAngle2 > maxAngle_1) {
            maxAngle_1 = deltaAngle2;
          }
        });
        if (align == "left") {
          midAngle = (maxAngle_1 + deltaAngle / 2) * DEGREES;
        } else if (align == "right") {
          midAngle = (maxAngle_1 - deltaAngle / 2) * DEGREES;
        } else {
          midAngle = startAngle * DEGREES;
        }
        midAngle = normalizeAngle(midAngle);
        inward = midAngle >= 270 || midAngle <= 90;
      }
      if (inward == true && shouldReverse) {
        this._textInfo.reverse();
        this._textReversed = true;
      }
      each(this._textInfo, function(line2, _index) {
        var textHeight = line2.height;
        if (!inside) {
          radius += textHeight;
        }
        if ((clockwise == -1 && inward || clockwise == 1 && !inward) && shouldReverse) {
          line2.textChunks.reverse();
        }
        var lineStartAngle = startAngle;
        deltaAngle = 0;
        if (align == "center") {
          lineStartAngle += line2.width / (radius - textHeight) / 2 * -clockwise;
          deltaAngle = lineStartAngle - startAngle;
        }
        lineStartAngle += Math.PI * (inward ? 0 : 1);
        context.save();
        if (interactive) {
          ghostContext.save();
        }
        context.rotate(lineStartAngle);
        if (interactive) {
          ghostContext.rotate(lineStartAngle);
        }
        var angleShift = 0;
        each(line2.textChunks, function(chunk, _index2) {
          var char = chunk.text;
          var charWidth = chunk.width;
          angleShift = charWidth / 2 / (radius - textHeight) * clockwise;
          context.rotate(angleShift);
          if (interactive) {
            ghostContext.rotate(angleShift);
          }
          if (chunk.style) {
            context.save();
            ghostContext.save();
            context.font = chunk.style;
            if (interactive) {
              ghostContext.font = chunk.style;
            }
          }
          if (chunk.fill) {
            context.save();
            context.fillStyle = chunk.fill.toCSS();
          }
          context.textBaseline = "middle";
          context.textAlign = "center";
          if (interactive) {
            ghostContext.textBaseline = "middle";
            ghostContext.textAlign = "center";
          }
          if (layerDirty) {
            context.fillText(char, 0, (inward ? 1 : -1) * (0 - radius + textHeight / 2));
          }
          if (interactive) {
            ghostContext.fillText(char, 0, (inward ? 1 : -1) * (0 - radius + textHeight / 2));
          }
          if (chunk.fill) {
            context.restore();
          }
          if (chunk.style) {
            context.restore();
            ghostContext.restore();
          }
          angleShift = (charWidth / 2 + kerning) / (radius - textHeight) * clockwise;
          context.rotate(angleShift);
          if (interactive) {
            ghostContext.rotate(angleShift);
          }
        });
        context.restore();
        if (interactive) {
          ghostContext.restore();
        }
        if (inside) {
          radius -= textHeight;
        }
      });
      context.restore();
      if (interactive) {
        ghostContext.restore();
      }
    }
  });
  Object.defineProperty(CanvasRadialText2.prototype, "_measure", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(layer) {
      switch (this.textType) {
        case "circular":
          return this._measureCircular(layer);
        default:
          return _super.prototype._measure.call(this, layer);
      }
    }
  });
  Object.defineProperty(CanvasRadialText2.prototype, "_measureCircular", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(layer) {
      var _this = this;
      var context = layer.context;
      var ghostContext = this._renderer._ghostContext;
      var rtl = this.style.direction == "rtl";
      this._textInfo = [];
      this._textReversed = false;
      context.save();
      ghostContext.save();
      this._prerender(layer, true);
      var lines = this.text.toString().replace(/\r/g, "").split(/\n/);
      var styleRestored = true;
      var offsetY = 0;
      each(lines, function(line2, _index) {
        var chunks = TextFormatter.chunk(line2, false, _this.style.ignoreFormatting);
        var lineInfo = {
          offsetY,
          ascent: 0,
          width: 0,
          height: 0,
          left: 0,
          right: 0,
          textChunks: []
        };
        var currentStyle;
        var currentFill;
        var currentChunkWidth;
        each(chunks, function(chunk, _index2) {
          if (chunk.type == "format") {
            if (chunk.text == "[/]") {
              if (!styleRestored) {
                context.restore();
                ghostContext.restore();
                styleRestored = true;
              }
              currentFill = void 0;
              currentStyle = void 0;
              currentChunkWidth = void 0;
            } else {
              var format = TextFormatter.getTextStyle(chunk.text);
              var fontStyle = _this._getFontStyle(format);
              context.save();
              ghostContext.save();
              context.font = fontStyle;
              currentStyle = fontStyle;
              if (format.fill) {
                currentFill = format.fill;
              }
              if (format.width) {
                currentChunkWidth = toNumber(format.width);
              }
              styleRestored = false;
            }
          } else if (chunk.type == "value") {
            var chars = chunk.text.match(/./ug) || [];
            if (rtl) {
              chars.reverse();
            }
            for (var i = 0; i < chars.length; i++) {
              var char = chars[i];
              var metrics = _this._measureText(char, context);
              var chunkWidth = metrics.width;
              if (currentStyle && currentChunkWidth && currentChunkWidth > chunkWidth) {
                chunkWidth = currentChunkWidth;
              }
              var chunkHeight = metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent;
              if (chunkHeight > lineInfo.height) {
                lineInfo.height = chunkHeight;
              }
              if (metrics.actualBoundingBoxAscent > lineInfo.ascent) {
                lineInfo.ascent = metrics.actualBoundingBoxAscent;
              }
              lineInfo.width += chunkWidth;
              lineInfo.left += metrics.actualBoundingBoxLeft;
              lineInfo.right += metrics.actualBoundingBoxRight;
              lineInfo.textChunks.push({
                style: currentStyle,
                fill: currentFill,
                text: char,
                width: chunkWidth,
                height: chunkHeight + metrics.actualBoundingBoxDescent,
                left: metrics.actualBoundingBoxLeft,
                right: metrics.actualBoundingBoxRight,
                ascent: metrics.actualBoundingBoxAscent,
                offsetX: 0,
                offsetY: chunkHeight,
                textDecoration: void 0
              });
              if (rtl) {
                break;
              }
            }
          }
        });
        if (_this.style.lineHeight instanceof Percent) {
          lineInfo.height *= _this.style.lineHeight.value;
        } else {
          lineInfo.height *= _this.style.lineHeight || 1.2;
        }
        _this._textInfo.push(lineInfo);
        offsetY += lineInfo.height;
      });
      if (!styleRestored) {
        context.restore();
        ghostContext.restore();
      }
      each(this._textInfo, function(lineInfo) {
        each(lineInfo.textChunks, function(chunk) {
          chunk.offsetY += Math.round((lineInfo.height - chunk.height + (lineInfo.ascent - chunk.ascent)) / 2);
        });
      });
      context.restore();
      ghostContext.restore();
      return {
        left: 0,
        top: 0,
        right: 0,
        bottom: 0
      };
    }
  });
  return CanvasRadialText2;
}(CanvasText);
var CanvasImage = function(_super) {
  __extends(CanvasImage2, _super);
  function CanvasImage2(renderer, image) {
    var _this = _super.call(this, renderer) || this;
    Object.defineProperty(_this, "width", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "height", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "image", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "tainted", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "shadowColor", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "shadowBlur", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "shadowOffsetX", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "shadowOffsetY", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "shadowOpacity", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_imageMask", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    _this.image = image;
    return _this;
  }
  Object.defineProperty(CanvasImage2.prototype, "_dispose", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._dispose.call(this);
      if (this._imageMask) {
        clearCanvas(this._imageMask);
      }
    }
  });
  Object.defineProperty(CanvasImage2.prototype, "getLocalBounds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (!this._localBounds) {
        var w = 0;
        var h = 0;
        if (this.width) {
          w = this.width;
        }
        if (this.height) {
          h = this.height;
        }
        this._localBounds = {
          left: 0,
          top: 0,
          right: w,
          bottom: h
        };
        this._addBounds(this._localBounds);
      }
      return this._localBounds;
    }
  });
  Object.defineProperty(CanvasImage2.prototype, "_render", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(parentLayer) {
      _super.prototype._render.call(this, parentLayer);
      if (this.image) {
        var layer = this._layer || parentLayer;
        if (this.tainted === void 0) {
          this.tainted = isTainted(this.image);
          layer.tainted = true;
        }
        if (this.tainted && this._renderer._omitTainted) {
          return;
        }
        if (layer.dirty) {
          if (this.shadowColor) {
            layer.context.shadowColor = this.shadowColor.toCSS(this.shadowOpacity || 1);
          }
          if (this.shadowBlur) {
            layer.context.shadowBlur = this.shadowBlur;
          }
          if (this.shadowOffsetX) {
            layer.context.shadowOffsetX = this.shadowOffsetX;
          }
          if (this.shadowOffsetY) {
            layer.context.shadowOffsetY = this.shadowOffsetY;
          }
          var width = this.width || this.image.naturalWidth;
          var height = this.height || this.image.naturalHeight;
          layer.context.drawImage(this.image, 0, 0, width, height);
        }
        if (this.interactive && this._isInteractive()) {
          var mask = this._getMask(this.image);
          this._renderer._ghostContext.drawImage(mask, 0, 0);
        }
      }
    }
  });
  Object.defineProperty(CanvasImage2.prototype, "clear", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype.clear.call(this);
      this.image = void 0;
      this._imageMask = void 0;
    }
  });
  Object.defineProperty(CanvasImage2.prototype, "_getMask", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(image) {
      if (this._imageMask === void 0) {
        var width = this.width || image.naturalWidth;
        var height = this.height || image.naturalHeight;
        var canvas = document.createElement("canvas");
        canvas.width = width;
        canvas.height = height;
        var context = canvas.getContext("2d");
        context.imageSmoothingEnabled = false;
        context.fillStyle = this._getColorId();
        context.fillRect(0, 0, width, height);
        if (!isTainted(image)) {
          context.globalCompositeOperation = "destination-in";
          context.drawImage(image, 0, 0, width, height);
        }
        this._imageMask = canvas;
      }
      return this._imageMask;
    }
  });
  return CanvasImage2;
}(CanvasDisplayObject);
var CanvasRendererEvent = function() {
  function CanvasRendererEvent2(event, point5, bbox) {
    Object.defineProperty(this, "event", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: event
    });
    Object.defineProperty(this, "point", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: point5
    });
    Object.defineProperty(this, "bbox", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: bbox
    });
    Object.defineProperty(this, "id", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "simulated", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(this, "native", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true
    });
    if (supports("touchevents") && event instanceof Touch) {
      this.id = event.identifier;
    } else {
      this.id = null;
    }
  }
  return CanvasRendererEvent2;
}();
var CanvasRenderer = function(_super) {
  __extends(CanvasRenderer2, _super);
  function CanvasRenderer2(resolution) {
    var _this = _super.call(this) || this;
    Object.defineProperty(_this, "view", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: document.createElement("div")
    });
    Object.defineProperty(_this, "_layerDom", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: document.createElement("div")
    });
    Object.defineProperty(_this, "layers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    Object.defineProperty(_this, "_dirtyLayers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    Object.defineProperty(_this, "defaultLayer", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this.getLayer(0)
    });
    Object.defineProperty(_this, "_ghostView", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_ghostContext", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "_patternCanvas", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: document.createElement("canvas")
    });
    Object.defineProperty(_this, "_patternContext", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this._patternCanvas.getContext("2d")
    });
    Object.defineProperty(_this, "_width", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(_this, "_height", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(_this, "_clientWidth", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(_this, "_clientHeight", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(_this, "resolution", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "interactionsEnabled", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true
    });
    Object.defineProperty(_this, "_listeners", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    Object.defineProperty(_this, "_events", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    Object.defineProperty(_this, "_colorId", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(_this, "_colorMap", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    Object.defineProperty(_this, "_forceInteractive", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(_this, "_omitTainted", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "_hovering", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: /* @__PURE__ */ new Set()
    });
    Object.defineProperty(_this, "_dragging", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    Object.defineProperty(_this, "_mousedown", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    Object.defineProperty(_this, "_lastPointerMoveEvent", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "tapToActivate", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "tapToActivateTimeout", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 3e3
    });
    Object.defineProperty(_this, "_touchActive", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "_touchActiveTimeout", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    if (resolution == null) {
      _this.resolution = window.devicePixelRatio;
    } else {
      _this.resolution = resolution;
    }
    _this.view.style.position = "absolute";
    _this.view.appendChild(_this._layerDom);
    _this._disposers.push(new Disposer(function() {
      each2(_this._events, function(_key, events) {
        events.disposer.dispose();
      });
      each(_this.layers, function(layer) {
        clearCanvas(layer.view);
        if (layer.exportableView) {
          clearCanvas(layer.exportableView);
        }
      });
      clearCanvas(_this._ghostView);
      clearCanvas(_this._patternCanvas);
    }));
    _this._ghostView = document.createElement("canvas");
    _this._ghostContext = _this._ghostView.getContext("2d", { alpha: false });
    _this._ghostContext.imageSmoothingEnabled = false;
    _this._ghostView.style.position = "absolute";
    _this._ghostView.style.top = "0px";
    _this._ghostView.style.left = "0px";
    _this._disposers.push(addEventListener(_this._ghostView, "click", function(originalEvent) {
      var event = _this.getEvent(originalEvent);
      var target = _this._getHitTarget(event.point, event.bbox);
      console.debug(target);
    }));
    _this._disposers.push(addEventListener(window, "resize", function(_ev) {
      if (resolution == null) {
        _this.resolution = window.devicePixelRatio;
      }
    }));
    if (supports("touchevents")) {
      var listener = function(ev) {
        if (_this._dragging.length !== 0) {
          eachContinue(_this._dragging, function(item) {
            if (item.value.shouldCancelTouch()) {
              ev.preventDefault();
              return false;
            }
            return true;
          });
        }
        if (_this._touchActiveTimeout) {
          _this._delayTouchDeactivate();
        }
      };
      _this._disposers.push(addEventListener(window, "touchstart", listener, { passive: false }));
      _this._disposers.push(addEventListener(_this.view, "touchstart", listener, { passive: false }));
      _this._disposers.push(addEventListener(_this.view, "touchmove", function() {
        if (_this._touchActiveTimeout) {
          _this._delayTouchDeactivate();
        }
      }, { passive: true }));
      _this._disposers.push(addEventListener(window, "click", function(_ev) {
        _this._touchActive = false;
      }, { passive: true }));
      _this._disposers.push(addEventListener(_this.view, "click", function(_ev) {
        window.setTimeout(function() {
          _this._touchActive = true;
          _this._delayTouchDeactivate();
        }, 100);
      }, { passive: true }));
    }
    if (supports("wheelevents")) {
      _this._disposers.push(addEventListener(_this.view, "wheel", function(ev) {
        var prevent = false;
        _this._hovering.forEach(function(obj) {
          if (obj.wheelable) {
            prevent = true;
            return false;
          }
        });
        if (prevent) {
          ev.preventDefault();
        }
      }, { passive: false }));
    }
    return _this;
  }
  Object.defineProperty(CanvasRenderer2.prototype, "_delayTouchDeactivate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      if (this._touchActiveTimeout) {
        clearTimeout(this._touchActiveTimeout);
      }
      if (this.tapToActivateTimeout > 0) {
        this._touchActiveTimeout = window.setTimeout(function() {
          _this._touchActive = false;
        }, this.tapToActivateTimeout);
      }
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "debugGhostView", {
    get: function() {
      return !!this._ghostView.parentNode;
    },
    set: function(value) {
      if (value) {
        if (!this._ghostView.parentNode) {
          this.view.appendChild(this._ghostView);
        }
      } else {
        if (this._ghostView.parentNode) {
          this._ghostView.parentNode.removeChild(this._ghostView);
        }
      }
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(CanvasRenderer2.prototype, "createLinearGradient", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(x1, y1, x2, y2) {
      return this.defaultLayer.context.createLinearGradient(x1, y1, x2, y2);
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "createRadialGradient", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(x1, y1, radius1, x2, y2, radius2) {
      return this.defaultLayer.context.createRadialGradient(x1, y1, radius1, x2, y2, radius2);
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "createPattern", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(graphics, background, repetition, width, height) {
      this._patternCanvas.width = width;
      this._patternCanvas.height = height;
      this._patternContext.clearRect(0, 0, width, height);
      background.renderDetached(this._patternContext);
      graphics.renderDetached(this._patternContext);
      return this._patternContext.createPattern(this._patternCanvas, repetition);
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "makeContainer", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return new CanvasContainer(this);
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "makeGraphics", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return new CanvasGraphics(this);
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "makeText", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(text, style) {
      return new CanvasText(this, text, style);
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "makeTextStyle", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return new CanvasTextStyle();
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "makeRadialText", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(text, style) {
      return new CanvasRadialText(this, text, style);
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "makePicture", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(image) {
      return new CanvasImage(this, image);
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "resize", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(width, height) {
      var _this = this;
      this._clientWidth = width;
      this._clientHeight = height;
      this._width = Math.floor(width * this.resolution);
      this._height = Math.floor(height * this.resolution);
      each(this.layers, function(layer) {
        if (layer) {
          layer.dirty = true;
          if (layer.width != null) {
            layer.view.width = layer.width;
            layer.view.style.width = layer.width + "px";
          } else {
            layer.view.width = _this._width;
            layer.view.style.width = width + "px";
          }
          if (layer.height != null) {
            layer.view.height = layer.height;
            layer.view.style.height = layer.height + "px";
          } else {
            layer.view.height = _this._height;
            layer.view.style.height = height + "px";
          }
        }
      });
      this._ghostView.width = this._width;
      this._ghostView.height = this._height;
      this._ghostView.style.width = width + "px";
      this._ghostView.style.height = height + "px";
      this.view.style.width = width + "px";
      this.view.style.height = height + "px";
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "createDetachedLayer", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var view = document.createElement("canvas");
      var context = view.getContext("2d");
      var layer = {
        view,
        context,
        order: 0,
        visible: true,
        width: void 0,
        height: void 0,
        dirty: true,
        tainted: false
      };
      view.style.position = "absolute";
      view.style.top = "0px";
      view.style.left = "0px";
      return layer;
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "getLayerByOrder", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(order) {
      var layers = this.layers;
      var length = layers.length;
      for (var i = 0; i < length; i++) {
        var layer = layers[i];
        if (layer.order == order) {
          return layer;
        }
      }
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "getLayer", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(order, visible) {
      if (visible === void 0) {
        visible = true;
      }
      var existingLayer = this.getLayerByOrder(order);
      if (existingLayer) {
        return existingLayer;
      }
      var layer = this.createDetachedLayer();
      layer.order = order;
      layer.visible = visible;
      if (layer.visible && this._width) {
        layer.view.width = this._width;
        layer.view.style.width = this._clientWidth + "px";
        layer.view.height = this._height;
        layer.view.style.height = this._clientHeight + "px";
      }
      var layers = this.layers;
      layers.push(layer);
      layers.sort(function(a2, b) {
        if (a2.order > b.order) {
          return 1;
        } else if (a2.order < b.order) {
          return -1;
        } else {
          return 0;
        }
      });
      var length = layers.length;
      var layerIndex = indexOf(layers, layer);
      var next;
      for (var i = layerIndex + 1; i < length; i++) {
        if (layers[i].visible) {
          next = layers[i];
          break;
        }
      }
      if (layer.visible) {
        if (next === void 0) {
          this._layerDom.appendChild(layer.view);
        } else {
          this._layerDom.insertBefore(layer.view, next.view);
        }
      }
      return layer;
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "render", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(root) {
      var _this = this;
      this._dirtyLayers.length = 0;
      each(this.layers, function(layer) {
        if (layer) {
          if (layer.dirty && layer.visible) {
            var context = layer.context;
            _this._dirtyLayers.push(layer);
            context.save();
            context.clearRect(0, 0, _this._width, _this._height);
          }
        }
      });
      this._ghostContext.save();
      this._ghostContext.fillStyle = "#000";
      this._ghostContext.fillRect(0, 0, this._width, this._height);
      root.render(this.defaultLayer);
      this._ghostContext.restore();
      each(this.layers, function(layer) {
        if (layer) {
          var context = layer.context;
          context.beginPath();
          context.moveTo(0, 0);
          context.stroke();
        }
      });
      each(this._dirtyLayers, function(layer) {
        layer.context.restore();
        layer.dirty = false;
      });
      if (this._hovering.size && this._lastPointerMoveEvent) {
        var native_1 = this._lastPointerMoveEvent.native;
        each(this._lastPointerMoveEvent.events, function(event) {
          _this._dispatchGlobalMousemove(event, native_1);
        });
      }
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "paintId", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(obj) {
      var id = distributeId(++this._colorId);
      var color2 = Color.fromHex(id).toCSS();
      this._colorMap[color2] = obj;
      return color2;
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "_removeObject", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(obj) {
      if (obj._colorId !== void 0) {
        delete this._colorMap[obj._colorId];
      }
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "getEvent", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(originalEvent, adjustPoint) {
      if (adjustPoint === void 0) {
        adjustPoint = true;
      }
      var bbox = adjustPoint ? this.view.getBoundingClientRect() : new DOMRect(0, 0, 0, 0);
      return new CanvasRendererEvent(originalEvent, originalEvent.clientX || originalEvent.clientY ? {
        x: originalEvent.clientX - (originalEvent.clientX ? bbox.left : 0),
        y: originalEvent.clientY - (originalEvent.clientY ? bbox.top : 0)
      } : {
        x: 0,
        y: 0
      }, bbox);
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "_getHitTarget", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(point5, bbox) {
      if (point5.x < 0 || point5.x > bbox.width || point5.y < 0 || point5.y > bbox.height) {
        return;
      } else {
        var pixel = this._ghostContext.getImageData(Math.round(point5.x / bbox.width * this._width), Math.round(point5.y / bbox.height * this._height), 1, 1);
        if (pixel.data[0] === 0 && pixel.data[1] === 0 && pixel.data[2] === 0) {
          return false;
        }
        var colorId = Color.fromRGB(pixel.data[0], pixel.data[1], pixel.data[2]).toCSS();
        var hit = this._colorMap[colorId];
        return hit;
      }
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "_withEvents", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, f) {
      var events = this._events[key];
      if (events !== void 0) {
        events.dispatching = true;
        try {
          f(events);
        } finally {
          events.dispatching = false;
          if (events.cleanup) {
            events.cleanup = false;
            keepIf(events.callbacks, function(callback) {
              return !callback.disposed;
            });
            if (events.callbacks.length === 0) {
              events.disposer.dispose();
              delete this._events[key];
            }
          }
        }
      }
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "_dispatchEventAll", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, event) {
      if (!this.interactionsEnabled) {
        return;
      }
      this._withEvents(key, function(events) {
        each(events.callbacks, function(callback) {
          if (!callback.disposed) {
            callback.callback.call(callback.context, event);
          }
        });
      });
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "_dispatchEvent", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, target, event) {
      if (!this.interactionsEnabled) {
        return false;
      }
      var dispatched = false;
      this._withEvents(key, function(events) {
        each(events.callbacks, function(callback) {
          if (!callback.disposed && callback.object === target) {
            callback.callback.call(callback.context, event);
            dispatched = true;
          }
        });
      });
      return dispatched;
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "_dispatchMousedown", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(originalEvent) {
      var _this = this;
      var button = originalEvent.button;
      if (button != 0 && button != 2 && button != 1 && button !== void 0) {
        return;
      }
      var event = this.getEvent(originalEvent);
      var target = this._getHitTarget(event.point, event.bbox);
      if (target) {
        var id_1 = event.id;
        var dragged_1 = false;
        eachTargets(target, function(obj) {
          var info = { id: id_1, value: obj };
          _this._mousedown.push(info);
          if (!dragged_1 && _this._dispatchEvent("pointerdown", obj, event)) {
            dragged_1 = true;
            var has = _this._dragging.some(function(x2) {
              return x2.value === obj && x2.id === id_1;
            });
            if (!has) {
              _this._dragging.push(info);
            }
          }
          return true;
        });
      }
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "_dispatchGlobalMousemove", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(originalEvent, native) {
      var _this = this;
      var event = this.getEvent(originalEvent);
      var target = this._getHitTarget(event.point, event.bbox);
      event.native = native;
      if (target) {
        this._hovering.forEach(function(obj) {
          if (!obj.contains(target)) {
            _this._hovering.delete(obj);
            if (obj.cursorOverStyle) {
              setStyle(document.body, "cursor", obj._replacedCursorStyle);
            }
            _this._dispatchEvent("pointerout", obj, event);
          }
        });
        if (event.native) {
          eachTargets(target, function(obj) {
            if (!_this._hovering.has(obj)) {
              _this._hovering.add(obj);
              if (obj.cursorOverStyle) {
                obj._replacedCursorStyle = getStyle(document.body, "cursor");
                setStyle(document.body, "cursor", obj.cursorOverStyle);
              }
              _this._dispatchEvent("pointerover", obj, event);
            }
            return true;
          });
        }
      } else {
        this._hovering.forEach(function(obj) {
          if (obj.cursorOverStyle) {
            setStyle(document.body, "cursor", obj._replacedCursorStyle);
          }
          _this._dispatchEvent("pointerout", obj, event);
        });
        this._hovering.clear();
      }
      this._dispatchEventAll("globalpointermove", event);
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "_dispatchGlobalMouseup", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(originalEvent, native) {
      var event = this.getEvent(originalEvent);
      event.native = native;
      this._dispatchEventAll("globalpointerup", event);
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "_dispatchDragMove", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(originalEvent) {
      var _this = this;
      if (this._dragging.length !== 0) {
        var event_1 = this.getEvent(originalEvent);
        var id_2 = event_1.id;
        this._dragging.forEach(function(obj) {
          if (obj.id === id_2) {
            _this._dispatchEvent("pointermove", obj.value, event_1);
          }
        });
      }
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "_dispatchDragEnd", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(originalEvent) {
      var _this = this;
      var button = originalEvent.button;
      var clickevent;
      if (button == 0 || button === void 0) {
        clickevent = "click";
      } else if (button == 2) {
        clickevent = "rightclick";
      } else if (button == 1) {
        clickevent = "middleclick";
      } else {
        return;
      }
      var event = this.getEvent(originalEvent);
      var id = event.id;
      if (this._mousedown.length !== 0) {
        var target_1 = this._getHitTarget(event.point, event.bbox);
        if (target_1) {
          this._mousedown.forEach(function(obj) {
            if (obj.id === id && obj.value.contains(target_1)) {
              _this._dispatchEvent(clickevent, obj.value, event);
            }
          });
        }
        this._mousedown.length = 0;
      }
      if (this._dragging.length !== 0) {
        this._dragging.forEach(function(obj) {
          if (obj.id === id) {
            _this._dispatchEvent("pointerup", obj.value, event);
          }
        });
        this._dragging.length = 0;
      }
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "_dispatchDoubleClick", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(originalEvent) {
      var _this = this;
      var event = this.getEvent(originalEvent);
      var target = this._getHitTarget(event.point, event.bbox);
      if (target) {
        eachTargets(target, function(obj) {
          if (_this._dispatchEvent("dblclick", obj, event)) {
            return false;
          } else {
            return true;
          }
        });
      }
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "_dispatchWheel", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(originalEvent) {
      var _this = this;
      var event = this.getEvent(originalEvent);
      var target = this._getHitTarget(event.point, event.bbox);
      if (target) {
        eachTargets(target, function(obj) {
          if (_this._dispatchEvent("wheel", obj, event)) {
            return false;
          } else {
            return true;
          }
        });
      }
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "_makeSharedEvent", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key, f) {
      var _this = this;
      if (this._listeners[key] === void 0) {
        var listener_1 = f();
        this._listeners[key] = new CounterDisposer(function() {
          delete _this._listeners[key];
          listener_1.dispose();
        });
      }
      return this._listeners[key].increment();
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "_onPointerEvent", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(name, f) {
      var native = false;
      var timer = null;
      function clear() {
        timer = null;
        native = false;
      }
      return new MultiDisposer([
        new Disposer(function() {
          if (timer !== null) {
            clearTimeout(timer);
          }
          clear();
        }),
        addEventListener(this.view, getRendererEvent(name), function(_) {
          native = true;
          if (timer !== null) {
            clearTimeout(timer);
          }
          timer = window.setTimeout(clear, 0);
        }),
        onPointerEvent(window, name, function(ev) {
          if (timer !== null) {
            clearTimeout(timer);
            timer = null;
          }
          f(ev, native);
          native = false;
        })
      ]);
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "_initEvent", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(key) {
      var _this = this;
      switch (key) {
        case "globalpointermove":
        case "pointerover":
        case "pointerout":
          return this._makeSharedEvent("pointermove", function() {
            var listener = function(events, native) {
              _this._lastPointerMoveEvent = { events, native };
              each(events, function(event) {
                _this._dispatchGlobalMousemove(event, native);
              });
            };
            return new MultiDisposer([
              _this._onPointerEvent("pointerdown", listener),
              _this._onPointerEvent("pointermove", listener)
            ]);
          });
        case "globalpointerup":
          return this._makeSharedEvent("pointerup", function() {
            var mouseup = _this._onPointerEvent("pointerup", function(events, native) {
              each(events, function(event) {
                _this._dispatchGlobalMouseup(event, native);
              });
              _this._lastPointerMoveEvent = { events, native };
            });
            var pointercancel = _this._onPointerEvent("pointercancel", function(events, native) {
              each(events, function(event) {
                _this._dispatchGlobalMouseup(event, native);
              });
              _this._lastPointerMoveEvent = { events, native };
            });
            return new Disposer(function() {
              mouseup.dispose();
              pointercancel.dispose();
            });
          });
        case "click":
        case "rightclick":
        case "middleclick":
        case "pointerdown":
        case "pointermove":
        case "pointerup":
          return this._makeSharedEvent("pointerdown", function() {
            var mousedown = onPointerEvent(_this.view, "pointerdown", function(events) {
              each(events, function(ev) {
                _this._dispatchMousedown(ev);
              });
            });
            var mousemove = _this._onPointerEvent("pointermove", function(ev) {
              each(ev, function(ev2) {
                _this._dispatchDragMove(ev2);
              });
            });
            var mouseup = _this._onPointerEvent("pointerup", function(ev) {
              each(ev, function(ev2) {
                _this._dispatchDragEnd(ev2);
              });
            });
            var pointercancel = _this._onPointerEvent("pointercancel", function(ev) {
              each(ev, function(ev2) {
                _this._dispatchDragEnd(ev2);
              });
            });
            return new Disposer(function() {
              mousedown.dispose();
              mousemove.dispose();
              mouseup.dispose();
              pointercancel.dispose();
            });
          });
        case "dblclick":
          return this._makeSharedEvent("dblclick", function() {
            return _this._onPointerEvent("dblclick", function(ev) {
              each(ev, function(ev2) {
                _this._dispatchDoubleClick(ev2);
              });
            });
          });
        case "wheel":
          return this._makeSharedEvent("wheel", function() {
            return addEventListener(window, getRendererEvent("wheel"), function(event) {
              _this._dispatchWheel(event);
            }, { passive: false });
          });
      }
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "_addEvent", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(object, key, callback, context) {
      var _this = this;
      var events = this._events[key];
      if (events === void 0) {
        events = this._events[key] = {
          disposer: this._initEvent(key),
          callbacks: [],
          dispatching: false,
          cleanup: false
        };
      }
      var listener = { object, context, callback, disposed: false };
      events.callbacks.push(listener);
      return new Disposer(function() {
        listener.disposed = true;
        if (events.dispatching) {
          events.cleanup = true;
        } else {
          removeFirst(events.callbacks, listener);
          if (events.callbacks.length === 0) {
            events.disposer.dispose();
            delete _this._events[key];
          }
        }
      });
    }
  });
  Object.defineProperty(CanvasRenderer2.prototype, "getCanvas", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(root, options) {
      var _this = this;
      this.render(root);
      if (!options) {
        options = {};
      }
      var scale = this.resolution;
      if (options.minWidth && options.minWidth > this._width) {
        var minScale = options.minWidth / this._width;
        if (minScale > scale) {
          scale = minScale * this.resolution;
        }
      }
      if (options.minHeight && options.minHeight > this._height) {
        var minScale = options.minHeight / this._height;
        if (minScale > scale) {
          scale = minScale * this.resolution;
        }
      }
      if (options.maxWidth && options.maxWidth < this._width) {
        var maxScale = options.maxWidth / this._width;
        if (maxScale < scale) {
          scale = maxScale * this.resolution;
        }
      }
      if (options.maxHeight && options.maxHeight > this._height) {
        var maxScale = options.maxHeight / this._height;
        if (maxScale < scale) {
          scale = maxScale * this.resolution;
        }
      }
      if (options.maintainPixelRatio) {
        scale /= this.resolution;
      }
      var canvases = [];
      var forceRender = false;
      var canvasWidth = this._width;
      var canvasHeight = this._height;
      var canvas = document.createElement("canvas");
      if (scale != this.resolution) {
        forceRender = true;
        canvasWidth = this._width * scale / this.resolution;
        canvasHeight = this._height * scale / this.resolution;
      }
      canvas.width = canvasWidth;
      canvas.height = canvasHeight;
      canvas.style.position = "fixed";
      canvas.style.top = "-10000px";
      this.view.appendChild(canvas);
      canvases.push(canvas);
      var context = canvas.getContext("2d");
      var width = 0;
      var height = 0;
      var needRerender = false;
      each(this.layers, function(layer) {
        if (layer && layer.visible) {
          if (layer.tainted || forceRender) {
            needRerender = true;
            layer.exportableView = layer.view;
            layer.exportableContext = layer.context;
            layer.view = document.createElement("canvas");
            _this.view.style.position = "fixed";
            _this.view.style.top = "-10000px";
            _this.view.appendChild(layer.view);
            canvases.push(layer.view);
            layer.view.width = canvasWidth;
            layer.view.height = canvasHeight;
            layer.context = layer.view.getContext("2d");
            layer.dirty = true;
            layer.scale = scale;
          }
        }
      });
      if (needRerender) {
        this._omitTainted = true;
        this.render(root);
        this._omitTainted = false;
      }
      each(this.layers, function(layer) {
        if (layer && layer.visible) {
          context.drawImage(layer.view, 0, 0);
          if (layer.exportableView) {
            layer.view = layer.exportableView;
            layer.exportableView = void 0;
          }
          if (layer.exportableContext) {
            layer.context = layer.exportableContext;
            layer.exportableContext = void 0;
          }
          if (width < layer.view.clientWidth) {
            width = layer.view.clientWidth;
          }
          if (height < layer.view.clientHeight) {
            height = layer.view.clientHeight;
          }
          layer.scale = void 0;
        }
      });
      canvas.style.width = width + "px";
      canvas.style.height = height + "px";
      each(canvases, function(canvas2) {
        _this.view.style.position = "";
        _this.view.style.top = "";
        _this.view.removeChild(canvas2);
      });
      return canvas;
    }
  });
  return CanvasRenderer2;
}(ArrayDisposer);

// node_modules/@amcharts/amcharts5/.internal/core/Root.js
function rAF(fps, callback) {
  if (fps == null) {
    requestAnimationFrame(callback);
  } else {
    setTimeout(function() {
      requestAnimationFrame(callback);
    }, 1e3 / fps);
  }
}
var Root = function() {
  function Root2(id, settings, isReal) {
    if (settings === void 0) {
      settings = {};
    }
    Object.defineProperty(this, "dom", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_inner", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_isDirty", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(this, "_isDirtyParents", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(this, "_dirty", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    Object.defineProperty(this, "_dirtyParents", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    Object.defineProperty(this, "_dirtyBounds", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    Object.defineProperty(this, "_dirtyPositions", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    Object.defineProperty(this, "_ticker", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: null
    });
    Object.defineProperty(this, "_tickers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    Object.defineProperty(this, "events", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new EventDispatcher()
    });
    Object.defineProperty(this, "animationTime", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: null
    });
    Object.defineProperty(this, "_animations", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    Object.defineProperty(this, "_renderer", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_rootContainer", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "container", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "tooltipContainer", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_tooltip", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "language", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: Language.new(this, {})
    });
    Object.defineProperty(this, "locale", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: en_default
    });
    Object.defineProperty(this, "utc", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(this, "timezone", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "fps", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "numberFormatter", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: NumberFormatter.new(this, {})
    });
    Object.defineProperty(this, "dateFormatter", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: DateFormatter.new(this, {})
    });
    Object.defineProperty(this, "durationFormatter", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: DurationFormatter.new(this, {})
    });
    Object.defineProperty(this, "tabindex", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(this, "_tabindexes", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    Object.defineProperty(this, "_focusElementDirty", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(this, "_focusElementContainer", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_focusedSprite", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_isShift", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_keyboardDragPoint", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_tooltipElementContainer", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_readerAlertElement", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_logo", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "nonce", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "interfaceColors", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "verticalLayout", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: VerticalLayout.new(this, {})
    });
    Object.defineProperty(this, "horizontalLayout", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: HorizontalLayout.new(this, {})
    });
    Object.defineProperty(this, "gridLayout", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: GridLayout.new(this, {})
    });
    Object.defineProperty(this, "autoResize", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true
    });
    Object.defineProperty(this, "_fontHash", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: ""
    });
    Object.defineProperty(this, "_isDisposed", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(this, "_disposers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    Object.defineProperty(this, "_resizeSensorDisposer", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_tooltips", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    Object.defineProperty(this, "_htmlElementContainer", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_htmlEnabledContainers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: []
    });
    if (!isReal) {
      throw new Error("You cannot use `new Class()`, instead use `Class.new()`");
    }
    if (settings.useSafeResolution == null) {
      settings.useSafeResolution = true;
    }
    var resolution;
    if (settings.useSafeResolution) {
      resolution = getSafeResolution();
    }
    this._renderer = new CanvasRenderer(resolution);
    var dom;
    if (id instanceof HTMLElement) {
      dom = id;
    } else {
      dom = document.getElementById(id);
    }
    each(registry.rootElements, function(root) {
      if (root.dom === dom) {
        throw new Error("You cannot have multiple Roots on the same DOM node");
      }
    });
    this.interfaceColors = InterfaceColors.new(this, {});
    if (dom === null) {
      throw new Error("Could not find HTML element with id `" + id + "`");
    }
    this.dom = dom;
    var inner = document.createElement("div");
    inner.style.position = "relative";
    inner.style.height = "100%";
    dom.appendChild(inner);
    this._inner = inner;
    this._updateComputedStyles();
    registry.rootElements.push(this);
  }
  Object.defineProperty(Root2, "new", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(id, settings) {
      var root = new Root2(id, settings, true);
      root._init();
      return root;
    }
  });
  Object.defineProperty(Root2.prototype, "moveDOM", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(id) {
      var dom;
      if (id instanceof HTMLElement) {
        dom = id;
      } else {
        dom = document.getElementById(id);
      }
      if (dom) {
        while (this.dom.childNodes.length > 0) {
          dom.appendChild(this.dom.childNodes[0]);
        }
        this.dom = dom;
        this._initResizeSensor();
        this.resize();
      }
    }
  });
  Object.defineProperty(Root2.prototype, "_handleLogo", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (this._logo) {
        var w = this.dom.offsetWidth;
        var h = this.dom.offsetHeight;
        if (w <= 150 || h <= 60) {
          this._logo.hide();
        } else {
          this._logo.show();
        }
      }
    }
  });
  Object.defineProperty(Root2.prototype, "_showBranding", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (!this._logo) {
        var logo = this.tooltipContainer.children.push(Container.new(this, {
          interactive: true,
          interactiveChildren: false,
          position: "absolute",
          setStateOnChildren: true,
          paddingTop: 9,
          paddingRight: 9,
          paddingBottom: 9,
          paddingLeft: 9,
          scale: 0.6,
          y: percent(100),
          centerY: p100,
          tooltipText: "Created using amCharts 5",
          tooltipX: p100,
          cursorOverStyle: "pointer",
          background: Rectangle.new(this, {
            fill: color(4671320),
            fillOpacity: 0,
            tooltipY: 5
          })
        }));
        var tooltip = Tooltip.new(this, {
          pointerOrientation: "horizontal",
          paddingTop: 4,
          paddingRight: 7,
          paddingBottom: 4,
          paddingLeft: 7
        });
        tooltip.label.setAll({
          fontSize: 12
        });
        tooltip.get("background").setAll({
          fill: this.interfaceColors.get("background"),
          stroke: this.interfaceColors.get("grid"),
          strokeOpacity: 0.3
        });
        logo.set("tooltip", tooltip);
        logo.events.on("click", function() {
          window.open("https://www.amcharts.com/", "_blank");
        });
        logo.states.create("hover", {});
        var m = logo.children.push(Graphics.new(this, {
          stroke: color(13421772),
          strokeWidth: 3,
          svgPath: "M5 25 L13 25h13.6c3.4 0 6 0 10.3-4.3s5.2-12 8.6-12c3.4 0 4.3 8.6 7.7 8.6M83.4 25H79.8c-3.4 0-6 0-10.3-4.3s-5.2-12-8.6-12-4.3 8.6-7.7 8.6"
        }));
        m.states.create("hover", { stroke: color(3976191) });
        var a2 = logo.children.push(Graphics.new(this, {
          stroke: color(8947848),
          strokeWidth: 3,
          svgPath: "M83.4 25h-31C37 25 39.5 4.4 28.4 4.4S18.9 24.2 4.3 25H0"
        }));
        a2.states.create("hover", { stroke: color(4671320) });
        this._logo = logo;
        this._handleLogo();
      }
    }
  });
  Object.defineProperty(Root2.prototype, "_init", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      var renderer = this._renderer;
      var rootContainer = Container.new(this, { visible: true, width: this.dom.clientWidth, height: this.dom.clientHeight });
      this._rootContainer = rootContainer;
      this._rootContainer._defaultThemes.push(DefaultTheme.new(this));
      var container = rootContainer.children.push(Container.new(this, { visible: true, width: p100, height: p100 }));
      this.container = container;
      renderer.resize(this.dom.clientWidth, this.dom.clientHeight);
      this._inner.appendChild(renderer.view);
      this._initResizeSensor();
      this._htmlElementContainer = document.createElement("div");
      this._htmlElementContainer.style.overflow = "hidden";
      this._inner.appendChild(this._htmlElementContainer);
      var readerAlertElement = document.createElement("div");
      readerAlertElement.setAttribute("role", "alert");
      readerAlertElement.style.zIndex = "-100000";
      readerAlertElement.style.opacity = "0";
      readerAlertElement.style.position = "absolute";
      readerAlertElement.style.top = "0";
      this._readerAlertElement = readerAlertElement;
      this._inner.appendChild(this._readerAlertElement);
      var focusElementContainer = document.createElement("div");
      focusElementContainer.style.position = "absolute";
      focusElementContainer.style.pointerEvents = "none";
      focusElementContainer.style.top = "0px";
      focusElementContainer.style.left = "0px";
      focusElementContainer.style.overflow = "hidden";
      focusElementContainer.style.width = this.dom.clientWidth + "px";
      focusElementContainer.style.height = this.dom.clientHeight + "px";
      focusElementContainer.setAttribute("role", "application");
      setInteractive(focusElementContainer, false);
      this._focusElementContainer = focusElementContainer;
      this._inner.appendChild(this._focusElementContainer);
      this._tooltipElementContainer = document.createElement("div");
      this._inner.appendChild(this._tooltipElementContainer);
      if (supports("keyboardevents")) {
        this._disposers.push(addEventListener(window, "keydown", function(ev) {
          if (ev.keyCode == 16) {
            _this._isShift = true;
          }
        }));
        this._disposers.push(addEventListener(window, "keyup", function(ev) {
          if (ev.keyCode == 16) {
            _this._isShift = false;
          }
        }));
        this._disposers.push(addEventListener(focusElementContainer, "keydown", function(ev) {
          var focusedSprite = _this._focusedSprite;
          if (focusedSprite) {
            if (ev.keyCode == 27) {
              blur();
              _this._focusedSprite = void 0;
            }
            var dragOffsetX = 0;
            var dragOffsetY = 0;
            switch (ev.keyCode) {
              case 13:
                ev.preventDefault();
                var downEvent = renderer.getEvent(new MouseEvent("click"));
                focusedSprite.events.dispatch("click", {
                  type: "click",
                  originalEvent: downEvent.event,
                  point: downEvent.point,
                  simulated: true,
                  target: focusedSprite
                });
                return;
              case 37:
                dragOffsetX = -6;
                break;
              case 39:
                dragOffsetX = 6;
                break;
              case 38:
                dragOffsetY = -6;
                break;
              case 40:
                dragOffsetY = 6;
                break;
              default:
                return;
            }
            if (dragOffsetX != 0 || dragOffsetY != 0) {
              ev.preventDefault();
              if (!focusedSprite.isDragging()) {
                _this._keyboardDragPoint = {
                  x: 0,
                  y: 0
                };
                var downEvent = renderer.getEvent(new MouseEvent("mousedown", {
                  clientX: 0,
                  clientY: 0
                }));
                if (focusedSprite.events.isEnabled("pointerdown")) {
                  focusedSprite.events.dispatch("pointerdown", {
                    type: "pointerdown",
                    originalEvent: downEvent.event,
                    point: downEvent.point,
                    simulated: true,
                    target: focusedSprite
                  });
                }
              } else {
              }
              var dragPoint = _this._keyboardDragPoint;
              dragPoint.x += dragOffsetX;
              dragPoint.y += dragOffsetY;
              var moveEvent = renderer.getEvent(new MouseEvent("mousemove", {
                clientX: dragPoint.x,
                clientY: dragPoint.y
              }), false);
              if (focusedSprite.events.isEnabled("globalpointermove")) {
                focusedSprite.events.dispatch("globalpointermove", {
                  type: "globalpointermove",
                  originalEvent: moveEvent.event,
                  point: moveEvent.point,
                  simulated: true,
                  target: focusedSprite
                });
              }
            }
          }
        }));
        this._disposers.push(addEventListener(focusElementContainer, "keyup", function(ev) {
          if (_this._focusedSprite) {
            var focusedSprite = _this._focusedSprite;
            var keyCode = ev.keyCode;
            switch (keyCode) {
              case 37:
              case 39:
              case 38:
              case 40:
                if (focusedSprite.isDragging()) {
                  var dragPoint = _this._keyboardDragPoint;
                  var upEvent = renderer.getEvent(new MouseEvent("mouseup", {
                    clientX: dragPoint.x,
                    clientY: dragPoint.y
                  }));
                  if (focusedSprite.events.isEnabled("globalpointerup")) {
                    focusedSprite.events.dispatch("globalpointerup", {
                      type: "globalpointerup",
                      originalEvent: upEvent.event,
                      point: upEvent.point,
                      simulated: true,
                      target: focusedSprite
                    });
                  }
                  _this._keyboardDragPoint = void 0;
                  return;
                } else if (focusedSprite.get("focusableGroup")) {
                  var group_1 = focusedSprite.get("focusableGroup");
                  var items = _this._tabindexes.filter(function(item) {
                    return item.get("focusableGroup") == group_1;
                  });
                  var index = items.indexOf(focusedSprite);
                  var lastIndex = items.length - 1;
                  index += keyCode == 39 || keyCode == 40 ? 1 : -1;
                  if (index < 0) {
                    index = lastIndex;
                  } else if (index > lastIndex) {
                    index = 0;
                  }
                  focus(items[index].getPrivate("focusElement").dom);
                }
                break;
            }
          }
        }));
      }
      this._startTicker();
      this.setThemes([]);
      this._addTooltip();
      if (!this._hasLicense()) {
        this._showBranding();
      }
    }
  });
  Object.defineProperty(Root2.prototype, "_initResizeSensor", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      if (this._resizeSensorDisposer) {
        this._resizeSensorDisposer.dispose();
      }
      this._resizeSensorDisposer = new ResizeSensor(this.dom, function() {
        if (_this.autoResize) {
          _this.resize();
        }
      });
      this._disposers.push(this._resizeSensorDisposer);
    }
  });
  Object.defineProperty(Root2.prototype, "resize", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var dom = this.dom;
      var w = dom.clientWidth;
      var h = dom.clientHeight;
      if (w > 0 && h > 0) {
        var htmlElementContainer = this._htmlElementContainer;
        htmlElementContainer.style.width = w + "px";
        htmlElementContainer.style.height = h + "px";
        var focusElementContainer = this._focusElementContainer;
        focusElementContainer.style.width = w + "px";
        focusElementContainer.style.height = h + "px";
        this._renderer.resize(w, h);
        var rootContainer = this._rootContainer;
        rootContainer.setPrivate("width", w);
        rootContainer.setPrivate("height", h);
        this._render();
        this._handleLogo();
      }
    }
  });
  Object.defineProperty(Root2.prototype, "_render", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._renderer.render(this._rootContainer._display);
      if (this._focusElementDirty) {
        this._updateCurrentFocus();
        this._focusElementDirty = false;
      }
    }
  });
  Object.defineProperty(Root2.prototype, "_runTickers", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(currentTime) {
      each(this._tickers, function(f) {
        f(currentTime);
      });
    }
  });
  Object.defineProperty(Root2.prototype, "_runAnimations", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(currentTime) {
      keepIf(this._animations, function(animation) {
        return !animation._runAnimation(currentTime);
      });
    }
  });
  Object.defineProperty(Root2.prototype, "_runDirties", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      var allParents = {};
      while (this._isDirtyParents) {
        this._isDirtyParents = false;
        keys(this._dirtyParents).forEach(function(key) {
          var parent = _this._dirtyParents[key];
          delete _this._dirtyParents[key];
          if (!parent.isDisposed()) {
            allParents[parent.uid] = parent;
            parent._prepareChildren();
          }
        });
      }
      keys(allParents).forEach(function(key) {
        allParents[key]._updateChildren();
      });
      var objects = [];
      keys(this._dirty).forEach(function(key) {
        var entity = _this._dirty[key];
        if (entity.isDisposed()) {
          delete _this._dirty[entity.uid];
        } else {
          objects.push(entity);
          entity._beforeChanged();
        }
      });
      objects.forEach(function(entity) {
        entity._changed();
        delete _this._dirty[entity.uid];
        entity._clearDirty();
      });
      this._isDirty = false;
      var depths = {};
      var bounds = [];
      keys(this._dirtyBounds).forEach(function(key) {
        var entity = _this._dirtyBounds[key];
        delete _this._dirtyBounds[key];
        if (!entity.isDisposed()) {
          depths[entity.uid] = entity.depth();
          bounds.push(entity);
        }
      });
      bounds.sort(function(x2, y2) {
        return compare(depths[y2.uid], depths[x2.uid]);
      });
      bounds.forEach(function(entity) {
        entity._updateBounds();
      });
      var dirtyPositions = this._dirtyPositions;
      keys(dirtyPositions).forEach(function(key) {
        var sprite = dirtyPositions[key];
        delete dirtyPositions[key];
        if (!sprite.isDisposed()) {
          sprite._updatePosition();
        }
      });
      objects.forEach(function(entity) {
        entity._afterChanged();
      });
    }
  });
  Object.defineProperty(Root2.prototype, "_renderFrame", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(currentTime) {
      if (this.events.isEnabled("framestarted")) {
        this.events.dispatch("framestarted", {
          type: "framestarted",
          target: this,
          timestamp: currentTime
        });
      }
      this._checkComputedStyles();
      this._runTickers(currentTime);
      this._runAnimations(currentTime);
      this._runDirties();
      this._render();
      this._positionHTMLElements();
      if (this.events.isEnabled("frameended")) {
        this.events.dispatch("frameended", {
          type: "frameended",
          target: this,
          timestamp: currentTime
        });
      }
      return this._tickers.length === 0 && this._animations.length === 0 && !this._isDirty;
    }
  });
  Object.defineProperty(Root2.prototype, "_runTicker", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(currentTime) {
      if (!this.isDisposed()) {
        this.animationTime = currentTime;
        var done = this._renderFrame(currentTime);
        if (done) {
          this._ticker = null;
          this.animationTime = null;
        } else {
          rAF(this.fps, this._ticker);
        }
      }
    }
  });
  Object.defineProperty(Root2.prototype, "_runTickerNow", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (!this.isDisposed()) {
        for (; ; ) {
          var currentTime = performance.now();
          this.animationTime = currentTime;
          var done = this._renderFrame(currentTime);
          if (done) {
            this.animationTime = null;
            break;
          }
        }
      }
    }
  });
  Object.defineProperty(Root2.prototype, "_startTicker", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      if (this._ticker === null) {
        this.animationTime = null;
        this._ticker = function(currentTime) {
          _this._runTicker(currentTime);
        };
        rAF(this.fps, this._ticker);
      }
    }
  });
  Object.defineProperty(Root2.prototype, "_addDirtyEntity", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(entity) {
      if (this._dirty[entity.uid] === void 0) {
        this._isDirty = true;
        this._dirty[entity.uid] = entity;
        this._startTicker();
      }
    }
  });
  Object.defineProperty(Root2.prototype, "_addDirtyParent", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(parent) {
      if (this._dirtyParents[parent.uid] === void 0) {
        this._isDirty = true;
        this._isDirtyParents = true;
        this._dirtyParents[parent.uid] = parent;
        this._startTicker();
      }
    }
  });
  Object.defineProperty(Root2.prototype, "_addDirtyBounds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(entity) {
      if (this._dirtyBounds[entity.uid] === void 0) {
        this._isDirty = true;
        this._dirtyBounds[entity.uid] = entity;
        this._startTicker();
      }
    }
  });
  Object.defineProperty(Root2.prototype, "_addDirtyPosition", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(sprite) {
      if (this._dirtyPositions[sprite.uid] === void 0) {
        this._isDirty = true;
        this._dirtyPositions[sprite.uid] = sprite;
        this._startTicker();
      }
    }
  });
  Object.defineProperty(Root2.prototype, "_addAnimation", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(animation) {
      if (this._animations.indexOf(animation) === -1) {
        this._animations.push(animation);
        this._startTicker();
      }
    }
  });
  Object.defineProperty(Root2.prototype, "_markDirty", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._isDirty = true;
    }
  });
  Object.defineProperty(Root2.prototype, "_markDirtyRedraw", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      this.events.once("frameended", function() {
        _this._isDirty = true;
        _this._startTicker();
      });
    }
  });
  Object.defineProperty(Root2.prototype, "eachFrame", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(f) {
      var _this = this;
      this._tickers.push(f);
      this._startTicker();
      return new Disposer(function() {
        removeFirst(_this._tickers, f);
      });
    }
  });
  Object.defineProperty(Root2.prototype, "width", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this.dom.clientWidth;
    }
  });
  Object.defineProperty(Root2.prototype, "height", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this.dom.clientHeight;
    }
  });
  Object.defineProperty(Root2.prototype, "dispose", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (!this._isDisposed) {
        this._isDisposed = true;
        this._rootContainer.dispose();
        this._renderer.dispose();
        this.horizontalLayout.dispose();
        this.verticalLayout.dispose();
        this.interfaceColors.dispose();
        each(this._disposers, function(x2) {
          x2.dispose();
        });
        if (this._inner) {
          removeElement(this._inner);
        }
        remove(registry.rootElements, this);
      }
    }
  });
  Object.defineProperty(Root2.prototype, "isDisposed", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this._isDisposed;
    }
  });
  Object.defineProperty(Root2.prototype, "readerAlert", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(text) {
      this._readerAlertElement.innerHTML = stripTags(text);
    }
  });
  Object.defineProperty(Root2.prototype, "setThemes", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(themes) {
      this._rootContainer.set("themes", themes);
      var tooltipContainer = this.tooltipContainer;
      if (tooltipContainer) {
        tooltipContainer._applyThemes();
      }
      var interfaceColors = this.interfaceColors;
      if (interfaceColors) {
        interfaceColors._applyThemes();
      }
    }
  });
  Object.defineProperty(Root2.prototype, "_addTooltip", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (!this.tooltipContainer) {
        var tooltipContainer = this._rootContainer.children.push(Container.new(this, { position: "absolute", isMeasured: false, width: p100, height: p100, layer: 30 }));
        this.tooltipContainer = tooltipContainer;
        var tooltip = Tooltip.new(this, {});
        this.container.set("tooltip", tooltip);
        tooltip.hide(0);
        this._tooltip = tooltip;
      }
    }
  });
  Object.defineProperty(Root2.prototype, "_registerTabindexOrder", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(target) {
      if (target.get("focusable")) {
        pushOne(this._tabindexes, target);
      } else {
        remove(this._tabindexes, target);
      }
      this._invalidateTabindexes();
    }
  });
  Object.defineProperty(Root2.prototype, "_unregisterTabindexOrder", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(target) {
      remove(this._tabindexes, target);
      this._invalidateTabindexes();
    }
  });
  Object.defineProperty(Root2.prototype, "_invalidateTabindexes", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      this._tabindexes.sort(function(a2, b) {
        var aindex = a2.get("tabindexOrder", 0);
        var bindex = b.get("tabindexOrder", 0);
        if (aindex == bindex) {
          return 0;
        } else if (aindex > bindex) {
          return 1;
        } else {
          return -1;
        }
      });
      var groups = [];
      each(this._tabindexes, function(item, index) {
        if (!item.getPrivate("focusElement")) {
          _this._makeFocusElement(index, item);
        } else {
          _this._moveFocusElement(index, item);
        }
        var group = item.get("focusableGroup");
        if (group) {
          if (groups.indexOf(group) !== -1) {
            item.getPrivate("focusElement").dom.setAttribute("tabindex", "-1");
          } else {
            groups.push(group);
          }
        }
      });
    }
  });
  Object.defineProperty(Root2.prototype, "_updateCurrentFocus", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (this._focusedSprite) {
        this._decorateFocusElement(this._focusedSprite);
        this._positionFocusElement(this._focusedSprite);
      }
    }
  });
  Object.defineProperty(Root2.prototype, "_decorateFocusElement", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(target, focusElement) {
      if (!focusElement) {
        focusElement = target.getPrivate("focusElement").dom;
      }
      if (!focusElement) {
        return;
      }
      if (target.get("visible") && target.get("role") != "tooltip" && !target.isHidden()) {
        if (focusElement.getAttribute("tabindex") != "-1") {
          focusElement.setAttribute("tabindex", "" + this.tabindex);
        }
      } else {
        focusElement.removeAttribute("tabindex");
      }
      var role = target.get("role");
      if (role) {
        focusElement.setAttribute("role", role);
      } else {
        focusElement.removeAttribute("role");
      }
      var ariaLabel = target.get("ariaLabel");
      if (ariaLabel) {
        var label = populateString(target, ariaLabel);
        focusElement.setAttribute("aria-label", label);
      } else {
        focusElement.removeAttribute("aria-label");
      }
      var ariaLive = target.get("ariaLive");
      if (ariaLive) {
        focusElement.setAttribute("aria-live", ariaLive);
      } else {
        focusElement.removeAttribute("aria-live");
      }
      var ariaChecked = target.get("ariaChecked");
      if (ariaChecked != null) {
        focusElement.setAttribute("aria-checked", ariaChecked ? "true" : "false");
      } else {
        focusElement.removeAttribute("aria-checked");
      }
      if (target.get("ariaHidden")) {
        focusElement.setAttribute("aria-hidden", "hidden");
      } else {
        focusElement.removeAttribute("aria-hidden");
      }
      var ariaOrientation = target.get("ariaOrientation");
      if (ariaOrientation) {
        focusElement.setAttribute("aria-orientation", ariaOrientation);
      } else {
        focusElement.removeAttribute("aria-orientation");
      }
      var ariaValueNow = target.get("ariaValueNow");
      if (ariaValueNow) {
        focusElement.setAttribute("aria-valuenow", ariaValueNow);
      } else {
        focusElement.removeAttribute("aria-valuenow");
      }
      var ariaValueMin = target.get("ariaValueMin");
      if (ariaValueMin) {
        focusElement.setAttribute("aria-valuemin", ariaValueMin);
      } else {
        focusElement.removeAttribute("aria-valuemin");
      }
      var ariaValueMax = target.get("ariaValueMax");
      if (ariaValueMax) {
        focusElement.setAttribute("aria-valuemax", ariaValueMax);
      } else {
        focusElement.removeAttribute("aria-valuemax");
      }
      var ariaValueText = target.get("ariaValueText");
      if (ariaValueText) {
        focusElement.setAttribute("aria-valuetext", ariaValueText);
      } else {
        focusElement.removeAttribute("aria-valuetext");
      }
      var ariaControls = target.get("ariaControls");
      if (ariaControls) {
        focusElement.setAttribute("aria-controls", ariaControls);
      } else {
        focusElement.removeAttribute("aria-controls");
      }
    }
  });
  Object.defineProperty(Root2.prototype, "_makeFocusElement", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(index, target) {
      var _this = this;
      if (target.getPrivate("focusElement")) {
        return;
      }
      var focusElement = document.createElement("div");
      if (target.get("role") != "tooltip") {
        focusElement.tabIndex = this.tabindex;
      }
      focusElement.style.position = "absolute";
      setInteractive(focusElement, false);
      var disposers = [];
      target.setPrivate("focusElement", {
        dom: focusElement,
        disposers
      });
      this._decorateFocusElement(target);
      disposers.push(addEventListener(focusElement, "focus", function(ev) {
        _this._handleFocus(ev, index);
      }));
      disposers.push(addEventListener(focusElement, "blur", function(ev) {
        _this._handleBlur(ev, index);
      }));
      this._moveFocusElement(index, target);
    }
  });
  Object.defineProperty(Root2.prototype, "_removeFocusElement", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(target) {
      remove(this._tabindexes, target);
      var focusElement = target.getPrivate("focusElement");
      if (focusElement) {
        var container = this._focusElementContainer;
        container.removeChild(focusElement.dom);
        each(focusElement.disposers, function(x2) {
          x2.dispose();
        });
      }
    }
  });
  Object.defineProperty(Root2.prototype, "_hideFocusElement", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(target) {
      var focusElement = target.getPrivate("focusElement");
      focusElement.dom.style.display = "none";
    }
  });
  Object.defineProperty(Root2.prototype, "_moveFocusElement", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(index, target) {
      var container = this._focusElementContainer;
      var focusElement = target.getPrivate("focusElement").dom;
      if (focusElement === this._focusElementContainer.children[index]) {
        return;
      }
      var next = this._focusElementContainer.children[index + 1];
      if (next) {
        container.insertBefore(focusElement, next);
      } else {
        container.append(focusElement);
      }
    }
  });
  Object.defineProperty(Root2.prototype, "_positionFocusElement", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(target) {
      var bounds = target.globalBounds();
      var width = bounds.right == bounds.left ? target.width() : bounds.right - bounds.left;
      var height = bounds.top == bounds.bottom ? target.height() : bounds.bottom - bounds.top;
      var focusElement = target.getPrivate("focusElement").dom;
      focusElement.style.top = bounds.top - 2 + "px";
      focusElement.style.left = bounds.left - 2 + "px";
      focusElement.style.width = width + 4 + "px";
      focusElement.style.height = height + 4 + "px";
    }
  });
  Object.defineProperty(Root2.prototype, "_handleFocus", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(ev, index) {
      var focused = this._tabindexes[index];
      if (!focused.isVisibleDeep()) {
        this._focusNext(ev.target, this._isShift ? -1 : 1);
        return;
      }
      this._positionFocusElement(focused);
      this._focusedSprite = focused;
      if (focused.events.isEnabled("focus")) {
        focused.events.dispatch("focus", {
          type: "focus",
          originalEvent: ev,
          target: focused
        });
      }
    }
  });
  Object.defineProperty(Root2.prototype, "_focusNext", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(el, direction) {
      var focusableElements = Array.from(document.querySelectorAll([
        "a[href]",
        "area[href]",
        "button:not([disabled])",
        "details",
        "input:not([disabled])",
        "iframe:not([disabled])",
        "select:not([disabled])",
        "textarea:not([disabled])",
        '[contentEditable=""]',
        '[contentEditable="true"]',
        '[contentEditable="TRUE"]',
        '[tabindex]:not([tabindex^="-"])'
      ].join(",")));
      var index = focusableElements.indexOf(el) + direction;
      if (index < 0) {
        index = focusableElements.length - 1;
      } else if (index >= focusableElements.length) {
        index = 0;
      }
      focusableElements[index].focus();
    }
  });
  Object.defineProperty(Root2.prototype, "_handleBlur", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(ev, _index) {
      var focused = this._focusedSprite;
      if (focused && focused.events.isEnabled("blur")) {
        focused.events.dispatch("blur", {
          type: "blur",
          originalEvent: ev,
          target: focused
        });
      }
      this._focusedSprite = void 0;
    }
  });
  Object.defineProperty(Root2.prototype, "updateTooltip", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(target) {
      var text = stripTags(target._getText());
      var tooltipElement = target.getPrivate("tooltipElement");
      if (target.get("role") == "tooltip" && text != "") {
        if (!tooltipElement) {
          tooltipElement = this._makeTooltipElement(target);
        }
        if (tooltipElement.innerHTML != text) {
          tooltipElement.innerHTML = text;
        }
      } else if (tooltipElement) {
        tooltipElement.remove();
        target.removePrivate("tooltipElement");
      }
    }
  });
  Object.defineProperty(Root2.prototype, "_makeTooltipElement", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(target) {
      var container = this._tooltipElementContainer;
      var tooltipElement = document.createElement("div");
      tooltipElement.style.position = "absolute";
      tooltipElement.style.opacity = "0.0000001";
      setInteractive(tooltipElement, false);
      this._decorateFocusElement(target, tooltipElement);
      container.append(tooltipElement);
      target.setPrivate("tooltipElement", tooltipElement);
      return tooltipElement;
    }
  });
  Object.defineProperty(Root2.prototype, "_invalidateAccessibility", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(target) {
      this._focusElementDirty = true;
      var focusElement = target.getPrivate("focusElement");
      if (target.get("focusable")) {
        if (focusElement) {
          this._decorateFocusElement(target);
          this._positionFocusElement(target);
        }
      } else if (focusElement) {
        this._removeFocusElement(target);
      }
    }
  });
  Object.defineProperty(Root2.prototype, "focused", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(target) {
      return this._focusedSprite === target;
    }
  });
  Object.defineProperty(Root2.prototype, "documentPointToRoot", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(point5) {
      var bbox = this.dom.getBoundingClientRect();
      return {
        x: point5.x - bbox.left,
        y: point5.y - bbox.top
      };
    }
  });
  Object.defineProperty(Root2.prototype, "rootPointToDocument", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(point5) {
      var bbox = this.dom.getBoundingClientRect();
      return {
        x: point5.x + bbox.left,
        y: point5.y + bbox.top
      };
    }
  });
  Object.defineProperty(Root2.prototype, "addDisposer", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(disposer) {
      this._disposers.push(disposer);
      return disposer;
    }
  });
  Object.defineProperty(Root2.prototype, "_updateComputedStyles", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var styles = window.getComputedStyle(this.dom);
      var fontHash = "";
      each2(styles, function(key, val) {
        if (isString(key) && key.match(/^font/)) {
          fontHash += val;
        }
      });
      var changed = fontHash != this._fontHash;
      if (changed) {
        this._fontHash = fontHash;
      }
      return changed;
    }
  });
  Object.defineProperty(Root2.prototype, "_checkComputedStyles", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (this._updateComputedStyles()) {
        this._invalidateLabelBounds(this.container);
      }
    }
  });
  Object.defineProperty(Root2.prototype, "_invalidateLabelBounds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(target) {
      var _this = this;
      if (target instanceof Container) {
        target.children.each(function(child) {
          _this._invalidateLabelBounds(child);
        });
      } else if (target instanceof Text) {
        target.markDirtyBounds();
      }
    }
  });
  Object.defineProperty(Root2.prototype, "_hasLicense", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      for (var i = 0; i < registry.licenses.length; i++) {
        if (registry.licenses[i].match(/^AM5C.{5,}/i)) {
          return true;
        }
      }
      return false;
    }
  });
  Object.defineProperty(Root2.prototype, "_licenseApplied", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (this._logo) {
        this._logo.set("forceHidden", true);
      }
    }
  });
  Object.defineProperty(Root2.prototype, "debugGhostView", {
    get: function() {
      return this._renderer.debugGhostView;
    },
    set: function(value) {
      this._renderer.debugGhostView = value;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Root2.prototype, "tapToActivate", {
    get: function() {
      return this._renderer.tapToActivate;
    },
    set: function(value) {
      this._renderer.tapToActivate = value;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Root2.prototype, "tapToActivateTimeout", {
    get: function() {
      return this._renderer.tapToActivateTimeout;
    },
    set: function(value) {
      this._renderer.tapToActivateTimeout = value;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Root2.prototype, "_makeHTMLElement", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(target) {
      var _this = this;
      var container = this._htmlElementContainer;
      var htmlElement = document.createElement("div");
      target.setPrivate("htmlElement", htmlElement);
      htmlElement.style.position = "absolute";
      htmlElement.style.overflow = "auto";
      if (target.events.isEnabled("click")) {
        this._disposers.push(addEventListener(htmlElement, "click", function(ev) {
          var downEvent = _this._renderer.getEvent(ev);
          target.events.dispatch("click", {
            type: "click",
            originalEvent: downEvent.event,
            point: downEvent.point,
            simulated: false,
            target
          });
        }));
      }
      this._positionHTMLElement(target);
      container.append(htmlElement);
      pushOne(this._htmlEnabledContainers, target);
      return htmlElement;
    }
  });
  Object.defineProperty(Root2.prototype, "_positionHTMLElements", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      each(this._htmlEnabledContainers, function(target) {
        _this._positionHTMLElement(target);
      });
    }
  });
  Object.defineProperty(Root2.prototype, "_positionHTMLElement", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(target) {
      var htmlElement = target.getPrivate("htmlElement");
      if (htmlElement) {
        var visualSettings = ["paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "minWidth", "minHeight", "maxWidth", "maxHeight"];
        each(visualSettings, function(setting) {
          var value = target.get(setting);
          if (value) {
            htmlElement.style[setting] = value + "px";
          } else {
            htmlElement.style[setting] = "";
          }
        });
        htmlElement.style.opacity = target.compositeOpacity() + "";
        if (target.isVisibleDeep()) {
          htmlElement.style.display = "block";
        } else {
          htmlElement.style.display = "none";
        }
        var bounds = target.globalBounds();
        htmlElement.style.top = bounds.top + "px";
        htmlElement.style.left = bounds.left + "px";
        var width = target.get("width");
        var height = target.get("height");
        var w = 0;
        var h = 0;
        if (width) {
          w = target.width();
        }
        if (height) {
          h = target.height();
        }
        if (!width || !height) {
          htmlElement.style.width = "";
          htmlElement.style.height = "";
          var bbox = htmlElement.getBoundingClientRect();
          w = bbox.width;
          h = bbox.height;
          target.setPrivate("minWidth", w);
          target.setPrivate("minHeight", h);
        } else {
          target.removePrivate("minWidth");
          target.removePrivate("minHeight");
        }
        if (w > 0) {
          htmlElement.style.minWidth = w + "px";
        }
        if (h > 0) {
          htmlElement.style.minHeight = h + "px";
        }
      }
    }
  });
  Object.defineProperty(Root2.prototype, "_setHTMLContent", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(target, html) {
      var htmlElement = target.getPrivate("htmlElement");
      if (!htmlElement) {
        htmlElement = this._makeHTMLElement(target);
      }
      if (htmlElement.innerHTML != html) {
        htmlElement.innerHTML = html;
      }
    }
  });
  Object.defineProperty(Root2.prototype, "_removeHTMLContent", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(target) {
      var htmlElement = target.getPrivate("htmlElement");
      if (htmlElement) {
        this._htmlElementContainer.removeChild(htmlElement);
      }
      remove(this._htmlEnabledContainers, target);
    }
  });
  return Root2;
}();

// node_modules/@amcharts/amcharts5/.internal/core/util/Modal.js
var rules;
function modalCSS(element, root, _prefix) {
  var ic = root.interfaceColors;
  var active = ic.get("secondaryButton").toCSS();
  var text = ic.get("text").toCSS();
  var shadow = ic.get("alternativeBackground").toCSS(0.45);
  if (!rules) {
    var disposer_1 = new MultiDisposer([
      new StyleRule(element, ".am5-modal", {
        "width": "100%",
        "height": "100%",
        "position": "absolute",
        "z-index": "100000",
        "top": "0",
        "left": "0"
      }),
      new StyleRule(element, ".am5-modal-curtain", {
        "top": "0",
        "left": "0",
        "width": "100%",
        "height": "100%",
        "position": "absolute",
        "background": ic.get("background").toCSS(0.5),
        "z-index": "100"
      }),
      new StyleRule(element, ".am5-modal-wrapper", {
        "top": "0",
        "left": "0",
        "width": "100%",
        "height": "100%",
        "position": "absolute",
        "text-align": "center",
        "white-space": "nowrap",
        "background": ic.get("background").toCSS(0.5),
        "z-index": "101"
      }),
      new StyleRule(element, ".am5-modal-wrapper:before", {
        "content": "''",
        "display": "inline-block",
        "height": "100%",
        "vertical-align": "middle",
        "margin-right": "-0.25em"
      }),
      new StyleRule(element, ".am5-modal-content", {
        "display": "inline-block",
        "padding": "1.2em",
        "vertical-align": "middle",
        "text-align": "left",
        "white-space": "normal",
        "background": ic.get("background").toCSS(),
        "border-radius": "4px",
        "-webkit-box-shadow": "0px 0px 36px 0px " + shadow,
        "box-shadow": "0px 0px 36px 0px " + shadow,
        "color": text
      }),
      new StyleRule(element, ".am5-modal-content h1", {
        "font-size": "1em",
        "margin": "0 0 0.5em 0"
      }),
      new StyleRule(element, ".am5-modal-table", {
        "display": "table",
        "margin": "1em 0"
      }),
      new StyleRule(element, ".am5-modal-table-row", {
        "display": "table-row"
      }),
      new StyleRule(element, ".am5-modal-table-heading", {
        "display": "table-heading",
        "padding": "3px 10px 3px 0"
      }),
      new StyleRule(element, ".am5-modal-table-cell", {
        "display": "table-cell",
        "padding": "3px 0 3px 0"
      }),
      new StyleRule(element, ".am5-modal-table-cell > *", {
        "vertical-align": "middle"
      }),
      new StyleRule(element, ".am5-modal-content input[type=text], .am5-modal-content input[type=number], .am5-modal-content select", {
        "border": "1px solid " + active,
        "border-radius": "4px",
        "padding": "3px 5px",
        "margin": "2px"
      }),
      new StyleRule(element, ".am5-modal-input-narrow", {
        "width": "50px"
      }),
      new StyleRule(element, ".am5-modal-button", {
        "font-weight": "400",
        "color": ic.get("secondaryButtonText").toCSS(),
        "line-height": "1.5",
        "text-align": "center",
        "text-decoration": "none",
        "vertical-align": "middle",
        "cursor": "pointer",
        "padding": "0.2em 0.8em",
        "font-size": "1em",
        "border-radius": "0.25em",
        "margin": "0 0.25em 0 0",
        "border": "1px solid " + ic.get("secondaryButtonStroke").toCSS(),
        "background": ic.get("secondaryButton").toCSS()
      }),
      new StyleRule(element, ".am5-modal-button:hover", {
        "background": ic.get("secondaryButtonHover").toCSS()
      }),
      new StyleRule(element, ".am5-modal-button.am5-modal-primary", {
        "color": ic.get("primaryButtonText").toCSS(),
        "border": "1px solid " + ic.get("primaryButtonStroke").toCSS(),
        "background": ic.get("primaryButton").toCSS()
      }),
      new StyleRule(element, ".am5-modal-button.am5-modal-primary:hover", {
        "background": ic.get("primaryButtonHover").toCSS()
      })
    ]);
    rules = new CounterDisposer(function() {
      rules = void 0;
      disposer_1.dispose();
    });
  }
  return rules.increment();
}
var Modal = function(_super) {
  __extends(Modal2, _super);
  function Modal2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(Modal2.prototype, "_afterNew", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      _super.prototype._afterNewApplyThemes.call(this);
      this._setRawDefault("deactivateRoot", true);
      modalCSS(getShadowRoot(this._root.dom), this._root);
      var container = document.createElement("div");
      container.className = "am5-modal";
      container.style.display = "none";
      this.root._inner.appendChild(container);
      this.setPrivate("container", container);
      var curtain = document.createElement("div");
      curtain.className = "am5-modal-curtain";
      container.appendChild(curtain);
      this.setPrivate("curtain", curtain);
      addEventListener(curtain, "click", function() {
        _this.cancel();
      });
      var wrapper = document.createElement("div");
      wrapper.className = "am5-modal-wrapper";
      container.appendChild(wrapper);
      this.setPrivate("wrapper", wrapper);
      var content = document.createElement("div");
      content.className = "am5-modal-content";
      wrapper.appendChild(content);
      this.setPrivate("content", content);
      var html = this.get("content");
      if (html) {
        content.innerHTML = html;
      }
      if (supports("keyboardevents")) {
        this._disposers.push(addEventListener(document, "keydown", function(ev) {
          if (_this.isOpen() && ev.keyCode == 27) {
            _this.cancel();
          }
        }));
      }
    }
  });
  Object.defineProperty(Modal2.prototype, "_beforeChanged", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._beforeChanged.call(this);
      if (this.isDirty("content")) {
        this.getPrivate("content").innerHTML = this.get("content", "");
      }
    }
  });
  Object.defineProperty(Modal2.prototype, "isOpen", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this.getPrivate("container").style.display != "none";
    }
  });
  Object.defineProperty(Modal2.prototype, "open", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this.getPrivate("container").style.display = "block";
      if (this.get("deactivateRoot")) {
        this._root._renderer.interactionsEnabled = false;
      }
      this.events.dispatch("opened", {
        type: "opened",
        target: this
      });
    }
  });
  Object.defineProperty(Modal2.prototype, "close", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this.getPrivate("container").style.display = "none";
      if (this.get("deactivateRoot")) {
        this._root._renderer.interactionsEnabled = true;
      }
      this.events.dispatch("closed", {
        type: "closed",
        target: this
      });
    }
  });
  Object.defineProperty(Modal2.prototype, "cancel", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this.getPrivate("container").style.display = "none";
      if (this.get("deactivateRoot")) {
        this._root._renderer.interactionsEnabled = true;
      }
      this.events.dispatch("cancelled", {
        type: "cancelled",
        target: this
      });
    }
  });
  Object.defineProperty(Modal2.prototype, "dispose", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype.dispose.call(this);
      this.root.dom.removeChild(this.getPrivate("container"));
    }
  });
  Object.defineProperty(Modal2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Modal"
  });
  Object.defineProperty(Modal2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Entity.classNames.concat([Modal2.className])
  });
  return Modal2;
}(Entity);

// node_modules/@amcharts/amcharts5/.internal/core/render/Bullet.js
var Bullet = function(_super) {
  __extends(Bullet2, _super);
  function Bullet2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    Object.defineProperty(_this, "_index", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(_this, "series", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    return _this;
  }
  Object.defineProperty(Bullet2.prototype, "_afterNew", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._afterNewApplyThemes.call(this);
    }
  });
  Object.defineProperty(Bullet2.prototype, "_beforeChanged", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._beforeChanged.call(this);
      if (this.isDirty("sprite")) {
        var sprite = this.get("sprite");
        if (sprite) {
          sprite.setAll({ position: "absolute", role: "figure" });
          this._disposers.push(sprite);
        }
      }
      if (this.isDirty("locationX") || this.isDirty("locationY")) {
        if (this.series) {
          this.series._positionBullet(this);
        }
      }
    }
  });
  Object.defineProperty(Bullet2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Bullet"
  });
  Object.defineProperty(Bullet2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Entity.classNames.concat([Bullet2.className])
  });
  return Bullet2;
}(Entity);

// node_modules/@amcharts/amcharts5/.internal/core/render/Circle.js
var Circle = function(_super) {
  __extends(Circle2, _super);
  function Circle2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(Circle2.prototype, "_beforeChanged", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._beforeChanged.call(this);
      if (this.isDirty("radius")) {
        this._clear = true;
      }
    }
  });
  Object.defineProperty(Circle2.prototype, "_changed", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._changed.call(this);
      if (this._clear) {
        this._display.drawCircle(0, 0, this.get("radius", 10));
      }
    }
  });
  Object.defineProperty(Circle2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Circle"
  });
  Object.defineProperty(Circle2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Graphics.classNames.concat([Circle2.className])
  });
  return Circle2;
}(Graphics);

// node_modules/@amcharts/amcharts5/.internal/core/render/Ellipse.js
var Ellipse = function(_super) {
  __extends(Ellipse2, _super);
  function Ellipse2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(Ellipse2.prototype, "_beforeChanged", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._beforeChanged.call(this);
      if (this.isDirty("radiusX") || this.isDirty("radiusY") || this.isDirty("rotation")) {
        this._clear = true;
      }
    }
  });
  Object.defineProperty(Ellipse2.prototype, "_changed", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._changed.call(this);
      if (this._clear) {
        this._display.drawEllipse(0, 0, Math.abs(this.get("radiusX")), Math.abs(this.get("radiusY")));
      }
    }
  });
  Object.defineProperty(Ellipse2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Ellipse"
  });
  Object.defineProperty(Ellipse2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Graphics.classNames.concat([Ellipse2.className])
  });
  return Ellipse2;
}(Graphics);

// node_modules/@amcharts/amcharts5/.internal/core/render/Star.js
var Star = function(_super) {
  __extends(Star2, _super);
  function Star2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(Star2.prototype, "_beforeChanged", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._beforeChanged.call(this);
      if (this.isDirty("radius") || this.isDirty("innerRadius") || this.isDirty("spikes")) {
        this._clear = true;
      }
    }
  });
  Object.defineProperty(Star2.prototype, "_changed", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._changed.call(this);
      if (this._clear) {
        var display = this._display;
        var r = this.get("radius", 0);
        var ir = relativeToValue(this.get("innerRadius", 0), r);
        var spikes = this.get("spikes", 0);
        var step = Math.PI / spikes;
        var angle = Math.PI / 2 * 3;
        display.moveTo(0, -r);
        for (var i = 0; i < spikes; i++) {
          display.lineTo(Math.cos(angle) * r, Math.sin(angle) * r);
          angle += step;
          display.lineTo(Math.cos(angle) * ir, Math.sin(angle) * ir);
          angle += step;
        }
        display.lineTo(0, -r);
      }
    }
  });
  Object.defineProperty(Star2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Star"
  });
  Object.defineProperty(Star2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Graphics.classNames.concat([Star2.className])
  });
  return Star2;
}(Graphics);

// node_modules/@amcharts/amcharts5/.internal/core/render/gradients/Gradient.js
var Gradient = function(_super) {
  __extends(Gradient2, _super);
  function Gradient2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(Gradient2.prototype, "_afterNew", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._afterNewApplyThemes.call(this);
    }
  });
  Object.defineProperty(Gradient2.prototype, "getFill", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(_target) {
      return {
        addColorStop: function(_offset, _color) {
        }
      };
    }
  });
  Object.defineProperty(Gradient2.prototype, "_changed", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._changed.call(this);
    }
  });
  Object.defineProperty(Gradient2.prototype, "getBounds", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(target) {
      var gradientTarget = this.get("target");
      if (gradientTarget) {
        var bounds = gradientTarget.globalBounds();
        var p02 = target.toLocal({ x: bounds.left, y: bounds.top });
        var p1 = target.toLocal({ x: bounds.right, y: bounds.top });
        var p2 = target.toLocal({ x: bounds.right, y: bounds.bottom });
        var p3 = target.toLocal({ x: bounds.left, y: bounds.bottom });
        return {
          left: Math.min(p02.x, p1.x, p2.x, p3.x),
          top: Math.min(p02.y, p1.y, p2.y, p3.y),
          right: Math.max(p02.x, p1.x, p2.x, p3.x),
          bottom: Math.max(p02.y, p1.y, p2.y, p3.y)
        };
      }
      return target._display.getLocalBounds();
    }
  });
  Object.defineProperty(Gradient2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Gradient"
  });
  Object.defineProperty(Gradient2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Entity.classNames.concat([Gradient2.className])
  });
  return Gradient2;
}(Entity);

// node_modules/@amcharts/amcharts5/.internal/core/render/gradients/LinearGradient.js
var LinearGradient = function(_super) {
  __extends(LinearGradient2, _super);
  function LinearGradient2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(LinearGradient2.prototype, "getFill", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(target) {
      var rotation = this.get("rotation", 0);
      var bounds = this.getBounds(target);
      var l = bounds.left || 0;
      var r = bounds.right || 0;
      var t = bounds.top || 0;
      var b = bounds.bottom || 0;
      var cos3 = cos(rotation);
      var sin3 = sin(rotation);
      var w = cos3 * (r - l);
      var h = sin3 * (b - t);
      var longer = Math.max(w, h);
      var gradient = this._root._renderer.createLinearGradient(l, t, l + longer * cos3, t + longer * sin3);
      var stops = this.get("stops");
      if (stops) {
        var i_1 = 0;
        each(stops, function(stop) {
          var offset = stop.offset;
          if (!isNumber(offset)) {
            offset = i_1 / (stops.length - 1);
          }
          var opacity = stop.opacity;
          if (!isNumber(opacity)) {
            opacity = 1;
          }
          var color2 = stop.color;
          if (color2) {
            var lighten = stop.lighten;
            if (lighten) {
              color2 = Color.lighten(color2, lighten);
            }
            var brighten = stop.brighten;
            if (brighten) {
              color2 = Color.brighten(color2, brighten);
            }
            gradient.addColorStop(offset, "rgba(" + color2.r + "," + color2.g + "," + color2.b + "," + opacity + ")");
          }
          i_1++;
        });
      }
      return gradient;
    }
  });
  Object.defineProperty(LinearGradient2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "LinearGradient"
  });
  Object.defineProperty(LinearGradient2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Gradient.classNames.concat([LinearGradient2.className])
  });
  return LinearGradient2;
}(Gradient);

// node_modules/@amcharts/amcharts5/.internal/core/render/HeatLegend.js
var HeatLegend = function(_super) {
  __extends(HeatLegend2, _super);
  function HeatLegend2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    Object.defineProperty(_this, "labelContainer", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this.children.push(Container.new(_this._root, {}))
    });
    Object.defineProperty(_this, "markerContainer", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this.children.push(Container.new(_this._root, {}))
    });
    Object.defineProperty(_this, "startLabel", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this.labelContainer.children.push(Label.new(_this._root, { themeTags: ["start"] }))
    });
    Object.defineProperty(_this, "endLabel", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this.labelContainer.children.push(Label.new(_this._root, { themeTags: ["end"] }))
    });
    Object.defineProperty(_this, "markers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new ListTemplate(Template.new({}), function() {
        return RoundedRectangle._new(_this._root, {
          themeTags: mergeTags(_this.markers.template.get("themeTags", []), [_this.get("orientation"), "heatlegend", "marker"])
        }, [_this.markers.template]);
      })
    });
    return _this;
  }
  Object.defineProperty(HeatLegend2.prototype, "_afterNew", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._settings.themeTags = mergeTags(this._settings.themeTags, ["heatlegend", this._settings.orientation]);
      _super.prototype._afterNew.call(this);
      this.set("tooltip", Tooltip.new(this._root, {
        themeTags: ["heatlegend"]
      }));
    }
  });
  Object.defineProperty(HeatLegend2.prototype, "makeMarker", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var marker = this.markers.make();
      marker.states.create("disabled", {});
      return marker;
    }
  });
  Object.defineProperty(HeatLegend2.prototype, "showValue", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(value, text, color2) {
      var tooltip = this.getTooltip();
      if (tooltip && isNumber(value)) {
        var startValue = this.get("startValue", 0);
        var endValue = this.get("endValue", 1);
        var c = (value - startValue) / (endValue - startValue);
        var startColor = this.get("startColor");
        var endColor = this.get("endColor");
        if (!text) {
          text = this.getNumberFormatter().format(value);
        }
        if (!color2) {
          color2 = Color.interpolate(c, startColor, endColor);
        }
        tooltip.label.set("text", text);
        var p = void 0;
        if (this.get("orientation") == "vertical") {
          p = this.markerContainer.toGlobal({ x: 0, y: this.innerHeight() * (1 - c) });
        } else {
          p = this.markerContainer.toGlobal({ x: this.innerWidth() * c, y: 0 });
        }
        var background = tooltip.get("background");
        if (background) {
          background.set("fill", Color.interpolate(c, startColor, endColor));
        }
        tooltip.set("pointTo", p);
        tooltip.show();
      }
    }
  });
  Object.defineProperty(HeatLegend2.prototype, "_prepareChildren", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._prepareChildren.call(this);
      var labelContainer = this.labelContainer;
      var orientation = this.get("orientation");
      var startLabel = this.startLabel;
      var endLabel = this.endLabel;
      var tooltip = this.getTooltip();
      if (this.isDirty("orientation")) {
        if (orientation == "vertical") {
          this.markerContainer.setAll({ layout: this._root.verticalLayout, height: p100 });
          this.set("layout", this._root.horizontalLayout);
          startLabel.setAll({ y: p100, x: void 0, centerY: p100, centerX: p100 });
          endLabel.setAll({ y: 0, x: void 0, centerY: 0, centerX: p100 });
          labelContainer.setAll({ height: p100, width: void 0 });
          if (tooltip) {
            tooltip.set("pointerOrientation", "horizontal");
          }
        } else {
          this.markerContainer.setAll({ layout: this._root.horizontalLayout, width: p100 });
          this.set("layout", this._root.verticalLayout);
          startLabel.setAll({ x: 0, y: void 0, centerX: 0, centerY: 0 });
          endLabel.setAll({ x: p100, y: void 0, centerX: p100, centerY: 0 });
          labelContainer.setAll({ width: p100, height: void 0 });
          if (tooltip) {
            tooltip.set("pointerOrientation", "vertical");
          }
        }
      }
      if (this.isDirty("stepCount")) {
        var stepCount = this.get("stepCount", 1);
        var startColor = this.get("startColor");
        var endColor = this.get("endColor");
        this.markerContainer.children.clear();
        if (stepCount > 1) {
          for (var i = 0; i < stepCount; i++) {
            var marker = this.makeMarker();
            if (orientation == "vertical") {
              this.markerContainer.children.moveValue(marker, 0);
            } else {
              this.markerContainer.children.push(marker);
            }
            if (startColor && endColor) {
              marker.set("fill", Color.interpolate(i / stepCount, startColor, endColor));
            }
          }
        } else if (stepCount == 1) {
          var marker = this.makeMarker();
          this.markerContainer.children.push(marker);
          var gradient = LinearGradient.new(this._root, { stops: [{ color: startColor }, { color: endColor }] });
          if (orientation == "vertical") {
            gradient.set("rotation", 90);
            var stops = gradient.get("stops");
            if (stops) {
              stops.reverse();
            }
          } else {
            gradient.set("rotation", 0);
          }
          if (startColor && endColor) {
            marker.set("fillGradient", gradient);
          }
        }
      }
      if (this.isDirty("startText") || this.isDirty("startValue")) {
        startLabel.set("text", this.get("startText", this.getNumberFormatter().format(this.get("startValue", 0))));
      }
      if (this.isDirty("endText") || this.isDirty("endValue")) {
        endLabel.set("text", this.get("endText", this.getNumberFormatter().format(this.get("endValue", 1))));
      }
    }
  });
  Object.defineProperty(HeatLegend2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "HeatLegend"
  });
  Object.defineProperty(HeatLegend2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Container.classNames.concat([HeatLegend2.className])
  });
  return HeatLegend2;
}(Container);

// node_modules/@amcharts/amcharts5/.internal/core/render/Legend.js
var Legend = function(_super) {
  __extends(Legend2, _super);
  function Legend2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    Object.defineProperty(_this, "itemContainers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new ListTemplate(Template.new({}), function() {
        return Container._new(_this._root, {
          themeTags: mergeTags(_this.itemContainers.template.get("themeTags", []), ["legend", "item"]),
          themeTagsSelf: mergeTags(_this.itemContainers.template.get("themeTagsSelf", []), ["itemcontainer"]),
          background: RoundedRectangle.new(_this._root, {
            themeTags: mergeTags(_this.itemContainers.template.get("themeTags", []), ["legend", "item", "background"]),
            themeTagsSelf: mergeTags(_this.itemContainers.template.get("themeTagsSelf", []), ["itemcontainer"])
          })
        }, [_this.itemContainers.template]);
      })
    });
    Object.defineProperty(_this, "markers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new ListTemplate(Template.new({}), function() {
        return Container._new(_this._root, {
          themeTags: mergeTags(_this.markers.template.get("themeTags", []), ["legend", "marker"])
        }, [_this.markers.template]);
      })
    });
    Object.defineProperty(_this, "labels", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new ListTemplate(Template.new({}), function() {
        return Label._new(_this._root, {
          themeTags: mergeTags(_this.labels.template.get("themeTags", []), ["legend", "label"])
        }, [_this.labels.template]);
      })
    });
    Object.defineProperty(_this, "valueLabels", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new ListTemplate(Template.new({}), function() {
        return Label._new(_this._root, {
          themeTags: mergeTags(_this.valueLabels.template.get("themeTags", []), ["legend", "label", "value"])
        }, [_this.valueLabels.template]);
      })
    });
    Object.defineProperty(_this, "markerRectangles", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: new ListTemplate(Template.new({}), function() {
        return RoundedRectangle._new(_this._root, {
          themeTags: mergeTags(_this.markerRectangles.template.get("themeTags", []), ["legend", "marker", "rectangle"])
        }, [_this.markerRectangles.template]);
      })
    });
    return _this;
  }
  Object.defineProperty(Legend2.prototype, "_afterNew", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._settings.themeTags = mergeTags(this._settings.themeTags, ["legend"]);
      this.fields.push("name", "stroke", "fill");
      _super.prototype._afterNew.call(this);
    }
  });
  Object.defineProperty(Legend2.prototype, "makeItemContainer", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(dataItem) {
      var itemContainer = this.children.push(this.itemContainers.make());
      itemContainer._setDataItem(dataItem);
      this.itemContainers.push(itemContainer);
      itemContainer.states.create("disabled", {});
      return itemContainer;
    }
  });
  Object.defineProperty(Legend2.prototype, "makeMarker", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var marker = this.markers.make();
      this.markers.push(marker);
      marker.states.create("disabled", {});
      return marker;
    }
  });
  Object.defineProperty(Legend2.prototype, "makeLabel", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var label = this.labels.make();
      label.states.create("disabled", {});
      return label;
    }
  });
  Object.defineProperty(Legend2.prototype, "makeValueLabel", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var valueLabel = this.valueLabels.make();
      valueLabel.states.create("disabled", {});
      return valueLabel;
    }
  });
  Object.defineProperty(Legend2.prototype, "makeMarkerRectangle", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var markerRectangle = this.markerRectangles.make();
      markerRectangle.states.create("disabled", {});
      return markerRectangle;
    }
  });
  Object.defineProperty(Legend2.prototype, "processDataItem", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(dataItem) {
      var _this = this;
      _super.prototype.processDataItem.call(this, dataItem);
      var itemContainer = this.makeItemContainer(dataItem);
      var nameField = this.get("nameField");
      var fillField = this.get("fillField");
      var strokeField = this.get("strokeField");
      if (itemContainer) {
        var clickTarget = this.get("clickTarget", "itemContainer");
        var item_1 = dataItem.dataContext;
        if (item_1 && item_1.set) {
          item_1.set("legendDataItem", dataItem);
        }
        itemContainer._setDataItem(dataItem);
        dataItem.set("itemContainer", itemContainer);
        var marker = this.makeMarker();
        if (marker) {
          itemContainer.children.push(marker);
          marker._setDataItem(dataItem);
          dataItem.set("marker", marker);
          var useDefaultMarker = this.get("useDefaultMarker");
          var markerRectangle_1 = marker.children.push(this.makeMarkerRectangle());
          var fill = dataItem.get("fill");
          var stroke = dataItem.get("stroke");
          dataItem.set("markerRectangle", markerRectangle_1);
          if (item_1 && item_1.get) {
            fill = item_1.get(fillField, fill);
            stroke = item_1.get(strokeField, stroke);
          }
          if (!stroke) {
            stroke = fill;
          }
          if (!useDefaultMarker) {
            if (item_1 && item_1.createLegendMarker) {
              item_1.createLegendMarker();
            }
          } else {
            if (item_1.on) {
              item_1.on(fillField, function() {
                markerRectangle_1.set("fill", item_1.get(fillField));
              });
              item_1.on(strokeField, function() {
                markerRectangle_1.set("stroke", item_1.get(strokeField));
              });
            }
          }
          markerRectangle_1.setAll({ fill, stroke });
          var component = item_1.component;
          if (component && component.updateLegendMarker) {
            component.updateLegendMarker(item_1);
          }
        }
        var label_1 = this.makeLabel();
        if (label_1) {
          itemContainer.children.push(label_1);
          label_1._setDataItem(dataItem);
          dataItem.set("label", label_1);
          label_1.text.on("text", function() {
            itemContainer.set("ariaLabel", label_1.text._getText() + "; " + _this._t("Press ENTER to toggle"));
          });
          if (item_1 && item_1.get) {
            dataItem.set("name", item_1.get(nameField));
          }
          var name_1 = dataItem.get("name");
          if (name_1) {
            label_1.set("text", name_1);
          }
        }
        var valueLabel = this.makeValueLabel();
        if (valueLabel) {
          itemContainer.children.push(valueLabel);
          valueLabel._setDataItem(dataItem);
          dataItem.set("valueLabel", valueLabel);
        }
        if (item_1 && item_1.show) {
          this._disposers.push(item_1.on("visible", function(visible) {
            itemContainer.set("disabled", !visible);
          }));
          if (!item_1.get("visible")) {
            itemContainer.set("disabled", true);
          }
          if (clickTarget != "none") {
            var clickContainer = itemContainer;
            if (clickTarget == "marker") {
              clickContainer = marker;
            }
            this._addClickEvents(clickContainer, item_1, dataItem);
          }
        }
        this.children.values.sort(function(a2, b) {
          var targetA = a2.dataItem.dataContext;
          var targetB = b.dataItem.dataContext;
          if (targetA && targetB) {
            var indexA = _this.data.indexOf(targetA);
            var indexB = _this.data.indexOf(targetB);
            if (indexA > indexB) {
              return 1;
            } else if (indexA < indexB) {
              return -1;
            }
          }
          return 0;
        });
      }
    }
  });
  Object.defineProperty(Legend2.prototype, "_addClickEvents", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(container, item, dataItem) {
      var _this = this;
      container.set("cursorOverStyle", "pointer");
      container.events.on("pointerover", function() {
        var component = item.component;
        if (component && component.hoverDataItem) {
          component.hoverDataItem(item);
        }
      });
      container.events.on("pointerout", function() {
        var component = item.component;
        if (component && component.hoverDataItem) {
          component.unhoverDataItem(item);
        }
      });
      container.events.on("click", function() {
        var labelText = dataItem.get("label").text._getText();
        if (item.show && item.isHidden && (item.isHidden() || item.get("visible") === false)) {
          item.show();
          container.set("disabled", false);
          _this._root.readerAlert(_this._t("%1 shown", _this._root.locale, labelText));
        } else if (item.hide) {
          item.hide();
          container.set("disabled", true);
          _this._root.readerAlert(_this._t("%1 hidden", _this._root.locale, labelText));
        }
      });
    }
  });
  Object.defineProperty(Legend2.prototype, "disposeDataItem", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(dataItem) {
      var dataContext = dataItem.dataContext;
      if (dataContext && dataContext.get) {
        var di = dataContext.get("legendDataItem");
        if (di == dataItem) {
          dataContext.set("legendDataItem", void 0);
        }
      }
      var itemContainer = dataItem.get("itemContainer");
      if (itemContainer) {
        this.itemContainers.removeValue(itemContainer);
        itemContainer.dispose();
      }
      var marker = dataItem.get("marker");
      if (marker) {
        this.markers.removeValue(marker);
        marker.dispose();
      }
      var markerRectangle = dataItem.get("markerRectangle");
      if (markerRectangle) {
        this.markerRectangles.removeValue(markerRectangle);
        markerRectangle.dispose();
      }
      var label = dataItem.get("label");
      if (label) {
        this.labels.removeValue(label);
        label.dispose();
      }
      var valueLabel = dataItem.get("valueLabel");
      if (valueLabel) {
        this.valueLabels.removeValue(valueLabel);
        valueLabel.dispose();
      }
    }
  });
  Object.defineProperty(Legend2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Legend"
  });
  Object.defineProperty(Legend2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Series.classNames.concat([Legend2.className])
  });
  return Legend2;
}(Series);

// node_modules/@amcharts/amcharts5/.internal/core/util/Draw.js
function segmentedLine(display, segments) {
  for (var s2 = 0, len = segments.length; s2 < len; s2++) {
    var groups = segments[s2];
    if (groups.length > 0) {
      var firstGroup = groups[0];
      if (firstGroup.length > 0) {
        var firstPoint = firstGroup[0];
        display.moveTo(firstPoint.x, firstPoint.y);
        for (var g = 0, len_1 = groups.length; g < len_1; g++) {
          line(display, groups[g]);
        }
      }
    }
  }
}
function line(display, points) {
  for (var p = 0, len = points.length; p < len; p++) {
    var point5 = points[p];
    display.lineTo(point5.x, point5.y);
  }
}

// node_modules/@amcharts/amcharts5/.internal/core/render/Line.js
var Line = function(_super) {
  __extends(Line2, _super);
  function Line2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(Line2.prototype, "_beforeChanged", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._beforeChanged.call(this);
      if (this.isDirty("points") || this.isDirty("segments") || this._sizeDirty || this.isPrivateDirty("width") || this.isPrivateDirty("height")) {
        this._clear = true;
      }
    }
  });
  Object.defineProperty(Line2.prototype, "_changed", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._changed.call(this);
      if (this._clear) {
        var points = this.get("points");
        var segments = this.get("segments");
        if (points && points.length > 0) {
          var point5 = points[0];
          this._display.moveTo(point5.x, point5.y);
          segmentedLine(this._display, [[points]]);
        } else if (segments) {
          segmentedLine(this._display, segments);
        } else if (!this.get("draw")) {
          var w = this.width();
          var h = this.height();
          this._display.moveTo(0, 0);
          this._display.lineTo(w, h);
        }
      }
    }
  });
  Object.defineProperty(Line2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Line"
  });
  Object.defineProperty(Line2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Graphics.classNames.concat([Line2.className])
  });
  return Line2;
}(Graphics);

// node_modules/@amcharts/amcharts5/.internal/core/render/Picture.js
var Picture = function(_super) {
  __extends(Picture2, _super);
  function Picture2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    Object.defineProperty(_this, "_display", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this._root._renderer.makePicture(void 0)
    });
    return _this;
  }
  Object.defineProperty(Picture2.prototype, "_changed", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._changed.call(this);
      if (this.isDirty("width")) {
        var width = this.get("width");
        this._display.width = isNumber(width) ? width : void 0;
      }
      if (this.isDirty("height")) {
        var height = this.get("height");
        this._display.height = isNumber(height) ? height : void 0;
      }
      if (this.isDirty("shadowColor")) {
        this._display.clear();
        var shadowColor = this.get("shadowColor");
        this._display.shadowColor = shadowColor == null ? void 0 : shadowColor;
      }
      if (this.isDirty("shadowBlur")) {
        this._display.clear();
        this._display.shadowBlur = this.get("shadowBlur");
      }
      if (this.isDirty("shadowOffsetX")) {
        this._display.clear();
        this._display.shadowOffsetX = this.get("shadowOffsetX");
      }
      if (this.isDirty("shadowOffsetY")) {
        this._display.clear();
        this._display.shadowOffsetY = this.get("shadowOffsetY");
      }
      if (this.isDirty("shadowOpacity")) {
        this._display.clear();
        this._display.shadowOpacity = this.get("shadowOpacity");
      }
      if (this.isDirty("src")) {
        this._display.clear();
        this._load();
      }
    }
  });
  Object.defineProperty(Picture2.prototype, "_load", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      var src = this.get("src");
      if (src) {
        var image_1 = new Image();
        image_1.src = src;
        image_1.decode().then(function() {
          _this._display.image = image_1;
          _this._updateSize();
        }).catch(function(_error) {
        });
      }
    }
  });
  Object.defineProperty(Picture2.prototype, "_updateSize", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._updateSize.call(this);
      var image = this._display.image;
      if (image) {
        var w = this.getPrivate("width", this.get("width"));
        var h = this.getPrivate("height", this.get("height"));
        var r = image.width && image.height ? image.width / image.height : 0;
        if (isNumber(w) && isNumber(h)) {
          this._display.width = w;
          this._display.height = h;
        } else if (isNumber(w) && r) {
          h = w / r;
        } else if (isNumber(h) && r) {
          w = h * r;
        } else {
          w = image.width;
          h = image.height;
        }
        if (isNumber(w)) {
          this._display.width = w;
        }
        if (isNumber(h)) {
          this._display.height = h;
        }
        this.markDirtyBounds();
        this.markDirty();
      }
    }
  });
  Object.defineProperty(Picture2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Picture"
  });
  Object.defineProperty(Picture2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Sprite.classNames.concat([Picture2.className])
  });
  return Picture2;
}(Sprite);

// node_modules/@amcharts/amcharts5/.internal/core/render/RadialText.js
var RadialText = function(_super) {
  __extends(RadialText2, _super);
  function RadialText2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    Object.defineProperty(_this, "_display", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this._root._renderer.makeRadialText("", _this.textStyle)
    });
    return _this;
  }
  Object.defineProperty(RadialText2.prototype, "_afterNew", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._afterNew.call(this);
    }
  });
  Object.defineProperty(RadialText2.prototype, "_beforeChanged", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._beforeChanged.call(this);
      this._display.clear();
      if (this.isDirty("textType")) {
        this._display.textType = this.get("textType");
        this.markDirtyBounds();
      }
      if (this.isDirty("radius")) {
        this._display.radius = this.get("radius");
        this.markDirtyBounds();
      }
      if (this.isDirty("startAngle")) {
        this._display.startAngle = (this.get("startAngle", 0) + 90) * RADIANS;
        this.markDirtyBounds();
      }
      if (this.isDirty("inside")) {
        this._display.inside = this.get("inside");
        this.markDirtyBounds();
      }
      if (this.isDirty("orientation")) {
        this._display.orientation = this.get("orientation");
        this.markDirtyBounds();
      }
      if (this.isDirty("kerning")) {
        this._display.kerning = this.get("kerning");
        this.markDirtyBounds();
      }
    }
  });
  Object.defineProperty(RadialText2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "RadialText"
  });
  Object.defineProperty(RadialText2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Text.classNames.concat([RadialText2.className])
  });
  return RadialText2;
}(Text);

// node_modules/@amcharts/amcharts5/.internal/core/render/RadialLabel.js
var RadialLabel = function(_super) {
  __extends(RadialLabel2, _super);
  function RadialLabel2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    Object.defineProperty(_this, "_flipped", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    return _this;
  }
  Object.defineProperty(RadialLabel2.prototype, "_afterNew", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._textKeys.push("textType", "kerning");
      _super.prototype._afterNew.call(this);
    }
  });
  Object.defineProperty(RadialLabel2.prototype, "_makeText", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._text = this.children.push(RadialText.new(this._root, {}));
    }
  });
  Object.defineProperty(RadialLabel2.prototype, "baseRadius", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var radiusPrivate = this.getPrivate("radius", 0);
      var innerRadiusPrivate = this.getPrivate("innerRadius", 0);
      var baseRadius = this.get("baseRadius", 0);
      return innerRadiusPrivate + relativeToValue(baseRadius, radiusPrivate - innerRadiusPrivate);
    }
  });
  Object.defineProperty(RadialLabel2.prototype, "radius", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var inside = this.get("inside", false);
      return this.baseRadius() + this.get("radius", 0) * (inside ? -1 : 1);
    }
  });
  Object.defineProperty(RadialLabel2.prototype, "_updateChildren", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._updateChildren.call(this);
      if (this.isDirty("baseRadius") || this.isPrivateDirty("radius") || this.isPrivateDirty("innerRadius") || this.isDirty("labelAngle") || this.isDirty("radius") || this.isDirty("inside") || this.isDirty("orientation") || this.isDirty("textType")) {
        var textType = this.get("textType", "adjusted");
        var inside = this.get("inside", false);
        var orientation_1 = this.get("orientation");
        var labelAngle = normalizeAngle(this.get("labelAngle", 0));
        this._text.set("startAngle", this.get("labelAngle", 0));
        this._text.set("inside", inside);
        var sin3 = sin(labelAngle);
        var cos3 = cos(labelAngle);
        var baseRadius = this.baseRadius();
        var radius = this.radius();
        this._display.angle = 0;
        if (textType == "circular") {
          this.setAll({
            paddingTop: 0,
            paddingBottom: 0,
            paddingLeft: 0,
            paddingRight: 0
          });
          this._text.set("orientation", orientation_1);
          this._text.set("radius", radius);
        } else {
          if (baseRadius == 0) {
            labelAngle = 0;
            radius = 0;
          }
          var x2 = radius * cos3;
          var y2 = radius * sin3;
          if (textType == "radial") {
            this.setRaw("x", x2);
            this.setRaw("y", y2);
            if (labelAngle < 90 || labelAngle > 270 || orientation_1 != "auto") {
              this._display.angle = labelAngle;
              this._flipped = false;
            } else {
              this._display.angle = labelAngle + 180;
              this._flipped = true;
            }
            this._dirty.rotation = false;
          } else if (textType == "adjusted") {
            this.setRaw("centerX", p50);
            this.setRaw("centerY", p50);
            this.setRaw("x", x2);
            this.setRaw("y", y2);
          } else if (textType == "regular") {
            this.setRaw("x", x2);
            this.setRaw("y", y2);
          }
        }
        this.markDirtyPosition();
        this.markDirtyBounds();
      }
    }
  });
  Object.defineProperty(RadialLabel2.prototype, "_updatePosition", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var textType = this.get("textType", "regular");
      var inside = this.get("inside", false);
      var dx = 0;
      var dy = 0;
      var labelAngle = this.get("labelAngle", 0);
      var bounds = this.localBounds();
      var w = bounds.right - bounds.left;
      var h = bounds.bottom - bounds.top;
      if (textType == "radial") {
        if (this._flipped) {
          var centerX = this.get("centerX");
          if (centerX instanceof Percent) {
            w = w * (1 - centerX.value * 2);
          }
          dx = w * cos(labelAngle);
          dy = w * sin(labelAngle);
        }
      } else if (!inside && textType == "adjusted") {
        dx = w / 2 * cos(labelAngle);
        dy = h / 2 * sin(labelAngle);
      }
      this.setRaw("dx", dx);
      this.setRaw("dy", dy);
      _super.prototype._updatePosition.call(this);
    }
  });
  Object.defineProperty(RadialLabel2.prototype, "text", {
    get: function() {
      return this._text;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(RadialLabel2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "RadialLabel"
  });
  Object.defineProperty(RadialLabel2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Label.classNames.concat([RadialLabel2.className])
  });
  return RadialLabel2;
}(Label);

// node_modules/@amcharts/amcharts5/.internal/core/render/Triangle.js
var Triangle = function(_super) {
  __extends(Triangle2, _super);
  function Triangle2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(Triangle2.prototype, "_beforeChanged", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._beforeChanged.call(this);
      if (this.isDirty("width") || this.isDirty("height") || this.isPrivateDirty("width") || this.isPrivateDirty("height")) {
        this._clear = true;
      }
    }
  });
  Object.defineProperty(Triangle2.prototype, "_changed", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._changed.call(this);
      if (this._clear && !this.get("draw")) {
        this._draw();
      }
    }
  });
  Object.defineProperty(Triangle2.prototype, "_draw", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var w = this.width();
      var h = this.height();
      var display = this._display;
      display.moveTo(-w / 2, h / 2);
      display.lineTo(0, -h / 2);
      display.lineTo(w / 2, h / 2);
      display.lineTo(-w / 2, h / 2);
    }
  });
  Object.defineProperty(Triangle2.prototype, "_updateSize", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this.markDirty();
      this._clear = true;
    }
  });
  Object.defineProperty(Triangle2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Triangle"
  });
  Object.defineProperty(Triangle2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Graphics.classNames.concat([Triangle2.className])
  });
  return Triangle2;
}(Graphics);

// node_modules/@amcharts/amcharts5/.internal/core/render/Scrollbar.js
var Scrollbar = function(_super) {
  __extends(Scrollbar2, _super);
  function Scrollbar2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    Object.defineProperty(_this, "thumb", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this._makeThumb()
    });
    Object.defineProperty(_this, "startGrip", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this._makeButton()
    });
    Object.defineProperty(_this, "endGrip", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this._makeButton()
    });
    Object.defineProperty(_this, "_thumbBusy", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "_startDown", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "_endDown", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "_thumbDown", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "_gripDown", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    return _this;
  }
  Object.defineProperty(Scrollbar2.prototype, "_addOrientationClass", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._settings.themeTags = mergeTags(this._settings.themeTags, ["scrollbar", this._settings.orientation]);
      if (!this._settings.background) {
        this._settings.background = RoundedRectangle.new(this._root, {
          themeTags: mergeTags(this._settings.themeTags, ["main", "background"])
        });
      }
    }
  });
  Object.defineProperty(Scrollbar2.prototype, "_makeButton", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this.children.push(Button.new(this._root, {
        themeTags: ["resize", "button", this.get("orientation")],
        icon: Graphics.new(this._root, {
          themeTags: ["icon"]
        })
      }));
    }
  });
  Object.defineProperty(Scrollbar2.prototype, "_makeThumb", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      return this.children.push(RoundedRectangle.new(this._root, {
        themeTags: ["thumb", this.get("orientation")]
      }));
    }
  });
  Object.defineProperty(Scrollbar2.prototype, "_handleAnimation", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(animation) {
      var _this = this;
      if (animation) {
        this._disposers.push(animation.events.on("stopped", function() {
          _this.setPrivateRaw("isBusy", false);
          _this._thumbBusy = false;
        }));
      }
    }
  });
  Object.defineProperty(Scrollbar2.prototype, "_afterNew", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      this._addOrientationClass();
      _super.prototype._afterNew.call(this);
      var startGrip = this.startGrip;
      var endGrip = this.endGrip;
      var thumb = this.thumb;
      var background = this.get("background");
      if (background) {
        this._disposers.push(background.events.on("click", function(event) {
          _this.setPrivateRaw("isBusy", true);
          var point5 = _this._display.toLocal(event.point);
          var w = _this.width();
          var h = _this.height();
          var orientation = _this.get("orientation");
          var newMiddle;
          if (orientation == "vertical") {
            newMiddle = (point5.y - thumb.height() / 2) / h;
          } else {
            newMiddle = (point5.x - thumb.width() / 2) / w;
          }
          var newCoordinate;
          var key;
          if (orientation == "vertical") {
            newCoordinate = newMiddle * h;
            key = "y";
          } else {
            newCoordinate = newMiddle * w;
            key = "x";
          }
          var duration = _this.get("animationDuration", 0);
          if (duration > 0) {
            _this._thumbBusy = true;
            _this._handleAnimation(_this.thumb.animate({ key, to: newCoordinate, duration, easing: _this.get("animationEasing") }));
          } else {
            _this.thumb.set(key, newCoordinate);
            _this._root.events.on("frameended", function() {
              _this.setPrivateRaw("isBusy", false);
            });
          }
        }));
      }
      this._disposers.push(thumb.events.on("dblclick", function(event) {
        if (!isLocalEvent(event.originalEvent, _this)) {
          return;
        }
        var duration = _this.get("animationDuration", 0);
        var easing = _this.get("animationEasing");
        _this.animate({ key: "start", to: 0, duration, easing });
        _this.animate({ key: "end", to: 1, duration, easing });
      }));
      this._disposers.push(startGrip.events.on("pointerdown", function() {
        _this.setPrivateRaw("isBusy", true);
        _this._startDown = true;
        _this._gripDown = "start";
      }));
      this._disposers.push(endGrip.events.on("pointerdown", function() {
        _this.setPrivateRaw("isBusy", true);
        _this._endDown = true;
        _this._gripDown = "end";
      }));
      this._disposers.push(thumb.events.on("pointerdown", function() {
        _this.setPrivateRaw("isBusy", true);
        _this._thumbDown = true;
        _this._gripDown = void 0;
      }));
      this._disposers.push(startGrip.events.on("globalpointerup", function() {
        if (_this._startDown) {
          _this.setPrivateRaw("isBusy", false);
        }
        _this._startDown = false;
      }));
      this._disposers.push(endGrip.events.on("globalpointerup", function() {
        if (_this._endDown) {
          _this.setPrivateRaw("isBusy", false);
        }
        _this._endDown = false;
      }));
      this._disposers.push(thumb.events.on("globalpointerup", function() {
        if (_this._thumbDown) {
          _this.setPrivateRaw("isBusy", false);
        }
        _this._thumbDown = false;
      }));
      this._disposers.push(startGrip.on("x", function() {
        _this._updateThumb();
      }));
      this._disposers.push(endGrip.on("x", function() {
        _this._updateThumb();
      }));
      this._disposers.push(startGrip.on("y", function() {
        _this._updateThumb();
      }));
      this._disposers.push(endGrip.on("y", function() {
        _this._updateThumb();
      }));
      this._disposers.push(thumb.events.on("positionchanged", function() {
        _this._updateGripsByThumb();
      }));
      if (this.get("orientation") == "vertical") {
        startGrip.set("x", 0);
        endGrip.set("x", 0);
        this._disposers.push(thumb.adapters.add("y", function(value) {
          return Math.max(Math.min(Number(value), _this.height() - thumb.height()), 0);
        }));
        this._disposers.push(thumb.adapters.add("x", function(_value) {
          return _this.width() / 2;
        }));
        this._disposers.push(startGrip.adapters.add("x", function(_value) {
          return _this.width() / 2;
        }));
        this._disposers.push(endGrip.adapters.add("x", function(_value) {
          return _this.width() / 2;
        }));
        this._disposers.push(startGrip.adapters.add("y", function(value) {
          return Math.max(Math.min(Number(value), _this.height()), 0);
        }));
        this._disposers.push(endGrip.adapters.add("y", function(value) {
          return Math.max(Math.min(Number(value), _this.height()), 0);
        }));
      } else {
        startGrip.set("y", 0);
        endGrip.set("y", 0);
        this._disposers.push(thumb.adapters.add("x", function(value) {
          return Math.max(Math.min(Number(value), _this.width() - thumb.width()), 0);
        }));
        this._disposers.push(thumb.adapters.add("y", function(_value) {
          return _this.height() / 2;
        }));
        this._disposers.push(startGrip.adapters.add("y", function(_value) {
          return _this.height() / 2;
        }));
        this._disposers.push(endGrip.adapters.add("y", function(_value) {
          return _this.height() / 2;
        }));
        this._disposers.push(startGrip.adapters.add("x", function(value) {
          return Math.max(Math.min(Number(value), _this.width()), 0);
        }));
        this._disposers.push(endGrip.adapters.add("x", function(value) {
          return Math.max(Math.min(Number(value), _this.width()), 0);
        }));
      }
    }
  });
  Object.defineProperty(Scrollbar2.prototype, "_updateChildren", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._updateChildren.call(this);
      if (this.isDirty("end") || this.isDirty("start") || this._sizeDirty) {
        this.updateGrips();
      }
    }
  });
  Object.defineProperty(Scrollbar2.prototype, "_changed", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._changed.call(this);
      if (this.isDirty("start") || this.isDirty("end")) {
        var eventType = "rangechanged";
        if (this.events.isEnabled(eventType)) {
          this.events.dispatch(eventType, { type: eventType, target: this, start: this.get("start", 0), end: this.get("end", 1), grip: this._gripDown });
        }
      }
    }
  });
  Object.defineProperty(Scrollbar2.prototype, "updateGrips", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var startGrip = this.startGrip;
      var endGrip = this.endGrip;
      var orientation = this.get("orientation");
      var height = this.height();
      var width = this.width();
      if (orientation == "vertical") {
        startGrip.set("y", height * this.get("start", 0));
        endGrip.set("y", height * this.get("end", 1));
      } else {
        startGrip.set("x", width * this.get("start", 0));
        endGrip.set("x", width * this.get("end", 1));
      }
      var valueFunction = this.getPrivate("positionTextFunction");
      var from = Math.round(this.get("start", 0) * 100);
      var to = Math.round(this.get("end", 0) * 100);
      var fromValue;
      var toValue;
      if (valueFunction) {
        fromValue = valueFunction.call(this, this.get("start", 0));
        toValue = valueFunction.call(this, this.get("end", 0));
      } else {
        fromValue = from + "%";
        toValue = to + "%";
      }
      startGrip.set("ariaLabel", this._t("From %1", void 0, fromValue));
      startGrip.set("ariaValueNow", "" + from);
      startGrip.set("ariaValueText", from + "%");
      startGrip.set("ariaValueMin", "0");
      startGrip.set("ariaValueMax", "100");
      endGrip.set("ariaLabel", this._t("To %1", void 0, toValue));
      endGrip.set("ariaValueNow", "" + to);
      endGrip.set("ariaValueText", to + "%");
      endGrip.set("ariaValueMin", "0");
      endGrip.set("ariaValueMax", "100");
    }
  });
  Object.defineProperty(Scrollbar2.prototype, "_updateThumb", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var thumb = this.thumb;
      var startGrip = this.startGrip;
      var endGrip = this.endGrip;
      var height = this.height();
      var width = this.width();
      var x0 = startGrip.x();
      var x1 = endGrip.x();
      var y0 = startGrip.y();
      var y1 = endGrip.y();
      var start = 0;
      var end = 1;
      if (this.get("orientation") == "vertical") {
        if (isNumber(y0) && isNumber(y1)) {
          if (!this._thumbBusy && !thumb.isDragging()) {
            thumb.set("height", y1 - y0);
            thumb.set("y", y0);
          }
          start = y0 / height;
          end = y1 / height;
        }
      } else {
        if (isNumber(x0) && isNumber(x1)) {
          if (!this._thumbBusy && !thumb.isDragging()) {
            thumb.set("width", x1 - x0);
            thumb.set("x", x0);
          }
          start = x0 / width;
          end = x1 / width;
        }
      }
      if (this.getPrivate("isBusy") && (this.get("start") != start || this.get("end") != end)) {
        this.set("start", start);
        this.set("end", end);
      }
      var valueFunction = this.getPrivate("positionTextFunction");
      var from = Math.round(this.get("start", 0) * 100);
      var to = Math.round(this.get("end", 0) * 100);
      var fromValue;
      var toValue;
      if (valueFunction) {
        fromValue = valueFunction.call(this, this.get("start", 0));
        toValue = valueFunction.call(this, this.get("end", 0));
      } else {
        fromValue = from + "%";
        toValue = to + "%";
      }
      thumb.set("ariaLabel", this._t("From %1 to %2", void 0, fromValue, toValue));
      thumb.set("ariaValueNow", "" + from);
      thumb.set("ariaValueText", from + "%");
    }
  });
  Object.defineProperty(Scrollbar2.prototype, "_updateGripsByThumb", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var thumb = this.thumb;
      var startGrip = this.startGrip;
      var endGrip = this.endGrip;
      if (this.get("orientation") == "vertical") {
        var thumbSize = thumb.height();
        startGrip.set("y", thumb.y());
        endGrip.set("y", thumb.y() + thumbSize);
      } else {
        var thumbSize = thumb.width();
        startGrip.set("x", thumb.x());
        endGrip.set("x", thumb.x() + thumbSize);
      }
    }
  });
  Object.defineProperty(Scrollbar2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Scrollbar"
  });
  Object.defineProperty(Scrollbar2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Container.classNames.concat([Scrollbar2.className])
  });
  return Scrollbar2;
}(Container);

// node_modules/@amcharts/amcharts5/.internal/core/render/Slider.js
var Slider = function(_super) {
  __extends(Slider2, _super);
  function Slider2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(Slider2.prototype, "_afterNew", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this._addOrientationClass();
      _super.prototype._afterNew.call(this);
      this.endGrip.setPrivate("visible", false);
      this.thumb.setPrivate("visible", false);
    }
  });
  Object.defineProperty(Slider2.prototype, "updateGrips", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype.updateGrips.call(this);
      var startGrip = this.startGrip;
      this.endGrip.setAll({ x: startGrip.x(), y: startGrip.y() });
      this.setRaw("end", this.get("start"));
    }
  });
  Object.defineProperty(Slider2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Slider"
  });
  Object.defineProperty(Slider2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Scrollbar.classNames.concat([Slider2.className])
  });
  return Slider2;
}(Scrollbar);

// node_modules/d3-path/src/path.js
var pi = Math.PI;
var tau = 2 * pi;
var epsilon = 1e-6;
var tauEpsilon = tau - epsilon;
function Path() {
  this._x0 = this._y0 = this._x1 = this._y1 = null;
  this._ = "";
}
function path() {
  return new Path();
}
Path.prototype = path.prototype = {
  constructor: Path,
  moveTo: function(x2, y2) {
    this._ += "M" + (this._x0 = this._x1 = +x2) + "," + (this._y0 = this._y1 = +y2);
  },
  closePath: function() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  },
  lineTo: function(x2, y2) {
    this._ += "L" + (this._x1 = +x2) + "," + (this._y1 = +y2);
  },
  quadraticCurveTo: function(x1, y1, x2, y2) {
    this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x2) + "," + (this._y1 = +y2);
  },
  bezierCurveTo: function(x1, y1, x2, y2, x3, y3) {
    this._ += "C" + +x1 + "," + +y1 + "," + +x2 + "," + +y2 + "," + (this._x1 = +x3) + "," + (this._y1 = +y3);
  },
  arcTo: function(x1, y1, x2, y2, r) {
    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
    var x0 = this._x1, y0 = this._y1, x21 = x2 - x1, y21 = y2 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
    if (r < 0)
      throw new Error("negative radius: " + r);
    if (this._x1 === null) {
      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
    } else if (!(l01_2 > epsilon))
      ;
    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
      this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
    } else {
      var x20 = x2 - x0, y20 = y2 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
      if (Math.abs(t01 - 1) > epsilon) {
        this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
      }
      this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
    }
  },
  arc: function(x2, y2, r, a0, a1, ccw) {
    x2 = +x2, y2 = +y2, r = +r, ccw = !!ccw;
    var dx = r * Math.cos(a0), dy = r * Math.sin(a0), x0 = x2 + dx, y0 = y2 + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
    if (r < 0)
      throw new Error("negative radius: " + r);
    if (this._x1 === null) {
      this._ += "M" + x0 + "," + y0;
    } else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
      this._ += "L" + x0 + "," + y0;
    }
    if (!r)
      return;
    if (da < 0)
      da = da % tau + tau;
    if (da > tauEpsilon) {
      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x2 - dx) + "," + (y2 - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
    } else if (da > epsilon) {
      this._ += "A" + r + "," + r + ",0," + +(da >= pi) + "," + cw + "," + (this._x1 = x2 + r * Math.cos(a1)) + "," + (this._y1 = y2 + r * Math.sin(a1));
    }
  },
  rect: function(x2, y2, w, h) {
    this._ += "M" + (this._x0 = this._x1 = +x2) + "," + (this._y0 = this._y1 = +y2) + "h" + +w + "v" + +h + "h" + -w + "Z";
  },
  toString: function() {
    return this._;
  }
};
var path_default = path;

// node_modules/d3-shape/src/constant.js
function constant_default(x2) {
  return function constant() {
    return x2;
  };
}

// node_modules/d3-shape/src/math.js
var abs = Math.abs;
var atan2 = Math.atan2;
var cos2 = Math.cos;
var max = Math.max;
var min = Math.min;
var sin2 = Math.sin;
var sqrt = Math.sqrt;
var epsilon2 = 1e-12;
var pi2 = Math.PI;
var halfPi = pi2 / 2;
var tau2 = 2 * pi2;
function acos(x2) {
  return x2 > 1 ? 0 : x2 < -1 ? pi2 : Math.acos(x2);
}
function asin(x2) {
  return x2 >= 1 ? halfPi : x2 <= -1 ? -halfPi : Math.asin(x2);
}

// node_modules/d3-shape/src/arc.js
function arcInnerRadius(d) {
  return d.innerRadius;
}
function arcOuterRadius(d) {
  return d.outerRadius;
}
function arcStartAngle(d) {
  return d.startAngle;
}
function arcEndAngle(d) {
  return d.endAngle;
}
function arcPadAngle(d) {
  return d && d.padAngle;
}
function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
  var x10 = x1 - x0, y10 = y1 - y0, x32 = x3 - x2, y32 = y3 - y2, t = y32 * x10 - x32 * y10;
  if (t * t < epsilon2)
    return;
  t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
  return [x0 + t * x10, y0 + t * y10];
}
function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
  var x01 = x0 - x1, y01 = y0 - y1, lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x11 = x0 + ox, y11 = y0 + oy, x10 = x1 + ox, y10 = y1 + oy, x00 = (x11 + x10) / 2, y00 = (y11 + y10) / 2, dx = x10 - x11, dy = y10 - y11, d2 = dx * dx + dy * dy, r = r1 - rc, D = x11 * y10 - x10 * y11, d = (dy < 0 ? -1 : 1) * sqrt(max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x00, dy0 = cy0 - y00, dx1 = cx1 - x00, dy1 = cy1 - y00;
  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1)
    cx0 = cx1, cy0 = cy1;
  return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r - 1),
    y11: cy0 * (r1 / r - 1)
  };
}
function arc_default() {
  var innerRadius = arcInnerRadius, outerRadius = arcOuterRadius, cornerRadius = constant_default(0), padRadius = null, startAngle = arcStartAngle, endAngle = arcEndAngle, padAngle = arcPadAngle, context = null;
  function arc() {
    var buffer, r, r0 = +innerRadius.apply(this, arguments), r1 = +outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) - halfPi, a1 = endAngle.apply(this, arguments) - halfPi, da = abs(a1 - a0), cw = a1 > a0;
    if (!context)
      context = buffer = path_default();
    if (r1 < r0)
      r = r1, r1 = r0, r0 = r;
    if (!(r1 > epsilon2))
      context.moveTo(0, 0);
    else if (da > tau2 - epsilon2) {
      context.moveTo(r1 * cos2(a0), r1 * sin2(a0));
      context.arc(0, 0, r1, a0, a1, !cw);
      if (r0 > epsilon2) {
        context.moveTo(r0 * cos2(a1), r0 * sin2(a1));
        context.arc(0, 0, r0, a1, a0, cw);
      }
    } else {
      var a01 = a0, a11 = a1, a00 = a0, a10 = a1, da0 = da, da1 = da, ap = padAngle.apply(this, arguments) / 2, rp = ap > epsilon2 && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)), rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)), rc0 = rc, rc1 = rc, t0, t1;
      if (rp > epsilon2) {
        var p02 = asin(rp / r0 * sin2(ap)), p1 = asin(rp / r1 * sin2(ap));
        if ((da0 -= p02 * 2) > epsilon2)
          p02 *= cw ? 1 : -1, a00 += p02, a10 -= p02;
        else
          da0 = 0, a00 = a10 = (a0 + a1) / 2;
        if ((da1 -= p1 * 2) > epsilon2)
          p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;
        else
          da1 = 0, a01 = a11 = (a0 + a1) / 2;
      }
      var x01 = r1 * cos2(a01), y01 = r1 * sin2(a01), x10 = r0 * cos2(a10), y10 = r0 * sin2(a10);
      if (rc > epsilon2) {
        var x11 = r1 * cos2(a11), y11 = r1 * sin2(a11), x00 = r0 * cos2(a00), y00 = r0 * sin2(a00), oc;
        if (da < pi2 && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
          var ax = x01 - oc[0], ay = y01 - oc[1], bx = x11 - oc[0], by = y11 - oc[1], kc = 1 / sin2(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2), lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
          rc0 = min(rc, (r0 - lc) / (kc - 1));
          rc1 = min(rc, (r1 - lc) / (kc + 1));
        }
      }
      if (!(da1 > epsilon2))
        context.moveTo(x01, y01);
      else if (rc1 > epsilon2) {
        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);
        if (rc1 < rc)
          context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);
        else {
          context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
          context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
          context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
        }
      } else
        context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);
      if (!(r0 > epsilon2) || !(da0 > epsilon2))
        context.lineTo(x10, y10);
      else if (rc0 > epsilon2) {
        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);
        if (rc0 < rc)
          context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);
        else {
          context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
          context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
          context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
        }
      } else
        context.arc(0, 0, r0, a10, a00, cw);
    }
    context.closePath();
    if (buffer)
      return context = null, buffer + "" || null;
  }
  arc.centroid = function() {
    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a2 = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi2 / 2;
    return [cos2(a2) * r, sin2(a2) * r];
  };
  arc.innerRadius = function(_) {
    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant_default(+_), arc) : innerRadius;
  };
  arc.outerRadius = function(_) {
    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant_default(+_), arc) : outerRadius;
  };
  arc.cornerRadius = function(_) {
    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant_default(+_), arc) : cornerRadius;
  };
  arc.padRadius = function(_) {
    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant_default(+_), arc) : padRadius;
  };
  arc.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant_default(+_), arc) : startAngle;
  };
  arc.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant_default(+_), arc) : endAngle;
  };
  arc.padAngle = function(_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant_default(+_), arc) : padAngle;
  };
  arc.context = function(_) {
    return arguments.length ? (context = _ == null ? null : _, arc) : context;
  };
  return arc;
}

// node_modules/d3-shape/src/array.js
var slice = Array.prototype.slice;

// node_modules/d3-shape/src/curve/linear.js
function Linear(context) {
  this._context = context;
}
Linear.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
        break;
      case 1:
        this._point = 2;
      default:
        this._context.lineTo(x2, y2);
        break;
    }
  }
};
function linear_default(context) {
  return new Linear(context);
}

// node_modules/d3-shape/src/curve/radial.js
var curveRadialLinear = curveRadial(linear_default);
function Radial(curve) {
  this._curve = curve;
}
Radial.prototype = {
  areaStart: function() {
    this._curve.areaStart();
  },
  areaEnd: function() {
    this._curve.areaEnd();
  },
  lineStart: function() {
    this._curve.lineStart();
  },
  lineEnd: function() {
    this._curve.lineEnd();
  },
  point: function(a2, r) {
    this._curve.point(r * Math.sin(a2), r * -Math.cos(a2));
  }
};
function curveRadial(curve) {
  function radial(context) {
    return new Radial(curve(context));
  }
  radial._curve = curve;
  return radial;
}

// node_modules/d3-shape/src/symbol/asterisk.js
var sqrt3 = sqrt(3);

// node_modules/d3-shape/src/symbol/diamond.js
var tan30 = sqrt(1 / 3);
var tan30_2 = tan30 * 2;

// node_modules/d3-shape/src/symbol/star.js
var kr = sin2(pi2 / 10) / sin2(7 * pi2 / 10);
var kx = sin2(tau2 / 10) * kr;
var ky = -cos2(tau2 / 10) * kr;

// node_modules/d3-shape/src/symbol/triangle.js
var sqrt32 = sqrt(3);

// node_modules/d3-shape/src/symbol/triangle2.js
var sqrt33 = sqrt(3);

// node_modules/d3-shape/src/symbol/wye.js
var s = sqrt(3) / 2;
var k = 1 / sqrt(12);
var a = (k / 2 + 1) * 3;

// node_modules/d3-shape/src/noop.js
function noop_default() {
}

// node_modules/d3-shape/src/curve/basis.js
function point(that, x2, y2) {
  that._context.bezierCurveTo((2 * that._x0 + that._x1) / 3, (2 * that._y0 + that._y1) / 3, (that._x0 + 2 * that._x1) / 3, (that._y0 + 2 * that._y1) / 3, (that._x0 + 4 * that._x1 + x2) / 6, (that._y0 + 4 * that._y1 + y2) / 6);
}
function Basis(context) {
  this._context = context;
}
Basis.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 3:
        point(this, this._x1, this._y1);
      case 2:
        this._context.lineTo(this._x1, this._y1);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
      default:
        point(this, x2, y2);
        break;
    }
    this._x0 = this._x1, this._x1 = x2;
    this._y0 = this._y1, this._y1 = y2;
  }
};

// node_modules/d3-shape/src/curve/basisClosed.js
function BasisClosed(context) {
  this._context = context;
}
BasisClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x2, this._y2);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x2, this._y2);
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        break;
      }
    }
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x2 = x2, this._y2 = y2;
        break;
      case 1:
        this._point = 2;
        this._x3 = x2, this._y3 = y2;
        break;
      case 2:
        this._point = 3;
        this._x4 = x2, this._y4 = y2;
        this._context.moveTo((this._x0 + 4 * this._x1 + x2) / 6, (this._y0 + 4 * this._y1 + y2) / 6);
        break;
      default:
        point(this, x2, y2);
        break;
    }
    this._x0 = this._x1, this._x1 = x2;
    this._y0 = this._y1, this._y1 = y2;
  }
};

// node_modules/d3-shape/src/curve/basisOpen.js
function BasisOpen(context) {
  this._context = context;
}
BasisOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        var x0 = (this._x0 + 4 * this._x1 + x2) / 6, y0 = (this._y0 + 4 * this._y1 + y2) / 6;
        this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
        break;
      case 3:
        this._point = 4;
      default:
        point(this, x2, y2);
        break;
    }
    this._x0 = this._x1, this._x1 = x2;
    this._y0 = this._y1, this._y1 = y2;
  }
};

// node_modules/d3-shape/src/curve/bundle.js
function Bundle(context, beta) {
  this._basis = new Basis(context);
  this._beta = beta;
}
Bundle.prototype = {
  lineStart: function() {
    this._x = [];
    this._y = [];
    this._basis.lineStart();
  },
  lineEnd: function() {
    var x2 = this._x, y2 = this._y, j = x2.length - 1;
    if (j > 0) {
      var x0 = x2[0], y0 = y2[0], dx = x2[j] - x0, dy = y2[j] - y0, i = -1, t;
      while (++i <= j) {
        t = i / j;
        this._basis.point(this._beta * x2[i] + (1 - this._beta) * (x0 + t * dx), this._beta * y2[i] + (1 - this._beta) * (y0 + t * dy));
      }
    }
    this._x = this._y = null;
    this._basis.lineEnd();
  },
  point: function(x2, y2) {
    this._x.push(+x2);
    this._y.push(+y2);
  }
};
var bundle_default = function custom(beta) {
  function bundle(context) {
    return beta === 1 ? new Basis(context) : new Bundle(context, beta);
  }
  bundle.beta = function(beta2) {
    return custom(+beta2);
  };
  return bundle;
}(0.85);

// node_modules/d3-shape/src/curve/cardinal.js
function point2(that, x2, y2) {
  that._context.bezierCurveTo(that._x1 + that._k * (that._x2 - that._x0), that._y1 + that._k * (that._y2 - that._y0), that._x2 + that._k * (that._x1 - x2), that._y2 + that._k * (that._y1 - y2), that._x2, that._y2);
}
function Cardinal(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
Cardinal.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);
        break;
      case 3:
        point2(this, this._x1, this._y1);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
        break;
      case 1:
        this._point = 2;
        this._x1 = x2, this._y1 = y2;
        break;
      case 2:
        this._point = 3;
      default:
        point2(this, x2, y2);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
  }
};
var cardinal_default = function custom2(tension) {
  function cardinal(context) {
    return new Cardinal(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom2(+tension2);
  };
  return cardinal;
}(0);

// node_modules/d3-shape/src/curve/cardinalClosed.js
function CardinalClosed(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
CardinalClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x2, this._y3 = y2;
        break;
      case 1:
        this._point = 2;
        this._context.moveTo(this._x4 = x2, this._y4 = y2);
        break;
      case 2:
        this._point = 3;
        this._x5 = x2, this._y5 = y2;
        break;
      default:
        point2(this, x2, y2);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
  }
};
var cardinalClosed_default = function custom3(tension) {
  function cardinal(context) {
    return new CardinalClosed(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom3(+tension2);
  };
  return cardinal;
}(0);

// node_modules/d3-shape/src/curve/cardinalOpen.js
function CardinalOpen(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
CardinalOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;
      case 3:
        this._point = 4;
      default:
        point2(this, x2, y2);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
  }
};
var cardinalOpen_default = function custom4(tension) {
  function cardinal(context) {
    return new CardinalOpen(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom4(+tension2);
  };
  return cardinal;
}(0);

// node_modules/d3-shape/src/curve/catmullRom.js
function point3(that, x2, y2) {
  var x1 = that._x1, y1 = that._y1, x22 = that._x2, y22 = that._y2;
  if (that._l01_a > epsilon2) {
    var a2 = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x1 = (x1 * a2 - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
    y1 = (y1 * a2 - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
  }
  if (that._l23_a > epsilon2) {
    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x22 = (x22 * b + that._x1 * that._l23_2a - x2 * that._l12_2a) / m;
    y22 = (y22 * b + that._y1 * that._l23_2a - y2 * that._l12_2a) / m;
  }
  that._context.bezierCurveTo(x1, y1, x22, y22, that._x2, that._y2);
}
function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRom.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);
        break;
      case 3:
        this.point(this._x2, this._y2);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    if (this._point) {
      var x23 = this._x2 - x2, y23 = this._y2 - y2;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
      default:
        point3(this, x2, y2);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
  }
};
var catmullRom_default = function custom5(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom5(+alpha2);
  };
  return catmullRom;
}(0.5);

// node_modules/d3-shape/src/curve/catmullRomClosed.js
function CatmullRomClosed(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRomClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    if (this._point) {
      var x23 = this._x2 - x2, y23 = this._y2 - y2;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x2, this._y3 = y2;
        break;
      case 1:
        this._point = 2;
        this._context.moveTo(this._x4 = x2, this._y4 = y2);
        break;
      case 2:
        this._point = 3;
        this._x5 = x2, this._y5 = y2;
        break;
      default:
        point3(this, x2, y2);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
  }
};
var catmullRomClosed_default = function custom6(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom6(+alpha2);
  };
  return catmullRom;
}(0.5);

// node_modules/d3-shape/src/curve/catmullRomOpen.js
function CatmullRomOpen(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRomOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    if (this._point) {
      var x23 = this._x2 - x2, y23 = this._y2 - y2;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;
      case 3:
        this._point = 4;
      default:
        point3(this, x2, y2);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x2;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y2;
  }
};
var catmullRomOpen_default = function custom7(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom7(+alpha2);
  };
  return catmullRom;
}(0.5);

// node_modules/d3-shape/src/curve/linearClosed.js
function LinearClosed(context) {
  this._context = context;
}
LinearClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._point)
      this._context.closePath();
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    if (this._point)
      this._context.lineTo(x2, y2);
    else
      this._point = 1, this._context.moveTo(x2, y2);
  }
};

// node_modules/d3-shape/src/curve/monotone.js
function sign(x2) {
  return x2 < 0 ? -1 : 1;
}
function slope3(that, x2, y2) {
  var h0 = that._x1 - that._x0, h1 = x2 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0), p = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
}
function slope2(that, t) {
  var h = that._x1 - that._x0;
  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
}
function point4(that, t0, t1) {
  var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
}
function MonotoneX(context) {
  this._context = context;
}
MonotoneX.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x1, this._y1);
        break;
      case 3:
        point4(this, this._t0, slope2(this, this._t0));
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x2, y2) {
    var t1 = NaN;
    x2 = +x2, y2 = +y2;
    if (x2 === this._x1 && y2 === this._y1)
      return;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        point4(this, slope2(this, t1 = slope3(this, x2, y2)), t1);
        break;
      default:
        point4(this, this._t0, t1 = slope3(this, x2, y2));
        break;
    }
    this._x0 = this._x1, this._x1 = x2;
    this._y0 = this._y1, this._y1 = y2;
    this._t0 = t1;
  }
};
function MonotoneY(context) {
  this._context = new ReflectContext(context);
}
(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x2, y2) {
  MonotoneX.prototype.point.call(this, y2, x2);
};
function ReflectContext(context) {
  this._context = context;
}
ReflectContext.prototype = {
  moveTo: function(x2, y2) {
    this._context.moveTo(y2, x2);
  },
  closePath: function() {
    this._context.closePath();
  },
  lineTo: function(x2, y2) {
    this._context.lineTo(y2, x2);
  },
  bezierCurveTo: function(x1, y1, x2, y2, x3, y3) {
    this._context.bezierCurveTo(y1, x1, y2, x2, y3, x3);
  }
};

// node_modules/d3-shape/src/curve/natural.js
function Natural(context) {
  this._context = context;
}
Natural.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = [];
    this._y = [];
  },
  lineEnd: function() {
    var x2 = this._x, y2 = this._y, n = x2.length;
    if (n) {
      this._line ? this._context.lineTo(x2[0], y2[0]) : this._context.moveTo(x2[0], y2[0]);
      if (n === 2) {
        this._context.lineTo(x2[1], y2[1]);
      } else {
        var px = controlPoints(x2), py = controlPoints(y2);
        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x2[i1], y2[i1]);
        }
      }
    }
    if (this._line || this._line !== 0 && n === 1)
      this._context.closePath();
    this._line = 1 - this._line;
    this._x = this._y = null;
  },
  point: function(x2, y2) {
    this._x.push(+x2);
    this._y.push(+y2);
  }
};
function controlPoints(x2) {
  var i, n = x2.length - 1, m, a2 = new Array(n), b = new Array(n), r = new Array(n);
  a2[0] = 0, b[0] = 2, r[0] = x2[0] + 2 * x2[1];
  for (i = 1; i < n - 1; ++i)
    a2[i] = 1, b[i] = 4, r[i] = 4 * x2[i] + 2 * x2[i + 1];
  a2[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x2[n - 1] + x2[n];
  for (i = 1; i < n; ++i)
    m = a2[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
  a2[n - 1] = r[n - 1] / b[n - 1];
  for (i = n - 2; i >= 0; --i)
    a2[i] = (r[i] - a2[i + 1]) / b[i];
  b[n - 1] = (x2[n] + a2[n - 1]) / 2;
  for (i = 0; i < n - 1; ++i)
    b[i] = 2 * x2[i + 1] - a2[i + 1];
  return [a2, b];
}

// node_modules/d3-shape/src/curve/step.js
function Step(context, t) {
  this._context = context;
  this._t = t;
}
Step.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = this._y = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (0 < this._t && this._t < 1 && this._point === 2)
      this._context.lineTo(this._x, this._y);
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    if (this._line >= 0)
      this._t = 1 - this._t, this._line = 1 - this._line;
  },
  point: function(x2, y2) {
    x2 = +x2, y2 = +y2;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
        break;
      case 1:
        this._point = 2;
      default: {
        if (this._t <= 0) {
          this._context.lineTo(this._x, y2);
          this._context.lineTo(x2, y2);
        } else {
          var x1 = this._x * (1 - this._t) + x2 * this._t;
          this._context.lineTo(x1, this._y);
          this._context.lineTo(x1, y2);
        }
        break;
      }
    }
    this._x = x2, this._y = y2;
  }
};

// node_modules/@amcharts/amcharts5/.internal/core/render/Slice.js
var Slice = function(_super) {
  __extends(Slice2, _super);
  function Slice2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    Object.defineProperty(_this, "ix", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(_this, "iy", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: 0
    });
    Object.defineProperty(_this, "_generator", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: arc_default()
    });
    return _this;
  }
  Object.defineProperty(Slice2.prototype, "_getTooltipPoint", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var tooltipX = this.get("tooltipX");
      var tooltipY = this.get("tooltipY");
      var x2 = 0;
      var y2 = 0;
      if (isNumber(tooltipX)) {
        x2 = tooltipX;
      }
      if (isNumber(tooltipY)) {
        y2 = tooltipY;
      }
      var radius = this.get("radius", 0);
      var innerRadius = this.get("innerRadius", 0);
      var dRadius = this.get("dRadius", 0);
      var dInnerRadius = this.get("dInnerRadius", 0);
      radius += dRadius;
      innerRadius += dInnerRadius;
      if (innerRadius < 0) {
        innerRadius = radius + innerRadius;
      }
      if (tooltipX instanceof Percent) {
        x2 = this.ix * (innerRadius + (radius - innerRadius) * tooltipX.value);
      }
      if (tooltipY instanceof Percent) {
        y2 = this.iy * (innerRadius + (radius - innerRadius) * tooltipY.value);
      }
      if (this.get("arc") >= 360 && innerRadius == 0) {
        x2 = 0;
        y2 = 0;
      }
      return { x: x2, y: y2 };
    }
  });
  Object.defineProperty(Slice2.prototype, "_beforeChanged", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._beforeChanged.call(this);
      if (this.isDirty("radius") || this.isDirty("arc") || this.isDirty("innerRadius") || this.isDirty("startAngle") || this.isDirty("dRadius") || this.isDirty("dInnerRadius") || this.isDirty("cornerRadius")) {
        this._clear = true;
      }
    }
  });
  Object.defineProperty(Slice2.prototype, "_changed", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._changed.call(this);
      if (this._clear) {
        var startAngle = this.get("startAngle", 0);
        var arc_1 = this.get("arc", 0);
        var generator = this._generator;
        if (arc_1 < 0) {
          startAngle = startAngle + arc_1;
          arc_1 = arc_1 * -1;
        }
        if (arc_1 > 0.1) {
          generator.cornerRadius(this.get("cornerRadius", 0));
        }
        generator.context(this._display);
        var radius = this.get("radius", 0);
        var innerRadius = this.get("innerRadius", 0);
        var dRadius = this.get("dRadius", 0);
        var dInnerRadius = this.get("dInnerRadius", 0);
        radius += dRadius;
        innerRadius += dInnerRadius;
        if (innerRadius < 0) {
          innerRadius = radius + innerRadius;
        }
        generator({ innerRadius, outerRadius: radius, startAngle: (startAngle + 90) * RADIANS, endAngle: (startAngle + arc_1 + 90) * RADIANS });
        var middleAngle = startAngle + arc_1 / 2;
        this.ix = cos(middleAngle);
        this.iy = sin(middleAngle);
      }
      if (this.isDirty("shiftRadius")) {
        var shiftRadius = this.get("shiftRadius", 0);
        this.setRaw("dx", this.ix * shiftRadius);
        this.setRaw("dy", this.iy * shiftRadius);
        this.markDirtyPosition();
      }
    }
  });
  Object.defineProperty(Slice2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Slice"
  });
  Object.defineProperty(Slice2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Graphics.classNames.concat([Slice2.className])
  });
  return Slice2;
}(Graphics);

// node_modules/@amcharts/amcharts5/.internal/core/render/Tick.js
var Tick = function(_super) {
  __extends(Tick2, _super);
  function Tick2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(Tick2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Tick"
  });
  Object.defineProperty(Tick2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Line.classNames.concat([Tick2.className])
  });
  return Tick2;
}(Line);

// node_modules/@amcharts/amcharts5/.internal/core/util/Timezone.js
function parseDate(timezone, date) {
  var year = 0;
  var month = 0;
  var day = 1;
  var hour = 0;
  var minute = 0;
  var second = 0;
  var millisecond = 0;
  var weekday = 0;
  timezone.formatToParts(date).forEach(function(x2) {
    switch (x2.type) {
      case "year":
        year = +x2.value;
        break;
      case "month":
        month = +x2.value - 1;
        break;
      case "day":
        day = +x2.value;
        break;
      case "hour":
        hour = +x2.value;
        break;
      case "minute":
        minute = +x2.value;
        break;
      case "second":
        second = +x2.value;
        break;
      case "fractionalSecond":
        millisecond = +x2.value;
        break;
      case "weekday":
        switch (x2.value) {
          case "Sun":
            weekday = 0;
            break;
          case "Mon":
            weekday = 1;
            break;
          case "Tue":
            weekday = 2;
            break;
          case "Wed":
            weekday = 3;
            break;
          case "Thu":
            weekday = 4;
            break;
          case "Fri":
            weekday = 5;
            break;
          case "Sat":
            weekday = 6;
            break;
        }
    }
  });
  if (hour === 24) {
    hour = 0;
  }
  return { year, month, day, hour, minute, second, millisecond, weekday };
}
function toUTCDate(timezone, date) {
  var _a = parseDate(timezone, date), year = _a.year, month = _a.month, day = _a.day, hour = _a.hour, minute = _a.minute, second = _a.second, millisecond = _a.millisecond;
  return Date.UTC(year, month, day, hour, minute, second, millisecond);
}
var Timezone = function() {
  function Timezone2(timezone, isReal) {
    Object.defineProperty(this, "_utc", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_dtf", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    if (!isReal) {
      throw new Error("You cannot use `new Class()`, instead use `Class.new()`");
    }
    this.name = timezone;
    this._utc = new Intl.DateTimeFormat("UTC", {
      hour12: false,
      timeZone: "UTC",
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
      weekday: "short",
      fractionalSecondDigits: 3
    });
    this._dtf = new Intl.DateTimeFormat("UTC", {
      hour12: false,
      timeZone: timezone,
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
      weekday: "short",
      fractionalSecondDigits: 3
    });
  }
  Object.defineProperty(Timezone2, "new", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(timezone) {
      return new this(timezone, true);
    }
  });
  Object.defineProperty(Timezone2.prototype, "convertLocal", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(date) {
      var offset = this.offsetUTC(date);
      var userOffset = date.getTimezoneOffset();
      var output = new Date(date);
      output.setUTCMinutes(output.getUTCMinutes() - (offset - userOffset));
      var newUserOffset = output.getTimezoneOffset();
      if (userOffset != newUserOffset) {
        output.setUTCMinutes(output.getUTCMinutes() + newUserOffset - userOffset);
      }
      return output;
    }
  });
  Object.defineProperty(Timezone2.prototype, "offsetUTC", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(date) {
      var utc = toUTCDate(this._utc, date);
      var dtf = toUTCDate(this._dtf, date);
      return (utc - dtf) / 6e4;
    }
  });
  Object.defineProperty(Timezone2.prototype, "parseDate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(date) {
      return parseDate(this._dtf, date);
    }
  });
  return Timezone2;
}();

// node_modules/@amcharts/amcharts5/.internal/core/render/gradients/RadialGradient.js
var RadialGradient = function(_super) {
  __extends(RadialGradient2, _super);
  function RadialGradient2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(RadialGradient2.prototype, "getFill", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(target) {
      var bounds = this.getBounds(target);
      var x2 = 0;
      var y2 = 0;
      var l = bounds.left || 0;
      var r = bounds.right || 0;
      var t = bounds.top || 0;
      var b = bounds.bottom || 0;
      var width = r - l;
      var height = b - t;
      var radius = target.get("radius");
      if (isNumber(radius)) {
        x2 = 0;
        y2 = 0;
      } else {
        radius = Math.min(width, height) / 2;
        x2 = width / 2;
        y2 = height / 2;
      }
      var ux = this.get("x");
      var uy = this.get("y");
      if (ux != null) {
        x2 = relativeToValue(ux, width);
      }
      if (uy != null) {
        y2 = relativeToValue(uy, height);
      }
      var gradient = this._root._renderer.createRadialGradient(x2, y2, 0, x2, y2, radius);
      var stops = this.get("stops");
      if (stops) {
        var i_1 = 0;
        each(stops, function(stop) {
          var offset = stop.offset;
          if (!isNumber(offset)) {
            offset = i_1 / (stops.length - 1);
          }
          var opacity = stop.opacity;
          if (!isNumber(opacity)) {
            opacity = 1;
          }
          var color2 = stop.color;
          if (color2) {
            var lighten = stop.lighten;
            if (lighten) {
              color2 = Color.lighten(color2, lighten);
            }
            var brighten = stop.brighten;
            if (brighten) {
              color2 = Color.brighten(color2, brighten);
            }
            gradient.addColorStop(offset, "rgba(" + color2.r + "," + color2.g + "," + color2.b + "," + opacity + ")");
          }
          i_1++;
        });
      }
      return gradient;
    }
  });
  Object.defineProperty(RadialGradient2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "RadialGradient"
  });
  Object.defineProperty(RadialGradient2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Gradient.classNames.concat([RadialGradient2.className])
  });
  return RadialGradient2;
}(Gradient);

// node_modules/@amcharts/amcharts5/.internal/core/render/patterns/Pattern.js
var Pattern = function(_super) {
  __extends(Pattern2, _super);
  function Pattern2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    Object.defineProperty(_this, "_display", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this._root._renderer.makeGraphics()
    });
    Object.defineProperty(_this, "_backgroundDisplay", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _this._root._renderer.makeGraphics()
    });
    Object.defineProperty(_this, "_clear", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "_pattern", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    return _this;
  }
  Object.defineProperty(Pattern2.prototype, "_afterNew", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._afterNewApplyThemes.call(this);
    }
  });
  Object.defineProperty(Pattern2.prototype, "pattern", {
    get: function() {
      return this._pattern;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Pattern2.prototype, "_draw", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
    }
  });
  Object.defineProperty(Pattern2.prototype, "_beforeChanged", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._beforeChanged.call(this);
      if (this.isDirty("repetition") || this.isDirty("width") || this.isDirty("height") || this.isDirty("rotation") || this.isDirty("color") || this.isDirty("strokeWidth") || this.isDirty("strokeDasharray") || this.isDirty("strokeDashoffset") || this.isDirty("colorOpacity") || this.isDirty("fill") || this.isDirty("fillOpacity")) {
        this._clear = true;
      }
    }
  });
  Object.defineProperty(Pattern2.prototype, "_changed", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._changed.call(this);
      if (this._clear) {
        var repetition = this.get("repetition", "");
        var width = this.get("width", 100);
        var height = this.get("height", 100);
        var fill = this.get("fill");
        var fillOpacity = this.get("fillOpacity", 1);
        this._display.clear();
        this._backgroundDisplay.clear();
        if (fill && fillOpacity > 0) {
          this._backgroundDisplay.beginFill(fill, fillOpacity);
          this._backgroundDisplay.drawRect(0, 0, width, height);
          this._backgroundDisplay.endFill();
        }
        this._display.angle = this.get("rotation", 0);
        this._draw();
        this._pattern = this._root._renderer.createPattern(this._display, this._backgroundDisplay, repetition, width, height);
      }
    }
  });
  Object.defineProperty(Pattern2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "Pattern"
  });
  Object.defineProperty(Pattern2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Entity.classNames.concat([Pattern2.className])
  });
  return Pattern2;
}(Entity);

// node_modules/@amcharts/amcharts5/.internal/core/render/patterns/CirclePattern.js
var CirclePattern = function(_super) {
  __extends(CirclePattern2, _super);
  function CirclePattern2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(CirclePattern2.prototype, "_beforeChanged", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._beforeChanged.call(this);
      if (this.isDirty("gap")) {
        this._clear = true;
      }
    }
  });
  Object.defineProperty(CirclePattern2.prototype, "_draw", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._draw.call(this);
      var checkered = this.get("checkered", false);
      var centered = this.get("centered", true);
      var gap = this.get("gap", 0);
      var rotation = this.get("rotation", 0);
      var w = this.get("width", 100);
      var h = this.get("height", 100);
      var radius = this.get("radius", 3);
      var cellW = radius * 2 + gap;
      var cellH = radius * 2 + gap;
      var cols = Math.round(w / cellW);
      var rows = Math.round(h / cellH);
      cellW = w / cols;
      cellH = h / rows;
      if (rotation != 0) {
        this._display.x = cellW * cos(rotation);
        this._display.y = cellH * sin(rotation);
      }
      var color2 = this.get("color");
      var colorOpacity = this.get("colorOpacity");
      if (color2 || colorOpacity) {
        this._display.beginFill(color2, colorOpacity);
      }
      for (var r = rotation == 0 ? 0 : -rows * 2; r < rows * 2; r++) {
        for (var c = rotation == 0 ? 0 : -cols * 2; c < cols * 2; c++) {
          if (!checkered || (r & 1) != 1 && (c & 1) != 1 || (r & 1) == 1 && (c & 1) == 1) {
            var x2 = c * cellW;
            var y2 = r * cellH;
            if (centered) {
              x2 += cellW + gap / 2;
              y2 += cellH + gap / 2;
            }
            this._display.drawCircle(x2 - radius, y2 - radius, radius);
          }
        }
      }
      if (checkered) {
        w = w / 2 - gap * 2;
        h = h / 2 - gap * 2;
      } else {
        w -= gap;
        h -= gap;
      }
      if (color2 || colorOpacity) {
        this._display.endFill();
      }
    }
  });
  Object.defineProperty(CirclePattern2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "CirclePattern"
  });
  Object.defineProperty(CirclePattern2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Pattern.classNames.concat([CirclePattern2.className])
  });
  return CirclePattern2;
}(Pattern);

// node_modules/@amcharts/amcharts5/.internal/core/render/patterns/LinePattern.js
var LinePattern = function(_super) {
  __extends(LinePattern2, _super);
  function LinePattern2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(LinePattern2.prototype, "_beforeChanged", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._beforeChanged.call(this);
      if (this.isDirty("gap")) {
        this._clear = true;
      }
    }
  });
  Object.defineProperty(LinePattern2.prototype, "_draw", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._draw.call(this);
      var w = this.get("width", 100);
      var h = this.get("height", 100);
      var gap = this.get("gap", 0);
      var strokeWidth = this.get("strokeWidth", 1);
      if (!gap) {
        this._display.moveTo(0, 0);
        this._display.lineTo(w, 0);
      } else {
        var step = gap + strokeWidth;
        var count = h / step;
        for (var i = -count; i < count * 2; i++) {
          var y2 = Math.round(i * step - step / 2) + 0.5;
          this._display.moveTo(-w, y2);
          this._display.lineTo(w * 2, y2);
        }
      }
      this._display.lineStyle(strokeWidth, this.get("color"), this.get("colorOpacity"));
      var strokeDasharray = this.get("strokeDasharray");
      if (isNumber(strokeDasharray)) {
        if (strokeDasharray < 0.5) {
          strokeDasharray = [0];
        } else {
          strokeDasharray = [strokeDasharray];
        }
      }
      this._display.setLineDash(strokeDasharray);
      var strokeDashoffset = this.get("strokeDashoffset");
      if (strokeDashoffset) {
        this._display.setLineDashOffset(strokeDashoffset);
      }
      this._display.endStroke();
    }
  });
  Object.defineProperty(LinePattern2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "LinePattern"
  });
  Object.defineProperty(LinePattern2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Pattern.classNames.concat([LinePattern2.className])
  });
  return LinePattern2;
}(Pattern);

// node_modules/@amcharts/amcharts5/.internal/core/render/patterns/RectanglePattern.js
var RectanglePattern = function(_super) {
  __extends(RectanglePattern2, _super);
  function RectanglePattern2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(RectanglePattern2.prototype, "_beforeChanged", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._beforeChanged.call(this);
      if (this.isDirty("gap")) {
        this._clear = true;
      }
    }
  });
  Object.defineProperty(RectanglePattern2.prototype, "_draw", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._draw.call(this);
      var checkered = this.get("checkered", false);
      var centered = this.get("centered", true);
      var gap = this.get("gap", 0);
      var rotation = this.get("rotation", 0);
      var w = this.get("width", 100);
      var h = this.get("height", 100);
      var rectW = this.get("maxWidth", 5);
      var rectH = this.get("maxHeight", 5);
      var cellW = rectW + gap;
      var cellH = rectH + gap;
      var cols = Math.round(w / cellW);
      var rows = Math.round(h / cellH);
      cellW = w / cols;
      cellH = h / rows;
      if (rotation != 0) {
        this._display.x = cellW / 2 * cos(rotation);
        this._display.y = -cellH / 2 * sin(rotation);
      }
      for (var r = rotation == 0 ? 0 : -rows * 2; r < rows * 2; r++) {
        for (var c = rotation == 0 ? 0 : -cols * 2; c < cols * 2; c++) {
          if (!checkered || (r & 1) != 1 && (c & 1) != 1 || (r & 1) == 1 && (c & 1) == 1) {
            var x2 = c * cellW;
            var y2 = r * cellH;
            if (centered) {
              x2 += (cellW - rectW) / 2;
              y2 += (cellH - rectH) / 2;
            }
            this._display.drawRect(x2, y2, rectW, rectH);
          }
        }
      }
      if (checkered) {
        w = w / 2 - gap * 2;
        h = h / 2 - gap * 2;
      } else {
        w -= gap;
        h -= gap;
      }
      var color2 = this.get("color");
      var colorOpacity = this.get("colorOpacity");
      if (color2 || colorOpacity) {
        this._display.beginFill(color2, colorOpacity);
        this._display.endFill();
      }
    }
  });
  Object.defineProperty(RectanglePattern2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "RectanglePattern"
  });
  Object.defineProperty(RectanglePattern2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Pattern.classNames.concat([RectanglePattern2.className])
  });
  return RectanglePattern2;
}(Pattern);

// node_modules/@amcharts/amcharts5/.internal/core/util/ColorSet.js
var ColorSet = function(_super) {
  __extends(ColorSet2, _super);
  function ColorSet2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(ColorSet2.prototype, "_afterNew", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      _super.prototype._afterNewApplyThemes.call(this);
    }
  });
  Object.defineProperty(ColorSet2.prototype, "_beforeChanged", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (this.isDirty("colors")) {
        this.reset();
      }
    }
  });
  Object.defineProperty(ColorSet2.prototype, "generateColors", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this.setPrivate("currentPass", this.getPrivate("currentPass", 0) + 1);
      var pass = this.getPrivate("currentPass");
      var colors = this.get("colors", [this.get("baseColor", Color.fromHex(16711680))]);
      if (!this.getPrivate("numColors")) {
        this.setPrivate("numColors", colors.length);
      }
      var len = this.getPrivate("numColors");
      var start = 0;
      var passOptions = this.get("passOptions");
      var reuse = this.get("reuse");
      for (var i = start; i < len; i++) {
        if (reuse) {
          colors.push(colors[i]);
        } else {
          var hsl = colors[i].toHSL();
          var h = hsl.h + (passOptions.hue || 0) * pass;
          while (h > 1)
            h -= 1;
          var s2 = hsl.s + (passOptions.saturation || 0) * pass;
          if (s2 > 1)
            s2 = 1;
          if (s2 < 0)
            s2 = 0;
          var l = hsl.l + (passOptions.lightness || 0) * pass;
          while (l > 1)
            l -= 1;
          colors.push(Color.fromHSL(h, s2, l));
        }
      }
    }
  });
  Object.defineProperty(ColorSet2.prototype, "getIndex", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(index) {
      var colors = this.get("colors", []);
      var saturation = this.get("saturation");
      if (index >= colors.length) {
        this.generateColors();
        return this.getIndex(index);
      }
      return saturation != null ? Color.saturate(colors[index], saturation) : colors[index];
    }
  });
  Object.defineProperty(ColorSet2.prototype, "next", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var currentStep = this.getPrivate("currentStep", this.get("startIndex", 0));
      this.setPrivate("currentStep", currentStep + this.get("step", 1));
      return this.getIndex(currentStep);
    }
  });
  Object.defineProperty(ColorSet2.prototype, "reset", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      this.setPrivate("currentStep", this.get("startIndex", 0));
      this.setPrivate("currentPass", 0);
    }
  });
  Object.defineProperty(ColorSet2, "className", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: "ColorSet"
  });
  Object.defineProperty(ColorSet2, "classNames", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: Entity.classNames.concat([ColorSet2.className])
  });
  return ColorSet2;
}(Entity);

// node_modules/@amcharts/amcharts5/.internal/core/util/DataParser.js
var JSONParser = function() {
  function JSONParser2() {
  }
  Object.defineProperty(JSONParser2, "parse", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(input, options) {
      options = this._applyDefaults(options);
      try {
        if (isString(input)) {
          var data = JSON.parse(input);
          if (options.reverse && isArray(data)) {
            data.reverse();
          }
          return data;
        } else if (isArray(input) || isObject(input)) {
          return input;
        } else {
          throw "Unable to parse JSON data";
        }
      } catch (e) {
        return void 0;
      }
    }
  });
  Object.defineProperty(JSONParser2, "_applyDefaults", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(options) {
      var normalized = {};
      var defaults = {
        reverse: false
      };
      if (!options) {
        options = {};
      }
      each2(defaults, function(key, val) {
        normalized[key] = options[key] || val;
      });
      return normalized;
    }
  });
  return JSONParser2;
}();
var CSVParser = function() {
  function CSVParser2() {
  }
  Object.defineProperty(CSVParser2, "parse", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(input, options) {
      options = this._applyDefaults(options);
      var data = this.CSVToArray(input, options.delimiter);
      var res = [], cols = [], col, i;
      for (i = 0; i < options.skipRows; i++) {
        data.shift();
      }
      if (options.useColumnNames) {
        cols = data.shift();
        for (var x2 = 0; x2 < cols.length; x2++) {
          col = cols[x2] != null ? cols[x2].replace(/^\s+|\s+$/gm, "") : "";
          if (col === "") {
            col = "col" + x2;
          }
          cols[x2] = col;
        }
      }
      var row;
      while (true) {
        row = options.reverse ? data.pop() : data.shift();
        if (!row) {
          break;
        }
        if (options.skipEmpty && row.length === 1 && row[0] === "") {
          continue;
        }
        var dataPoint = {};
        for (i = 0; i < row.length; i++) {
          col = cols[i] === void 0 ? "col" + i : cols[i];
          dataPoint[col] = row[i];
        }
        res.push(dataPoint);
      }
      return res;
    }
  });
  Object.defineProperty(CSVParser2, "CSVToArray", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(data, delimiter) {
      delimiter = delimiter || ",";
      var objPattern = new RegExp("(\\" + delimiter + '|\\r?\\n|\\r|^)(?:"([^"]*(?:""[^"]*)*)"|([^"\\' + delimiter + "\\r\\n]*))", "gi");
      var arrData = [
        []
      ];
      var arrMatches = null;
      while (true) {
        arrMatches = objPattern.exec(data);
        if (!arrMatches) {
          break;
        }
        var strMatchedDelimiter = arrMatches[1];
        if (strMatchedDelimiter.length && strMatchedDelimiter !== delimiter) {
          arrData.push([]);
        }
        var strMatchedValue = void 0;
        if (arrMatches[2]) {
          strMatchedValue = arrMatches[2].replace(new RegExp('""', "g"), '"');
        } else {
          strMatchedValue = arrMatches[3];
        }
        arrData[arrData.length - 1].push(strMatchedValue);
      }
      return arrData;
    }
  });
  Object.defineProperty(CSVParser2, "_applyDefaults", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(options) {
      var normalized = {};
      var defaults = {
        delimiter: ",",
        reverse: false,
        skipRows: 0,
        skipEmpty: true,
        useColumnNames: false
      };
      if (!options) {
        options = {};
      }
      each2(defaults, function(key, val) {
        normalized[key] = options[key] || val;
      });
      return normalized;
    }
  });
  return CSVParser2;
}();

// node_modules/@amcharts/amcharts5/.internal/core/util/DataProcessor.js
var DataProcessor = function(_super) {
  __extends(DataProcessor2, _super);
  function DataProcessor2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    Object.defineProperty(_this, "_checkDates", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "_checkNumbers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "_checkColors", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "_checkEmpty", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(_this, "_checkDeep", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    return _this;
  }
  Object.defineProperty(DataProcessor2.prototype, "_afterNew", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      _super.prototype._afterNew.call(this);
      this._checkFeatures();
      this.on("dateFields", function() {
        return _this._checkFeatures();
      });
      this.on("dateFormat", function() {
        return _this._checkFeatures();
      });
      this.on("numericFields", function() {
        return _this._checkFeatures();
      });
      this.on("colorFields", function() {
        return _this._checkFeatures();
      });
      this.on("emptyAs", function() {
        return _this._checkFeatures();
      });
    }
  });
  Object.defineProperty(DataProcessor2.prototype, "_checkFeatures", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      if (this.isDirty("dateFields") || this.isDirty("dateFormat")) {
        this._checkDates = this.get("dateFields") && this.get("dateFields").length > 0;
      }
      if (this.isDirty("numericFields")) {
        this._checkNumbers = this.get("numericFields") && this.get("numericFields").length > 0;
      }
      if (this.isDirty("colorFields")) {
        this._checkColors = this.get("colorFields") && this.get("colorFields").length > 0;
      }
      if (this.isDirty("emptyAs")) {
        this._checkEmpty = this.get("emptyAs") != null;
      }
      this._checkDeepFeatures();
    }
  });
  Object.defineProperty(DataProcessor2.prototype, "_checkDeepFeatures", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function() {
      var _this = this;
      var deepFields = [];
      each(["dateFields", "numericFields", "colorFields"], function(where) {
        each(_this.get(where, []), function(field) {
          var steps = field.split(".");
          steps.pop();
          while (steps.length > 0) {
            deepFields.push(steps.join("."));
            steps.pop();
          }
        });
      });
      this._checkDeep = deepFields.length > 0;
      this.setPrivate("deepFields", deepFields);
    }
  });
  Object.defineProperty(DataProcessor2.prototype, "processMany", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(data) {
      var _this = this;
      if (isArray(data) && (this._checkDates || this._checkNumbers || this._checkColors || this._checkEmpty)) {
        each(data, function(row) {
          _this.processRow(row);
        });
      }
    }
  });
  Object.defineProperty(DataProcessor2.prototype, "processRow", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(row, prefix) {
      var _this = this;
      if (prefix === void 0) {
        prefix = "";
      }
      each2(row, function(key, _value) {
        var lookupKey = prefix + key;
        if (_this._checkEmpty) {
          row[key] = _this._maybeToEmpty(row[key]);
        }
        if (_this._checkNumbers) {
          row[key] = _this._maybeToNumber(lookupKey, row[key]);
        }
        if (_this._checkDates) {
          row[key] = _this._maybeToDate(lookupKey, row[key]);
        }
        if (_this._checkColors) {
          row[key] = _this._maybeToColor(lookupKey, row[key]);
        }
        if (_this._checkDeep && _this.getPrivate("deepFields", []).indexOf(lookupKey) !== -1 && isObject(row[key])) {
          _this.processRow(row[key], lookupKey + ".");
        }
      });
    }
  });
  Object.defineProperty(DataProcessor2.prototype, "_maybeToNumber", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(field, value) {
      if (this.get("numericFields").indexOf(field) !== -1) {
        return toNumber(value);
      }
      return value;
    }
  });
  Object.defineProperty(DataProcessor2.prototype, "_maybeToDate", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(field, value) {
      if (this.get("dateFields").indexOf(field) !== -1) {
        return this._root.dateFormatter.parse(value, this.get("dateFormat", "")).getTime();
      }
      return value;
    }
  });
  Object.defineProperty(DataProcessor2.prototype, "_maybeToEmpty", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(value) {
      if ((value == null || value == "") && this.get("emptyAs") != null) {
        return this.get("emptyAs");
      }
      return value;
    }
  });
  Object.defineProperty(DataProcessor2.prototype, "_maybeToColor", {
    enumerable: false,
    configurable: true,
    writable: true,
    value: function(field, value) {
      if (this.get("colorFields").indexOf(field) !== -1) {
        return Color.fromAny(value);
      }
      return value;
    }
  });
  return DataProcessor2;
}(Entity);

// node_modules/@amcharts/amcharts5/.internal/core/util/Net.js
var Net_exports = {};
__export(Net_exports, {
  load: () => load,
  readBlob: () => readBlob
});
function load(url, target, options) {
  return new Promise(function(success, error) {
    var isBlob = options != null && options.responseType == "blob";
    var xhr = new XMLHttpRequest();
    xhr.onload = function() {
      if (xhr.status === 200) {
        var response = void 0;
        var blob_1;
        if (isBlob) {
          blob_1 = xhr.response;
          readBlob(blob_1).then(function(response2) {
            var output2 = {
              xhr,
              error: false,
              response: response2,
              blob: blob_1,
              type: xhr.getResponseHeader("Content-Type"),
              target
            };
            success(output2);
          });
          return;
        } else {
          response = xhr.responseText || xhr.response;
        }
        var output = {
          xhr,
          error: false,
          response,
          blob: blob_1,
          type: xhr.getResponseHeader("Content-Type"),
          target
        };
        success(output);
      } else {
        error({
          xhr,
          error: true,
          type: xhr.getResponseHeader("Content-Type"),
          target
        });
      }
    };
    xhr.onerror = function() {
      error({
        xhr,
        error: true,
        type: xhr.getResponseHeader("Content-Type"),
        target
      });
    };
    xhr.open("GET", url, true);
    if (options && options.withCredentials) {
      xhr.withCredentials = true;
    }
    if (options != null) {
      if (options.requestHeaders != null) {
        for (var i = 0; i < options.requestHeaders.length; i++) {
          var header = options.requestHeaders[i];
          xhr.setRequestHeader(header.key, header.value);
        }
      }
      if (options.responseType != null) {
        xhr.responseType = options.responseType;
      }
    }
    xhr.send();
  });
}
function readBlob(blob) {
  return new Promise(function(success, error) {
    var reader = new FileReader();
    reader.onload = function(_event) {
      success(reader.result);
    };
    reader.onerror = function(e) {
      error(e);
    };
    reader.readAsText(blob);
  });
}
export {
  Bullet,
  Button,
  CSVParser,
  Chart,
  Circle,
  CirclePattern,
  Color,
  ColorSet,
  Component,
  Container,
  DataItem,
  DataProcessor,
  DateFormatter,
  DurationFormatter,
  Ellipse,
  Entity,
  Gradient,
  Graphics,
  GridLayout,
  HeatLegend,
  HorizontalLayout,
  InterfaceColors,
  JSONParser,
  JsonData,
  Label,
  Layout,
  Legend,
  Line,
  LinePattern,
  LinearGradient,
  ListData,
  Modal,
  NumberFormatter,
  Pattern,
  Percent,
  Picture,
  PointedRectangle,
  RadialGradient,
  RadialLabel,
  RadialText,
  Rectangle,
  RectanglePattern,
  Root,
  RoundedRectangle,
  Scrollbar,
  SerialChart,
  Series,
  Slice,
  Slider,
  Sprite,
  Star,
  Template,
  Text,
  TextFormatter,
  Theme,
  Tick,
  Timezone,
  Tooltip,
  Triangle,
  VerticalLayout,
  addLicense,
  Array_exports as array,
  color,
  disposeAllRootElements,
  Ease_exports as ease,
  Math_exports as math,
  Net_exports as net,
  Object_exports as object,
  p0,
  p100,
  p50,
  percent,
  ready,
  registry,
  Time_exports as time,
  Type_exports as type,
  Utils_exports as utils
};
//# sourceMappingURL=@amcharts_amcharts5.js.map
