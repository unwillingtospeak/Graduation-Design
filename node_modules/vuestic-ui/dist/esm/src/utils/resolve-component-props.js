var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
function normalizeProps(props) {
  switch (true) {
    case Array.isArray(props):
      return props.reduce((acc, prop) => __spreadProps(__spreadValues({}, acc), { [prop]: null }), {});
    case (typeof props === "object" && props !== null):
      return props;
    default:
      return {};
  }
}
function mergeProps(to, from, optionsType = "props") {
  const { mixins, extends: extendsOptions } = from;
  extendsOptions && mergeProps(to, extendsOptions, optionsType);
  mixins && mixins.forEach((m) => mergeProps(to, m, optionsType));
  const props = normalizeProps(from[optionsType]);
  for (const key in props) {
    to[key] = props[key];
  }
}
function getComponentOptions(component) {
  if (component.options) {
    return component.options;
  }
  if (component.__vccOpts || component.__b) {
    return __spreadValues(__spreadValues({}, component.__vccOpts), component.__b);
  }
  return component;
}
function resolveProps(options, optionsType = "props") {
  var _a, _b;
  const mixins = (_a = options.mixins) != null ? _a : [];
  const extendsOptions = (_b = options.extends) != null ? _b : [];
  const result = {};
  mergeProps(result, extendsOptions, optionsType);
  for (let i = 0; i < mixins.length; i++) {
    mergeProps(result, mixins[i], optionsType);
  }
  Object.assign(result, normalizeProps(options[optionsType]));
  return result;
}
const getComponentProps = (component) => {
  return resolveProps(getComponentOptions(component));
};
export { getComponentProps as g };
//# sourceMappingURL=resolve-component-props.js.map
