import { computed } from "vue";
import { g as getComponentProps } from "./resolve-component-props.js";
const filterComponentProps = (propsValues, childProps) => {
  return computed(() => {
    return Object.keys(childProps).reduce((acc, propName) => {
      acc[propName] = propsValues[propName];
      return acc;
    }, {});
  });
};
function extractComponentProps(component, ignoreProps) {
  const props = getComponentProps(component);
  if (ignoreProps) {
    return Object.keys(props).reduce((acc, propName) => {
      if (ignoreProps.includes(propName)) {
        return acc;
      }
      if (props[propName] === void 0) {
        return acc;
      }
      acc[propName] = typeof props[propName] === "string" ? {} : props[propName];
      return acc;
    }, {});
  }
  return props;
}
function extractComponentEmits(component) {
  return [...new Set(component.emits)];
}
export { extractComponentEmits as a, extractComponentProps as e, filterComponentProps as f };
//# sourceMappingURL=child-props.js.map
