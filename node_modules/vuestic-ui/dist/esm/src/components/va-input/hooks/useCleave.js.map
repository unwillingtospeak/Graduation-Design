{"version":3,"file":"useCleave.js","sources":["../../../../../../src/components/va-input/hooks/useCleave.ts"],"sourcesContent":["import { computed, onBeforeUnmount, onMounted, PropType, ref, Ref, watch } from 'vue'\nimport Cleave from 'cleave.js'\nimport { CleaveOptions } from 'cleave.js/options'\n\nconst DEFAULT_MASK_TOKENS: Record<string, Record<string, unknown>> = {\n  creditCard: {\n    creditCard: true,\n  },\n  date: {\n    date: true,\n    datePattern: ['d', 'm', 'Y'],\n  },\n  time: {\n    time: true,\n    timePattern: ['h', 'm'],\n    timeFormat: '24',\n  },\n  numeral: {\n    numeral: true,\n    numeralThousandsGroupStyle: 'thousand',\n  },\n}\n\nexport const useCleaveProps = {\n  mask: { type: [String, Object] as PropType<string | Record<string, number[]>>, default: '' },\n  returnRaw: { type: Boolean, default: true },\n  modelValue: { type: String },\n}\n\ntype Props = {\n  mask: string | Record<string, number[]>,\n  returnRaw: boolean,\n  modelValue: string | number,\n}\n\nexport const useCleave = (\n  element: Ref<HTMLInputElement | undefined>,\n  props: Props,\n  emit: (event: 'update:modelValue' | any, ...args: any[]) => any,\n) => {\n  const cleave = ref<Cleave>()\n\n  const getMask = (mask: CleaveOptions | string) => {\n    if (typeof mask === 'string') {\n      return DEFAULT_MASK_TOKENS[mask] ? { ...DEFAULT_MASK_TOKENS[mask] } : {}\n    }\n    return { ...mask }\n  }\n\n  const destroyCleave = () => {\n    if (cleave.value) { cleave.value.destroy() }\n  }\n\n  const initCleave = () => {\n    destroyCleave()\n\n    if (!element.value) { return }\n\n    cleave.value = new Cleave(element.value, getMask(props.mask))\n  }\n\n  onMounted(() => { initCleave() })\n  onBeforeUnmount(() => { destroyCleave() })\n\n  watch(() => [element.value, props.mask], () => { initCleave() })\n\n  const computedValue = computed<string | number>(() => {\n    if (cleave.value) {\n      if (props.returnRaw && props.modelValue === cleave.value.getRawValue()) {\n        return cleave.value.getFormattedValue()\n      }\n    }\n\n    return props.modelValue\n  })\n\n  const onInput = (event: Event) => {\n    const value = (event.target as HTMLInputElement).value\n\n    if (props.mask !== 'string' && !Object.keys(props.mask).length) {\n      emit('update:modelValue', value)\n      return\n    }\n\n    if (cleave.value) {\n      cleave.value.setRawValue(value)\n      if (props.returnRaw) {\n        emit('update:modelValue', cleave.value.getRawValue())\n        return\n      }\n    }\n\n    emit('update:modelValue', value)\n  }\n\n  return {\n    cleave,\n    computedValue,\n    onInput,\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAIA,MAAM,sBAA+D;AAAA,EACnE,YAAY;AAAA,IACV,YAAY;AAAA,EACd;AAAA,EACA,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,aAAa,CAAC,KAAK,KAAK,GAAG;AAAA,EAC7B;AAAA,EACA,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,aAAa,CAAC,KAAK,GAAG;AAAA,IACtB,YAAY;AAAA,EACd;AAAA,EACA,SAAS;AAAA,IACP,SAAS;AAAA,IACT,4BAA4B;AAAA,EAC9B;AACF;AAEO,MAAM,iBAAiB;AAAA,EAC5B,MAAM,EAAE,MAAM,CAAC,QAAQ,MAAM,GAAkD,SAAS,GAAG;AAAA,EAC3F,WAAW,EAAE,MAAM,SAAS,SAAS,KAAK;AAAA,EAC1C,YAAY,EAAE,MAAM,OAAO;AAC7B;AAQO,MAAM,YAAY,CACvB,SACA,OACA,SACG;AACH,QAAM,SAAS;AAET,QAAA,UAAU,CAAC,SAAiC;AAC5C,QAAA,OAAO,SAAS,UAAU;AAC5B,aAAO,oBAAoB,QAAQ,mBAAK,oBAAoB,SAAU;IACxE;AACA,WAAO,mBAAK;AAAA,EAAK;AAGnB,QAAM,gBAAgB,MAAM;AAC1B,QAAI,OAAO,OAAO;AAAE,aAAO,MAAM;IAAU;AAAA,EAAA;AAG7C,QAAM,aAAa,MAAM;AACT;AAEV,QAAA,CAAC,QAAQ,OAAO;AAAE;AAAA,IAAO;AAEtB,WAAA,QAAQ,IAAI,OAAO,QAAQ,OAAO,QAAQ,MAAM,IAAI,CAAC;AAAA,EAAA;AAG9D,YAAU,MAAM;AAAa;EAAA,CAAG;AAChC,kBAAgB,MAAM;AAAgB;EAAA,CAAG;AAEzC,QAAM,MAAM,CAAC,QAAQ,OAAO,MAAM,IAAI,GAAG,MAAM;AAAa;EAAA,CAAG;AAEzD,QAAA,gBAAgB,SAA0B,MAAM;AACpD,QAAI,OAAO,OAAO;AAChB,UAAI,MAAM,aAAa,MAAM,eAAe,OAAO,MAAM,eAAe;AAC/D,eAAA,OAAO,MAAM;MACtB;AAAA,IACF;AAEA,WAAO,MAAM;AAAA,EAAA,CACd;AAEK,QAAA,UAAU,CAAC,UAAiB;AAC1B,UAAA,QAAS,MAAM,OAA4B;AAE7C,QAAA,MAAM,SAAS,YAAY,CAAC,OAAO,KAAK,MAAM,IAAI,EAAE,QAAQ;AAC9D,WAAK,qBAAqB,KAAK;AAC/B;AAAA,IACF;AAEA,QAAI,OAAO,OAAO;AACT,aAAA,MAAM,YAAY,KAAK;AAC9B,UAAI,MAAM,WAAW;AACnB,aAAK,qBAAqB,OAAO,MAAM,YAAa,CAAA;AACpD;AAAA,MACF;AAAA,IACF;AAEA,SAAK,qBAAqB,KAAK;AAAA,EAAA;AAG1B,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAEJ;;"}