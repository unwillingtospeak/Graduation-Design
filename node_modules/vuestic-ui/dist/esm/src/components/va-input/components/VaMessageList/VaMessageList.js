import { defineComponent, computed, openBlock, createElementBlock, normalizeStyle, Fragment, renderList, toDisplayString, createCommentVNode } from "vue";
import "../../../../../vendor.js";
import { u as useColors } from "../../../../composables/useColors.js";
import "../../../../composables/useDropdown.js";
import { _ as _export_sfc } from "../../../../../plugin-vue_export-helper.js";
var VaMessageList_vue_vue_type_style_index_0_lang = "";
const _sfc_main = defineComponent({
  name: "VaMessageList",
  props: {
    modelValue: {
      type: [String, Array],
      default: ""
    },
    limit: { type: Number, default: 1 },
    color: { type: String }
  },
  setup(props) {
    const { getColor } = useColors();
    return {
      messages: computed(() => {
        if (!props.modelValue) {
          return [];
        }
        if (!Array.isArray(props.modelValue)) {
          return [props.modelValue];
        }
        return props.modelValue.slice(0, props.limit);
      }),
      computedStyle: computed(() => props.color ? { color: getColor(props.color) } : {})
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return _ctx.messages.length ? (openBlock(), createElementBlock("div", {
    key: 0,
    class: "va-message-list",
    style: normalizeStyle(_ctx.computedStyle)
  }, [
    (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.messages, (message, index) => {
      return openBlock(), createElementBlock("div", {
        key: index,
        class: "va-message-list__message"
      }, toDisplayString(message), 1);
    }), 128))
  ], 4)) : createCommentVNode("", true);
}
var _VaMessageList = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaMessageList as _ };

import './VaMessageList.css';
//# sourceMappingURL=VaMessageList.js.map
