{"version":3,"file":"VaConfig.js","sources":["../../../../../src/components/va-config/VaConfig.ts"],"sourcesContent":["import { inject, provide, computed, toRefs, defineComponent, ComputedRef } from 'vue'\n\nimport { ComponentConfig } from '../../services/component-config/component-config'\n\n/**\n * We need another key to provide injected value.\n */\nexport const LocalConfigKey = Symbol('LocalConfigKey')\n\nexport const CONFIGS_DEFAULT = computed(() => [])\n\nexport function useLocalConfig (): ComputedRef<ComponentConfig[]> {\n  return inject(LocalConfigKey, CONFIGS_DEFAULT)\n}\n\nexport default defineComponent({\n  name: 'VaConfig',\n  props: {\n    components: { type: Object, default: () => ({}) },\n  },\n  setup (props) {\n    const { components } = toRefs(props)\n    const prevChain = useLocalConfig()\n    // We want it to be an array and not a merged object for optimization purposes\n    const nextChain = computed(() => [...prevChain.value, components.value])\n\n    provide(LocalConfigKey, nextChain)\n\n    return {}\n  },\n  render () {\n    return this.$slots.default ? this.$slots.default() : null\n  },\n})\n"],"names":[],"mappings":";AAOa,MAAA,iBAAiB,OAAO,gBAAgB;AAE9C,MAAM,kBAAkB,SAAS,MAAM,CAAA,CAAE;AAEkB,0BAAA;AACzD,SAAA,OAAO,gBAAgB,eAAe;AAC/C;AAEA,IAAA,WAAe,gBAAgB;AAAA,EAC7B,MAAM;AAAA,EACN,OAAO;AAAA,IACL,YAAY,EAAE,MAAM,QAAQ,SAAS,QAAW,GAAA;AAAA,EAClD;AAAA,EACA,MAAO,OAAO;AACN,UAAA,EAAE,eAAe,OAAO,KAAK;AACnC,UAAM,YAAY;AAEZ,UAAA,YAAY,SAAS,MAAM,CAAC,GAAG,UAAU,OAAO,WAAW,KAAK,CAAC;AAEvE,YAAQ,gBAAgB,SAAS;AAEjC,WAAO;EACT;AAAA,EACA,SAAU;AACR,WAAO,KAAK,OAAO,UAAU,KAAK,OAAO,QAAY,IAAA;AAAA,EACvD;AACF,CAAC;;"}