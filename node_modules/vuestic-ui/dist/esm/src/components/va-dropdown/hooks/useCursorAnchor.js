var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import { computed, reactive, watchEffect } from "vue";
import { u as useEvent } from "../../../composables/useEvent.js";
const useCursorAnchor = (anchorRef, noUpdate) => {
  const mouse = reactive({ x: 0, y: 0 });
  useEvent(["mousemove", "mousedown", "mouseup"], (e) => {
    const { x, y } = anchorRef.value.getBoundingClientRect();
    mouse.x = e.clientX - x;
    mouse.y = e.clientY - y;
  }, anchorRef);
  const mouseOffset = {
    x: 0,
    y: 0
  };
  watchEffect(() => {
    if (noUpdate.value) {
      return;
    }
    mouseOffset.x = mouse.x;
    mouseOffset.y = mouse.y;
  });
  return computed(() => {
    if (!anchorRef.value) {
      return void 0;
    }
    const target = anchorRef.value;
    const getBoundingClientRect = () => {
      const rect = target.getBoundingClientRect();
      const x = rect.left + mouseOffset.x;
      const y = rect.top + mouseOffset.y;
      return __spreadProps(__spreadValues({}, rect), {
        x,
        y,
        bottom: y + 1,
        right: x + 1,
        left: x,
        top: y
      });
    };
    return new Proxy(target, {
      get(target2, key) {
        if (key === "getBoundingClientRect") {
          return getBoundingClientRect;
        }
        return target2[key];
      }
    });
  });
};
export { useCursorAnchor as u };
//# sourceMappingURL=useCursorAnchor.js.map
