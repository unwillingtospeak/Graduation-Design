var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import { defineComponent, shallowRef, computed, openBlock, createBlock, resolveDynamicComponent, mergeProps, toHandlers, withCtx, renderSlot } from "vue";
import "../../../../vendor.js";
import { u as useColors } from "../../../composables/useColors.js";
import { u as useHover } from "../../../composables/useHover.js";
import { u as useKeyboardOnlyFocus } from "../../../composables/useKeyboardOnlyFocus.js";
import "../../../composables/useDropdown.js";
import { u as useRouterLinkProps, a as useRouterLink } from "../../../composables/useRouterLink.js";
import { u as useTextColor } from "../../../composables/useTextColor.js";
import { a as useSidebarItem } from "../hooks/useSidebar.js";
import { _ as _export_sfc } from "../../../../plugin-vue_export-helper.js";
var VaSidebarItem_vue_vue_type_style_index_0_lang = "";
const _sfc_main = defineComponent({
  name: "VaSidebarItem",
  props: __spreadProps(__spreadValues({}, useRouterLinkProps), {
    active: { type: Boolean, default: false },
    textColor: { type: String, default: void 0 },
    activeColor: { type: String, default: "primary" },
    hoverColor: { type: String, default: void 0 },
    borderColor: { type: String, default: void 0 }
  }),
  setup(props) {
    const anchor = shallowRef();
    const { isHovered } = useHover(anchor);
    const { getColor, getHoverColor, getFocusColor } = useColors();
    const { hasKeyboardFocus, keyboardFocusListeners } = useKeyboardOnlyFocus();
    const { sidebarColor } = useSidebarItem();
    const backgroundColorComputed = computed(() => {
      if (props.active && !isHovered.value && !hasKeyboardFocus.value) {
        return getColor(props.activeColor);
      }
      return getColor(sidebarColor.value);
    });
    const { textColorComputed } = useTextColor(backgroundColorComputed);
    const computedStyle = computed(() => {
      const style = {
        color: props.textColor
      };
      if (props.active) {
        style.backgroundColor = backgroundColorComputed.value;
        style.color = textColorComputed.value;
        style.borderColor = getColor(props.borderColor || props.activeColor);
      }
      if (hasKeyboardFocus.value) {
        style.backgroundColor = getFocusColor(getColor(props.hoverColor || props.activeColor));
      }
      if (isHovered.value) {
        style.backgroundColor = getHoverColor(getColor(props.hoverColor || props.activeColor));
      }
      return style;
    });
    const { tagComputed, hrefComputed } = useRouterLink(props);
    return {
      anchor,
      computedStyle,
      keyboardFocusListeners,
      tagComputed,
      hrefComputed,
      isHovered
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(resolveDynamicComponent(_ctx.tagComputed), mergeProps({
    ref: "anchor",
    class: ["va-sidebar__item va-sidebar-item", { "va-sidebar-item--active": _ctx.$props.active }],
    tabindex: "0",
    style: _ctx.computedStyle,
    href: _ctx.hrefComputed,
    to: _ctx.$props.to
  }, toHandlers(_ctx.keyboardFocusListeners)), {
    default: withCtx(() => [
      renderSlot(_ctx.$slots, "default")
    ]),
    _: 3
  }, 16, ["class", "style", "href", "to"]);
}
var _VaSidebarItem = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaSidebarItem as _ };

import './VaSidebarItem.css';
//# sourceMappingURL=VaSidebarItem.js.map
