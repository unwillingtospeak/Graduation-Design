import { defineComponent, ref, computed, openBlock, createElementBlock, normalizeClass, normalizeStyle, renderSlot } from "vue";
import "../../../vendor.js";
import { u as useColors } from "../../composables/useColors.js";
import "../../composables/useDropdown.js";
import { s as setupScroll } from "../../composables/useScroll.js";
import { g as getBoxShadowColor, a as getGradientBackground } from "../../services/color-config/color-functions.js";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
var VaAppBar_vue_vue_type_style_index_0_lang = "";
const _sfc_main = defineComponent({
  name: "VaAppBar",
  props: {
    gradient: { type: Boolean, default: false },
    bottom: { type: Boolean, default: false },
    target: { type: [Object, String], default: "" },
    hideOnScroll: { type: Boolean, default: false },
    shadowOnScroll: { type: Boolean, default: false },
    shadowColor: { type: String, default: "" },
    color: { type: String, default: void 0 },
    absolute: { type: Boolean, default: false }
  },
  setup(props) {
    const prevScrollPosition = ref(0);
    const doShowShadow = ref(false);
    const isHidden = ref(false);
    const scrollRoot = setupScroll(props.target, (e) => {
      const target = e.target;
      if (prevScrollPosition.value < target.scrollTop) {
        isHidden.value = !!props.hideOnScroll;
        doShowShadow.value = !!props.shadowOnScroll;
      } else {
        isHidden.value = false;
        doShowShadow.value = false;
      }
      prevScrollPosition.value = target.scrollTop;
    });
    const { getColor } = useColors();
    const colorComputed = computed(() => getColor(props.color, "primary"));
    const shadowColorComputed = computed(() => getColor(props.shadowColor, colorComputed.value));
    const computedShadow = computed(() => {
      const shadow = getBoxShadowColor(props.shadowColor ? shadowColorComputed.value : colorComputed.value);
      return doShowShadow.value ? `var(--va-app-bar-shadow) ${shadow}` : "";
    });
    const transformComputed = computed(() => {
      if (!isHidden.value) {
        return "";
      }
      return props.bottom ? "translateY(100%)" : "translateY(-100%)";
    });
    const computedStyle = computed(() => ({
      background: props.gradient ? getGradientBackground(colorComputed.value) : colorComputed.value,
      "box-shadow": computedShadow.value,
      transform: transformComputed.value,
      position: props.absolute ? "absolute" : void 0
    }));
    const computedClass = computed(() => ({
      "va-app-bar": true,
      "va-app-bar--bottom": props.bottom
    }));
    return {
      scrollRoot,
      computedStyle,
      computedClass
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("header", {
    ref: "scrollRoot",
    role: "toolbar",
    class: normalizeClass(_ctx.computedClass),
    style: normalizeStyle(_ctx.computedStyle)
  }, [
    renderSlot(_ctx.$slots, "default")
  ], 6);
}
var _VaAppBar = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaAppBar as _ };

import './VaAppBar.css';
//# sourceMappingURL=VaAppBar.js.map
