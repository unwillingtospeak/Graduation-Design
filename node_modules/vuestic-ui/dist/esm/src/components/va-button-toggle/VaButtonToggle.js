var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
import { defineComponent, computed, resolveComponent, openBlock, createElementBlock, createVNode, withCtx, Fragment, renderList, createBlock, mergeProps, createTextVNode, toDisplayString } from "vue";
import { s as shiftHSLAColor } from "../../services/color-config/color-functions.js";
import "../../../vendor.js";
import { u as useColors } from "../../composables/useColors.js";
import "../../composables/useDropdown.js";
import { u as useTextColor } from "../../composables/useTextColor.js";
import { V as VaButton } from "../va-button/index.js";
import { V as VaButtonGroup } from "../va-button-group/index.js";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
var VaButtonToggle_vue_vue_type_style_index_0_lang = "";
const _sfc_main = defineComponent({
  name: "VaButtonToggle",
  components: {
    VaButtonGroup,
    VaButton
  },
  emits: ["update:modelValue"],
  props: {
    options: {
      type: Array,
      required: true
    },
    color: { type: String, default: "primary" },
    textColor: { type: String, default: void 0 },
    activeButtonTextColor: { type: String },
    modelValue: { type: [String, Number], default: "" },
    outline: { type: Boolean, default: false },
    flat: { type: Boolean, default: false },
    rounded: { type: Boolean, default: true },
    disabled: { type: Boolean, default: false },
    size: {
      type: String,
      default: "medium",
      validator: (value) => ["medium", "small", "large"].includes(value)
    },
    toggleColor: { type: String, default: "" },
    gradient: { type: Boolean, default: false }
  },
  setup(props, { emit }) {
    const { getColor } = useColors();
    const colorComputed = computed(() => getColor(props.color));
    const isFlatOrOutline = computed(() => props.outline || props.flat);
    const activeButtonColor = computed(() => {
      if (props.toggleColor) {
        return getColor(props.toggleColor);
      } else {
        return isFlatOrOutline.value ? colorComputed.value : shiftHSLAColor(colorComputed.value, { l: -6 });
      }
    });
    const { textColorComputed: activeButtonTextColor } = useTextColor(activeButtonColor);
    const isToggled = (value) => value === props.modelValue;
    const getButtonProps = (option = {}) => {
      var _a;
      const iconsProps = {
        icon: option.icon,
        iconRight: option.iconRight
      };
      if (!isToggled(option.value)) {
        return iconsProps;
      }
      return __spreadValues(__spreadValues({
        color: activeButtonColor.value,
        textColor: (_a = props.activeButtonTextColor) != null ? _a : activeButtonTextColor.value
      }, iconsProps), isFlatOrOutline.value && { outline: false, flat: false });
    };
    const getButtonClass = (buttonValue) => ({ "va-button--active": isToggled(buttonValue) });
    const changeValue = (value) => emit("update:modelValue", value);
    return {
      getButtonProps,
      getButtonClass,
      changeValue,
      isToggled
    };
  }
});
const _hoisted_1 = { class: "va-button-toggle" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_button = resolveComponent("va-button");
  const _component_va_button_group = resolveComponent("va-button-group");
  return openBlock(), createElementBlock("div", _hoisted_1, [
    createVNode(_component_va_button_group, {
      color: _ctx.color,
      textColor: _ctx.textColor,
      rounded: _ctx.rounded,
      outline: _ctx.outline,
      flat: _ctx.flat,
      gradient: _ctx.gradient
    }, {
      default: withCtx(() => [
        (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.options, (option) => {
          return openBlock(), createBlock(_component_va_button, mergeProps({
            key: option.value,
            "aria-pressed": _ctx.isToggled(option.value),
            class: _ctx.getButtonClass(option.value),
            disabled: _ctx.disabled,
            size: _ctx.size
          }, _ctx.getButtonProps(option), {
            onClick: ($event) => _ctx.changeValue(option.value)
          }), {
            default: withCtx(() => [
              createTextVNode(toDisplayString(option.label), 1)
            ]),
            _: 2
          }, 1040, ["aria-pressed", "class", "disabled", "size", "onClick"]);
        }), 128))
      ]),
      _: 1
    }, 8, ["color", "textColor", "rounded", "outline", "flat", "gradient"])
  ]);
}
var _VaButtonToggle = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaButtonToggle as _ };

import './VaButtonToggle.css';
//# sourceMappingURL=VaButtonToggle.js.map
