var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import { defineComponent, resolveComponent, openBlock, createElementBlock, renderSlot, normalizeProps, guardReactiveProps, createVNode, createElementVNode, withCtx, createTextVNode, toDisplayString, mergeProps, createCommentVNode } from "vue";
import { u as useView } from "../../hooks/view.js";
import { V as VaButton } from "../../../va-button/index.js";
import { _ as _export_sfc } from "../../../../../plugin-vue_export-helper.js";
var VaDatePickerHeader_vue_vue_type_style_index_0_lang = "";
const _sfc_main = defineComponent({
  name: "VaDatePickerHeader",
  components: { VaButton },
  emits: ["update:view"],
  props: {
    monthNames: { type: Array, required: true },
    view: { type: Object },
    color: { type: String, default: void 0 },
    disabled: { type: Boolean, default: false }
  },
  setup(props, { emit }) {
    const { syncView, prev, next } = useView(props, emit);
    const switchView = () => {
      if (syncView.value.type === "day") {
        syncView.value = __spreadProps(__spreadValues({}, syncView.value), { type: "month" });
      } else if (syncView.value.type === "month") {
        syncView.value = __spreadProps(__spreadValues({}, syncView.value), { type: "year" });
      }
    };
    const changeView = (view) => {
      syncView.value = view;
    };
    return { prev, next, changeView, switchView, syncView };
  }
});
const _hoisted_1 = {
  key: 0,
  class: "va-date-picker-header va-date-picker__header"
};
const _hoisted_2 = { class: "va-date-picker__header__text" };
const _hoisted_3 = { class: "ml-1" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_button = resolveComponent("va-button");
  return _ctx.syncView.type !== "year" ? (openBlock(), createElementBlock("div", _hoisted_1, [
    renderSlot(_ctx.$slots, "buttonPrev", normalizeProps(guardReactiveProps({ onClick: _ctx.prev })), () => [
      createVNode(_component_va_button, {
        disabled: _ctx.$props.disabled,
        icon: "chevron_left",
        flat: "",
        size: "small",
        color: _ctx.color,
        textColor: "dark",
        "aria-label": "next period",
        onClick: _ctx.prev
      }, null, 8, ["disabled", "color", "onClick"])
    ]),
    createElementVNode("div", _hoisted_2, [
      renderSlot(_ctx.$slots, "header", normalizeProps(guardReactiveProps({ year: _ctx.syncView.year, month: _ctx.syncView.month, monthNames: _ctx.monthNames, view: _ctx.syncView, changeView: _ctx.changeView, switchView: _ctx.switchView })), () => [
        createVNode(_component_va_button, {
          disabled: _ctx.$props.disabled,
          flat: "",
          size: "small",
          rounded: false,
          color: _ctx.color,
          textColor: "dark",
          "aria-label": "switch view",
          onClick: _ctx.switchView
        }, {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "year", normalizeProps(guardReactiveProps({ year: _ctx.syncView.year })), () => [
              createTextVNode(toDisplayString(_ctx.syncView.year), 1)
            ]),
            _ctx.syncView.type === "day" ? renderSlot(_ctx.$slots, "month", normalizeProps(mergeProps({ key: 0 }, { month: _ctx.syncView.month })), () => [
              createElementVNode("span", _hoisted_3, toDisplayString(_ctx.monthNames[_ctx.syncView.month]), 1)
            ]) : createCommentVNode("", true)
          ]),
          _: 3
        }, 8, ["disabled", "color", "onClick"])
      ])
    ]),
    renderSlot(_ctx.$slots, "buttonNext", normalizeProps(guardReactiveProps({ onClick: _ctx.next })), () => [
      createVNode(_component_va_button, {
        disabled: _ctx.$props.disabled,
        icon: "chevron_right",
        flat: "",
        size: "small",
        color: _ctx.color,
        textColor: "dark",
        "aria-label": "previous period",
        onClick: _ctx.next
      }, null, 8, ["disabled", "color", "onClick"])
    ])
  ])) : createCommentVNode("", true);
}
var VaDatePickerHeader = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { VaDatePickerHeader as V };

import './VaDatePickerHeader.css';
//# sourceMappingURL=VaDatePickerHeader.js.map
