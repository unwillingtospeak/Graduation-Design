var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import { defineComponent, computed, resolveComponent, openBlock, createBlock, mergeProps, withCtx, createElementVNode, normalizeStyle, createElementBlock, renderSlot, createVNode, createCommentVNode, createTextVNode, toDisplayString } from "vue";
import { e as extractComponentProps, f as filterComponentProps } from "../../utils/child-props.js";
import "../../../vendor.js";
import { u as useColors } from "../../composables/useColors.js";
import "../../composables/useDropdown.js";
import { u as useTextColor } from "../../composables/useTextColor.js";
import "../va-accordion/index.js";
import "../va-affix/index.js";
import "../va-alert/index.js";
import "../va-app-bar/index.js";
import "../va-avatar/index.js";
import "../va-backtop/index.js";
import "../va-badge/index.js";
import "../va-breadcrumbs/index.js";
import "../va-button-dropdown/index.js";
import "../va-button-group/index.js";
import "../va-button-toggle/index.js";
import "../va-button/index.js";
import "../va-card/index.js";
import "../va-carousel/index.js";
import "../va-checkbox/index.js";
import "../va-chip/index.js";
import "../va-collapse/index.js";
import "../va-color-indicator/index.js";
import "../va-color-input/index.js";
import "../va-color-palette/index.js";
import "../va-config/VaConfig.js";
import "../va-content/index.js";
import "../va-counter/index.js";
import "../va-data-table/index.js";
import "../va-date-input/index.js";
import "../va-date-picker/index.js";
import "../va-divider/index.js";
import { V as VaDropdown } from "../va-dropdown/index.js";
import "../va-file-upload/index.js";
import "../va-form/index.js";
import "../va-hover/index.js";
import { V as VaIcon } from "../va-icon/index.js";
import "../va-image/index.js";
import "../va-infinite-scroll/index.js";
import "../va-inner-loading/index.js";
import "../va-input/index.js";
import "../va-list/index.js";
import "../va-modal/VaModal.js";
import "../va-navbar/index.js";
import "../va-option-list/index.js";
import "../va-pagination/index.js";
import "../va-parallax/index.js";
import "./index.js";
import "../va-progress-bar/index.js";
import "../va-progress-circle/index.js";
import "../va-radio/index.js";
import "../va-rating/index.js";
import "../va-select/index.js";
import "../va-separator/VaSeparator.js";
import "../va-sidebar/index.js";
import "../va-slider/index.js";
import "../va-spacer/VaSpacer.js";
import "../va-switch/index.js";
import "../va-toast/index.js";
import "../va-tabs/index.js";
import "../va-time-input/index.js";
import "../va-time-picker/index.js";
import "../va-timeline/index.js";
import "../va-tree-view/index.js";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
var VaPopover_vue_vue_type_style_index_0_lang = "";
const VaDropdownProps = extractComponentProps(VaDropdown, ["closeOnClickOutside"]);
const _sfc_main = defineComponent({
  name: "VaPopover",
  components: { VaDropdown, VaIcon },
  props: __spreadProps(__spreadValues({}, VaDropdownProps), {
    trigger: { default: "hover" },
    color: { type: String, default: "dark" },
    textColor: { type: String },
    icon: { type: String, default: "" },
    title: { type: String, default: "" },
    message: { type: String, default: "" },
    autoHide: { type: Boolean, default: true },
    offset: { type: [Array, Number], default: 4 }
  }),
  setup(props, { slots }) {
    const VaDropdownPropValues = filterComponentProps(props, VaDropdownProps);
    const { getColor, getBoxShadowColor } = useColors();
    const { textColorComputed } = useTextColor();
    const showIconComputed = computed(() => props.icon || slots.icon);
    const showTitleComputed = computed(() => props.title || slots.title);
    const showBodyComputed = computed(() => props.message || slots.body);
    const showPopoverContentComputed = computed(() => showTitleComputed.value || showBodyComputed.value);
    const computedPopoverStyle = computed(() => ({
      boxShadow: `var(--va-popover-content-box-shadow) ${getBoxShadowColor(getColor(props.color))}`,
      backgroundColor: getColor(props.color),
      color: textColorComputed.value
    }));
    return {
      textColorComputed,
      VaDropdownPropValues,
      showBodyComputed,
      showIconComputed,
      showTitleComputed,
      computedPopoverStyle,
      showPopoverContentComputed
    };
  }
});
const _hoisted_1 = {
  key: 0,
  "aria-hidden": "true",
  class: "va-popover__icon"
};
const _hoisted_2 = { key: 1 };
const _hoisted_3 = {
  key: 0,
  class: "va-popover__title"
};
const _hoisted_4 = {
  key: 1,
  class: "va-popover__body"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_icon = resolveComponent("va-icon");
  const _component_va_dropdown = resolveComponent("va-dropdown");
  return openBlock(), createBlock(_component_va_dropdown, mergeProps(_ctx.VaDropdownPropValues, {
    "model-value": _ctx.modelValue,
    "close-on-click-outside": _ctx.autoHide,
    offset: _ctx.$props.offset,
    class: "va-popover"
  }), {
    default: withCtx(() => [
      createElementVNode("div", {
        style: normalizeStyle(_ctx.computedPopoverStyle),
        class: "va-popover__content",
        role: "tooltip"
      }, [
        _ctx.showIconComputed ? (openBlock(), createElementBlock("div", _hoisted_1, [
          renderSlot(_ctx.$slots, "icon", {}, () => [
            createVNode(_component_va_icon, {
              name: _ctx.$props.icon,
              color: _ctx.textColorComputed
            }, null, 8, ["name", "color"])
          ])
        ])) : createCommentVNode("", true),
        _ctx.showPopoverContentComputed ? (openBlock(), createElementBlock("div", _hoisted_2, [
          _ctx.showTitleComputed ? (openBlock(), createElementBlock("div", _hoisted_3, [
            renderSlot(_ctx.$slots, "title", {}, () => [
              createTextVNode(toDisplayString(_ctx.$props.title), 1)
            ])
          ])) : createCommentVNode("", true),
          _ctx.showBodyComputed ? (openBlock(), createElementBlock("div", _hoisted_4, [
            renderSlot(_ctx.$slots, "body", {}, () => [
              createTextVNode(toDisplayString(_ctx.$props.message), 1)
            ])
          ])) : createCommentVNode("", true)
        ])) : createCommentVNode("", true)
      ], 4)
    ]),
    anchor: withCtx(() => [
      renderSlot(_ctx.$slots, "default")
    ]),
    _: 3
  }, 16, ["model-value", "close-on-click-outside", "offset"]);
}
var _VaPopover = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaPopover as _ };

import './VaPopover.css';
//# sourceMappingURL=VaPopover.js.map
