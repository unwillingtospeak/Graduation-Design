var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import { defineComponent, shallowRef, computed, resolveComponent, openBlock, createBlock, mergeProps, withKeys, withModifiers, createSlots, withCtx, createElementBlock, createCommentVNode, createElementVNode, normalizeStyle, renderSlot, normalizeProps, guardReactiveProps, createVNode } from "vue";
import { p as pick_1, o as omit_1 } from "../../../vendor.js";
import { u as useFocusEmits, a as useFocus } from "../../composables/useFocus.js";
import { u as useColors } from "../../composables/useColors.js";
import { u as useEmitProxy } from "../../composables/useEmitProxy.js";
import { u as useFormProps } from "../../composables/useForm.js";
import "../../composables/useDropdown.js";
import { a as useStatefulProps, b as useStateful } from "../../composables/useStateful.js";
import { s as safeCSSLength } from "../../utils/css-utils.js";
import "../va-input/index.js";
import { V as VaIcon } from "../va-icon/VaIcon.js";
import { V as VaButton } from "../va-button/VaButton.js";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
import { V as VaInputWrapper } from "../va-input/components/VaInputWrapper/VaInputWrapper.js";
var VaCounter_vue_vue_type_style_index_0_lang = "";
const { createEmits: createInputEmits, createListeners: createInputListeners } = useEmitProxy(["change"]);
const { createEmits: createFieldEmits, createListeners: createFieldListeners } = useEmitProxy([
  { listen: "click-prepend", emit: "click:decrease-button" },
  { listen: "click-append", emit: "click:increase-button" },
  { listen: "click-prepend-inner", emit: "click:decrease-icon" },
  { listen: "click-append-inner", emit: "click:increase-icon" }
]);
const _sfc_main = defineComponent({
  name: "VaCounter",
  components: { VaInputWrapper, VaIcon, VaButton },
  props: __spreadProps(__spreadValues(__spreadValues({}, useFormProps), useStatefulProps), {
    modelValue: { type: [String, Number], default: 0 },
    manualInput: { type: Boolean, default: false },
    stateful: { type: Boolean, default: false },
    min: { type: Number, default: void 0 },
    max: { type: Number, default: void 0 },
    step: { type: Number, default: 1 },
    label: { type: String, default: "" },
    messages: { type: [Array, String], default: () => [] },
    width: { type: [String, Number], default: "160px" },
    color: { type: String, default: "primary" },
    outline: { type: Boolean },
    bordered: { type: Boolean },
    increaseIcon: { type: String, default: "add" },
    decreaseIcon: { type: String, default: "remove" },
    buttons: { type: Boolean, default: false },
    flat: { type: Boolean, default: true },
    rounded: { type: Boolean, default: false },
    margins: { type: [String, Number], default: "4px" },
    textColor: { type: String, default: void 0 }
  }),
  emits: [
    "update:modelValue",
    ...createInputEmits(),
    ...createFieldEmits(),
    ...useFocusEmits
  ],
  inheritAttrs: false,
  setup(props, { emit, attrs }) {
    const input = shallowRef();
    const {
      isFocused,
      focus,
      blur
    } = useFocus(input, emit);
    const { valueComputed } = useStateful(props, emit);
    const setCountInput = ({ target }) => {
      valueComputed.value = Number(target == null ? void 0 : target.value);
    };
    const setCountChange = ({ target }) => {
      calculateCounterValue(Number(target == null ? void 0 : target.value));
    };
    const getRoundDownWithStep = (value) => {
      if (!props.min || !props.step) {
        return value;
      }
      return props.min + props.step * Math.floor((value - props.min) / props.step);
    };
    const calculateCounterValue = (counterValue) => {
      if (props.min && counterValue < props.min) {
        valueComputed.value = props.min;
        return;
      }
      if (props.max && counterValue > props.max) {
        valueComputed.value = getRoundDownWithStep(props.max);
        return;
      }
      valueComputed.value = getRoundDownWithStep(counterValue);
    };
    const isMinReached = computed(() => {
      if (!props.min) {
        return false;
      }
      return Number(valueComputed.value) <= props.min;
    });
    const isMaxReached = computed(() => {
      if (!props.max) {
        return false;
      }
      return props.step ? Number(valueComputed.value) > props.max - props.step : Number(valueComputed.value) >= props.max;
    });
    const tabIndexComputed = computed(() => props.disabled ? -1 : 0);
    const isDecreaseActionDisabled = computed(() => isMinReached.value || props.readonly || props.disabled);
    const isIncreaseActionDisabled = computed(() => isMaxReached.value || props.readonly || props.disabled);
    const decreaseCount = () => {
      if (isDecreaseActionDisabled.value) {
        return;
      }
      calculateCounterValue(Number(valueComputed.value) - props.step);
    };
    const increaseCount = () => {
      if (isIncreaseActionDisabled.value) {
        return;
      }
      calculateCounterValue(Number(valueComputed.value) + props.step);
    };
    const { getColor } = useColors();
    const colorComputed = computed(() => getColor(props.color));
    const decreaseIconProps = computed(() => __spreadValues({
      class: { "va-counter__icon--inactive": isDecreaseActionDisabled.value },
      color: colorComputed.value,
      name: props.decreaseIcon
    }, !isDecreaseActionDisabled.value && { onClick: decreaseCount }));
    const increaseIconProps = computed(() => __spreadValues({
      class: { "va-counter__icon--inactive": isIncreaseActionDisabled.value },
      color: colorComputed.value,
      name: props.increaseIcon
    }, !isIncreaseActionDisabled.value && { onClick: increaseCount }));
    const isSquareCorners = computed(() => (typeof props.margins === "string" ? parseFloat(props.margins) : props.margins) === 0);
    const buttonProps = computed(() => __spreadProps(__spreadValues({}, pick_1(props, ["rounded", "color", "textColor"])), {
      flat: props.flat && !props.outline,
      outline: props.flat && props.outline
    }));
    const decreaseButtonProps = computed(() => __spreadProps(__spreadValues({}, buttonProps.value), {
      icon: props.decreaseIcon,
      disabled: isDecreaseActionDisabled.value
    }));
    const increaseButtonProps = computed(() => __spreadProps(__spreadValues({}, buttonProps.value), {
      icon: props.increaseIcon,
      disabled: isIncreaseActionDisabled.value
    }));
    const inputAttributesComputed = computed(() => __spreadProps(__spreadValues(__spreadValues({
      tabindex: tabIndexComputed.value,
      ariaLabel: props.label || "counter value",
      ariaValuemin: props.min,
      ariaValuemax: props.max
    }, omit_1(attrs, ["class", "style"])), pick_1(props, ["disabled", "min", "max", "step"])), {
      readonly: props.readonly || !props.manualInput
    }));
    const inputWrapperPropsComputed = computed(() => __spreadValues({}, pick_1(props, ["color", "readonly", "disabled", "messages", "label", "bordered", "outline"])));
    const classComputed = computed(() => [
      attrs.class,
      { "va-counter--input-square": isSquareCorners.value }
    ]);
    const styleComputed = computed(() => __spreadValues({
      width: safeCSSLength(props.width)
    }, attrs.style || {}));
    const marginComputed = computed(() => safeCSSLength(props.margins));
    return {
      input,
      valueComputed,
      isFocused,
      fieldListeners: createFieldListeners(emit),
      inputListeners: createInputListeners(emit),
      inputAttributesComputed,
      inputWrapperPropsComputed,
      setCountInput,
      setCountChange,
      decreaseCount,
      increaseCount,
      decreaseIconProps,
      increaseIconProps,
      decreaseButtonProps,
      increaseButtonProps,
      colorComputed,
      classComputed,
      styleComputed,
      marginComputed,
      focus,
      blur
    };
  }
});
const _hoisted_1 = {
  ref: "input",
  tabindex: "0"
};
const _hoisted_2 = ["value"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_button = resolveComponent("va-button");
  const _component_va_icon = resolveComponent("va-icon");
  const _component_va_input_wrapper = resolveComponent("va-input-wrapper");
  return openBlock(), createBlock(_component_va_input_wrapper, mergeProps({ class: "va-counter" }, __spreadValues(__spreadValues({}, _ctx.fieldListeners), _ctx.inputWrapperPropsComputed), {
    class: _ctx.classComputed,
    style: _ctx.styleComputed,
    focused: _ctx.isFocused,
    onKeydown: [
      _cache[8] || (_cache[8] = withKeys(withModifiers(($event) => _ctx.increaseCount(), ["prevent"]), ["up"])),
      _cache[9] || (_cache[9] = withKeys(withModifiers(($event) => _ctx.decreaseCount(), ["prevent"]), ["down"]))
    ]
  }), createSlots({
    default: withCtx(() => [
      !_ctx.$slots.content ? (openBlock(), createElementBlock("input", mergeProps({
        key: 0,
        ref: "input",
        class: "va-input__content__input",
        type: "number",
        inputmode: "decimal"
      }, __spreadValues(__spreadValues({}, _ctx.inputAttributesComputed), _ctx.inputListeners), {
        value: _ctx.valueComputed,
        onInput: _cache[6] || (_cache[6] = (...args) => _ctx.setCountInput && _ctx.setCountInput(...args)),
        onChange: _cache[7] || (_cache[7] = (...args) => _ctx.setCountChange && _ctx.setCountChange(...args))
      }), null, 16, _hoisted_2)) : createCommentVNode("", true)
    ]),
    _: 2
  }, [
    _ctx.$props.buttons ? {
      name: "prepend",
      fn: withCtx((slotScope) => [
        createElementVNode("div", {
          class: "va-counter__prepend-wrapper",
          style: normalizeStyle({ marginRight: _ctx.marginComputed }),
          onMousedown: _cache[1] || (_cache[1] = withModifiers(($event) => _ctx.focus(), ["prevent"]))
        }, [
          renderSlot(_ctx.$slots, "decreaseAction", normalizeProps(guardReactiveProps(__spreadProps(__spreadValues({}, slotScope), { decreaseCount: _ctx.decreaseCount }))), () => [
            createVNode(_component_va_button, mergeProps({
              class: "va-counter__button-decrease",
              "aria-label": "decrease counter"
            }, _ctx.decreaseButtonProps, {
              onClick: _cache[0] || (_cache[0] = ($event) => _ctx.decreaseCount())
            }), null, 16)
          ])
        ], 36)
      ])
    } : {
      name: "prependInner",
      fn: withCtx((slotScope) => [
        createElementVNode("div", {
          onMousedown: _cache[2] || (_cache[2] = withModifiers(($event) => _ctx.focus(), ["prevent"]))
        }, [
          renderSlot(_ctx.$slots, "decreaseAction", normalizeProps(guardReactiveProps(__spreadProps(__spreadValues({}, slotScope), { decreaseCount: _ctx.decreaseCount }))), () => [
            createVNode(_component_va_icon, mergeProps({ class: "va-counter__icon-decrease" }, _ctx.decreaseIconProps), null, 16)
          ])
        ], 32)
      ])
    },
    _ctx.$props.buttons ? {
      name: "append",
      fn: withCtx((slotScope) => [
        createElementVNode("div", {
          class: "va-counter__append-wrapper",
          style: normalizeStyle({ marginLeft: _ctx.marginComputed }),
          onMousedown: _cache[4] || (_cache[4] = withModifiers(($event) => _ctx.focus(), ["prevent"]))
        }, [
          renderSlot(_ctx.$slots, "increaseAction", normalizeProps(guardReactiveProps(__spreadProps(__spreadValues({}, slotScope), { increaseCount: _ctx.increaseCount }))), () => [
            createVNode(_component_va_button, mergeProps({
              class: "va-counter__button-increase",
              "aria-label": "increase counter"
            }, _ctx.increaseButtonProps, {
              onClick: _cache[3] || (_cache[3] = ($event) => _ctx.increaseCount())
            }), null, 16)
          ])
        ], 36)
      ])
    } : {
      name: "appendInner",
      fn: withCtx((slotScope) => [
        createElementVNode("div", {
          onMousedown: _cache[5] || (_cache[5] = withModifiers(($event) => _ctx.focus(), ["prevent"]))
        }, [
          renderSlot(_ctx.$slots, "increaseAction", normalizeProps(guardReactiveProps(__spreadProps(__spreadValues({}, slotScope), { increaseCount: _ctx.increaseCount }))), () => [
            createVNode(_component_va_icon, mergeProps({ class: "va-counter__icon-increase" }, _ctx.increaseIconProps), null, 16)
          ])
        ], 32)
      ])
    },
    _ctx.$slots.content ? {
      name: "default",
      fn: withCtx((slotScope) => [
        createElementVNode("div", _hoisted_1, [
          renderSlot(_ctx.$slots, "content", normalizeProps(guardReactiveProps(__spreadProps(__spreadValues({}, slotScope), { value: Number(_ctx.valueComputed) }))))
        ], 512)
      ])
    } : void 0
  ]), 1040, ["class", "style", "focused"]);
}
var _VaCounter = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaCounter as _ };

import './VaCounter.css';
//# sourceMappingURL=VaCounter.js.map
