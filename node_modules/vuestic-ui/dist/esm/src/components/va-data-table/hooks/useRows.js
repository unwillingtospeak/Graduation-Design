import { computed } from "vue";
import { a as getValueByPath } from "../../../services/utils.js";
const getItemKey = (source, itemsTrackBy) => typeof itemsTrackBy === "function" ? itemsTrackBy(source) : getValueByPath(source, itemsTrackBy) || source;
const buildTableCell = (rowIndex, rowKey, rowData, column) => {
  var _a;
  const source = getValueByPath(rowData, column.key);
  return {
    rowIndex,
    rowKey,
    rowData,
    column,
    source,
    value: ((_a = source == null ? void 0 : source.toString) == null ? void 0 : _a.call(source)) || ""
  };
};
const buildTableRow = (source, initialIndex, itemsTrackBy, columns) => {
  const itemKey = getItemKey(source, itemsTrackBy);
  return {
    initialIndex,
    itemKey,
    source,
    cells: columns.map((column) => buildTableCell(initialIndex, itemKey, source, column))
  };
};
function useRows(columns, props) {
  const rowsComputed = computed(() => props.items.map((rawItem, index) => buildTableRow(rawItem, index, props.itemsTrackBy, columns.value)));
  return {
    rowsComputed
  };
}
export { getItemKey as g, useRows as u };
//# sourceMappingURL=useRows.js.map
