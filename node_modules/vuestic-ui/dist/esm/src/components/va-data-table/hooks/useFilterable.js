import { computed, watch } from "vue";
function useFilterable(rawRows, props, emit) {
  const filteredRows = computed(() => {
    if (!rawRows.value.length) {
      return rawRows.value;
    }
    if (props.filter === "" && !props.filterMethod) {
      return rawRows.value;
    }
    return rawRows.value.filter((row) => row.cells.some((cell) => {
      return typeof props.filterMethod === "function" ? props.filterMethod(cell.source) : cell.value.toLowerCase().includes(props.filter.toLowerCase());
    }));
  });
  watch(filteredRows, () => {
    emit("filtered", {
      items: filteredRows.value.map((row) => row.source),
      itemsIndexes: filteredRows.value.map((row) => row.initialIndex)
    });
  });
  return {
    filteredRows
  };
}
export { useFilterable as u };
//# sourceMappingURL=useFilterable.js.map
