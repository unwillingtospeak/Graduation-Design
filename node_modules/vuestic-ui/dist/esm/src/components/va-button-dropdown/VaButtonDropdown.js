var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import { defineComponent, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, createBlock, withCtx, createVNode, mergeProps, toHandlers, withKeys, withModifiers, renderSlot, createTextVNode, toDisplayString, createCommentVNode } from "vue";
import { p as pick_1 } from "../../../vendor.js";
import "colortranslator";
import { u as useEmitProxy } from "../../composables/useEmitProxy.js";
import { p as placementsPositions } from "../../composables/useDropdown.js";
import { a as useStatefulProps, b as useStateful } from "../../composables/useStateful.js";
import { V as VaDropdown } from "../va-dropdown/index.js";
import { V as VaButton } from "../va-button/index.js";
import { V as VaButtonGroup } from "../va-button-group/index.js";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
import { V as VaDropdownContent } from "../va-dropdown/components/VaDropdownContent/index.js";
var VaButtonDropdown_vue_vue_type_style_index_0_lang = "";
const { createEmits, createVOnListeners: createListeners } = useEmitProxy(["click"]);
const { createEmits: createMainButtonEmits, createVOnListeners: createMainButtonListeners } = useEmitProxy([{ listen: "click", emit: "main-button-click" }]);
const componentName = "VaButtonDropdown";
const _sfc_main = defineComponent({
  name: componentName,
  components: {
    VaButtonGroup,
    VaButton,
    VaDropdown,
    VaDropdownContent
  },
  emits: ["update:modelValue", ...createEmits(), ...createMainButtonEmits()],
  props: __spreadProps(__spreadValues({}, useStatefulProps), {
    modelValue: { type: Boolean, default: false },
    stateful: { type: Boolean, default: true },
    color: { type: String, default: "primary" },
    textColor: { type: String, default: void 0 },
    size: {
      type: String,
      default: "medium",
      validator: (value) => ["medium", "small", "large"].includes(value)
    },
    outline: { type: Boolean, default: false },
    flat: { type: Boolean, default: false },
    rounded: { type: Boolean, default: true },
    gradient: { type: Boolean, default: void 0 },
    icon: { type: String, default: "expand_more" },
    openedIcon: { type: String, default: "expand_less" },
    hideIcon: { type: Boolean, default: false },
    leftIcon: { type: Boolean, default: false },
    disableButton: { type: Boolean, default: false },
    disableDropdown: { type: Boolean, default: false },
    disabled: { type: Boolean, default: false },
    placement: {
      type: String,
      default: "bottom",
      validator: (placement) => placementsPositions.includes(placement)
    },
    offset: { type: [Number, Array], default: 2 },
    keepAnchorWidth: { type: Boolean, default: false },
    closeOnContentClick: { type: Boolean, default: true },
    split: { type: Boolean },
    splitTo: { type: String, default: "" },
    splitHref: { type: String, default: "" },
    loading: { type: Boolean, default: false },
    label: { type: String }
  }),
  setup(props, { emit, slots }) {
    const { valueComputed } = useStateful(props, emit);
    const computedIcon = computed(() => {
      return valueComputed.value ? props.openedIcon : props.icon;
    });
    const computedClass = computed(() => ({
      "va-button-dropdown": true,
      "va-button-dropdown--split": props.split,
      "va-button-dropdown--normal": props.size === "medium",
      "va-button-dropdown--large": props.size === "large",
      "va-button-dropdown--small": props.size === "small"
    }));
    const computedButtonIcons = computed(() => {
      const propName = (props.label || slots.label) && !props.leftIcon ? "icon-right" : "icon";
      return props.hideIcon ? {} : { [propName]: computedIcon.value };
    });
    const computedViewStyles = computed(() => pick_1(props, ["outline", "gradient", "rounded", "flat", "size", "color"]));
    const computedMainButtonProps = computed(() => ({
      to: props.splitTo,
      href: props.splitHref,
      loading: props.loading
    }));
    const hideDropdown = () => {
      valueComputed.value = false;
    };
    return {
      hideDropdown,
      valueComputed,
      computedIcon,
      computedClass,
      listeners: createListeners(emit),
      mainButtonListeners: createMainButtonListeners(emit),
      computedButtonIcons,
      computedViewStyles,
      computedMainButtonProps
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_button = resolveComponent("va-button");
  const _component_va_dropdown_content = resolveComponent("va-dropdown-content");
  const _component_va_dropdown = resolveComponent("va-dropdown");
  const _component_va_button_group = resolveComponent("va-button-group");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.computedClass)
  }, [
    !_ctx.$props.split ? (openBlock(), createBlock(_component_va_dropdown, {
      key: 0,
      disabled: _ctx.$props.disabled,
      placement: _ctx.$props.placement,
      offset: _ctx.$props.offset,
      "keep-anchor-width": _ctx.$props.keepAnchorWidth,
      "close-on-content-click": _ctx.$props.closeOnContentClick,
      stateful: _ctx.$props.stateful,
      modelValue: _ctx.valueComputed,
      "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.valueComputed = $event)
    }, {
      anchor: withCtx(() => [
        createVNode(_component_va_button, mergeProps({
          disabled: _ctx.$props.disabled,
          round: !_ctx.$props.label && !_ctx.$slots.label
        }, __spreadValues(__spreadValues({}, _ctx.computedButtonIcons), _ctx.computedViewStyles), toHandlers(_ctx.listeners), {
          onKeydown: withKeys(withModifiers(_ctx.hideDropdown, ["prevent"]), ["esc"])
        }), {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "label", {}, () => [
              createTextVNode(toDisplayString(_ctx.label), 1)
            ])
          ]),
          _: 3
        }, 16, ["disabled", "round", "onKeydown"])
      ]),
      default: withCtx(() => [
        createVNode(_component_va_dropdown_content, null, {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        })
      ]),
      _: 3
    }, 8, ["disabled", "placement", "offset", "keep-anchor-width", "close-on-content-click", "stateful", "modelValue"])) : (openBlock(), createBlock(_component_va_button_group, mergeProps({
      key: 1,
      class: { "va-button-group__left-icon": _ctx.$props.leftIcon }
    }, _ctx.computedViewStyles), {
      default: withCtx(() => [
        !_ctx.$props.leftIcon ? (openBlock(), createBlock(_component_va_button, mergeProps({
          key: 0,
          disabled: _ctx.$props.disabled || _ctx.$props.disableButton
        }, _ctx.computedMainButtonProps, toHandlers(_ctx.mainButtonListeners)), {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "label", {}, () => [
              createTextVNode(toDisplayString(_ctx.label), 1)
            ])
          ]),
          _: 3
        }, 16, ["disabled"])) : createCommentVNode("", true),
        createVNode(_component_va_dropdown, {
          disabled: _ctx.$props.disabled || _ctx.$props.disableDropdown,
          placement: _ctx.$props.placement,
          offset: _ctx.$props.offset,
          stateful: _ctx.$props.stateful,
          modelValue: _ctx.valueComputed,
          "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.valueComputed = $event)
        }, {
          anchor: withCtx(() => [
            createVNode(_component_va_button, mergeProps({
              "aria-label": "toggle dropdown",
              disabled: _ctx.$props.disabled || _ctx.$props.disableDropdown,
              icon: _ctx.computedIcon
            }, toHandlers(_ctx.listeners), {
              onKeydown: withKeys(withModifiers(_ctx.hideDropdown, ["prevent"]), ["esc"])
            }), null, 16, ["disabled", "icon", "onKeydown"])
          ]),
          default: withCtx(() => [
            createVNode(_component_va_dropdown_content, null, {
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "default")
              ]),
              _: 3
            })
          ]),
          _: 3
        }, 8, ["disabled", "placement", "offset", "stateful", "modelValue"]),
        _ctx.$props.leftIcon ? (openBlock(), createBlock(_component_va_button, mergeProps({
          key: 1,
          disabled: _ctx.$props.disabled || _ctx.$props.disableButton
        }, _ctx.computedMainButtonProps, toHandlers(_ctx.mainButtonListeners)), {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "label", {}, () => [
              createTextVNode(toDisplayString(_ctx.label), 1)
            ])
          ]),
          _: 3
        }, 16, ["disabled"])) : createCommentVNode("", true)
      ]),
      _: 3
    }, 16, ["class"]))
  ], 2);
}
var _VaButtonDropdown = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaButtonDropdown as _ };

import './VaButtonDropdown.css';
//# sourceMappingURL=VaButtonDropdown.js.map
