var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import { defineComponent, shallowRef, computed, resolveComponent, openBlock, createElementBlock, createVNode, withKeys, withDirectives, createElementVNode, vModelText } from "vue";
import "../../../vendor.js";
import "colortranslator";
import "../../composables/useDropdown.js";
import { u as useStatefulEmits, a as useStatefulProps, b as useStateful } from "../../composables/useStateful.js";
import { V as VaColorIndicator } from "../va-color-indicator/index.js";
import { V as VaInput } from "../va-input/index.js";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
var VaColorInput_vue_vue_type_style_index_0_lang = "";
const _sfc_main = defineComponent({
  name: "VaColorInput",
  components: {
    VaInput,
    VaColorIndicator
  },
  emits: useStatefulEmits,
  props: __spreadProps(__spreadValues({}, useStatefulProps), {
    modelValue: { type: String, default: null },
    disabled: { type: Boolean, default: false },
    indicator: {
      type: String,
      default: "dot",
      validator: (value) => ["dot", "square"].includes(value)
    }
  }),
  setup: (props, { emit }) => {
    const colorPicker = shallowRef();
    const { valueComputed } = useStateful(props, emit);
    const callPickerDialog = () => {
      var _a;
      return !props.disabled && ((_a = colorPicker.value) == null ? void 0 : _a.click());
    };
    const tabIndexComputed = computed(() => props.disabled ? -1 : 0);
    return {
      valueComputed,
      callPickerDialog,
      colorPicker,
      tabIndexComputed
    };
  }
});
const _hoisted_1 = { class: "va-color-input" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_color_indicator = resolveComponent("va-color-indicator");
  const _component_va_input = resolveComponent("va-input");
  return openBlock(), createElementBlock("div", _hoisted_1, [
    createVNode(_component_va_color_indicator, {
      class: "va-color-input__dot",
      role: "button",
      "aria-label": "open color picker",
      "aria-disabled": _ctx.$props.disabled,
      tabindex: _ctx.tabIndexComputed,
      color: _ctx.valueComputed,
      indicator: _ctx.$props.indicator,
      onClick: _ctx.callPickerDialog,
      onKeydown: [
        withKeys(_ctx.callPickerDialog, ["space"]),
        withKeys(_ctx.callPickerDialog, ["enter"])
      ]
    }, null, 8, ["aria-disabled", "tabindex", "color", "indicator", "onClick", "onKeydown"]),
    createVNode(_component_va_input, {
      class: "va-color-input__input",
      placeholder: "input color",
      modelValue: _ctx.valueComputed,
      "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.valueComputed = $event),
      tabindex: _ctx.tabIndexComputed,
      disabled: _ctx.$props.disabled
    }, null, 8, ["modelValue", "tabindex", "disabled"]),
    withDirectives(createElementVNode("input", {
      ref: "colorPicker",
      type: "color",
      class: "visually-hidden",
      "aria-hidden": "true",
      tabindex: "-1",
      "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.valueComputed = $event)
    }, null, 512), [
      [vModelText, _ctx.valueComputed]
    ])
  ]);
}
var _VaColorInput = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaColorInput as _ };

import './VaColorInput.css';
//# sourceMappingURL=VaColorInput.js.map
