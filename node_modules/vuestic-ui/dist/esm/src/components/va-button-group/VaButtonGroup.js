var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import { defineComponent, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createVNode, withCtx, renderSlot } from "vue";
import "../../../vendor.js";
import { u as useColors } from "../../composables/useColors.js";
import "../../composables/useDropdown.js";
import { u as useTextColor } from "../../composables/useTextColor.js";
import { V as VaConfig } from "../va-config/VaConfig.js";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
var VaButtonGroup_vue_vue_type_style_index_0_lang = "";
const _sfc_main = defineComponent({
  name: "VaButtonGroup",
  components: { VaConfig },
  props: {
    color: { type: String, default: "primary" },
    gradient: { type: Boolean, default: void 0 },
    textColor: { type: String, default: void 0 },
    rounded: { type: Boolean, default: true },
    outline: { type: Boolean, default: false },
    flat: { type: Boolean, default: false },
    size: {
      type: String,
      default: "medium",
      validator: (value) => ["medium", "small", "large"].includes(value)
    }
  },
  setup(props) {
    const { getColor, getGradientBackground } = useColors();
    const colorComputed = computed(() => getColor(props.color));
    const isTransparentBackground = computed(() => Boolean(props.outline || props.flat));
    const { textColorComputed } = useTextColor(colorComputed, isTransparentBackground);
    const computedBackground = computed(() => {
      if (props.outline || props.flat) {
        return "";
      }
      return props.gradient ? getGradientBackground(colorComputed.value) : colorComputed.value;
    });
    const computedStyle = computed(() => {
      const backgroundProperty = props.gradient ? "background-image" : "background";
      return {
        [backgroundProperty]: computedBackground.value,
        color: textColorComputed.value
      };
    });
    const buttonConfig = computed(() => ({
      VaButton: __spreadProps(__spreadValues({}, props), {
        color: props.gradient ? "#00000000" : props.color,
        textColor: textColorComputed.value
      })
    }));
    const computedClass = computed(() => ({ "va-button-group_square": !props.rounded }));
    return {
      buttonConfig,
      computedStyle,
      computedClass
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_config = resolveComponent("va-config");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(["va-button-group", _ctx.computedClass]),
    style: normalizeStyle(_ctx.computedStyle)
  }, [
    createVNode(_component_va_config, { components: _ctx.buttonConfig }, {
      default: withCtx(() => [
        renderSlot(_ctx.$slots, "default")
      ]),
      _: 3
    }, 8, ["components"])
  ], 6);
}
var _VaButtonGroup = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaButtonGroup as _ };

import './VaButtonGroup.css';
//# sourceMappingURL=VaButtonGroup.js.map
