var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import { defineComponent, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, withKeys, Fragment, renderList, createBlock, mergeProps, createSlots, withCtx, createVNode, normalizeStyle, toDisplayString, createCommentVNode } from "vue";
import { e as extractComponentProps, f as filterComponentProps } from "../../utils/child-props.js";
import "../../../vendor.js";
import "colortranslator";
import { u as useFormProps, a as useForm } from "../../composables/useForm.js";
import "../../composables/useDropdown.js";
import { u as useRatingProps, a as useRating } from "./hooks/useRating.js";
import { u as useVaRatingColorsProps, a as useVaRatingColors } from "./hooks/useVaRatingColors.js";
import { R as RatingValue } from "./types.js";
import { _ as _VaRatingItem } from "./components/VaRatingItem/VaRatingItem.js";
import { V as VaRatingItemNumberButton } from "./components/VaRatingItemNumberButton.js";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
var VaRating_vue_vue_type_style_index_0_lang = "";
const VaRatingItemProps = extractComponentProps(_VaRatingItem);
const VaRatingItemNumberButtonProps = extractComponentProps(VaRatingItemNumberButton, ["modelValue", "itemNumber"]);
const _sfc_main = defineComponent({
  name: "VaRating",
  props: __spreadProps(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, useRatingProps), useVaRatingColorsProps), useFormProps), VaRatingItemProps), VaRatingItemNumberButtonProps), {
    numbers: { type: Boolean, default: false },
    halves: { type: Boolean, default: false },
    max: { type: Number, default: 5 },
    texts: { type: Array, default: () => [] }
  }),
  emits: ["update:modelValue"],
  components: { VaRatingItem: _VaRatingItem, VaRatingItemNumberButton },
  setup(props) {
    const { computedClasses: rootClass } = useForm("va-rating", props);
    const rating = useRating(props);
    const isInteractionsEnabled = computed(() => !props.disabled && !props.readonly);
    return __spreadProps(__spreadValues(__spreadValues({}, useVaRatingColors(props)), rating), {
      rootClass,
      VaRatingItemProps: filterComponentProps(props, VaRatingItemProps),
      VaRatingItemNumberButtonProps: filterComponentProps(props, VaRatingItemNumberButtonProps),
      isInteractionsEnabled,
      tabIndexComputed: computed(() => isInteractionsEnabled.value ? 0 : void 0),
      onArrowKeyPress: (direction) => {
        const step = props.halves ? RatingValue.HALF : RatingValue.FULL;
        rating.onItemValueUpdate(rating.visibleValue.value, step * direction);
      }
    });
  }
});
const _hoisted_1 = ["aria-label"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_VaRatingItemNumberButton = resolveComponent("VaRatingItemNumberButton");
  const _component_va_rating_item = resolveComponent("va-rating-item");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(["va-rating", _ctx.rootClass]),
    "aria-label": `current rating ${_ctx.$props.modelValue} of ${_ctx.$props.max}`
  }, [
    createElementVNode("div", {
      class: "va-rating__item-wrapper",
      onKeyup: [
        _cache[0] || (_cache[0] = withKeys(($event) => _ctx.onArrowKeyPress(-1), ["left"])),
        _cache[1] || (_cache[1] = withKeys(($event) => _ctx.onArrowKeyPress(1), ["right"]))
      ],
      onMouseenter: _cache[2] || (_cache[2] = (...args) => _ctx.onMouseEnter && _ctx.onMouseEnter(...args)),
      onMouseleave: _cache[3] || (_cache[3] = (...args) => _ctx.onMouseLeave && _ctx.onMouseLeave(...args))
    }, [
      (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.$props.max, (itemNumber) => {
        return openBlock(), createBlock(_component_va_rating_item, mergeProps({ key: itemNumber }, _ctx.VaRatingItemProps, {
          "aria-label": `vote rating ${itemNumber} of ${_ctx.$props.max}`,
          "model-value": _ctx.getItemValue(itemNumber - 1),
          tabindex: _ctx.tabIndexComputed,
          disabled: _ctx.$props.disabled,
          readonly: _ctx.$props.readonly,
          onHover: ($event) => _ctx.isInteractionsEnabled && _ctx.onItemHoveredValueUpdate(itemNumber - 1, $event),
          "onUpdate:modelValue": ($event) => _ctx.isInteractionsEnabled && _ctx.onItemValueUpdate(itemNumber - 1, $event)
        }), createSlots({ _: 2 }, [
          _ctx.$props.numbers ? {
            name: "default",
            fn: withCtx(({ props }) => [
              createVNode(_component_VaRatingItemNumberButton, mergeProps(_ctx.VaRatingItemNumberButtonProps, {
                "model-value": props.value,
                "item-number": itemNumber,
                onClick: props.onClick
              }), null, 16, ["model-value", "item-number", "onClick"])
            ])
          } : void 0
        ]), 1040, ["aria-label", "model-value", "tabindex", "disabled", "readonly", "onHover", "onUpdate:modelValue"]);
      }), 128))
    ], 32),
    _ctx.$props.texts && _ctx.$props.texts.length === _ctx.$props.max ? (openBlock(), createElementBlock("span", {
      key: 0,
      class: "va-rating__text-wrapper",
      style: normalizeStyle({ color: _ctx.computedColor })
    }, toDisplayString(_ctx.$props.texts[Math.round(_ctx.visibleValue) - 1]), 5)) : createCommentVNode("", true)
  ], 10, _hoisted_1);
}
var _VaRating = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaRating as _ };

import './VaRating.css';
//# sourceMappingURL=VaRating.js.map
