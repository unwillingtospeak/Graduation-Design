import { defineComponent, inject, provide, computed, onMounted, onBeforeUnmount, resolveComponent, openBlock, createElementBlock, normalizeClass, renderSlot, createCommentVNode, createVNode, createElementVNode } from "vue";
import "../../../../vendor.js";
import { u as useColors } from "../../../composables/useColors.js";
import "../../../composables/useDropdown.js";
import { V as VaIcon } from "../../va-icon/index.js";
import { a as TreeCategoryKey, b as TreeNodeKey } from "../types/index.js";
import { _ as _export_sfc } from "../../../../plugin-vue_export-helper.js";
var VaTreeNode_vue_vue_type_style_index_0_lang = "";
const _sfc_main = defineComponent({
  name: "VaTreeNode",
  components: { VaIcon },
  props: {
    highlighted: {
      type: Boolean,
      default: false
    },
    icon: {
      type: String,
      default: ""
    },
    iconRight: {
      type: String,
      default: ""
    },
    color: {
      type: String,
      default: "primary"
    }
  },
  setup(props) {
    const { getColor } = useColors();
    const treeCategory = inject(TreeCategoryKey, {
      onChildMounted: (value) => void 0,
      onChildUnmounted: (value) => void 0
    });
    provide(TreeNodeKey, {
      props: computed(() => props)
    });
    onMounted(() => treeCategory && treeCategory.onChildMounted(TreeNodeKey));
    onBeforeUnmount(() => treeCategory && treeCategory.onChildUnmounted(TreeNodeKey));
    return {
      treeCategory,
      getColor
    };
  }
});
const _hoisted_1 = {
  key: 0,
  class: "va-tree-node__checkbox"
};
const _hoisted_2 = {
  key: 1,
  class: "va-tree-node__icon"
};
const _hoisted_3 = { class: "va-tree-node__label" };
const _hoisted_4 = {
  key: 2,
  class: "va-tree-node__icon-right",
  size: 24
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_icon = resolveComponent("va-icon");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(["va-tree-node", { "va-tree-node--highlighted": _ctx.$props.highlighted }])
  }, [
    _ctx.$slots.checkbox ? (openBlock(), createElementBlock("div", _hoisted_1, [
      renderSlot(_ctx.$slots, "checkbox")
    ])) : createCommentVNode("", true),
    _ctx.$props.icon ? (openBlock(), createElementBlock("div", _hoisted_2, [
      createVNode(_component_va_icon, {
        name: _ctx.$props.icon,
        color: _ctx.getColor("info"),
        size: 24
      }, null, 8, ["name", "color"])
    ])) : createCommentVNode("", true),
    createElementVNode("div", _hoisted_3, [
      renderSlot(_ctx.$slots, "default")
    ]),
    _ctx.$props.iconRight ? (openBlock(), createElementBlock("div", _hoisted_4, [
      createVNode(_component_va_icon, {
        name: _ctx.$props.iconRight,
        color: _ctx.getColor("info")
      }, null, 8, ["name", "color"])
    ])) : createCommentVNode("", true)
  ], 2);
}
var _VaTreeNode = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaTreeNode as _ };

import './VaTreeNode.css';
//# sourceMappingURL=VaTreeNode.js.map
