var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
import { defineComponent, ref, provide, nextTick, openBlock, createElementBlock, renderSlot } from "vue";
import "../../../vendor.js";
import { u as useColors } from "../../composables/useColors.js";
import "../../composables/useDropdown.js";
import { T as TreeViewKey } from "./types/index.js";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
var VaTreeView_vue_vue_type_style_index_0_lang = "";
const _sfc_main = defineComponent({
  name: "VaTreeView",
  props: {
    color: {
      type: String,
      default: ""
    }
  },
  setup: (props) => {
    const categories = ref([]);
    const collapse = () => {
      nextTick(() => {
        categories.value.forEach((child) => {
          child.collapse();
        });
      });
    };
    const expand = () => {
      nextTick(() => {
        categories.value.forEach((child) => {
          child.expand();
        });
      });
    };
    const onChildMounted = (category) => {
      categories.value.push(category);
    };
    const onChildUnmounted = (removableCategory) => {
      categories.value = categories.value.filter((category) => category !== removableCategory);
    };
    const treeView = {
      color: props.color,
      onChildMounted,
      onChildUnmounted
    };
    provide(TreeViewKey, treeView);
    return __spreadValues({
      collapse,
      expand
    }, useColors());
  }
});
const _hoisted_1 = { class: "va-tree-view" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1, [
    renderSlot(_ctx.$slots, "default")
  ]);
}
var _VaTreeView = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaTreeView as _ };

import './VaTreeView.css';
//# sourceMappingURL=VaTreeView.js.map
