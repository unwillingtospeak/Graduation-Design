import { defineComponent, computed, ref, inject, watch, provide, onMounted, onBeforeUnmount, nextTick, resolveComponent, openBlock, createElementBlock, createElementVNode, createVNode, renderSlot, createCommentVNode, toDisplayString } from "vue";
import { S as SquareWithIcon } from "../SquareWithIcon/SquareWithIcon.js";
import { V as VaIcon } from "../../va-icon/VaIcon.js";
import "../../../../vendor.js";
import { u as useColors } from "../../../composables/useColors.js";
import "../../../composables/useDropdown.js";
import { T as TreeViewKey, a as TreeCategoryKey } from "../types/index.js";
import { _ as _export_sfc } from "../../../../plugin-vue_export-helper.js";
var VaTreeCategory_vue_vue_type_style_index_0_lang = "";
const _sfc_main = defineComponent({
  name: "VaTreeCategory",
  components: {
    SquareWithIcon,
    VaIcon
  },
  props: {
    label: {
      type: [String, Number],
      default: ""
    },
    isOpen: {
      type: Boolean,
      default: false
    },
    icon: {
      type: String,
      default: ""
    },
    color: {
      type: String,
      default: "primary"
    }
  },
  setup: (props) => {
    const { getColor } = useColors();
    const colorComputed = computed(() => getColor(props.color));
    const nodes = ref([]);
    const isOpenCached = ref(false);
    const onChildMounted = (node) => {
      nodes.value.push(node);
    };
    const onChildUnmounted = (removableNode) => {
      nodes.value = nodes.value.filter((node) => node !== removableNode);
    };
    const treeView = inject(TreeViewKey, {
      onChildMounted: (value) => void 0,
      onChildUnmounted: (value) => void 0
    });
    const collapse = () => {
      isOpenCached.value = false;
      nextTick(() => {
        nodes.value.forEach((child) => {
          if (child.$options.name === "va-tree-category") {
            child.collapse();
          }
        });
      });
    };
    const expand = () => {
      isOpenCached.value = true;
      nextTick(() => {
        nodes.value.forEach((child) => {
          var _a;
          (_a = child.expand) == null ? void 0 : _a.call(child);
        });
      });
    };
    const toggle = (e) => {
      if (!e.target.classList.contains("va-checkbox__input")) {
        isOpenCached.value = !isOpenCached.value;
      }
    };
    watch(() => props.isOpen, (isOpen) => {
      isOpenCached.value = isOpen;
    }, { immediate: true });
    const treeCategory = {
      treeView,
      nodes: nodes.value,
      isOpenCached: isOpenCached.value,
      onChildMounted,
      onChildUnmounted,
      collapse,
      expand,
      toggle
    };
    provide(TreeCategoryKey, treeCategory);
    onMounted(() => treeView == null ? void 0 : treeView.onChildMounted(treeCategory));
    onBeforeUnmount(() => treeView == null ? void 0 : treeView.onChildUnmounted(treeCategory));
    return {
      treeCategory,
      treeView,
      nodes,
      isOpenCached,
      collapse,
      expand,
      toggle,
      getColor,
      colorComputed
    };
  }
});
const _hoisted_1 = { class: "va-tree-category" };
const _hoisted_2 = { class: "va-tree-category__header-switcher" };
const _hoisted_3 = {
  key: 0,
  class: "va-tree-category__header-checkbox"
};
const _hoisted_4 = {
  key: 1,
  class: "va-tree-category__header-icon"
};
const _hoisted_5 = { class: "va-tree-category__header-label" };
const _hoisted_6 = {
  key: 0,
  class: "va-tree-category__list-container"
};
const _hoisted_7 = { class: "va-tree-category__list-internal-container" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_square_with_icon = resolveComponent("square-with-icon");
  const _component_va_icon = resolveComponent("va-icon");
  return openBlock(), createElementBlock("div", _hoisted_1, [
    createElementVNode("div", {
      class: "va-tree-category__header",
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.toggle && _ctx.toggle(...args))
    }, [
      createElementVNode("div", _hoisted_2, [
        createVNode(_component_square_with_icon, {
          icon: _ctx.isOpenCached ? "remove" : "add",
          color: _ctx.colorComputed
        }, null, 8, ["icon", "color"])
      ]),
      _ctx.$slots.checkbox ? (openBlock(), createElementBlock("div", _hoisted_3, [
        renderSlot(_ctx.$slots, "checkbox")
      ])) : createCommentVNode("", true),
      _ctx.$props.icon ? (openBlock(), createElementBlock("div", _hoisted_4, [
        createVNode(_component_va_icon, {
          name: _ctx.$props.icon,
          color: _ctx.getColor("info")
        }, null, 8, ["name", "color"])
      ])) : createCommentVNode("", true),
      createElementVNode("div", _hoisted_5, toDisplayString(_ctx.$props.label), 1)
    ]),
    _ctx.isOpenCached ? (openBlock(), createElementBlock("div", _hoisted_6, [
      createElementVNode("div", _hoisted_7, [
        renderSlot(_ctx.$slots, "default")
      ])
    ])) : createCommentVNode("", true)
  ]);
}
var _VaTreeCategory = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaTreeCategory as _ };

import './VaTreeCategory.css';
//# sourceMappingURL=VaTreeCategory.js.map
