import { defineComponent, shallowRef, ref, computed, onMounted, provide, toRef, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, renderSlot, createElementVNode, toDisplayString, createCommentVNode, createVNode, withCtx, createTextVNode, createBlock } from "vue";
import { u as useBem } from "../../composables/useBem.js";
import { u as useColors } from "../../composables/useColors.js";
import "../../../vendor.js";
import "../../composables/useDropdown.js";
import { V as VaFileUploadKey } from "./types.js";
import "../va-accordion/index.js";
import "../va-affix/index.js";
import "../va-alert/index.js";
import "../va-app-bar/index.js";
import "../va-avatar/index.js";
import "../va-backtop/index.js";
import "../va-badge/index.js";
import "../va-breadcrumbs/index.js";
import "../va-button-dropdown/index.js";
import "../va-button-group/index.js";
import "../va-button-toggle/index.js";
import { V as VaButton } from "../va-button/index.js";
import "../va-card/index.js";
import "../va-carousel/index.js";
import "../va-checkbox/index.js";
import "../va-chip/index.js";
import "../va-collapse/index.js";
import "../va-color-indicator/index.js";
import "../va-color-input/index.js";
import "../va-color-palette/index.js";
import "../va-config/VaConfig.js";
import "../va-content/index.js";
import "../va-counter/index.js";
import "../va-data-table/index.js";
import "../va-date-input/index.js";
import "../va-date-picker/index.js";
import "../va-divider/index.js";
import "../va-dropdown/index.js";
import "./index.js";
import "../va-form/index.js";
import "../va-hover/index.js";
import "../va-icon/index.js";
import "../va-image/index.js";
import "../va-infinite-scroll/index.js";
import "../va-inner-loading/index.js";
import "../va-input/index.js";
import "../va-list/index.js";
import { V as VaModal } from "../va-modal/VaModal.js";
import "../va-navbar/index.js";
import "../va-option-list/index.js";
import "../va-pagination/index.js";
import "../va-parallax/index.js";
import "../va-popover/index.js";
import "../va-progress-bar/index.js";
import "../va-progress-circle/index.js";
import "../va-radio/index.js";
import "../va-rating/index.js";
import "../va-select/index.js";
import "../va-separator/VaSeparator.js";
import "../va-sidebar/index.js";
import "../va-slider/index.js";
import "../va-spacer/VaSpacer.js";
import "../va-switch/index.js";
import "../va-toast/index.js";
import "../va-tabs/index.js";
import "../va-time-input/index.js";
import "../va-time-picker/index.js";
import "../va-timeline/index.js";
import "../va-tree-view/index.js";
import { V as VaFileUploadList } from "./VaFileUploadList/index.js";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
var VaFileUpload_vue_vue_type_style_index_0_lang = "";
const _sfc_main = defineComponent({
  name: "VaFileUpload",
  components: {
    VaModal,
    VaButton,
    VaFileUploadList
  },
  props: {
    fileTypes: { type: String, default: "" },
    dropzone: { type: Boolean, default: false },
    hideFileList: { type: Boolean, default: false },
    color: { type: String, default: "primary" },
    disabled: { type: Boolean, default: false },
    undo: { type: Boolean, default: false },
    undoDuration: { type: Number, default: 3e3 },
    undoButtonText: { type: String, default: "Undo" },
    dropZoneText: { type: String, default: "Drag\u2019n\u2019drop files or" },
    uploadButtonText: { type: String, default: "Upload file" },
    deletedFileMessage: { type: String, default: "File was successfully deleted" },
    modelValue: {
      type: [Object, Array],
      default: () => []
    },
    type: {
      type: String,
      default: "list",
      validator: (value) => ["list", "gallery", "single"].includes(value)
    }
  },
  emits: ["update:modelValue", "file-removed", "file-added"],
  setup(props, { emit }) {
    const fileInputRef = shallowRef();
    const modal = ref(false);
    const dropzoneHighlight = ref(false);
    const { getColor, shiftHSLAColor } = useColors();
    const colorComputed = computed(() => getColor(props.color));
    const computedStyle = computed(() => ({
      backgroundColor: props.dropzone ? shiftHSLAColor(colorComputed.value, { a: dropzoneHighlight.value ? -0.82 : -0.92 }) : "transparent"
    }));
    const computedClasses = useBem("va-file-upload", () => ({
      dropzone: props.dropzone,
      disabled: props.disabled
    }));
    const files = computed({
      get() {
        return Array.isArray(props.modelValue) ? props.modelValue : [props.modelValue];
      },
      set(files2) {
        if (props.type === "single") {
          emit("update:modelValue", files2[0]);
        } else {
          emit("update:modelValue", files2);
        }
      }
    });
    const validateFiles = (files2) => files2.filter((file) => {
      const fileName = file.name || file.url;
      if (!fileName) {
        return false;
      }
      if (file.url) {
        return true;
      }
      const MIMETypes = ["audio/*", "video/*", "image/*"];
      const isContainedMIMEType = MIMETypes.find((t) => props.fileTypes.includes(t));
      if (isContainedMIMEType) {
        return true;
      }
      const extension = fileName.substring(fileName.lastIndexOf(".") + 1).toLowerCase();
      const isCorrectExt = props.fileTypes.includes(extension);
      if (!isCorrectExt) {
        modal.value = true;
      }
      return isCorrectExt;
    });
    const uploadFile = (e) => {
      var _a, _b;
      const f = ((_a = e.target) == null ? void 0 : _a.files) || ((_b = e.dataTransfer) == null ? void 0 : _b.files);
      if (!f) {
        return;
      }
      const validatedFiles = props.fileTypes ? validateFiles(Array.from(f)) : f;
      files.value = props.type === "single" ? validatedFiles : [...files.value, ...validatedFiles];
      emit("file-added", validatedFiles);
    };
    const changeFieldValue = (e) => {
      uploadFile(e);
      if (fileInputRef.value) {
        fileInputRef.value.value = "";
      }
    };
    const removeFile = (index) => {
      if (index in files.value) {
        const removedFile = files.value[index];
        files.value = files.value.filter((item, idx) => idx !== index);
        emit("file-removed", removedFile);
      }
    };
    const removeSingleFile = () => {
      if (files.value.length > 0) {
        const removedFile = files.value[0];
        files.value = [];
        emit("file-removed", removedFile);
      }
    };
    const callFileDialogue = () => {
      if (fileInputRef.value) {
        fileInputRef.value.click();
      }
    };
    onMounted(() => {
      if (Array.isArray(files.value)) {
        files.value = validateFiles(files.value);
      }
    });
    provide(VaFileUploadKey, {
      undo: toRef(props, "undo"),
      disabled: toRef(props, "disabled"),
      undoDuration: toRef(props, "undoDuration"),
      undoButtonText: toRef(props, "undoButtonText"),
      deletedFileMessage: toRef(props, "deletedFileMessage")
    });
    return {
      modal,
      dropzoneHighlight,
      fileInputRef,
      colorComputed,
      computedStyle,
      computedClasses,
      files,
      uploadFile,
      changeFieldValue,
      removeFile,
      removeSingleFile,
      callFileDialogue
    };
  }
});
const _hoisted_1 = { class: "va-file-upload__field" };
const _hoisted_2 = {
  key: 0,
  class: "va-file-upload__field__text"
};
const _hoisted_3 = ["accept", "multiple", "disabled"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_button = resolveComponent("va-button");
  const _component_va_file_upload_list = resolveComponent("va-file-upload-list");
  const _component_va_modal = resolveComponent("va-modal");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(["va-file-upload", _ctx.computedClasses]),
    style: normalizeStyle(_ctx.computedStyle)
  }, [
    renderSlot(_ctx.$slots, "default", {}, () => [
      createElementVNode("div", _hoisted_1, [
        _ctx.dropzone ? (openBlock(), createElementBlock("div", _hoisted_2, toDisplayString(_ctx.dropZoneText), 1)) : createCommentVNode("", true),
        createVNode(_component_va_button, {
          class: "va-file-upload__field__button",
          disabled: _ctx.disabled,
          "aria-disabled": _ctx.disabled,
          color: _ctx.colorComputed,
          style: normalizeStyle({ "pointer-events": _ctx.dropzoneHighlight ? "none" : "" }),
          onChange: _ctx.changeFieldValue,
          onClick: _ctx.callFileDialogue
        }, {
          default: withCtx(() => [
            createTextVNode(toDisplayString(_ctx.uploadButtonText), 1)
          ]),
          _: 1
        }, 8, ["disabled", "aria-disabled", "color", "style", "onChange", "onClick"])
      ])
    ]),
    createElementVNode("input", {
      ref: "fileInputRef",
      type: "file",
      class: "va-file-upload__field__input",
      tabindex: -1,
      "aria-hidden": "true",
      accept: _ctx.fileTypes,
      multiple: _ctx.type !== "single",
      disabled: _ctx.disabled,
      onChange: _cache[0] || (_cache[0] = (...args) => _ctx.changeFieldValue && _ctx.changeFieldValue(...args)),
      onDragenter: _cache[1] || (_cache[1] = ($event) => _ctx.dropzoneHighlight = true),
      onDragleave: _cache[2] || (_cache[2] = ($event) => _ctx.dropzoneHighlight = false)
    }, null, 40, _hoisted_3),
    _ctx.files.length && !_ctx.$props.hideFileList ? (openBlock(), createBlock(_component_va_file_upload_list, {
      key: 0,
      type: _ctx.type,
      files: _ctx.files,
      color: _ctx.colorComputed,
      onRemove: _ctx.removeFile,
      onRemoveSingle: _ctx.removeSingleFile
    }, null, 8, ["type", "files", "color", "onRemove", "onRemoveSingle"])) : createCommentVNode("", true),
    createVNode(_component_va_modal, {
      modelValue: _ctx.modal,
      "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => _ctx.modal = $event),
      "hide-default-actions": "",
      title: "File validation",
      message: "File type is incorrect!"
    }, null, 8, ["modelValue"])
  ], 6);
}
var _VaFileUpload = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaFileUpload as _ };

import './VaFileUpload.css';
//# sourceMappingURL=VaFileUpload.js.map
