var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import { u as useGlobalConfigSafe } from "../services/global-config/global-config.js";
import { g as getBoxShadowColor, c as getHoverColor, b as getFocusColor, a as getGradientBackground, e as getTextColor, s as shiftHSLAColor, f as setHSLAColor, i as isColor, h as isCSSVariable } from "../services/color-config/color-functions.js";
const useColorProps = {
  color: {
    type: String,
    default: ""
  }
};
const useColors = () => {
  const globalConfig = useGlobalConfigSafe();
  if (!globalConfig) {
    throw new Error("useColors must be used in setup function or Vuestic GlobalConfigPlugin is not registered!");
  }
  const { setGlobalConfig, getGlobalConfig } = globalConfig;
  const setColors = (colors) => {
    setGlobalConfig((config) => __spreadProps(__spreadValues({}, config), {
      colors: __spreadValues(__spreadValues({}, config.colors), colors)
    }));
  };
  const getColors = () => {
    return getGlobalConfig().colors || {};
  };
  const getColor = (prop, defaultColor, preferVariables) => {
    if (!defaultColor) {
      defaultColor = getColors().primary;
    }
    const colors = getColors();
    if (!prop) {
      prop = defaultColor;
    }
    if (colors[prop]) {
      return preferVariables ? `var(--va-${prop})` : colors[prop];
    }
    if (isColor(prop)) {
      return prop;
    }
    if (preferVariables && isCSSVariable(prop)) {
      return prop;
    }
    return defaultColor;
  };
  const colorsToCSSVariable = (colors, prefix = "va") => {
    return Object.keys(colors).filter((key) => colors[key] !== void 0).reduce((acc, colorName) => {
      acc[`--${prefix}-${colorName}`] = getColor(colors[colorName], void 0, true);
      return acc;
    }, {});
  };
  return {
    setColors,
    getColors,
    getColor,
    getBoxShadowColor,
    getHoverColor,
    getFocusColor,
    getGradientBackground,
    getTextColor,
    shiftHSLAColor,
    setHSLAColor,
    colorsToCSSVariable
  };
};
export { useColorProps as a, useColors as u };
//# sourceMappingURL=useColors.js.map
