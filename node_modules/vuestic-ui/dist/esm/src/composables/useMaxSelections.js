const useMaxSelectionsProps = {
  maxSelections: {
    type: [Number, String],
    default: void 0
  }
};
function useMaxSelections(selections, maxSelections, emit) {
  const exceedsMaxSelections = () => {
    if (maxSelections.value === void 0 || isNaN(+maxSelections.value)) {
      return false;
    }
    return selections.value.length >= maxSelections.value;
  };
  const addOption = (optionToAdd) => {
    const newSelectedOptions = [...selections.value, optionToAdd];
    emit("update:modelValue", newSelectedOptions);
  };
  return {
    exceedsMaxSelections,
    addOption
  };
}
export { useMaxSelections as a, useMaxSelectionsProps as u };
//# sourceMappingURL=useMaxSelections.js.map
