import { ref, watch, computed } from "vue";
const useStatefulProps = {
  stateful: { type: Boolean, default: false },
  modelValue: { type: void 0 }
};
const useStatefulEmits = ["update:modelValue"];
function useStateful(props, emit, defaultValue) {
  const valueState = ref(defaultValue === void 0 ? props.modelValue : defaultValue);
  let unwatchModelValue;
  const watchModelValue = () => {
    unwatchModelValue = watch(() => props.modelValue, (modelValue) => {
      valueState.value = modelValue;
    });
  };
  watch(() => props.stateful, (stateful) => {
    stateful ? watchModelValue() : unwatchModelValue == null ? void 0 : unwatchModelValue();
  }, { immediate: true });
  const valueComputed = computed({
    get() {
      if (props.stateful) {
        return valueState.value;
      }
      return props.modelValue;
    },
    set(value) {
      if (props.stateful) {
        valueState.value = value;
      }
      emit("update:modelValue", value);
    }
  });
  return { valueComputed };
}
export { useStatefulProps as a, useStateful as b, useStatefulEmits as u };
//# sourceMappingURL=useStateful.js.map
