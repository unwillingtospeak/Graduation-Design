{"version":3,"file":"useSelectableList.js","sources":["../../../../src/composables/useSelectableList.ts"],"sourcesContent":["import { PropType, ExtractPropTypes } from 'vue'\n\nimport { getValueByKey } from '../services/utils'\n\nexport type SelectableOption = string | number | Record<string, any>\n\ntype StringOrFunction = string | ((option: SelectableOption) => unknown)\n\nexport const useSelectableListProps = {\n  options: { type: Array as PropType<SelectableOption[]>, default: () => [] },\n  textBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'text' },\n  valueBy: { type: [String, Function] as PropType<StringOrFunction>, default: '' },\n  trackBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'value' },\n  disabledBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'disabled' },\n  groupBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'group' },\n}\n\nexport function useSelectableList (props: ExtractPropTypes<typeof useSelectableListProps>) {\n  const isStringOrNumber = (option: SelectableOption): option is (string | number) => {\n    const typeOfOption = typeof option\n    return typeOfOption === 'string' || typeOfOption === 'number'\n  }\n\n  const getOptionProperty = (option: SelectableOption, selector: StringOrFunction) => {\n    return !selector || isStringOrNumber(option)\n      ? option\n      : getValueByKey(option, selector)\n  }\n\n  const getValue = (option: SelectableOption) => getOptionProperty(option, props.valueBy)\n\n  const getOptionByValue = (value: SelectableOption) => {\n    if (!props.valueBy) { return value }\n    return props.options.find((option: SelectableOption) => value === getValue(option)) || value\n  }\n\n  const getText = (option: SelectableOption) => getOptionProperty(option, props.textBy)\n  const getDisabled = (option: SelectableOption) => getValueByKey(option, props.disabledBy)\n  const getTrackBy = (option: SelectableOption) => getOptionProperty(option, props.trackBy)\n  const getGroupBy = (option: SelectableOption) => getOptionProperty(option, props.groupBy)\n\n  return {\n    getValue,\n    getOptionByValue,\n    getText,\n    getDisabled,\n    getTrackBy,\n    getGroupBy,\n  }\n}\n"],"names":[],"mappings":";AAQO,MAAM,yBAAyB;AAAA,EACpC,SAAS,EAAE,MAAM,OAAuC,SAAS,MAAM,CAAA,EAAG;AAAA,EAC1E,QAAQ,EAAE,MAAM,CAAC,QAAQ,QAAQ,GAAiC,SAAS,OAAO;AAAA,EAClF,SAAS,EAAE,MAAM,CAAC,QAAQ,QAAQ,GAAiC,SAAS,GAAG;AAAA,EAC/E,SAAS,EAAE,MAAM,CAAC,QAAQ,QAAQ,GAAiC,SAAS,QAAQ;AAAA,EACpF,YAAY,EAAE,MAAM,CAAC,QAAQ,QAAQ,GAAiC,SAAS,WAAW;AAAA,EAC1F,SAAS,EAAE,MAAM,CAAC,QAAQ,QAAQ,GAAiC,SAAS,QAAQ;AACtF;AAEO,2BAA4B,OAAwD;AACnF,QAAA,mBAAmB,CAAC,WAA0D;AAClF,UAAM,eAAe,OAAO;AACrB,WAAA,iBAAiB,YAAY,iBAAiB;AAAA,EAAA;AAGjD,QAAA,oBAAoB,CAAC,QAA0B,aAA+B;AAC3E,WAAA,CAAC,YAAY,iBAAiB,MAAM,IACvC,SACA,cAAc,QAAQ,QAAQ;AAAA,EAAA;AAGpC,QAAM,WAAW,CAAC,WAA6B,kBAAkB,QAAQ,MAAM,OAAO;AAEhF,QAAA,mBAAmB,CAAC,UAA4B;AAChD,QAAA,CAAC,MAAM,SAAS;AAAS,aAAA;AAAA,IAAM;AAC5B,WAAA,MAAM,QAAQ,KAAK,CAAC,WAA6B,UAAU,SAAS,MAAM,CAAC,KAAK;AAAA,EAAA;AAGzF,QAAM,UAAU,CAAC,WAA6B,kBAAkB,QAAQ,MAAM,MAAM;AACpF,QAAM,cAAc,CAAC,WAA6B,cAAc,QAAQ,MAAM,UAAU;AACxF,QAAM,aAAa,CAAC,WAA6B,kBAAkB,QAAQ,MAAM,OAAO;AACxF,QAAM,aAAa,CAAC,WAA6B,kBAAkB,QAAQ,MAAM,OAAO;AAEjF,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAEJ;;"}