import { isRef, computed, shallowRef, getCurrentInstance, onMounted, onUpdated, onBeforeUnmount } from "vue";
const extractHTMLElement = (el) => el && "$el" in el ? el.$el : el;
const useTemplateRef = (key) => {
  const vm = getCurrentInstance();
  const el = shallowRef();
  const updateEl = () => {
    var _a;
    el.value = (_a = vm.proxy) == null ? void 0 : _a.$refs[key];
  };
  onMounted(updateEl);
  onUpdated(updateEl);
  onBeforeUnmount(updateEl);
  return el;
};
const useHTMLElement = (key) => {
  if (isRef(key)) {
    return computed({
      get() {
        return extractHTMLElement(key.value);
      },
      set(value) {
        key.value = value;
      }
    });
  }
  if (key) {
    const el2 = useTemplateRef(key);
    return computed({
      get() {
        return extractHTMLElement(el2.value);
      },
      set(value) {
        el2.value = value;
      }
    });
  }
  const el = shallowRef();
  return computed({
    set(value) {
      el.value = extractHTMLElement(value);
    },
    get() {
      return el.value;
    }
  });
};
export { useHTMLElement as u };
//# sourceMappingURL=useHTMLElement.js.map
