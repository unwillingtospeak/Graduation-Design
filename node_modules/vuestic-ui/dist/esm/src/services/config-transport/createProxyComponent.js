import { getCurrentInstance, shallowReadonly } from "vue";
import { u as useComponentConfigProps } from "../component-config/component-config.js";
const createPropsWithCustomConfig = (instance, propsFromConfig) => {
  const instanceProps = instance.props;
  return new Proxy(instanceProps, {
    get: (target, key) => {
      const incommingProps = instance.vnode.props || {};
      const originalProp = target[key];
      const propFromConfig = propsFromConfig.value[key];
      if (incommingProps[key] === void 0 && propFromConfig !== void 0) {
        return propFromConfig;
      }
      return originalProp;
    }
  });
};
const patchInstanceProps = (instance, props) => {
  instance.props = props;
};
const createProxyComponent = (component) => {
  const customSetup = (originalProps, ctx) => {
    var _a;
    const instance = getCurrentInstance();
    const propsFromConfig = useComponentConfigProps(component);
    const props = createPropsWithCustomConfig(instance, propsFromConfig);
    patchInstanceProps(instance, props);
    return (_a = component.setup) == null ? void 0 : _a.call(component, shallowReadonly(props), ctx);
  };
  return new Proxy(component, {
    get(target, key) {
      if (key === "setup") {
        return customSetup;
      }
      return target[key];
    }
  });
};
export { createProxyComponent as c };
//# sourceMappingURL=createProxyComponent.js.map
