import { j as isObject_1 } from "../../vendor.js";
const sleep = (ms = 0) => {
  return new Promise((resolve) => setTimeout(resolve, ms));
};
const warn = (...attrs) => {
  return false;
};
const hasOwnProperty = (object, key) => {
  return Object.prototype.hasOwnProperty.call(object, key);
};
const getNestedValue = (option, propsArray) => {
  if (propsArray.length === 0) {
    return option;
  }
  const nestedItem = option[propsArray[0]];
  if (!isObject_1(nestedItem)) {
    if (propsArray.length === 1) {
      return nestedItem;
    }
    return void 0;
  }
  return getNestedValue(nestedItem, propsArray.slice(1));
};
const getValueByPath = (option, prop) => {
  if (prop in option) {
    return option[prop];
  }
  prop = prop.replace(/^\./, "");
  return getNestedValue(option, prop.split("."));
};
const getValueByKey = (option, prop) => {
  if (typeof option !== "object" || !option) {
    return void 0;
  }
  if (!prop) {
    return option;
  }
  if (typeof prop === "string") {
    return getValueByPath(option, prop);
  }
  if (typeof prop === "function") {
    return prop(option);
  }
  return option;
};
const getRandomString = (stringLength = 4) => {
  return Math.random().toString(36).substring(2, stringLength + 2);
};
const generateUniqueId = () => {
  return `${getRandomString(8)}-${getRandomString(4)}-${getRandomString(4)}`;
};
export { getValueByPath as a, getValueByKey as b, generateUniqueId as g, hasOwnProperty as h, sleep as s, warn as w };
//# sourceMappingURL=utils.js.map
