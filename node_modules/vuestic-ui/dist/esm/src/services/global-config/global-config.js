import { h as cloneDeep_1, m as merge_1 } from "../../../vendor.js";
import { inject, getCurrentInstance, ref } from "vue";
import { g as getComponentsDefaultConfig, a as getComponentsAllDefaultConfig } from "./config-default/index.js";
import { c as createIconsConfig } from "../icon-config/icon-config-helpers.js";
import { c as colorsPresets } from "../color-config/color-theme-presets.js";
import { g as getGlobalProperty } from "../../vuestic-plugin/utils/global-properties.js";
const GLOBAL_CONFIG = Symbol("GLOBAL_CONFIG");
const createGlobalConfig = () => {
  const globalConfig = ref({
    colors: colorsPresets.default,
    icons: createIconsConfig({}),
    components: getComponentsDefaultConfig(),
    componentsAll: getComponentsAllDefaultConfig()
  });
  const getGlobalConfig = () => globalConfig.value;
  const setGlobalConfig = (updater) => {
    const config = typeof updater === "function" ? updater(globalConfig.value) : updater;
    globalConfig.value = cloneDeep_1(config);
  };
  const mergeGlobalConfig = (updater) => {
    const config = typeof updater === "function" ? updater(globalConfig.value) : updater;
    globalConfig.value = merge_1(cloneDeep_1(globalConfig.value), config);
  };
  return {
    getGlobalConfig,
    setGlobalConfig,
    mergeGlobalConfig,
    globalConfig
  };
};
function useGlobalConfigSafe() {
  return inject(GLOBAL_CONFIG);
}
function useGlobalConfig() {
  const injected = inject(GLOBAL_CONFIG);
  if (!injected) {
    const vm = getCurrentInstance();
    if (!vm) {
      throw new Error("useGlobalConfig must be called in setup function");
    }
    const config = getGlobalProperty(vm.appContext, "$vaConfig");
    if (!config) {
      throw new Error("Vuestic GlobalConfigPlugin is not registered");
    }
    return config;
  }
  return injected;
}
export { GLOBAL_CONFIG as G, useGlobalConfig as a, createGlobalConfig as c, useGlobalConfigSafe as u };
//# sourceMappingURL=global-config.js.map
