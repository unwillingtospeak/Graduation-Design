import { ColorTranslator } from "colortranslator";
const colorToRgba = (color, opacity) => {
  return new ColorTranslator(color).setA(opacity).RGBA;
};
const getTextColor = (color, darkColor = "dark", lightColor = "white") => {
  const { R, G, B } = new ColorTranslator(color);
  const isLightBackground = Math.sqrt(R * R * 0.241 + G * G * 0.691 + B * B * 0.068) > 130;
  return isLightBackground ? darkColor : lightColor;
};
const getBoxShadowColor = (color) => {
  return new ColorTranslator(color).setA(0.4).RGBA;
};
const getHoverColor = (color) => {
  return new ColorTranslator(color).setA(0.2).RGBA;
};
const getFocusColor = (color) => {
  return new ColorTranslator(color).setA(0.3).RGBA;
};
const shiftHSLAColor = (color, offset) => {
  const result = new ColorTranslator(color);
  if (offset.h) {
    result.setH(result.H + offset.h);
  }
  if (offset.s) {
    result.setS(result.S + offset.s);
  }
  if (offset.l) {
    result.setL(result.L + offset.l);
  }
  if (offset.a) {
    result.setA(result.A + offset.a);
  }
  return result.HSLA;
};
const setHSLAColor = (color, newColor) => {
  const result = new ColorTranslator(color);
  if (newColor.h !== void 0) {
    result.setH(newColor.h);
  }
  if (newColor.s !== void 0) {
    result.setS(newColor.s);
  }
  if (newColor.l !== void 0) {
    result.setL(newColor.l);
  }
  if (newColor.a !== void 0) {
    result.setA(newColor.a);
  }
  return result.HSLA;
};
const shiftGradientColor = (color) => {
  const newColor = ColorTranslator.toHSLA(color, false);
  if (newColor.s < 10) {
    return shiftHSLAColor(newColor, { h: 2, s: 5, l: 10 });
  }
  if (newColor.s < 30) {
    return shiftHSLAColor(newColor, { s: -14, l: 11 });
  }
  if (newColor.h >= 0 && newColor.h < 44 || newColor.h >= 285) {
    return shiftHSLAColor(newColor, { h: 11, s: 27, l: 8 });
  }
  if (newColor.h >= 44 && newColor.h < 85) {
    return shiftHSLAColor(newColor, { h: 3, l: 9 });
  }
  if (newColor.h >= 85 && newColor.h < 165) {
    return shiftHSLAColor(newColor, { h: 16, l: 14 });
  }
  if (newColor.h >= 165 && newColor.h < 285) {
    return shiftHSLAColor(newColor, { h: -15, s: 3, l: 2 });
  }
  throw new Error("This method should handle all colors. But it didn't for some reason.");
};
const getGradientBackground = (color) => {
  const colorLeft = shiftGradientColor(color);
  const colorRight = ColorTranslator.toHSLA(color);
  return `linear-gradient(to right, ${colorLeft}, ${colorRight})`;
};
const isColor = (strColor) => {
  const cssColorRegex = /^#([\da-f]{3}){1,2}$|^#([\da-f]{4}){1,2}$|(rgb|hsl)a?\((\s*-?\d+%?\s*,){2}(\s*-?\d+%?\s*,?\s*\)?)(,\s*(0?\.\d+)?|1)?\)/;
  return cssColorRegex.test(strColor.toLocaleLowerCase());
};
const isCSSVariable = (strColor) => /var\(--.+\)/.test(strColor);
export { getGradientBackground as a, getFocusColor as b, getHoverColor as c, colorToRgba as d, getTextColor as e, setHSLAColor as f, getBoxShadowColor as g, isCSSVariable as h, isColor as i, shiftHSLAColor as s };
//# sourceMappingURL=color-functions.js.map
