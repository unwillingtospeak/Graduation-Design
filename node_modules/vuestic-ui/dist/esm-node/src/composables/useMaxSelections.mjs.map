{"version":3,"file":"useMaxSelections.mjs","sources":["../../../../src/composables/useMaxSelections.ts"],"sourcesContent":["import { Ref } from 'vue'\n\n/**\n * You could add these props to any component by destructuring them inside props option.\n * @example\n * props: { ...useMaxSelectionsProps, componentsOwnProp, etc. }\n * It's better to add props at the beginning, to make sure that Component own props will be used instead in case of collision\n */\nexport const useMaxSelectionsProps = {\n  maxSelections: {\n    type: [Number, String],\n    default: undefined,\n  },\n}\n\nexport function useMaxSelections (\n  selections: Ref<any[]>,\n  maxSelections: Ref<number | string | undefined>,\n  emit: (event: 'update:modelValue', ...args: any[]) => void,\n) {\n  const exceedsMaxSelections = (): boolean => {\n    if (maxSelections.value === undefined || isNaN(+maxSelections.value)) { return false }\n    return selections.value.length >= maxSelections.value\n  }\n\n  const addOption = (optionToAdd: any): void => {\n    const newSelectedOptions = [...selections.value, optionToAdd]\n    emit('update:modelValue', newSelectedOptions)\n  }\n\n  return {\n    exceedsMaxSelections,\n    addOption,\n  }\n}\n"],"names":["useMaxSelectionsProps","maxSelections","type","Number","String","default","useMaxSelections","selections","emit","exceedsMaxSelections","value","isNaN","length","addOption","optionToAdd","newSelectedOptions"],"mappings":"AAQO,MAAMA,EAAwB,CACnCC,cAAe,CACbC,KAAM,CAACC,OAAQC,QACfC,aAAS,IAKX,SAAAC,iBAAAC,EACAN,EACAO,GAYO,MAAA,CACLC,qBAX2B,SACC,IAAxBR,EAAcS,QAAuBC,OAAOV,EAAcS,QACvDH,EAAWG,MAAME,QAAUX,EAAcS,MAUhDG,UAPiBC,IACjB,MAAMC,EAAqB,IAAIR,EAAWG,MAAOI,GACjDN,EAAK,oBAAqBO"}