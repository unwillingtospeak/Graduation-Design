{"version":3,"file":"useEmitProxy.mjs","sources":["../../../../src/composables/useEmitProxy.ts"],"sourcesContent":["type Events = string | { listen: string, emit: string }\n\nconst getEvent = (event: Events) => typeof event === 'object' ? event.listen : event\nconst getEmit = (event: Events) => typeof event === 'object' ? event.emit : event\n\nexport const useEmitProxy = (events: Events[]) => {\n  const createEmits = () => events.map(getEmit)\n\n  const eventToListenerName = (event: string) => {\n    const eventName = event.charAt(0).toUpperCase() + event.slice(1)\n    return `on${eventName}`\n  }\n\n  const createListeners = (emit: (event: string, ...args: any[]) => void) => {\n    return events.reduce((acc, key) => ({\n      ...acc,\n      [eventToListenerName(getEvent(key))]: (...args: any[]) => emit(getEmit(key), ...args),\n    }), {} as Record<string, any>)\n  }\n\n  const createVOnListeners = (emit: (event: string, ...args: any[]) => void) => {\n    return events.reduce((acc, key) => ({\n      ...acc,\n      [getEvent(key)]: (...args: any[]) => emit(getEmit(key), ...args),\n    }), {} as Record<string, any>)\n  }\n\n  return {\n    createListeners,\n    createVOnListeners,\n    createEmits,\n  }\n}\n"],"names":["getEvent","event","listen","getEmit","emit","useEmitProxy","events","createListeners","reduce","acc","key","__spreadProps","charAt","toUpperCase","slice","args","createVOnListeners","createEmits","map"],"mappings":"geAEA,MAAMA,SAAYC,GAAmC,iBAAVA,EAAqBA,EAAMC,OAASD,EACzEE,QAAWF,GAAmC,iBAAVA,EAAqBA,EAAMG,KAAOH,EAE/DI,aAAgBC,IAsBpB,CACLC,gBAfuBH,GAChBE,EAAOE,QAAO,CAACC,EAAKC,KAASC,OAAAA,gCAC/BF,GAD+B,CAAA,EANTR,EAQJD,SAASU,GANzB,KADWT,EAAMW,OAAO,GAAGC,cAAgBZ,EAAMa,MAAM,OAOtB,IAAIC,IAAgBX,EAAKD,QAAQO,MAASK,KARxD,IAACd,IASvB,IAYJe,mBAT0BZ,GACnBE,EAAOE,QAAO,CAACC,EAAKC,IAASC,gCAC/BF,GAD+B,CAEjC,CAAAT,SAASU,IAAO,IAAIK,IAAgBX,EAAKD,QAAQO,MAASK,MACzD,IAMJE,YAxBkB,IAAMX,EAAOY,IAAIf"}