{"version":3,"file":"useParsable.mjs","sources":["../../../../src/composables/useParsable.ts"],"sourcesContent":["import { computed, Ref } from 'vue'\n\ntype Not<P, N> = P extends N ? never : P\n\nexport const useParsable = <Text extends string | number, Original, Value extends Not<Original, Text>>(\n  parsable: Ref<Original>,\n  parse: (t: Text) => Value,\n  format: (v: Value) => Text,\n) => {\n  const text = computed({\n    get () {\n      const value = parsable.value\n      if (typeof value === 'string') {\n        return value as any\n      }\n      return format(value as Value)\n    },\n    set (v: Text) {\n      if (typeof parsable.value === 'string') {\n        parsable.value = v as any\n      } else {\n        parsable.value = parse(v)\n      }\n    },\n  })\n\n  const value = computed<Value>({\n    get () {\n      if (typeof parsable.value === 'string') {\n        return parse(parsable.value as any)\n      }\n\n      return parsable.value as Value\n    },\n    set (v: Value) {\n      if (typeof parsable.value === 'string') {\n        parsable.value = format(v as any) as any\n      } else {\n        parsable.value = v\n      }\n    },\n  })\n\n  return {\n    text,\n    value,\n  }\n}\n"],"names":["useParsable","parsable","parse","format","text","computed","get","value2","value","set","v"],"mappings":"+BAIO,MAAMA,YAAc,CACzBC,EACAC,EACAC,KAoCO,CACLC,KAnCWC,EAAS,CACpBC,MACE,MAAMC,EAAQN,EAASO,MACnB,MAAiB,iBAAVD,EACFA,EAEFJ,EAAOI,IAEhBE,IAAKC,GAC2B,iBAAnBT,EAASO,MAClBP,EAASO,MAAQE,EAERT,EAAAO,MAAQN,EAAMQ,MAwB3BF,MAnBYH,EAAgB,CAC5BC,IAAO,IACyB,iBAAnBL,EAASO,MACXN,EAAMD,EAASO,OAGjBP,EAASO,MAElBC,IAAKC,GAC2B,iBAAnBT,EAASO,MACTP,EAAAO,MAAQL,EAAOO,GAExBT,EAASO,MAAQE"}