{"version":3,"file":"VaSelect.mjs","sources":["../../../../../src/components/va-select/VaSelect.vue"],"sourcesContent":["<template>\n  <va-dropdown\n    ref=\"dropdown\"\n    class=\"va-select va-select__dropdown va-select-dropdown\"\n    :aria-label=\"`select option (currently selected: ${$props.modelValue})`\"\n    :placement=\"$props.placement\"\n    :disabled=\"$props.disabled\"\n    :max-height=\"$props.maxHeight\"\n    :close-on-content-click=\"closeOnContentClick\"\n    :stateful=\"false\"\n    :offset=\"[1, 0]\"\n    keep-anchor-width\n    keyboard-navigation\n    inner-anchor-selector=\".va-input-wrapper__field\"\n    v-model=\"showDropdownContentComputed\"\n    @close=\"focus\"\n  >\n    <template #anchor>\n      <va-input-wrapper\n        ref=\"input\"\n        class=\"va-select__anchor va-select-anchor__input\"\n        :model-value=\"valueComputedString\"\n        :success=\"$props.success\"\n        :error=\"computedError\"\n        :color=\"$props.color\"\n        :label=\"$props.label\"\n        :loading=\"$props.loading\"\n        :disabled=\"$props.disabled\"\n        :outline=\"$props.outline\"\n        :bordered=\"$props.bordered\"\n        :required-mark=\"$props.requiredMark\"\n        :messages=\"$props.messages\"\n        :error-messages=\"computedErrorMessages\"\n        :focused=\"isFocused\"\n        :tabindex=\"tabIndexComputed\"\n        @focus=\"onInputFocus\"\n        @blur=\"onInputBlur\"\n      >\n        <template\n          v-if=\"$slots.prepend\"\n          #prepend\n        >\n          <slot name=\"prepend\" />\n        </template>\n\n        <template\n          v-if=\"$slots.append\"\n          #append\n        >\n          <slot name=\"append\" />\n        </template>\n\n        <template\n          v-if=\"$slots.prependInner\"\n          #prependInner\n        >\n          <slot name=\"prependInner\" />\n        </template>\n\n        <template #icon>\n          <va-icon\n            v-if=\"showClearIcon\"\n            role=\"button\"\n            aria-hidden=\"false\"\n            aria-label=\"reset\"\n            tabindex=\"0\"\n            v-bind=\"clearIconProps\"\n            @click.stop=\"reset\"\n            @keydown.enter.stop=\"reset\"\n            @keydown.space.stop=\"reset\"\n          />\n        </template>\n\n        <template #appendInner>\n          <slot\n            v-if=\"$slots.appendInner\"\n            name=\"appendInner\"\n          />\n          <va-icon\n            :color=\"toggleIconColor\"\n            :name=\"toggleIcon\"\n          />\n        </template>\n\n        <template\n          #default\n        >\n          <span\n            v-if=\"isPlaceholder\"\n            class=\"va-select-anchor__placeholder\"\n          >\n            {{ $props.placeholder }}\n          </span>\n          <slot\n            v-else\n            name=\"content\"\n            v-bind=\"{\n              valueString: valueComputedString,\n              value: valueComputed,\n              tabindex: tabIndexComputed,\n            }\"\n          >\n            {{ valueComputedString }}\n          </slot>\n        </template>\n      </va-input-wrapper>\n    </template>\n\n    <!-- Stop propagation for enter keyup event, to prevent VaDropdown closing -->\n    <va-dropdown-content\n      class=\"va-select-dropdown__content\"\n      :style=\"{ width: $props.width }\"\n    >\n      <va-input\n        v-if=\"showSearchInput\"\n        ref=\"searchBar\"\n        class=\"va-select-dropdown__content-search-input\"\n        placeholder=\"Search\"\n        aria-label=\"options filter\"\n        :tabindex=\"tabIndexComputed\"\n        :bordered=\"true\"\n        v-model=\"searchInput\"\n        @keydown.up.stop.prevent=\"hoverPreviousOption\"\n        @keydown.left.stop.prevent=\"hoverPreviousOption\"\n        @keydown.down.stop.prevent=\"hoverNextOption\"\n        @keydown.right.stop.prevent=\"hoverNextOption\"\n        @keydown.enter.prevent=\"selectOrAddOption\"\n        @focus=\"hoveredOption = null\"\n      />\n      <div class=\"va-select-dropdown__options-wrapper\">\n        <va-select-option-list\n          ref=\"optionList\"\n          v-model:hoveredOption=\"hoveredOption\"\n          :style=\"{ maxHeight: $props.maxHeight }\"\n          :options=\"filteredOptions\"\n          :selected-value=\"valueComputed\"\n          :get-selected-state=\"checkIsOptionSelected\"\n          :get-text=\"getText\"\n          :get-track-by=\"getTrackBy\"\n          :get-group-by=\"getGroupBy\"\n          :search=\"searchInput\"\n          :no-options-text=\"$props.noOptionsText\"\n          :color=\"$props.color\"\n          :tabindex=\"tabIndexComputed\"\n          @select-option=\"selectOption\"\n          @no-previous-option-to-hover=\"focusSearchBar\"\n          @keydown.enter.stop.prevent=\"selectHoveredOption\"\n          @keydown.space.stop.prevent=\"selectHoveredOption\"\n          @keydown.tab.stop.prevent=\"searchBar && searchBar.focus()\"\n          @keydown=\"onHintedSearch\"\n          @scroll-bottom=\"onScrollBottom\"\n        />\n      </div>\n    </va-dropdown-content>\n  </va-dropdown>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, ref, computed, watch, nextTick, Ref, shallowRef } from 'vue'\n\nimport { warn } from '../../services/utils'\nimport {\n  useSelectableList, useSelectableListProps,\n  useValidation, useValidationProps, useValidationEmits, ValidationProps,\n  useFormProps,\n  useLoadingProps,\n  useColors,\n  useMaxSelections, useMaxSelectionsProps,\n  useClearableProps, useClearable, useClearableEmits,\n  useFocusDeep,\n} from '../../composables'\n\nimport { VaDropdown, VaDropdownContent } from '../va-dropdown'\nimport { VaIcon } from '../va-icon'\nimport { VaInput, VaInputWrapper } from '../va-input'\nimport { VaSelectOptionList } from './VaSelectOptionList'\n\nimport { SelectDropdownIcon, SelectOption, Placement } from './types'\n\nexport default defineComponent({\n  name: 'VaSelect',\n\n  components: {\n    VaSelectOptionList,\n    VaIcon,\n    VaDropdown,\n    VaDropdownContent,\n    VaInput,\n    VaInputWrapper,\n  },\n\n  emits: [\n    'update:modelValue',\n    'update-search',\n    'create-new',\n    'scroll-bottom',\n    ...useValidationEmits,\n    ...useClearableEmits,\n  ],\n\n  props: {\n    ...useSelectableListProps,\n    ...useValidationProps as ValidationProps<SelectOption>,\n    ...useLoadingProps,\n    ...useMaxSelectionsProps,\n    ...useClearableProps,\n    ...useFormProps,\n\n    modelValue: {\n      type: [String, Number, Array, Object] as PropType<SelectOption | SelectOption[]>,\n      default: '',\n    },\n\n    // Dropdown placement\n    placement: {\n      type: String as PropType<Placement>,\n      default: 'bottom',\n      validator: (placement: string) => ['top', 'bottom'].includes(placement),\n    },\n\n    allowCreate: {\n      type: [Boolean, String] as PropType<boolean | 'unique'>,\n      default: false,\n      validator: (mode: string | boolean) => [true, false, 'unique'].includes(mode),\n    },\n\n    color: { type: String, default: 'primary' },\n    multiple: { type: Boolean, default: false },\n    searchable: { type: Boolean, default: false },\n    separator: { type: String, default: ', ' },\n    width: { type: String, default: '100%' },\n    maxHeight: { type: String, default: '256px' },\n    noOptionsText: { type: String, default: 'Items not found' },\n    hideSelected: { type: Boolean, default: false },\n    tabindex: { type: Number, default: 0 },\n    dropdownIcon: {\n      type: [String, Object] as PropType<string | SelectDropdownIcon>,\n      default: (): SelectDropdownIcon => ({\n        open: 'expand_more',\n        close: 'expand_less',\n      }),\n      validator: (value: string | SelectDropdownIcon) => {\n        if (typeof value === 'string') { return true }\n        const isOpenIconString = typeof value.open === 'string'\n        const isCloseIconString = typeof value.close === 'string'\n        return isOpenIconString && isCloseIconString\n      },\n    },\n\n    // Input style\n    outline: { type: Boolean, default: false },\n    bordered: { type: Boolean, default: false },\n    label: { type: String, default: '' },\n    placeholder: { type: String, default: '' },\n    requiredMark: { type: Boolean, default: false },\n  },\n\n  setup (props, { emit }) {\n    const optionList = shallowRef<typeof VaSelectOptionList>()\n    const input = shallowRef<typeof VaInputWrapper>()\n    const searchBar = shallowRef<typeof VaInput>()\n\n    const isInputFocused = useFocusDeep(input as any)\n    const isFocused = computed(() => isInputFocused.value || showDropdownContent.value)\n\n    const { getHoverColor, getColor } = useColors()\n    const { getOptionByValue, getValue, getText, getTrackBy, getGroupBy } = useSelectableList(props)\n\n    const {\n      validate,\n      computedError,\n      computedErrorMessages,\n    } = useValidation(props, emit, () => reset(), () => focus())\n\n    const colorComputed = computed(() => getColor(props.color))\n    const toggleIconColor = computed(() => props.readonly ? getHoverColor(colorComputed.value) : colorComputed.value)\n\n    const onScrollBottom = () => {\n      emit('scroll-bottom')\n    }\n\n    const searchInput = ref('')\n    const showSearchInput = computed(() => props.searchable || props.allowCreate)\n\n    watch(searchInput, (value) => {\n      emit('update-search', value)\n      hoveredOption.value = null\n    })\n\n    // Select value\n\n    const valueComputed = computed<SelectOption | SelectOption[]>({\n      get () {\n        const value = getOptionByValue(props.modelValue)\n\n        if (props.multiple) {\n          if (!value) {\n            return []\n          }\n\n          if (!Array.isArray(value)) {\n            return [value]\n          }\n\n          return value.map((o) => getOptionByValue(o))\n        }\n\n        if (Array.isArray(value)) {\n          warn('Model value should be a string or a number for a single Select.')\n\n          if (value.length) {\n            return value[value.length - 1]\n          }\n        }\n\n        return value\n      },\n\n      set (value: SelectOption | SelectOption[]) {\n        if (Array.isArray(value)) {\n          emit('update:modelValue', value.map(getValue))\n        } else {\n          emit('update:modelValue', getValue(value))\n        }\n      },\n    })\n\n    const valueComputedString = computed<string>(() => {\n      if (!valueComputed.value) { return props.clearValue }\n      if (typeof valueComputed.value === 'string' || typeof valueComputed.value === 'number') { return valueComputed.value }\n      if (Array.isArray(valueComputed.value)) {\n        return valueComputed.value.map((value) => getText(value)).join(props.separator) || props.clearValue\n      }\n\n      return getText(valueComputed.value)\n    })\n\n    const isPlaceholder = computed(() => props.placeholder && !valueComputedString.value)\n\n    // Icons\n\n    const {\n      canBeCleared,\n      clearIconProps,\n      onFocus,\n      onBlur,\n    } = useClearable(props, valueComputed)\n\n    const showClearIcon = computed(() => {\n      if (!canBeCleared.value) { return false }\n      if (props.multiple && Array.isArray(valueComputed.value)) { return !!valueComputed.value.length }\n      return true\n    })\n\n    const toggleIcon = computed(() => {\n      if (!props.dropdownIcon) { return '' }\n\n      if (typeof props.dropdownIcon === 'string') {\n        return props.dropdownIcon\n      }\n\n      return showDropdownContent.value ? props.dropdownIcon.close : props.dropdownIcon.open\n    })\n\n    // Options\n\n    const filteredOptions = computed(() => {\n      if (!props.options) { return [] }\n\n      if (props.hideSelected) {\n        return props.options.filter((option) => !checkIsOptionSelected(option))\n      }\n\n      return props.options\n    })\n\n    const checkIsOptionSelected = (option: SelectOption) => {\n      if (!valueComputed.value) { return false }\n\n      if (Array.isArray(valueComputed.value)) {\n        return !!valueComputed.value.find((valueItem) => compareOptions(valueItem, option))\n      }\n\n      return compareOptions(valueComputed.value, option)\n    }\n\n    const compareOptions = (option1: SelectOption, option2: SelectOption) => {\n      const one = getValue(option1)\n      const two = getValue(option2)\n\n      // identity check works nice for strings and exact matches.\n      if (one === two) {\n        return true\n      }\n      if (typeof one === 'string' && typeof two === 'string') {\n        return one === two\n      }\n      if (one === null || two === null) {\n        return false\n      }\n      if (typeof one === 'object' && typeof two === 'object') {\n        return getTrackBy(one) === getTrackBy(two)\n      }\n\n      return false\n    }\n\n    const isValueComputedArray = (v: Ref<SelectOption | SelectOption[]>): v is Ref<SelectOption[]> => Array.isArray(v.value)\n\n    const selectOption = (option: SelectOption) => {\n      if (hoveredOption.value === null) {\n        hideAndFocus()\n        return\n      }\n\n      if (showSearchInput.value) {\n        searchInput.value = ''\n      }\n\n      if (props.multiple && isValueComputedArray(valueComputed)) {\n        const { exceedsMaxSelections, addOption } = useMaxSelections(valueComputed, ref(props.maxSelections), emit)\n\n        const isSelected = checkIsOptionSelected(getValue(option))\n\n        if (isSelected) {\n          // Unselect\n          valueComputed.value = valueComputed.value.filter((optionSelected) => !compareOptions(getValue(option), getValue(optionSelected)))\n        } else {\n          if (exceedsMaxSelections()) { return }\n          addOption(getValue(option))\n        }\n      } else {\n        valueComputed.value = typeof option === 'string' || typeof option === 'number' ? option : { ...option }\n        hideAndFocus()\n      }\n    }\n\n    const addNewOption = () => {\n      // Do not emit if option already exist and allow create is `unique`\n      const hasAddedOption = props.options?.some((option: SelectOption) => getText(option) === searchInput.value)\n\n      if (!(props.allowCreate === 'unique' && hasAddedOption)) {\n        emit('create-new', searchInput.value)\n        searchInput.value = ''\n      }\n    }\n\n    // Hovered options\n\n    const hoveredOption = ref<SelectOption | null>(null)\n\n    const selectHoveredOption = () => {\n      if (!hoveredOption.value) { return }\n\n      if (!showDropdownContent.value) {\n        // We can not select options if they are hidden\n        showDropdown()\n        return\n      }\n\n      selectOption(hoveredOption.value)\n    }\n\n    const selectOrAddOption = () => {\n      const allowedToCreate = !!props.allowCreate && searchInput.value !== ''\n\n      if (hoveredOption.value !== null) {\n        selectHoveredOption()\n      } else if (allowedToCreate) {\n        addNewOption()\n      }\n    }\n\n    const hoverPreviousOption = () => {\n      optionList.value?.hoverPreviousOption()\n    }\n\n    const hoverNextOption = () => {\n      optionList.value?.hoverNextOption()\n    }\n\n    // Dropdown content\n\n    const showDropdownContent = ref(false)\n\n    const showDropdownContentComputed = computed({\n      get: () => showDropdownContent.value,\n      set: (show: boolean) => {\n        show ? showDropdown() : hideDropdown()\n      },\n    })\n\n    const closeOnContentClick = computed(() => {\n      return !(props.multiple || props.searchable || props.allowCreate)\n    })\n\n    const showDropdown = () => {\n      if (props.disabled || props.readonly) { return }\n\n      showDropdownContent.value = true\n      scrollToSelected()\n      focusSearchOrOptions()\n    }\n\n    const hideDropdown = () => {\n      showDropdownContent.value = false\n      searchInput.value = ''\n      validate()\n    }\n\n    const toggleDropdown = () => {\n      if (showDropdownContent.value) {\n        hideAndFocus()\n      } else {\n        showDropdown()\n      }\n    }\n\n    const onSelectClick = () => {\n      if (props.disabled || props.readonly) { return }\n      toggleDropdown()\n    }\n\n    const hideAndFocus = () => {\n      hideDropdown()\n      isInputFocused.value = true\n    }\n\n    const focusSearchBar = () => {\n      searchBar.value?.focus()\n    }\n\n    const focusOptionList = () => {\n      optionList.value?.focus()\n      !props.modelValue && optionList.value?.hoverFirstOption()\n    }\n\n    const focusSearchOrOptions = () => nextTick(() => {\n      if (showSearchInput.value) {\n        focusSearchBar()\n      } else {\n        focusOptionList()\n      }\n    })\n\n    const onInputFocus = () => {\n      isInputFocused.value = true\n      onFocus()\n    }\n\n    const onInputBlur = () => {\n      if (showDropdownContentComputed.value) { return }\n\n      onBlur()\n\n      isInputFocused.value\n        ? isInputFocused.value = false\n        : validate()\n    }\n\n    /** @public */\n    const focus = () => {\n      if (props.disabled) { return }\n      input.value?.focus()\n    }\n\n    /** @public */\n    const blur = () => {\n      if (showDropdownContentComputed.value) {\n        showDropdownContentComputed.value = false\n      }\n\n      nextTick(input.value?.blur)\n    }\n\n    /** @public */\n    const reset = () => {\n      if (props.multiple) {\n        valueComputed.value = Array.isArray(props.clearValue) ? props.clearValue : []\n      } else {\n        valueComputed.value = props.clearValue\n      }\n\n      searchInput.value = ''\n      emit('clear')\n    }\n\n    const tabIndexComputed = computed(() => props.disabled ? -1 : props.tabindex)\n\n    const scrollToSelected = () => {\n      const selected = valueComputed.value\n      const nothingSelected = typeof selected !== 'object' && Array.isArray(selected) && !selected.length\n\n      if (nothingSelected) { return }\n\n      const scrollTo = Array.isArray(selected) ? selected[selected.length - 1] : selected\n      hoveredOption.value = scrollTo\n      nextTick(() => optionList.value?.scrollToOption(scrollTo))\n    }\n\n    // Hinted search\n\n    let hintedSearchQuery = ''\n    let hintedSearchQueryTimeoutIndex!: ReturnType<typeof setTimeout>\n    const navigationKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Enter', ' ']\n\n    // Hinted search - hover option if you typing it's value on select without search-bar\n    const onHintedSearch = (event: KeyboardEvent) => {\n      if (navigationKeys.some(key => key === event.key)) {\n        return\n      }\n\n      const isLetter: boolean = event.key.length === 1\n      const isDeleteKey: boolean = event.key === 'Backspace' || event.key === 'Delete'\n\n      clearTimeout(hintedSearchQueryTimeoutIndex)\n\n      if (isDeleteKey) {\n        // Remove last letter from query\n        hintedSearchQuery = hintedSearchQuery ? hintedSearchQuery.slice(0, -1) : ''\n      } else if (isLetter) {\n        // Add every new letter to the query\n        hintedSearchQuery += event.key\n      }\n\n      if (showSearchInput.value) {\n        searchInput.value = hintedSearchQuery\n        return\n      }\n\n      // Search for an option that matches the query\n      if (hintedSearchQuery) {\n        const appropriateOption = props.options.find(option => getText(option).toLowerCase().startsWith(hintedSearchQuery.toLowerCase()))\n        if (appropriateOption) {\n          hoveredOption.value = appropriateOption\n        }\n      }\n\n      hintedSearchQueryTimeoutIndex = setTimeout(() => { hintedSearchQuery = '' }, 1000)\n    }\n\n    return {\n      isFocused,\n\n      input,\n      optionList,\n      searchBar,\n\n      reset,\n      focus,\n      blur,\n\n      onInputFocus,\n      onInputBlur,\n      focusOptionList,\n      onSelectClick,\n      focusSearchBar,\n      searchInput,\n      showSearchInput,\n      hoveredOption,\n      tabIndexComputed,\n      valueComputed,\n      valueComputedString,\n      showClearIcon,\n      toggleIcon,\n      computedErrorMessages,\n      computedError,\n      filteredOptions,\n      checkIsOptionSelected,\n      closeOnContentClick,\n      selectOption,\n      selectOrAddOption,\n      selectHoveredOption,\n      hoverPreviousOption,\n      hoverNextOption,\n      showDropdownContentComputed,\n      showDropdown,\n      hideDropdown,\n      hideAndFocus,\n      toggleDropdown,\n      toggleIconColor,\n      onHintedSearch,\n      getText,\n      getTrackBy,\n      getGroupBy,\n      onScrollBottom,\n      clearIconProps,\n      isPlaceholder,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources\";\n@import \"variables\";\n\n.va-select {\n  min-width: var(--va-select-min-width);\n}\n\n.va-select-anchor {\n  &__input {\n    cursor: var(--va-select-cursor);\n    flex: 1;\n  }\n\n  &__placeholder {\n    color: var(--va-input-placeholder-text-color);\n  }\n}\n\n.va-select-dropdown {\n  &__content {\n    overflow: hidden;\n    border-bottom-right-radius: var(--va-select-dropdown-border-radius);\n    border-bottom-left-radius: var(--va-select-dropdown-border-radius);\n    border-top-right-radius: 0;\n    border-top-left-radius: 0;\n    box-shadow: var(--va-select-box-shadow);\n    padding: 0;\n  }\n\n  &__content-search-input {\n    min-width: auto;\n    width: 100%;\n  }\n\n  &__options-wrapper {\n    background: var(--va-select-dropdown-background);\n    overflow-y: auto;\n\n    @include va-scroll();\n  }\n}\n</style>\n"],"names":["_sfc_main","defineComponent","name","components","VaSelectOptionList","VaIcon","VaDropdown","VaDropdownContent","VaInput","VaInputWrapper","emits","useValidationEmits","useClearableEmits","props","__spreadValues","useSelectableListProps","useValidationProps","useLoadingProps","useMaxSelectionsProps","useClearableProps","useFormProps","modelValue","type","String","Number","Array","Object","default","placement","validator","includes","allowCreate","Boolean","mode","color","multiple","searchable","separator","width","maxHeight","noOptionsText","hideSelected","tabindex","dropdownIcon","open","close","value","isOpenIconString","isCloseIconString","outline","bordered","label","placeholder","requiredMark","setup","emit","optionList","shallowRef","input","searchBar","isInputFocused","useFocusDeep","isFocused","computed","showDropdownContent","getHoverColor","getColor","useColors","getOptionByValue","getValue","getText","getTrackBy","getGroupBy","useSelectableList","validate","computedError","computedErrorMessages","useValidation","reset","focus","colorComputed","toggleIconColor","readonly","searchInput","ref","showSearchInput","watch","hoveredOption","valueComputed","get","isArray","map","o","length","set","valueComputedString","join","clearValue","isPlaceholder","canBeCleared","clearIconProps","onFocus","onBlur","useClearable","showClearIcon","toggleIcon","filteredOptions","options","filter","option","checkIsOptionSelected","find","valueItem","compareOptions","option1","option2","one","two","selectOption","v","exceedsMaxSelections","addOption","useMaxSelections","maxSelections","optionSelected","selectHoveredOption","showDropdownContentComputed","show","showDropdown","hideDropdown","closeOnContentClick","disabled","toggleDropdown","hideAndFocus","focusSearchBar","_a","focusOptionList","_b","hoverFirstOption","focusSearchOrOptions","nextTick","tabIndexComputed","scrollToSelected","selected","scrollTo","scrollToOption","hintedSearchQueryTimeoutIndex","hintedSearchQuery","navigationKeys","blur","onInputFocus","onInputBlur","onSelectClick","selectOrAddOption","allowedToCreate","hasAddedOption","some","hoverPreviousOption","hoverNextOption","onHintedSearch","event","key","isLetter","isDeleteKey","clearTimeout","slice","appropriateOption","toLowerCase","startsWith","setTimeout","onScrollBottom","class","_hoisted_2","_createBlock","_component_va_dropdown","_ctx","$props","stateful","offset","_cache","$event","onClose","anchor","_withCtx","_createVNode","_component_va_input_wrapper","success","error","loading","messages","focused","_createSlots","icon","_openBlock","_component_va_icon","_mergeProps","role","onClick","_withModifiers","onKeydown","_withKeys","appendInner","$slots","_renderSlot","_createCommentVNode","openBlock","_createElementBlock","_hoisted_1","_toDisplayString","_normalizeProps","valueString","_createTextVNode","prepend","fn","append","prependInner","_component_va_dropdown_content","style","_normalizeStyle","_component_va_input","_createElementVNode","_component_va_select_option_list","search","onSelectOption","onNoPreviousOptionToHover"],"mappings":"mxDAmLA,MAAKA,EAAaC,EAAa,CAC7BC,KAAM,WAENC,WAAY,CACVC,mBAAAA,EACAC,OAAAA,EACAC,WAAAA,EACAC,kBAAAA,EACAC,QAAAA,EACAC,eAAAA,GAGFC,MAAO,CACL,oBACA,gBACA,aACA,mBACGC,KACAC,GAGLC,SACKC,eAAAA,eAAAA,eAAAA,eAAAA,eAAAA,eAAA,GAAAC,GACAC,GACAC,GACAC,GACAC,GACAC,KANE,CAQLC,WAAY,CACVC,KAAM,CAACC,OAAQC,OAAQC,MAAOC,QAC9BC,QAAS,IAIXC,UAAW,CACTN,KAAMC,OACNI,QAAS,SACTE,UAAYD,GAAsB,CAAC,MAAO,UAAUE,SAASF,IAG/DG,YAAa,CACXT,KAAM,CAACU,QAAST,QAChBI,SAAS,EACTE,UAAYI,GAA2B,EAAC,GAAM,EAAO,UAAUH,SAASG,IAG1EC,MAAO,CAAEZ,KAAMC,OAAQI,QAAS,WAChCQ,SAAU,CAAEb,KAAMU,QAASL,SAAS,GACpCS,WAAY,CAAEd,KAAMU,QAASL,SAAS,GACtCU,UAAW,CAAEf,KAAMC,OAAQI,QAAS,MACpCW,MAAO,CAAEhB,KAAMC,OAAQI,QAAS,QAChCY,UAAW,CAAEjB,KAAMC,OAAQI,QAAS,SACpCa,cAAe,CAAElB,KAAMC,OAAQI,QAAS,mBACxCc,aAAc,CAAEnB,KAAMU,QAASL,SAAS,GACxCe,SAAU,CAAEpB,KAAME,OAAQG,QAAS,GACnCgB,aAAc,CACZrB,KAAM,CAACC,OAAQG,QACfC,QAAS,KAA2B,CAClCiB,KAAM,cACNC,MAAO,gBAEThB,UAAYiB,IACN,GAAiB,iBAAVA,EAA6B,OAAA,EAClC,MAAAC,EAAyC,iBAAfD,EAAMF,KAChCI,EAA2C,iBAAhBF,EAAMD,MACvC,OAAOE,GAAoBC,IAK/BC,QAAS,CAAE3B,KAAMU,QAASL,SAAS,GACnCuB,SAAU,CAAE5B,KAAMU,QAASL,SAAS,GACpCwB,MAAO,CAAE7B,KAAMC,OAAQI,QAAS,IAChCyB,YAAa,CAAE9B,KAAMC,OAAQI,QAAS,IACtC0B,aAAc,CAAE/B,KAAMU,QAASL,SAAS,eAG1C2B,MAAOzC,GAAO0C,KAAEA,IACd,MAAMC,EAAaC,IACbC,EAAQD,IACRE,EAAYF,IAEZG,EAAiBC,EAAaH,GAC9BI,EAAYC,GAAS,IAAMH,EAAed,OAASkB,EAAoBlB,SAEvEmB,cAAEA,EAAeC,SAAAA,GAAaC,KAC9BC,iBAAEA,EAAkBC,SAAAA,EAAAC,QAAUA,aAASC,EAAYC,WAAAA,GAAeC,EAAkB5D,IAEpF6D,SACJA,EAAAC,cACAA,EAAAC,sBACAA,GACEC,EAAchE,EAAO0C,GAAM,IAAMuB,UAAS,IAAMC,UAE9CC,EAAgBjB,GAAS,IAAMG,EAASrD,EAAMqB,SAC9C+C,EAAkBlB,GAAS,IAAMlD,EAAMqE,SAAWjB,EAAce,EAAclC,OAASkC,EAAclC,QAMrGqC,EAAcC,EAAI,IAClBC,EAAkBtB,GAAS,IAAMlD,EAAMuB,YAAcvB,EAAMkB,cAE3DuD,EAAAH,GAAcrC,IAClBS,EAAK,gBAAiBT,GACtByC,EAAczC,MAAQ,QAKxB,MAAM0C,EAAgBzB,EAAwC,CAC5D0B,MACQ,MAAA3C,EAAQsB,EAAiBvD,EAAMQ,YAErC,OAAIR,EAAMsB,SACHW,EAIArB,MAAMiE,QAAQ5C,GAIZA,EAAM6C,KAAKC,GAAMxB,EAAiBwB,KAHhC,CAAC9C,GAJD,GAUPrB,MAAMiE,QAAQ5C,IAGZA,EAAM+C,OACD/C,EAAMA,EAAM+C,OAAS,GAIzB/C,GAGTgD,IAAKhD,GACCrB,MAAMiE,QAAQ5C,GAChBS,EAAK,oBAAqBT,EAAM6C,IAAItB,IAE/Bd,EAAA,oBAAqBc,EAASvB,OAKnCiD,EAAsBhC,GAAiB,IACtCyB,EAAc1C,MACgB,iBAAxB0C,EAAc1C,OAAqD,iBAAxB0C,EAAc1C,MAA6B0C,EAAc1C,MAC3GrB,MAAMiE,QAAQF,EAAc1C,OACvB0C,EAAc1C,MAAM6C,KAAK7C,GAAUwB,EAAQxB,KAAQkD,KAAKnF,EAAMwB,YAAcxB,EAAMoF,WAGpF3B,EAAQkB,EAAc1C,OANMjC,EAAMoF,aASrCC,EAAgBnC,GAAS,IAAMlD,EAAMuC,cAAgB2C,EAAoBjD,SAIzEqD,aACJA,EAAAC,eACAA,EAAAC,QACAA,EAAAC,OACAA,GACEC,EAAa1F,EAAO2E,GAElBgB,EAAgBzC,GAAS,MACxBoC,EAAarD,SACdjC,EAAMsB,WAAYV,MAAMiE,QAAQF,EAAc1C,UAAmB0C,EAAc1C,MAAM+C,UAIrFY,EAAa1C,GAAS,IACrBlD,EAAM8B,aAEuB,iBAAvB9B,EAAM8B,aACR9B,EAAM8B,aAGRqB,EAAoBlB,MAAQjC,EAAM8B,aAAaE,MAAQhC,EAAM8B,aAAaC,KAN/C,KAW9B8D,EAAkB3C,GAAS,IAC1BlD,EAAM8F,QAEP9F,EAAM4B,aACD5B,EAAM8F,QAAQC,QAAQC,IAAYC,sBAAsBD,KAG1DhG,EAAM8F,QANgB,KASzBG,sBAAyBD,KACxBrB,EAAc1C,QAEfrB,MAAMiE,QAAQF,EAAc1C,SACrB0C,EAAc1C,MAAMiE,MAAMC,GAAcC,eAAeD,EAAWH,KAGtEI,eAAezB,EAAc1C,MAAO+D,IAGvCI,eAAiB,CAACC,EAAuBC,KACvC,MAAAC,EAAM/C,EAAS6C,GACfG,EAAMhD,EAAS8C,GAGrB,OAAIC,IAAQC,IAGO,iBAARD,GAAmC,iBAARC,EAC7BD,IAAQC,EAEL,OAARD,GAAwB,OAARC,IAGD,iBAARD,GAAmC,iBAARC,GAC7B9C,EAAW6C,KAAS7C,EAAW8C,MAQpCC,aAAgBT,IAFO,IAACU,EAGxB,GAAwB,OAAxBhC,EAAczC,MASlB,GAJIuC,EAAgBvC,QAClBqC,EAAYrC,MAAQ,IAGlBjC,EAAMsB,WAZkBoF,EAYe/B,EAZqD/D,MAAMiE,QAAQ6B,EAAEzE,QAYrD,CACnD,MAAA0E,qBAAEA,YAAsBC,GAAcC,EAAiBlC,EAAeJ,EAAIvE,EAAM8G,eAAgBpE,GAItG,GAFmBuD,sBAAsBzC,EAASwC,IAIhDrB,EAAc1C,MAAQ0C,EAAc1C,MAAM8D,QAAQgB,IAAoBX,eAAe5C,EAASwC,GAASxC,EAASuD,UAC3G,CACL,GAAIJ,IAA0B,OACpBC,EAAApD,EAASwC,UAGPrB,EAAA1C,MAA0B,iBAAX+D,GAAyC,iBAAXA,EAAsBA,EAAS/F,eAAK,GAAA+F,uCAiB7FtB,EAAgBH,EAAyB,MAEzCyC,oBAAsB,KACrBtC,EAAczC,QAEdkB,EAAoBlB,MAMzBwE,aAAa/B,EAAczC,wBAuBvBkB,EAAsBoB,GAAI,GAE1B0C,EAA8B/D,EAAS,CAC3C0B,IAAK,IAAMzB,EAAoBlB,MAC/BgD,IAAMiC,IACGA,EAAAC,eAAiBC,kBAItBC,EAAsBnE,GAAS,MAC1BlD,EAAMsB,UAAYtB,EAAMuB,YAAcvB,EAAMkB,eAGjDiG,aAAe,KACfnH,EAAMsH,UAAYtH,EAAMqE,WAE5BlB,EAAoBlB,OAAQ,8CAKxBmF,aAAe,KACnBjE,EAAoBlB,OAAQ,EAC5BqC,EAAYrC,MAAQ,QAIhBsF,eAAiB,KACjBpE,EAAoBlB,qCAYpBuF,aAAe,oBAEnBzE,EAAed,OAAQ,GAGnBwF,eAAiB,WACrB,OAAAC,EAAA5E,EAAUb,QAAOyF,EAAAxD,SAGbyD,gBAAkB,aACtB,OAAAD,EAAA/E,EAAWV,QAAOyF,EAAAxD,SACjBlE,EAAMQ,aAAc,OAAWoH,EAAAjF,EAAAV,QAAO2F,EAAAC,qBAGnCC,qBAAuB,IAAMC,GAAS,KACtCvD,EAAgBvC,4CAuBhBiC,MAAQ,WACRlE,EAAMsH,UACV,OAAAI,EAAA7E,EAAMZ,QAAOyF,EAAAxD,SAaTD,MAAQ,KACRjE,EAAMsB,SACMqD,EAAA1C,MAAQrB,MAAMiE,QAAQ7E,EAAMoF,YAAcpF,EAAMoF,WAAa,GAE3ET,EAAc1C,MAAQjC,EAAMoF,WAG9Bd,EAAYrC,MAAQ,GACpBS,EAAK,UAGDsF,EAAmB9E,GAAS,IAAMlD,EAAMsH,UAAW,EAAKtH,EAAM6B,WAE9DoG,iBAAmB,KACvB,MAAMC,EAAWvD,EAAc1C,MAG/B,GAF4C,iBAAbiG,GAAyBtH,MAAMiE,QAAQqD,KAAcA,EAASlD,OAEtE,OAEjB,MAAAmD,EAAWvH,MAAMiE,QAAQqD,GAAYA,EAASA,EAASlD,OAAS,GAAKkD,EAC3ExD,EAAczC,MAAQkG,EACtBJ,GAAS,WAAiB,OAAX,OAAWL,EAAA/E,EAAAV,gBAAOmG,eAAeD,OAKlD,IACIE,EADAC,EAAoB,GAExB,MAAMC,EAAiB,CAAC,UAAW,YAAa,YAAa,aAAc,QAAS,KAqC7E,MAAA,CACLtF,UAAAA,EAEAJ,MAAAA,EACAF,WAAAA,EACAG,UAAAA,EAEAmB,MAAAA,MACAC,MAAAA,MACAsE,KAnFW,WACPvB,EAA4BhF,QAC9BgF,EAA4BhF,OAAQ,GAG7B8F,EAAA,OAAAL,EAAA7E,EAAMZ,YAAN,EAAAyF,EAAac,OAgFtBC,aA3GmB,KACnB1F,EAAed,OAAQ,OA2GvByG,YAvGkB,KACdzB,EAA4BhF,YAIhCc,EAAed,MACXc,EAAed,OAAQ,EACvB4B,MAiGJ8D,gBAAAA,gBACAgB,cAzIoB,KAChB3I,EAAMsH,UAAYtH,EAAMqE,4BAyI5BoD,eAAAA,eACAnD,YAAAA,EACAE,gBAAAA,EACAE,cAAAA,EACAsD,iBAAAA,EACArD,cAAAA,EACAO,oBAAAA,EACAS,cAAAA,EACAC,WAAAA,EACA7B,sBAAAA,EACAD,cAAAA,EACA+B,gBAAAA,EACAI,sBAAAA,sBACAoB,oBAAAA,EACAZ,aAAAA,aACAmC,kBAhNwB,KACxB,MAAMC,IAAoB7I,EAAMkB,aAAqC,KAAtBoD,EAAYrC,MAE/B,OAAxByC,EAAczC,4BAEP4G,GA/BQ,YAEb,MAAAC,EAAiB,OAAMpB,EAAA1H,EAAA8F,cAAS,EAAA4B,EAAAqB,MAAM/C,GAAyBvC,EAAQuC,KAAY1B,EAAYrC,QAEzE,WAAtBjC,EAAMkB,aAA4B4H,IACjCpG,EAAA,aAAc4B,EAAYrC,OAC/BqC,EAAYrC,MAAQ,SAqOtB+E,oBAAAA,oBACAgC,oBAxM0B,WAC1B,OAAAtB,EAAA/E,EAAWV,QAAOyF,EAAAsB,uBAwMlBC,gBArMsB,WACtB,OAAAvB,EAAA/E,EAAWV,QAAOyF,EAAAuB,mBAqMlBhC,4BAAAA,EACAE,aAAAA,aACAC,aAAAA,aACAI,aAAAA,aACAD,eAAAA,eACAnD,gBAAAA,EACA8E,eA1EsBC,IACtB,GAAIZ,EAAeQ,MAAKK,GAAOA,IAAQD,EAAMC,MAC3C,OAGI,MAAAC,EAAyC,IAArBF,EAAMC,IAAIpE,OAC9BsE,EAAqC,cAAdH,EAAMC,KAAqC,WAAdD,EAAMC,IAYhE,GAVAG,aAAalB,GAETiB,EAEFhB,EAAoBA,EAAoBA,EAAkBkB,MAAM,MAAS,GAChEH,IAETf,GAAqBa,EAAMC,KAGzB5E,EAAgBvC,MAClBqC,EAAYrC,MAAQqG,MADtB,CAMA,GAAIA,EAAmB,CACrB,MAAMmB,EAAoBzJ,EAAM8F,QAAQI,SAAezC,EAAQuC,GAAQ0D,cAAcC,WAAWrB,EAAkBoB,iBAC9GD,IACF/E,EAAczC,MAAQwH,GAI1BpB,EAAgCuB,YAAW,KAA4BtB,EAAA,KAAM,OA4C7E7E,QAAAA,EACAC,WAAAA,EACAC,WAAAA,EACAkG,eAxZqB,KACrBnH,EAAK,kBAwZL6C,eAAAA,EACAF,cAAAA,6BAtlBMyE,MAAM,iCAwCPC,GAAA,CAAAD,MAAM,kPAhIfE,EAyJcC,EAAA,CAxJZ1F,IAAI,WACJuF,MAAM,mDACL,aAAU,sCAAwCI,EAAOC,OAAA3J,cACzDO,UAAWmJ,EAAOC,OAAApJ,UAClBuG,SAAU4C,EAAOC,OAAA7C,SACjB,aAAY4C,EAAOC,OAAAzI,UACnB,yBAAwBwI,EAAA7C,oBACxB+C,UAAU,EACVC,OAAQ,CAAA,EAAA,GACT,oBAAA,GACA,sBAAA,GACA,wBAAsB,2BACb7J,WAAA0J,EAAAjD,4BAA2B,sBAAAqD,EAAA,KAAAA,EAAA,GAAAC,GAAAL,EAAAjD,4BAAAsD,GACnCC,QAAON,EAAAhG,OAAA,CAEGuG,OAAMC,GACf,IAuFmB,CAvFnBC,EAuFmBC,EAAA,CAtFjBrG,IAAI,QACJuF,MAAM,4CACL,cAAaI,EAAAhF,oBACb2F,QAASX,EAAOC,OAAAU,QAChBC,MAAOZ,EAAApG,cACPzC,MAAO6I,EAAOC,OAAA9I,MACdiB,MAAO4H,EAAOC,OAAA7H,MACdyI,QAASb,EAAOC,OAAAY,QAChBzD,SAAU4C,EAAOC,OAAA7C,SACjBlF,QAAS8H,EAAOC,OAAA/H,QAChBC,SAAU6H,EAAOC,OAAA9H,SACjB,gBAAe6H,EAAOC,OAAA3H,aACtBwI,SAAUd,EAAOC,OAAAa,SACjB,iBAAgBd,EAAAnG,sBAChBkH,QAASf,EAAAjH,UACTpB,SAAUqI,EAAAlC,iBACVxC,QAAO0E,EAAAzB,aACPhD,OAAMyE,EAAAxB,aAAAwC,EAAA,CAuBIC,KAAIT,GACb,IAUE,CATMR,EAAAvE,eAAAyF,IADRpB,EAUEqB,EAVFC,EAUE,CAAAlC,IAAA,EARAmC,KAAK,SACL,cAAY,QACZ,aAAW,QACX1J,SAAS,KACDqI,EAAc3E,eAAA,CACrBiG,QAAKC,EAAOvB,EAAKjG,MAAA,CAAA,SACjByH,UAAO,CAAAC,EAAAF,EAAavB,EAAKjG,MAAA,CAAA,SAAA,CAAA,UAAA0H,EAAAF,EACLvB,EAAKjG,MAAA,CAAA,SAAA,CAAA,2DAInB2H,YAAWlB,GACpB,IAGE,CAFMR,EAAA2B,OAAOD,YADfE,EAGE5B,EAAA2B,OAAA,cAAA,CAAAzC,IAAA,IAAA2C,EAAA,IAAA,GACFpB,EAGEU,EAAA,CAFChK,MAAO6I,EAAA9F,gBACP/E,KAAM6K,EAAAtE,YAAA,KAAA,EAAA,CAAA,QAAA,YAKR9E,QAAO4J,GAER,IAKO,CAJCR,EAAA7E,eAAA2G,IADRC,EAKO,OALPC,EAKOC,EADFjC,EAAOC,OAAA5H,iBAEZuJ,EAUO5B,EAAA2B,OAAA,UAAAO,EAAAd,EAAA,CAAAlC,IAAA,GAAA,CAPgCiD,YAAAnC,EAAAhF,oBAA0CjD,MAAAiI,EAAAvF,cAAuC9C,SAAAqI,EAAAlC,qBAHxH,IAUO,CAAAsE,EAAAH,EADFjC,EAAmBhF,qBAAA,eA/DlBgF,EAAO2B,OAAAU,QAAA,CACZlN,KAAA,UAAAmN,GAAA9B,GAED,IAAuB,CAAvBoB,EAAuB5B,EAAA2B,OAAA,sBAIjB3B,EAAO2B,OAAAY,OAAA,CACZpN,KAAA,SAAAmN,GAAA9B,GAED,IAAsB,CAAtBoB,EAAsB5B,EAAA2B,OAAA,qBAIhB3B,EAAO2B,OAAAa,aAAA,CACZrN,KAAA,eAAAmN,GAAA9B,GAED,IAA4B,CAA5BoB,EAA4B5B,EAAA2B,OAAA,iOAqDlC,IA4CsB,CA5CtBlB,EA4CsBgC,EAAA,CA3CpB7C,MAAM,8BACL8C,MAAKC,EAAW,CAAApL,MAAAyI,EAAAC,OAAO1I,SAAK,YAE7B,IAeE,CAdMyI,uBADRF,EAeE8C,EAAA,CAAA1D,IAAA,EAbA7E,IAAI,YACJuF,MAAM,2CACNvH,YAAY,SACZ,aAAW,iBACVV,SAAUqI,EAAAlC,iBACV3F,UAAU,EACF7B,WAAA0J,EAAA5F,YAAW,sBAAAgG,EAAA,KAAAA,EAAA,GAAAC,GAAAL,EAAA5F,YAAAiG,GACnBmB,UAAO,CAAAC,EAAAF,EAAkBvB,EAAmBlB,oBAAA,CAAA,OAAA,YAAA,CAAA,OAAA2C,EAAAF,EACjBvB,EAAmBlB,oBAAA,CAAA,OAAA,YAAA,CAAA,SAAA2C,EAAAF,EACnBvB,EAAejB,gBAAA,CAAA,OAAA,YAAA,CAAA,SAAA0C,EAAAF,EACdvB,EAAejB,gBAAA,CAAA,OAAA,YAAA,CAAA,UAAA0C,EAAAF,EACpBvB,EAAiBtB,kBAAA,CAAA,YAAA,CAAA,WACxCpD,QAAK8E,eAAEJ,EAAaxF,cAAA,OAAA,KAAA,EAAA,CAAA,WAAA,aAAA,eAAAqH,EAAA,IAAA,GAEvBgB,EAuBM,MAvBNhD,GAuBM,CAtBJY,EAqBEqC,EAAA,CApBAzI,IAAI,aACIG,cAAewF,EAAAxF,cAAa,yBAAA4F,EAAA,KAAAA,EAAA,GAAAC,GAAAL,EAAAxF,cAAA6F,GACnCqC,MAAKC,EAAe,CAAAnL,UAAAwI,EAAAC,OAAOzI,YAC3BoE,QAASoE,EAAArE,gBACT,iBAAgBqE,EAAAvF,cAChB,qBAAoBuF,EAAAjE,sBACpB,WAAUiE,EAAAzG,QACV,eAAcyG,EAAAxG,WACd,eAAcwG,EAAAvG,WACdsJ,OAAQ/C,EAAA5F,YACR,kBAAiB4F,EAAOC,OAAAxI,cACxBN,MAAO6I,EAAOC,OAAA9I,MACdQ,SAAUqI,EAAAlC,iBACVkF,eAAehD,EAAAzD,aACf0G,0BAA6BjD,EAAAzC,eAC7BiE,UAAO,CAAAC,EAAAF,EAAqBvB,EAAmBlD,oBAAA,CAAA,OAAA,YAAA,CAAA,UAAA2E,EAAAF,EACnBvB,EAAmBlD,oBAAA,CAAA,OAAA,YAAA,CAAA,UACrBsD,EAAA,KAAAA,EAAA,GAAAqB,EAAAF,GAAAlB,GAAAL,EAAApH,WAAaoH,YAAUhG,SAAK,CAAA,OAAA,YAAA,CAAA,SAC7CgG,EAAAhB,gBACTW,eAAeK,EAAAL,gBAAA,KAAA,EAAA,CAAA,gBAAA,QAAA,UAAA,iBAAA,qBAAA,WAAA,eAAA,eAAA,SAAA,kBAAA,QAAA,WAAA,iBAAA,4BAAA,YAAA"}