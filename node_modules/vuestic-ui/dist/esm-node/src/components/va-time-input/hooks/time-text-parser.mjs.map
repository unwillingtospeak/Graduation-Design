{"version":3,"file":"time-text-parser.mjs","sources":["../../../../../../src/components/va-time-input/hooks/time-text-parser.ts"],"sourcesContent":["import { Ref, ref } from 'vue'\n\nconst parse = (text: string) => {\n  const m = text.match(/[0-9]{1,2}/g)\n\n  if (!m) { return [] }\n\n  return m.map((s) => Number(s))\n}\n\nconst parsePeriod = (text: string) => {\n  const m = text.match(/pm|am/i)\n\n  if (!m) { return null }\n\n  return Number(m[0].toLowerCase() === 'pm')\n}\n\nconst defaultParseDateFunction = (text: string) => {\n  const d = new Date()\n\n  const [h, m, s] = parse(text)\n  const period = parsePeriod(text)\n\n  if (!h) { return null }\n\n  const is12format = period !== null && h <= 12\n  const isPM = is12format && !!period\n  // Switch 12 to 0, because of 12h format\n  const fh = is12format ? (h === 12 ? 0 : h) : h\n\n  d.setHours(Math.min((fh || 0), is12format ? 12 : 24) + (isPM ? 12 : 0))\n  d.setMinutes(Math.min(m || 0, 60))\n  d.setSeconds(Math.min(s || 0, 60))\n\n  return d\n}\n\nexport const useTimeParser = (props: {\n  parse?: (input: string, isValidRef?: Ref<boolean>) => Date,\n}) => {\n  // const isTextIsMultipleDates = (text: string) => text.includes(props.delimiter)\n  // const isTextIsDateRange = (text: string) => text.includes(props.rangeDelimiter)\n\n  const getParseDateFn = () => props.parse || defaultParseDateFunction\n\n  const isValid = ref(true)\n\n  const parseDate = (text: string) => {\n    const parse = getParseDateFn()\n\n    const result = parse(text)\n\n    if (!result) { isValid.value = false }\n\n    return result\n  }\n\n  const parse = (text: string) => {\n    isValid.value = true\n\n    // if (props.parse) {\n    //   return props.parse(text, isValid)\n    // }\n\n    // if (isTextIsMultipleDates(text)) {\n    //   return text.split(props.delimiter).map((dateText) => parseDate(dateText))\n    // }\n\n    // if (isTextIsDateRange(text)) {\n    //   const [start, end] = text.split(props.rangeDelimiter).map((dateText) => parseDate(dateText))\n    //   return { start, end }\n    // }\n\n    return parseDate(text)\n  }\n\n  return {\n    parse,\n    isValid,\n  }\n}\n"],"names":["defaultParseDateFunction","text","d","Date","h","m","s","match","map","Number","parse","period","toLowerCase","parsePeriod","is12format","isPM","fh","setHours","Math","min","setMinutes","setSeconds","useTimeParser","props","isValid","ref","parseDate","result","value"],"mappings":"0BAEA,MAgBMA,yBAA4BC,IAC1B,MAAAC,EAAI,IAAIC,MAEPC,EAAGC,EAAGC,GAnBD,CAACL,IACP,MAAAI,EAAIJ,EAAKM,MAAM,eAErB,OAAKF,EAEEA,EAAEG,KAAKF,GAAMG,OAAOH,KAFV,IAgBCI,CAAMT,GAClBU,EAZY,CAACV,IACb,MAAAI,EAAIJ,EAAKM,MAAM,UAErB,OAAKF,EAEEI,OAA8B,OAAvBJ,EAAE,GAAGO,eAFF,MASFC,CAAYZ,GAE3B,IAAKG,EAAY,OAAA,KAEX,MAAAU,EAAwB,OAAXH,GAAmBP,GAAK,GACrCW,EAAOD,KAAgBH,EAEvBK,EAAKF,GAAoB,KAANV,EAAW,EAASA,EAMtC,OAJLF,EAAAe,SAASC,KAAKC,IAAKH,GAAM,EAAIF,EAAa,GAAK,KAAcC,EAAA,GAAK,IACpEb,EAAEkB,WAAWF,KAAKC,IAAId,GAAK,EAAG,KAC9BH,EAAEmB,WAAWH,KAAKC,IAAIb,GAAK,EAAG,KAEvBJ,GAGIoB,cAAiBC,IAMtB,MAEAC,EAAUC,GAAI,GAEdC,UAAazB,IACjB,MAEM0B,GAPqBJ,EAAMb,OAASV,0BAOrBC,GAId,OAFF0B,IAAUH,EAAQI,OAAQ,GAExBD,GAsBF,MAAA,CACLjB,MApBaT,IACbuB,EAAQI,OAAQ,EAeTF,UAAUzB,IAKjBuB,QAAAA"}