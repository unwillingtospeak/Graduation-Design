import{toRefs as e,ref as t,watch as u,computed as r}from"vue";const safeModelValue=e=>e.value?e.value:new Date((new Date).setHours(0,0,0,0)),createNumbersArray=e=>Array.from(Array(e).keys()),from24to12=e=>(0===e?12:e)-12*Number(e>12),createHoursColumn=(e,t,u)=>{const a=r((()=>e.ampm?12:24)),l=r((()=>{let t=createNumbersArray(a.value);return e.hoursFilter&&(t=t.filter((t=>e.hoursFilter(e.ampm?t+12*Number(u.value):t)))),t.map((t=>e.ampm?from24to12(t):t))})),n=r({get:()=>{if(!t.value)return-1;if(e.ampm){const e=from24to12(t.value.getHours()-12*Number(u.value));return l.value.findIndex((t=>t===e))}const r=t.value.getHours();return l.value.findIndex((e=>e===r))},set:r=>{if(e.readonly)return;const a=e.ampm?((e,t=!1)=>(12===e?0:e)+12*Number(t))(l.value[r],u.value):l.value[r];t.value=new Date(safeModelValue(t).setHours(a))}});return r((()=>({items:l.value,activeItem:n})))},useTimePicker=(a,l)=>{const{view:n}=e(a),s=t(!1);u(l,(()=>{s.value=safeModelValue(l).getHours()>=12}),{immediate:!0});const v=createHoursColumn(a,l,s),o=((e,t)=>{const u=r((()=>{const t=createNumbersArray(60);return e.minutesFilter?t.filter(e.minutesFilter):t})),a=r({get:()=>{if(!t.value)return-1;const e=t.value.getMinutes();return u.value.findIndex((t=>t===e))},set:r=>{if(e.readonly)return;const a=u.value[r];t.value=new Date(safeModelValue(t).setMinutes(a))}});return r((()=>({items:u.value,activeItem:a})))})(a,l),i=((e,t)=>{const u=r((()=>{const t=createNumbersArray(60);return e.secondsFilter?t.filter(e.secondsFilter):t})),a=r({get:()=>{if(!t.value)return-1;const e=t.value.getSeconds();return u.value.findIndex((t=>t===e))},set:r=>{if(e.readonly)return;const a=u.value[r];t.value=new Date(safeModelValue(t).setSeconds(a))}});return r((()=>({items:u.value,activeItem:a})))})(a,l),m=((e,t,u)=>r((()=>({items:["AM","PM"],activeItem:r({get:()=>t.value?Number(u.value):-1,set:r=>{u.value=Boolean(r);const a=safeModelValue(t).getHours();let l=u.value?a+12:a;u.value&&a<=12&&(l=a+12),!u.value&&a>=12&&(l=a-12);const n=!e.hoursFilter||e.hoursFilter(l);e.periodUpdatesModelValue&&n&&(t.value=new Date(safeModelValue(t).setHours(l)))}})}))))(a,l,s);return{columns:r((()=>{const e=[];return"hours"===n.value?e.push(v.value):"minutes"===n.value?e.push(v.value,o.value):"seconds"===n.value&&e.push(v.value,o.value,i.value),a.ampm&&!a.hidePeriodSwitch&&e.push(m.value),e})),isPM:s}};export{useTimePicker as u};
//# sourceMappingURL=useTimePicker.mjs.map
