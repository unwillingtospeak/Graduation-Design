{"version":3,"file":"useRating.mjs","sources":["../../../../../../src/components/va-rating/hooks/useRating.ts"],"sourcesContent":["import { ref, getCurrentInstance, computed, ExtractPropTypes } from 'vue'\nimport clamp from 'lodash/clamp.js'\n\nimport { useHover, useStateful, useStatefulProps, useFormProps } from '../../../composables'\n\nimport { RatingValue } from '../types'\n\nconst getContext = <P extends Record<string, any> = Record<string, any>, E extends string = string>() => {\n  const instance = getCurrentInstance()\n  if (!instance) { throw new Error('useRating hooks must be used on top of setup function') }\n  return {\n    props: instance.props,\n    emit: instance.emit,\n  } as {\n    props: P,\n    emit: (event: E, ...args: any[]) => void\n  }\n}\n\nexport const useRatingProps = {\n  ...useStatefulProps,\n  modelValue: { type: Number, default: 0 },\n  clearable: { type: Boolean, default: false },\n  hover: { type: Boolean, default: false },\n}\n\nexport const useRating = (props: ExtractPropTypes<typeof useRatingProps> & ExtractPropTypes<typeof useFormProps>) => {\n  const { emit } = getContext()\n  const { isHovered, onMouseEnter, onMouseLeave } = useHover()\n  const { valueComputed: modelValue } = useStateful(props, emit)\n\n  const hoveredValue = ref(0)\n  const visibleValue = computed(() => !props.disabled && !props.readonly && props.hover && isHovered.value ? hoveredValue.value : modelValue.value)\n\n  const onItemValueUpdate = (itemIndex: number, newValue: number) => {\n    const newModelValue = itemIndex + newValue\n    if (props.clearable) {\n      if (modelValue.value === newModelValue) {\n        modelValue.value = 0\n        return\n      }\n    }\n    modelValue.value = newModelValue\n  }\n\n  const onItemHoveredValueUpdate = (itemIndex: number, newValue: number) => {\n    if (!props.hover) { return }\n    hoveredValue.value = itemIndex + newValue\n  }\n\n  const getItemValue = (itemIndex: number) => {\n    const itemValue = visibleValue.value - itemIndex\n    return clamp(itemValue, RatingValue.EMPTY, RatingValue.FULL)\n  }\n\n  return {\n    visibleValue,\n    modelValue,\n    hoveredValue,\n    isHovered,\n    onMouseEnter,\n    onMouseLeave,\n    onItemValueUpdate,\n    onItemHoveredValueUpdate,\n    getItemValue,\n  }\n}\n"],"names":["useRatingProps","useStatefulProps","modelValue","type","Number","default","clearable","Boolean","hover","useRating","props","emit","instance","getCurrentInstance","Error","getContext","isHovered","onMouseEnter","onMouseLeave","useHover","valueComputed","useStateful","hoveredValue","ref","visibleValue","computed","disabled","readonly","value","onItemValueUpdate","itemIndex","newValue","newModelValue","onItemHoveredValueUpdate","getItemValue","itemValue","clamp","RatingValue","EMPTY","FULL"],"mappings":"2mBAOA,MAYaA,wJACRC,KADyB,CAE5BC,WAAY,CAAEC,KAAMC,OAAQC,QAAS,GACrCC,UAAW,CAAEH,KAAMI,QAASF,SAAS,GACrCG,MAAO,CAAEL,KAAMI,QAASF,SAAS,uBAGtB,MAAAI,UAAaC,IAClB,MAAAC,KAAEA,GApBS,MACjB,MAAMC,EAAWC,IACjB,IAAKD,EAAkB,MAAA,IAAIE,MAAM,yDAC1B,MAAA,CACLJ,MAAOE,EAASF,MAChBC,KAAMC,EAASD,OAeAI,IACXC,UAAEA,EAAAC,aAAWA,EAAcC,aAAAA,GAAiBC,KAC1CC,cAAelB,GAAemB,EAAYX,EAAOC,GAEnDW,EAAeC,EAAI,GACnBC,EAAeC,GAAS,KAAOf,EAAMgB,WAAahB,EAAMiB,UAAYjB,EAAMF,OAASQ,EAAUY,MAAQN,EAAaM,MAAQ1B,EAAW0B,QAuBpI,MAAA,CACLJ,aAAAA,EACAtB,WAAAA,EACAoB,aAAAA,EACAN,UAAAA,EACAC,aAAAA,EACAC,aAAAA,EACAW,kBA5BwB,CAACC,EAAmBC,KAC5C,MAAMC,EAAgBF,EAAYC,EAC9BrB,EAAMJ,WACJJ,EAAW0B,QAAUI,EACvB9B,EAAW0B,MAAQ,EAIvB1B,EAAW0B,MAAQI,GAqBnBC,yBAlB+B,CAACH,EAAmBC,KAC9CrB,EAAMF,QACXc,EAAaM,MAAQE,EAAYC,IAiBjCG,aAdoBJ,IACd,MAAAK,EAAYX,EAAaI,MAAQE,EACvC,OAAOM,EAAMD,EAAWE,EAAYC,MAAOD,EAAYE"}