{"version":3,"file":"input-text-parser.mjs","sources":["../../../../../../src/components/va-date-input/hooks/input-text-parser.ts"],"sourcesContent":["import { DateInputRange, DateInputValue } from './../types'\nimport { Ref, ref } from 'vue'\nimport isDate from 'lodash/isDate.js'\n\nexport const defaultParseDateFunction = (text: string) => new Date(Date.parse(text))\n\nconst isValidDate = (d: Date) => isDate(d) && !isNaN(d.getTime())\n\nexport const useDateParser = (props: {\n  parse?: (input: string, isValidRef?: Ref<boolean>) => DateInputValue,\n  parseDate?: (input: string) => Date,\n  delimiter: string,\n  rangeDelimiter: string,\n}) => {\n  const isMultipleDates = (text: string) => text.includes(props.delimiter)\n  const isRange = (text: string) => text.includes(props.rangeDelimiter)\n\n  const isValid = ref(true)\n\n  const parseDate = (text: string) => {\n    /**\n     * for american locales 01.02.2000 will be parsed as 02 Jan 2000 (not 01 Feb 2000)\n     * iso 8601 (YYYY-MM-DD) solves this problem\n     */\n    const splitDate = text.split('.')\n    const valueToParse = splitDate?.length === 3 ? splitDate.reverse().join('-') : text\n\n    const date = (props.parseDate || defaultParseDateFunction)(valueToParse)\n\n    isValid.value = isValidDate(date)\n\n    return date\n  }\n\n  const parseDateInputValue = (text: string) => {\n    isValid.value = true\n\n    if (props.parse) {\n      return props.parse(text, isValid)\n    }\n\n    if (isMultipleDates(text)) {\n      return text.split(props.delimiter).map(parseDate)\n    }\n\n    if (isRange(text)) {\n      const [start, end] = text.split(props.rangeDelimiter).map(parseDate)\n      return { start, end }\n    }\n\n    return parseDate(text)\n  }\n\n  return {\n    parseDateInputValue,\n    isValid,\n  }\n}\n"],"names":["defaultParseDateFunction","text","Date","parse","useDateParser","props","isValid","ref","parseDate","splitDate","split","valueToParse","length","reverse","join","date","d","value","isDate","isNaN","getTime","parseDateInputValue","includes","delimiter","isMultipleDates","map","rangeDelimiter","isRange","start","end"],"mappings":"qEAIa,MAAAA,yBAA4BC,GAAiB,IAAIC,KAAKA,KAAKC,MAAMF,IAIjEG,cAAiBC,IAM5B,MAGMC,EAAUC,GAAI,GAEdC,UAAaP,IAKX,MAAAQ,EAAYR,EAAKS,MAAM,KACvBC,EAAqC,sBAAXC,QAAeH,EAAUI,UAAUC,KAAK,KAAOb,EAEzEc,GAAQV,EAAMG,WAAaR,0BAA0BW,GArB3C,IAACK,EAyBV,OAFCV,EAAAW,MAvBqBC,EAAZF,EAuBWD,KAvBeI,MAAMH,EAAEI,WAyB5CL,GAsBF,MAAA,CACLM,oBApB2BpB,IAG3B,GAFAK,EAAQW,OAAQ,EAEZZ,EAAMF,MACD,OAAAE,EAAMF,MAAMF,EAAMK,GAGvB,GA3BkB,CAACL,GAAiBA,EAAKqB,SAASjB,EAAMkB,WA2BxDC,CAAgBvB,GAClB,OAAOA,EAAKS,MAAML,EAAMkB,WAAWE,IAAIjB,WAGrC,GA9BU,CAACP,GAAiBA,EAAKqB,SAASjB,EAAMqB,gBA8BhDC,CAAQ1B,GAAO,CACX,MAAC2B,EAAOC,GAAO5B,EAAKS,MAAML,EAAMqB,gBAAgBD,IAAIjB,WACnD,MAAA,CAAEoB,MAAAA,EAAOC,IAAAA,GAGlB,OAAOrB,UAAUP,IAKjBK,QAAAA"}