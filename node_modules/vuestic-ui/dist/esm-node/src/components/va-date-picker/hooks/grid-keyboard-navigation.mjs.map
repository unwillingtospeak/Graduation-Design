{"version":3,"file":"grid-keyboard-navigation.mjs","sources":["../../../../../../src/components/va-date-picker/hooks/grid-keyboard-navigation.ts"],"sourcesContent":["import { ref, Ref, isRef, unref } from 'vue'\n\nfunction isUndefined<T> (t: T | undefined): t is undefined {\n  return t === undefined\n}\n\nexport const useGridKeyboardNavigation = (\n  {\n    rowSize,\n    start,\n    end,\n    onSelected,\n    onFocusIndex,\n  }: {\n    rowSize: number,\n    start?: Ref<number> | number,\n    end?: Ref<number> | number,\n    onFocusIndex?: Ref<number> | number,\n    onSelected?: (selectedValue: number) => any | null,\n  },\n) => {\n  const focusedCellIndex = ref(-1)\n\n  let previouslyClicked = false\n  const onMousedown = () => { previouslyClicked = true }\n\n  const onFocus = () => {\n    if (previouslyClicked) { return }\n    previouslyClicked = false\n\n    const index = onFocusIndex === undefined ? unref(start) || 0 : unref(onFocusIndex)\n\n    focusedCellIndex.value = index\n  }\n\n  const onBlur = () => {\n    previouslyClicked = false\n\n    focusedCellIndex.value = -1\n  }\n\n  const onKeydown = (e: KeyboardEvent) => {\n    if (['ArrowRight', 'ArrowLeft', 'ArrowDown', 'ArrowUp', 'Enter', 'Space'].includes(e.key)) {\n      // Prevent default for arrow keys and enter. Do not prevent default for tab! :)\n      e.preventDefault()\n      e.stopPropagation()\n    }\n\n    if (e.key === 'Enter' || e.key === 'Space') {\n      if (onSelected === undefined) { return }\n\n      onSelected(focusedCellIndex.value)\n      return\n    }\n\n    if (e.key === 'ArrowRight') {\n      focusedCellIndex.value += 1\n    }\n    if (e.key === 'ArrowLeft') {\n      focusedCellIndex.value -= 1\n    }\n    if (e.key === 'ArrowDown') {\n      focusedCellIndex.value += rowSize\n    }\n    if (e.key === 'ArrowUp') {\n      focusedCellIndex.value -= rowSize\n    }\n\n    if (!isUndefined(start) && focusedCellIndex.value < unref(start)) {\n      focusedCellIndex.value = unref(start)\n    }\n    if (!isUndefined(end) && focusedCellIndex.value > unref(end) - 1) {\n      focusedCellIndex.value = unref(end) - 1\n    }\n  }\n\n  const containerAttributes = {\n    onFocus, onKeydown, onBlur, onMousedown, tabindex: 0,\n  }\n\n  return {\n    focusedCellIndex, containerAttributes,\n  }\n}\n"],"names":["isUndefined","t","useGridKeyboardNavigation","rowSize","start","end","onSelected","onFocusIndex","focusedCellIndex","ref","previouslyClicked","containerAttributes","onFocus","index","unref","value","onKeydown","e","includes","key","preventDefault","stopPropagation","onBlur","onMousedown","tabindex"],"mappings":"qCAEA,SAAAA,YAAyBC,GACvB,YAAa,IAANA,EAGF,MAAMC,0BAA4B,EAErCC,QAAAA,EACAC,MAAAA,EACAC,IAAAA,EACAC,WAAAA,EACAC,aAAAA,MASI,MAAAC,EAAmBC,GAAM,GAE/B,IAAIC,GAAoB,EACxB,MAoDMC,EAAsB,CAC1BC,QAnDc,KACd,GAAIF,EAAqB,OACLA,GAAA,EAEd,MAAAG,OAAyB,IAAjBN,EAA6BO,EAAMV,IAAU,EAAIU,EAAMP,GAErEC,EAAiBO,MAAQF,GA6ChBG,UApCQC,IAOjB,GANI,CAAC,aAAc,YAAa,YAAa,UAAW,QAAS,SAASC,SAASD,EAAEE,OAEnFF,EAAEG,iBACFH,EAAEI,mBAGU,UAAVJ,EAAEE,KAA6B,UAAVF,EAAEE,IAOb,eAAVF,EAAEE,MACJX,EAAiBO,OAAS,GAEd,cAAVE,EAAEE,MACJX,EAAiBO,OAAS,GAEd,cAAVE,EAAEE,MACJX,EAAiBO,OAASZ,GAEd,YAAVc,EAAEE,MACJX,EAAiBO,OAASZ,IAGvBH,YAAYI,IAAUI,EAAiBO,MAAQD,EAAMV,KACvCI,EAAAO,MAAQD,EAAMV,KAE5BJ,YAAYK,IAAQG,EAAiBO,MAAQD,EAAMT,GAAO,IAC5CG,EAAAO,MAAQD,EAAMT,GAAO,OAxBxC,CACE,QAAmB,IAAfC,EAA4B,OAEhCA,EAAWE,EAAiBO,SA0BVO,OA1CP,KACOZ,GAAA,EAEpBF,EAAiBO,OAAQ,GAuCGQ,YArDV,KAA4Bb,GAAA,GAqDLc,SAAU,GAG9C,MAAA,CACLhB,iBAAAA,EAAkBG,oBAAAA"}