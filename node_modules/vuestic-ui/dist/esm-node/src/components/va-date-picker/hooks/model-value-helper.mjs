import{a as e,b as l,i as t}from"../utils/date-utils.mjs";const throwIncorrectModelValueError=(e,l)=>{throw Error(`Incorrect modelValue for mode ${l}. Got ${JSON.stringify(e)}`)},sortRange=e=>e.start&&e.end&&e.start>e.end?{start:e.end,end:e.start}:e,useDatePickerModelValue=(a,u,d)=>({updateModelValue:r=>{if(!a.modelValue)return void u("update:modelValue",((e,l)=>{if("single"===l)return e;if("range"===l)return{start:e,end:null};if("multiple"===l)return[e];if("auto"===l)return e;throw new Error("Unknown mode")})(r,a.mode));const o="auto"===a.mode?(n=a.modelValue,e(n)?"single":l(n)?"range":t(n)?"multiple":throwIncorrectModelValueError(n,"auto")):a.mode;var n;if("single"===o){if(!e(a.modelValue))return throwIncorrectModelValueError(a.modelValue,o);u("update:modelValue",r)}else if("range"===o){if(!l(a.modelValue))return throwIncorrectModelValueError(a.modelValue,o);if(a.modelValue.end&&d(a.modelValue.end,r))return u("update:modelValue",{start:a.modelValue.start,end:null});if(a.modelValue.start&&d(a.modelValue.start,r))return u("update:modelValue",{start:null,end:a.modelValue.end});if(null===a.modelValue.end)return u("update:modelValue",sortRange({start:a.modelValue.start,end:r}));if(null===a.modelValue.start)return u("update:modelValue",sortRange({end:a.modelValue.end,start:r}));u("update:modelValue",{start:r,end:null})}else if("multiple"===o){if(!t(a.modelValue))return throwIncorrectModelValueError(a.modelValue,o);const e=!!a.modelValue.find((e=>d(e,r)));u("update:modelValue",e?a.modelValue.filter((e=>!d(e,r))):[...a.modelValue,r].sort(((e,l)=>e.getTime()-l.getTime())))}}});export{useDatePickerModelValue as u};
//# sourceMappingURL=model-value-helper.mjs.map
