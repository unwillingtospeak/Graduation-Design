{"version":3,"file":"view.mjs","sources":["../../../../../../src/components/va-date-picker/hooks/view.ts"],"sourcesContent":["import { computed, ref } from 'vue'\nimport isDate from 'lodash/isDate.js'\n\nimport { DatePickerView, DatePickerViewProp, DatePickerModelValue } from '../types'\n\nconst JANUARY_MONTH_INDEX = 0\nconst DECEMBER_MONTH_INDEX = 11\n\nconst addMonth = (view: DatePickerView) => {\n  if (view.month === DECEMBER_MONTH_INDEX) {\n    return { ...view, year: view.year + 1, month: JANUARY_MONTH_INDEX }\n  } else {\n    return { ...view, month: view.month + 1 }\n  }\n}\n\nconst subMonth = (view: DatePickerView) => {\n  if (view.month === JANUARY_MONTH_INDEX) {\n    return { ...view, year: view.year - 1, month: DECEMBER_MONTH_INDEX }\n  } else {\n    return { ...view, month: view.month - 1 }\n  }\n}\n\nconst getDefaultDate = (modelValue: DatePickerModelValue): Date => {\n  if (isDate(modelValue)) { return modelValue }\n  if (isDate((modelValue as any)?.start)) { return (modelValue as any).start }\n  if (Array.isArray(modelValue) && isDate(modelValue[0])) { return modelValue[0] }\n\n  return new Date()\n}\n\nexport const useView = (\n  props: { [key: string]: any, 'view'?: DatePickerViewProp },\n  emit: (event: any | 'update:view', newValue: DatePickerViewProp) => any,\n  defaultOverride?: DatePickerViewProp,\n) => {\n  const defaultDate = getDefaultDate(props.modelValue)\n  const defaultView: DatePickerView = {\n    type: 'day',\n    year: defaultDate.getFullYear(),\n    month: defaultDate.getMonth(),\n    ...defaultOverride,\n  }\n\n  const statefulView = ref(defaultView)\n\n  const syncView = computed<DatePickerView>({\n    get () {\n      // Merge default view and user view prop\n      return { ...statefulView.value, ...props.view }\n    },\n    set (view: DatePickerView) {\n      statefulView.value = view\n\n      emit('update:view', view)\n    },\n  })\n\n  const next = () => {\n    if (syncView.value.type === 'day') {\n      syncView.value = addMonth(syncView.value)\n    } else if (syncView.value.type === 'month') {\n      syncView.value = { ...syncView.value, year: syncView.value.year + 1 }\n    }\n  }\n\n  const prev = () => {\n    if (syncView.value.type === 'day') {\n      syncView.value = subMonth(syncView.value)\n    } else if (syncView.value.type === 'month') {\n      syncView.value = { ...syncView.value, year: syncView.value.year - 1 }\n    }\n  }\n\n  return {\n    syncView,\n    next,\n    prev,\n  }\n}\n"],"names":["useView","props","emit","defaultOverride","defaultDate","modelValue","isDate","start","Array","isArray","Date","defaultView","__spreadValues","type","year","getFullYear","month","getMonth","statefulView","ref","syncView","computed","get","value","view","set","next","__spreadProps","prev"],"mappings":"mjBAKA,MA2BaA,QAAU,CACrBC,EACAC,EACAC,KAEM,MAAAC,GAbgBC,EAaaJ,EAAMI,WAZrCC,EAAOD,GAAsBA,EAC7BC,EAA4B,MAApBD,OAAoB,EAAAA,EAAAE,OAAkBF,EAAmBE,MACjEC,MAAMC,QAAQJ,IAAeC,EAAOD,EAAW,IAAcA,EAAW,GAErE,IAAIK,MALU,IAACL,EActB,MAAMM,EAA8BC,eAAA,CAClCC,KAAM,MACNC,KAAMV,EAAYW,cAClBC,MAAOZ,EAAYa,YAChBd,GAGCe,EAAeC,EAAIR,GAEnBS,EAAWC,EAAyB,CACxCC,IAAO,IAEEV,eAAAA,eAAA,GAAKM,EAAaK,OAAUtB,EAAMuB,MAE3CC,IAAKD,GACHN,EAAaK,MAAQC,EAErBtB,EAAK,cAAesB,MAoBjB,MAAA,CACLJ,SAAAA,EACAM,KAlBW,KAnDE,IAACF,EAoDc,QAAxBJ,EAASG,MAAMV,KACRO,EAAAG,MAvDc,MAEXC,EAqDcJ,EAASG,OApD9BP,MACAW,cAAAf,eAAA,GAAKY,GAAL,CAAWV,KAAMU,EAAKV,KAAO,EAAGE,MALf,IAOjBW,gCAAKH,GAAL,CAAWR,MAAOQ,EAAKR,MAAQ,IAkDH,UAAxBI,EAASG,MAAMV,OACfO,EAAAG,MAAQI,gCAAKP,EAASG,OAAd,CAAqBT,KAAMM,EAASG,MAAMT,KAAO,MAepEc,KAXW,KAnDE,IAACJ,EAoDc,QAAxBJ,EAASG,MAAMV,KACRO,EAAAG,MAhEa,KAWVC,EAqDcJ,EAASG,OApD9BP,MACAW,cAAAf,eAAA,GAAKY,GAAL,CAAWV,KAAMU,EAAKV,KAAO,EAAGE,MAZd,KAclBW,gCAAKH,GAAL,CAAWR,MAAOQ,EAAKR,MAAQ,IAkDH,UAAxBI,EAASG,MAAMV,OACfO,EAAAG,MAAQI,gCAAKP,EAASG,OAAd,CAAqBT,KAAMM,EAASG,MAAMT,KAAO"}