{"version":3,"file":"model-value-helper.mjs","sources":["../../../../../../src/components/va-date-picker/hooks/model-value-helper.ts"],"sourcesContent":["import { isRange, isSingleDate, isDates } from '../utils/date-utils'\nimport { DatePickerModelValue, DatePickerRange, DatePickerMode } from '../types'\n\nconst modeInitialValue = (date: Date, mode: DatePickerMode) => {\n  if (mode === 'single') {\n    return date\n  } else if (mode === 'range') {\n    return { start: date, end: null }\n  } else if (mode === 'multiple') {\n    return [date]\n  } else if (mode === 'auto') {\n    return date\n  }\n\n  throw new Error('Unknown mode')\n}\n\nconst throwIncorrectModelValueError = (modelValue: DatePickerModelValue, mode: DatePickerMode) : never => {\n  throw Error(`Incorrect modelValue for mode ${mode}. Got ${JSON.stringify(modelValue)}`)\n}\n\nconst modeFromModelValue = (modelValue: DatePickerModelValue): DatePickerMode => {\n  if (isSingleDate(modelValue)) {\n    return 'single'\n  } else if (isRange(modelValue)) {\n    return 'range'\n  } else if (isDates(modelValue)) {\n    return 'multiple'\n  }\n\n  return throwIncorrectModelValueError(modelValue, 'auto')\n}\n\nconst sortRange = (modelValue: DatePickerRange) => {\n  if (modelValue.start && modelValue.end) {\n    if (modelValue.start > modelValue.end) {\n      return { start: modelValue.end, end: modelValue.start }\n    }\n  }\n\n  return modelValue\n}\n\nexport const useDatePickerModelValue = (\n  props: {\n    [key: string]: any,\n    modelValue?: DatePickerModelValue,\n    mode: DatePickerMode\n  },\n  emit: (event: 'update:modelValue', newValue: DatePickerModelValue) => any,\n  dateEqual: (date1?: Date | null, date2?: Date | null) => boolean,\n) => {\n  const updateModelValue = (date: Date) => {\n    if (!props.modelValue) {\n      emit('update:modelValue', modeInitialValue(date, props.mode))\n      return\n    }\n\n    const mode = props.mode === 'auto' ? modeFromModelValue(props.modelValue) : props.mode\n\n    if (mode === 'single') {\n      if (!isSingleDate(props.modelValue)) {\n        return throwIncorrectModelValueError(props.modelValue, mode)\n      }\n\n      emit('update:modelValue', date)\n    } else if (mode === 'range') {\n      if (!isRange(props.modelValue)) {\n        return throwIncorrectModelValueError(props.modelValue, mode)\n      }\n\n      if (props.modelValue.end && dateEqual(props.modelValue.end, date)) {\n        return emit('update:modelValue', { start: props.modelValue.start, end: null })\n      }\n      if (props.modelValue.start && dateEqual(props.modelValue.start, date)) {\n        return emit('update:modelValue', { start: null, end: props.modelValue.end })\n      }\n\n      if (props.modelValue.end === null) {\n        return emit('update:modelValue', sortRange({ start: props.modelValue.start, end: date }))\n      }\n      if (props.modelValue.start === null) {\n        return emit('update:modelValue', sortRange({ end: props.modelValue.end, start: date }))\n      }\n\n      emit('update:modelValue', { start: date, end: null })\n    } else if (mode === 'multiple') {\n      if (!isDates(props.modelValue)) {\n        return throwIncorrectModelValueError(props.modelValue, mode)\n      }\n\n      const isDatesIncludesDate = !!props.modelValue.find((d) => dateEqual(d, date))\n\n      if (isDatesIncludesDate) {\n        emit('update:modelValue', props.modelValue.filter((d) => !dateEqual(d, date)))\n      } else {\n        emit('update:modelValue', [...props.modelValue, date].sort((a, b) => a.getTime() - b.getTime()))\n      }\n    }\n  }\n\n  return {\n    updateModelValue,\n  }\n}\n"],"names":["throwIncorrectModelValueError","modelValue","mode","Error","JSON","stringify","sortRange","start","end","useDatePickerModelValue","props","emit","dateEqual","updateModelValue","date","modeInitialValue","isSingleDate","isRange","isDates","isDatesIncludesDate","find","d","filter","sort","a","b","getTime"],"mappings":"0DAGA,MAcMA,8BAAgC,CAACC,EAAkCC,KACvE,MAAMC,MAAM,iCAAiCD,UAAaE,KAAKC,UAAUJ,OAerEK,UAAaL,GACbA,EAAWM,OAASN,EAAWO,KAC7BP,EAAWM,MAAQN,EAAWO,IACzB,CAAED,MAAON,EAAWO,IAAKA,IAAKP,EAAWM,OAI7CN,EAGIQ,wBAA0B,CACrCC,EAKAC,EACAC,KAmDO,CACLC,iBAlDwBC,IACpB,IAACJ,EAAMT,WAET,YADAU,EAAK,oBAnDc,EAACG,EAAYZ,KACpC,GAAa,WAATA,EACK,OAAAY,EAAA,GACW,UAATZ,EACT,MAAO,CAAEK,MAAOO,EAAMN,IAAK,MAAK,GACd,aAATN,EACT,MAAO,CAACY,GAAI,GACM,SAATZ,EACF,OAAAY,EAGH,MAAA,IAAIX,MAAM,iBAwCcY,CAAiBD,EAAMJ,EAAMR,OAInD,MAAAA,EAAsB,SAAfQ,EAAMR,MArCKD,EAqCgCS,EAAMT,WApC5De,EAAaf,GACR,SACEgB,EAAQhB,GACV,QACEiB,EAAQjB,GACV,WAGFD,8BAA8BC,EAAY,SA4B6BS,EAAMR,KArC3D,IAACD,EAuCxB,GAAa,WAATC,EAAmB,CACrB,IAAKc,EAAaN,EAAMT,YACf,OAAAD,8BAA8BU,EAAMT,WAAYC,GAGzDS,EAAK,oBAAqBG,QAAI,GACZ,UAATZ,EAAkB,CAC3B,IAAKe,EAAQP,EAAMT,YACV,OAAAD,8BAA8BU,EAAMT,WAAYC,GAGrD,GAAAQ,EAAMT,WAAWO,KAAOI,EAAUF,EAAMT,WAAWO,IAAKM,GACnD,OAAAH,EAAK,oBAAqB,CAAEJ,MAAOG,EAAMT,WAAWM,MAAOC,IAAK,OAErE,GAAAE,EAAMT,WAAWM,OAASK,EAAUF,EAAMT,WAAWM,MAAOO,GACvD,OAAAH,EAAK,oBAAqB,CAAEJ,MAAO,KAAMC,IAAKE,EAAMT,WAAWO,MAGpE,GAAyB,OAAzBE,EAAMT,WAAWO,IACZ,OAAAG,EAAK,oBAAqBL,UAAU,CAAEC,MAAOG,EAAMT,WAAWM,MAAOC,IAAKM,KAE/E,GAA2B,OAA3BJ,EAAMT,WAAWM,MACZ,OAAAI,EAAK,oBAAqBL,UAAU,CAAEE,IAAKE,EAAMT,WAAWO,IAAKD,MAAOO,KAGjFH,EAAK,oBAAqB,CAAEJ,MAAOO,EAAMN,IAAK,YAAM,GAClC,aAATN,EAAqB,CAC9B,IAAKgB,EAAQR,EAAMT,YACV,OAAAD,8BAA8BU,EAAMT,WAAYC,GAGnD,MAAAiB,IAAwBT,EAAMT,WAAWmB,MAAMC,GAAMT,EAAUS,EAAGP,KAGjEH,EAAA,oBADHQ,EACwBT,EAAMT,WAAWqB,QAAQD,IAAOT,EAAUS,EAAGP,KAE7C,IAAIJ,EAAMT,WAAYa,GAAMS,MAAK,CAACC,EAAGC,IAAMD,EAAEE,UAAYD,EAAEC"}