{"version":3,"file":"scroll-to-element.mjs","sources":["../../../../src/utils/scroll-to-element.ts"],"sourcesContent":["const getTopCoordinate = (element: HTMLElement) => element.offsetTop\nconst getBottomCoordinate = (element: HTMLElement) => element.offsetTop + element.offsetHeight\nconst getCenterCoordinate = (element: HTMLElement) => element.offsetTop + element.offsetHeight / 2\n\nconst getScrollTop = (element: HTMLElement, scrollTarget: HTMLElement, verticalAlignment?: 'start' | 'end' | 'center' | 'any') => {\n  const viewHeight = scrollTarget.offsetHeight\n  const currentPosition = scrollTarget.scrollTop\n  const top = getTopCoordinate(element) - scrollTarget.offsetTop\n  const center = getCenterCoordinate(element) - scrollTarget.offsetTop\n  const bottom = getBottomCoordinate(element) - scrollTarget.offsetTop\n\n  if (verticalAlignment === 'start') {\n    return top\n  }\n\n  if (verticalAlignment === 'end') {\n    return bottom - viewHeight\n  }\n\n  if (verticalAlignment === 'center') {\n    return center - viewHeight / 2\n  }\n\n  if (verticalAlignment === 'any') {\n    if (top - currentPosition < 0) {\n      return top\n    }\n\n    if (bottom - currentPosition > viewHeight) {\n      return bottom - viewHeight\n    }\n  }\n}\n\n/**\n * @param options.scrollTarget - element that will be scrolled\n */\nexport const scrollToElement = (element: HTMLElement, options: {\n  scrollTarget?: HTMLElement,\n  verticalAlignment?: 'start' | 'end' | 'center' | 'any',\n  smooth?: boolean,\n} = {\n  scrollTarget: element.parentElement!,\n  verticalAlignment: 'any',\n  smooth: false,\n}) => {\n  const scrollTarget = options.scrollTarget || element.parentElement!\n\n  const top = getScrollTop(element, scrollTarget, options.verticalAlignment)\n\n  if (top === undefined) { return }\n\n  scrollTarget.scroll({\n    top: top,\n    behavior: options.smooth ? 'smooth' : 'auto',\n  })\n}\n"],"names":["scrollToElement","element","options","scrollTarget","parentElement","verticalAlignment","smooth","top","viewHeight","offsetHeight","currentPosition","scrollTop","offsetTop","getTopCoordinate","center","getCenterCoordinate","bottom","getBottomCoordinate","getScrollTop","scroll","behavior"],"mappings":"AAAA,MAqCaA,gBAAkB,CAACC,EAAsBC,EAIlD,CACFC,aAAcF,EAAQG,cACtBC,kBAAmB,MACnBC,QAAQ,MAEF,MAAAH,EAAeD,EAAQC,cAAgBF,EAAQG,cAE/CG,EA5Ca,EAACN,EAAsBE,EAA2BE,KACrE,MAAMG,EAAaL,EAAaM,aAC1BC,EAAkBP,EAAaQ,UAC/BJ,EAPiB,CAACN,GAAyBA,EAAQW,UAO7CC,CAAiBZ,GAAWE,EAAaS,UAC/CE,EANoB,CAACb,GAAyBA,EAAQW,UAAYX,EAAQQ,aAAe,EAMhFM,CAAoBd,GAAWE,EAAaS,UACrDI,EARoB,CAACf,GAAyBA,EAAQW,UAAYX,EAAQQ,aAQjEQ,CAAoBhB,GAAWE,EAAaS,UAE3D,GAA0B,UAAtBP,EACK,OAAAE,EAGT,GAA0B,QAAtBF,EACF,OAAOW,EAASR,EAGlB,GAA0B,WAAtBH,EACF,OAAOS,EAASN,EAAa,EAG/B,GAA0B,QAAtBH,EAA6B,CAC3B,GAAAE,EAAMG,EAAkB,EACnB,OAAAH,EAGL,GAAAS,EAASN,EAAkBF,EAC7B,OAAOQ,EAASR,IAmBRU,CAAajB,EAASE,EAAcD,EAAQG,wBAE5C,IAARE,GAEJJ,EAAagB,OAAO,CAClBZ,IAAAA,EACAa,SAAUlB,EAAQI,OAAS,SAAW"}