{"version":3,"file":"global-config.mjs","sources":["../../../../../src/services/global-config/global-config.ts"],"sourcesContent":["import merge from 'lodash/merge.js'\nimport cloneDeep from 'lodash/cloneDeep.js'\nimport { ref, inject, Ref, getCurrentInstance } from 'vue'\nimport { GlobalConfig, GlobalConfigUpdater } from './types'\nimport { getComponentsAllDefaultConfig, getComponentsDefaultConfig } from './config-default'\nimport { createIconsConfig } from '../icon-config/icon-config-helpers'\nimport { colorsPresets } from '../color-config/color-theme-presets'\nimport { getGlobalProperty } from '../../vuestic-plugin/utils'\n\nexport type ProvidedGlobalConfig = {\n  globalConfig: Ref<GlobalConfig>,\n  getGlobalConfig: () => GlobalConfig,\n  /**\n   * Set new global config\n   * @see mergeGlobalConfig if you want to update existing config\n   */\n  setGlobalConfig: (updater: GlobalConfig | GlobalConfigUpdater) => void,\n  mergeGlobalConfig: (updater: GlobalConfig | GlobalConfigUpdater) => void\n}\n\nexport const GLOBAL_CONFIG = Symbol('GLOBAL_CONFIG')\n\nexport const createGlobalConfig = () => {\n  const globalConfig = ref<GlobalConfig>({\n    colors: colorsPresets.default,\n    icons: createIconsConfig({}),\n    components: getComponentsDefaultConfig(),\n    componentsAll: getComponentsAllDefaultConfig(),\n  })\n\n  const getGlobalConfig = (): GlobalConfig => globalConfig.value\n  const setGlobalConfig = (updater: GlobalConfig | GlobalConfigUpdater) => {\n    const config = typeof updater === 'function' ? updater(globalConfig.value) : updater\n    globalConfig.value = cloneDeep(config)\n  }\n\n  const mergeGlobalConfig = (updater: GlobalConfig | GlobalConfigUpdater) => {\n    const config = typeof updater === 'function' ? updater(globalConfig.value) : updater\n    globalConfig.value = merge(cloneDeep(globalConfig.value), config)\n  }\n\n  return {\n    getGlobalConfig,\n    setGlobalConfig,\n    mergeGlobalConfig,\n    globalConfig,\n  }\n}\n\n/** Use this function if you don't want to throw error if hook used ouside setup function by useGlobalConfig */\nexport function useGlobalConfigSafe () {\n  return inject<ProvidedGlobalConfig>(GLOBAL_CONFIG)\n}\n\nexport function useGlobalConfig (): ProvidedGlobalConfig {\n  const injected = inject<ProvidedGlobalConfig>(GLOBAL_CONFIG)\n\n  if (!injected) {\n    // TODO: Hotfix, maybe deal with inject\n    const vm = getCurrentInstance()\n    if (!vm) { throw new Error('useGlobalConfig must be called in setup function') }\n\n    const config = getGlobalProperty(vm.appContext, '$vaConfig')\n\n    if (!config) {\n      throw new Error('Vuestic GlobalConfigPlugin is not registered')\n    }\n\n    return config\n  }\n\n  return injected\n}\n\nexport * from './types'\n"],"names":["GLOBAL_CONFIG","Symbol","useGlobalConfigSafe","inject","useGlobalConfig","injected","vm","getCurrentInstance","Error","config","getGlobalProperty","appContext"],"mappings":"sJAoBa,MAAAA,EAAgBC,OAAO,iBA8BG,SAAAC,sBACrC,OAAOC,EAA6BH,GAGmB,SAAAI,kBACjD,MAAAC,EAAWF,EAA6BH,GAE9C,IAAKK,EAAU,CAEb,MAAMC,EAAKC,IACX,IAAKD,EAAY,MAAA,IAAIE,MAAM,oDAE3B,MAAMC,EAASC,EAAkBJ,EAAGK,WAAY,aAEhD,IAAKF,EACG,MAAA,IAAID,MAAM,gDAGX,OAAAC,EAGF,OAAAJ"}