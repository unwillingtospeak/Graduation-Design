import{m as e}from"../../../vendor.mjs";import{i as r,d as o}from"./utils/dynamic-segment.mjs";import{i as n,r as t}from"./utils/regex.mjs";import{i as s,a}from"./types.mjs";const resolveIconConfiguration=(e,r)=>{if(s(r))return((e,r)=>{const n=o(e,r.name);return r.resolve&&r.resolve(n)})(e,r);if(a(r))return((e,r)=>{if(r.name.global)throw new Error(`Bad icon config with name ${r.name}. Please, don't use global regex as name.`);const o=t(e,r.name);return r.resolveFromRegex&&r.resolveFromRegex(...o)})(e,r);throw Error("Unknown icon config")},findMatchedIconConfiguration=(e,o,t=[])=>{const i=o.find((o=>!t.includes(o.name.toString())&&((e,o)=>s(o)?r(e,o.name):!!a(o)&&n(e,o.name))(e,o)));if(!i)throw new Error(`Can not find icon config from ${e}. Please provide default config.`);return i},findIconConfiguration=(r,o,n=[])=>{if(!r)return;const t=findMatchedIconConfiguration(r,o,n),s=e(resolveIconConfiguration(r,t),t);return n=[...n,t.name.toString()],e(findIconConfiguration(s.to,o,n),s)},getIconConfiguration=(e,r)=>{const o=findIconConfiguration(e,r);return void 0===o?{}:(e=>{const r=e;return["name","to","resolve","resolveFromRegex"].forEach((e=>{delete r[e]})),r})(o)};export{getIconConfiguration as g};
//# sourceMappingURL=icon-helpers.mjs.map
