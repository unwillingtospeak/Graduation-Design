{"version":3,"file":"regex.mjs","sources":["../../../../../../src/services/icon-config/utils/regex.ts"],"sourcesContent":["export const isMatchRegex = (str: string, regex: RegExp) => {\n  return regex.test(str)\n}\n\n/**\n * Return values from regex groups\n * @example\n * ```\n * \"fa-phone-o\", /fa-(.*)-(.*)/ -> [\"phone\", \"o\"]\n * \"any string\", /(.*)/ -> [\"any string\"]\n * \"global regex test\", /global (regex) (test)/g -> [['regex', 'test']]\n * ```\n */\nexport const regexGroupsValues = (str: string, regex: RegExp | string): string[] | string[][] => {\n  if (typeof regex !== 'string' && regex.global) {\n    // Global regex can return multiple matches array. So we need to map this all matches and remove non group values.\n    return [...str.matchAll(regex)].map(g => g.slice(1))\n  }\n\n  const match = str.match(regex) || []\n  if (!match) { return [] }\n  /**\n   * If there is groups in result - we need to slice first match\n   * ```\n   * \"test\".match(/(s)/)\n   * > Array [ \"s\", \"s\" ]\n   * ```\n   */\n  if (match.length > 1) { return match.slice(1) }\n\n  return match\n}\n"],"names":["isMatchRegex","str","regex","test","regexGroupsValues","global","matchAll","map","g","slice","match","length"],"mappings":"AAAa,MAAAA,aAAe,CAACC,EAAaC,IACjCA,EAAMC,KAAKF,GAYPG,kBAAoB,CAACH,EAAaC,KAC7C,GAAqB,iBAAVA,GAAsBA,EAAMG,OAErC,MAAO,IAAIJ,EAAIK,SAASJ,IAAQK,KAASC,GAAAA,EAAEC,MAAM,KAGnD,MAAMC,EAAQT,EAAIS,MAAMR,IAAU,GAClC,OAAKQ,EAQDA,EAAMC,OAAS,EAAYD,EAAMD,MAAM,GAEpCC,EAVc"}