export declare const VaDropdown: import("vue").DefineComponent<{
    stateful: {
        default: boolean;
    };
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
    };
    readonly: {
        type: BooleanConstructor;
    };
    anchorSelector: {
        type: StringConstructor;
        default: string;
    };
    innerAnchorSelector: {
        type: StringConstructor;
        default: string;
    };
    target: {
        type: StringConstructor;
        default: undefined;
    };
    preventOverflow: {
        type: BooleanConstructor;
        default: boolean;
    };
    keepAnchorWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    isContentHoverable: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnContentClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnClickOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnAnchorClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    hoverOverTimeout: {
        type: NumberConstructor;
        default: number;
    };
    hoverOutTimeout: {
        type: NumberConstructor;
        default: number;
    };
    offset: {
        type: import("vue").PropType<number | [number, number]>;
        default: number;
    };
    stickToEdges: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoPlacement: {
        type: BooleanConstructor;
        default: boolean;
    };
    cursor: {
        type: BooleanConstructor;
        default: boolean;
    };
    trigger: {
        type: import("vue").PropType<"none" | "click" | "dblclick" | "right-click" | "hover">;
        default: string;
        validator: (value: string) => boolean;
    };
    placement: {
        type: import("vue").PropType<import("..").Placement>;
        default: string;
        validator: (value: string) => boolean;
    };
    keyboardNavigation: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    teleportTargetComputed: import("vue").ComputedRef<HTMLElement | undefined>;
    teleportDisabled: import("vue").ComputedRef<boolean>;
    isMounted: import("vue").Ref<boolean>;
    anchorRef: import("vue").WritableComputedRef<HTMLElement | undefined>;
    valueComputed: import("vue").WritableComputedRef<boolean>;
    contentRef: import("vue").ShallowRef<HTMLElement | undefined>;
    computedClass: {
        [x: `va-dropdown--${string}`]: boolean;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            [x: `va-dropdown--${string}`]: boolean;
        }>;
        readonly asArray: import("vue").ComputedRef<`va-dropdown--${string}`[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    idComputed: import("vue").ComputedRef<string>;
    emitAndClose: (eventName: string, close?: boolean | undefined, e?: Event | undefined) => void;
    onMouseEnter: () => void;
    onMouseLeave: () => void;
    hide: () => void;
    show: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    stateful: {
        default: boolean;
    };
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
    };
    readonly: {
        type: BooleanConstructor;
    };
    anchorSelector: {
        type: StringConstructor;
        default: string;
    };
    innerAnchorSelector: {
        type: StringConstructor;
        default: string;
    };
    target: {
        type: StringConstructor;
        default: undefined;
    };
    preventOverflow: {
        type: BooleanConstructor;
        default: boolean;
    };
    keepAnchorWidth: {
        type: BooleanConstructor;
        default: boolean;
    };
    isContentHoverable: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnContentClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnClickOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnAnchorClick: {
        type: BooleanConstructor;
        default: boolean;
    };
    hoverOverTimeout: {
        type: NumberConstructor;
        default: number;
    };
    hoverOutTimeout: {
        type: NumberConstructor;
        default: number;
    };
    offset: {
        type: import("vue").PropType<number | [number, number]>;
        default: number;
    };
    stickToEdges: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoPlacement: {
        type: BooleanConstructor;
        default: boolean;
    };
    cursor: {
        type: BooleanConstructor;
        default: boolean;
    };
    trigger: {
        type: import("vue").PropType<"none" | "click" | "dblclick" | "right-click" | "hover">;
        default: string;
        validator: (value: string) => boolean;
    };
    placement: {
        type: import("vue").PropType<import("..").Placement>;
        default: string;
        validator: (value: string) => boolean;
    };
    keyboardNavigation: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    offset: number | [number, number];
    cursor: boolean;
    target: string;
    disabled: boolean;
    readonly: boolean;
    modelValue: boolean;
    stateful: boolean;
    anchorSelector: string;
    innerAnchorSelector: string;
    preventOverflow: boolean;
    keepAnchorWidth: boolean;
    isContentHoverable: boolean;
    closeOnContentClick: boolean;
    closeOnClickOutside: boolean;
    closeOnAnchorClick: boolean;
    hoverOverTimeout: number;
    hoverOutTimeout: number;
    stickToEdges: boolean;
    autoPlacement: boolean;
    trigger: "none" | "click" | "dblclick" | "right-click" | "hover";
    placement: import("..").Placement;
    keyboardNavigation: boolean;
}>;
export { VaDropdownContent } from './components/VaDropdownContent';
