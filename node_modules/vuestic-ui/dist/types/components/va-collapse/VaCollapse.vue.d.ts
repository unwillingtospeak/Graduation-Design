declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: BooleanConstructor;
        default: undefined;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    header: {
        type: StringConstructor;
        default: string;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    solid: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
        default: string;
    };
    colorAll: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    body: import("vue").ShallowRef<HTMLElement | undefined>;
    height: import("vue").ComputedRef<any>;
    toggle: () => void;
    computedModelValue: import("vue").WritableComputedRef<boolean>;
    hasKeyboardFocus: import("vue").Ref<boolean>;
    keyboardFocusListeners: {
        mousedown: () => void;
        focus: () => void;
        blur: () => void;
    };
    textColorComputed: import("vue").ComputedRef<string>;
    headerIdComputed: import("vue").ComputedRef<string>;
    headerAttributes: import("vue").ComputedRef<{
        id: string;
        tabindex: number;
        'aria-controls': string;
        'aria-expanded': boolean;
        'aria-disabled': boolean;
        role: string;
    }>;
    panelIdComputed: import("vue").ComputedRef<string>;
    tabIndexComputed: import("vue").ComputedRef<-1 | 0>;
    computedClasses: {
        [x: `va-collapse--${string}`]: boolean;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            [x: `va-collapse--${string}`]: boolean;
        }>;
        readonly asArray: import("vue").ComputedRef<`va-collapse--${string}`[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    headerStyle: import("vue").ComputedRef<{
        paddingLeft: number | "";
        color: string;
        backgroundColor: string;
    }>;
    contentStyle: import("vue").ComputedRef<{
        visibility: "hidden" | "visible";
        height: string;
        transitionDuration: string;
        background: string;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("focus" | "update:modelValue")[], "focus" | "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: BooleanConstructor;
        default: undefined;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    header: {
        type: StringConstructor;
        default: string;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    solid: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
        default: string;
    };
    colorAll: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    onFocus?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    color: string;
    header: string;
    disabled: boolean;
    solid: boolean;
    icon: string;
    modelValue: boolean;
    textColor: string;
    colorAll: boolean;
}>;
export default _default;
