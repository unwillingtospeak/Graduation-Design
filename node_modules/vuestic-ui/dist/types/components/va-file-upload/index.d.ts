export { VaFileUploadGalleryItem } from './VaFileUploadGalleryItem';
export { VaFileUploadList } from './VaFileUploadList';
export { VaFileUploadListItem } from './VaFileUploadListItem';
export { VaFileUploadSingleItem } from './VaFileUploadSingleItem';
export { VaFileUploadUndo } from './VaFileUploadUndo';
export declare const VaFileUpload: import("vue").DefineComponent<{
    fileTypes: {
        type: StringConstructor;
        default: string;
    };
    dropzone: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideFileList: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    undo: {
        type: BooleanConstructor;
        default: boolean;
    };
    undoDuration: {
        type: NumberConstructor;
        default: number;
    };
    undoButtonText: {
        type: StringConstructor;
        default: string;
    };
    dropZoneText: {
        type: StringConstructor;
        default: string;
    };
    uploadButtonText: {
        type: StringConstructor;
        default: string;
    };
    deletedFileMessage: {
        type: StringConstructor;
        default: string;
    };
    modelValue: {
        type: import("vue").PropType<import("./types").VaFile | import("./types").VaFile[]>;
        default: () => never[];
    };
    type: {
        type: import("vue").PropType<"single" | "list" | "gallery">;
        default: string;
        validator: (value: string) => boolean;
    };
}, {
    modal: import("vue").Ref<boolean>;
    dropzoneHighlight: import("vue").Ref<boolean>;
    fileInputRef: import("vue").ShallowRef<HTMLInputElement | undefined>;
    colorComputed: import("vue").ComputedRef<string>;
    computedStyle: import("vue").ComputedRef<{
        backgroundColor: string;
    }>;
    computedClasses: {
        [x: `va-file-upload--${string}`]: boolean;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            [x: `va-file-upload--${string}`]: boolean;
        }>;
        readonly asArray: import("vue").ComputedRef<`va-file-upload--${string}`[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    files: import("vue").WritableComputedRef<import("./types").VaFile[]>;
    uploadFile: (e: Event | DragEvent) => void;
    changeFieldValue: (e: Event | DragEvent) => void;
    removeFile: (index: number) => void;
    removeSingleFile: () => void;
    callFileDialogue: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "file-removed" | "file-added")[], "update:modelValue" | "file-removed" | "file-added", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    fileTypes: {
        type: StringConstructor;
        default: string;
    };
    dropzone: {
        type: BooleanConstructor;
        default: boolean;
    };
    hideFileList: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    undo: {
        type: BooleanConstructor;
        default: boolean;
    };
    undoDuration: {
        type: NumberConstructor;
        default: number;
    };
    undoButtonText: {
        type: StringConstructor;
        default: string;
    };
    dropZoneText: {
        type: StringConstructor;
        default: string;
    };
    uploadButtonText: {
        type: StringConstructor;
        default: string;
    };
    deletedFileMessage: {
        type: StringConstructor;
        default: string;
    };
    modelValue: {
        type: import("vue").PropType<import("./types").VaFile | import("./types").VaFile[]>;
        default: () => never[];
    };
    type: {
        type: import("vue").PropType<"single" | "list" | "gallery">;
        default: string;
        validator: (value: string) => boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onFile-removed"?: ((...args: any[]) => any) | undefined;
    "onFile-added"?: ((...args: any[]) => any) | undefined;
}, {
    type: "single" | "list" | "gallery";
    color: string;
    disabled: boolean;
    modelValue: import("./types").VaFile | import("./types").VaFile[];
    undoDuration: number;
    undoButtonText: string;
    deletedFileMessage: string;
    undo: boolean;
    fileTypes: string;
    dropzone: boolean;
    hideFileList: boolean;
    dropZoneText: string;
    uploadButtonText: string;
}>;
export * from './types';
