import { PropType } from 'vue';
import { DateInputModelValue, DateInputValue } from './types';
declare const _default: import("vue").DefineComponent<{
    clearValue: {
        type: PropType<DateInputModelValue>;
        default: undefined;
    };
    modelValue: {
        type: PropType<DateInputModelValue>;
    };
    resetOnClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    isOpen: {
        type: BooleanConstructor;
        default: undefined;
    };
    format: {
        type: PropType<(date: DateInputModelValue) => string>;
    };
    formatDate: {
        type: PropType<(date: Date) => string>;
        default: (d: Date) => string;
    };
    parse: {
        type: PropType<(input: string) => DateInputValue>;
    };
    parseDate: {
        type: PropType<(input: string) => Date>;
    };
    parseValue: {
        type: PropType<(date: DateInputModelValue) => import("../va-date-picker/types").DatePickerModelValue>;
    };
    delimiter: {
        type: StringConstructor;
        default: string;
    };
    rangeDelimiter: {
        type: StringConstructor;
        default: string;
    };
    manualInput: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    leftIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: PropType<((v: any) => any)[]>;
        default: () => any;
    } & {
        type: PropType<((v: DateInputModelValue) => any)[]>;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    type: {
        type: PropType<import("../va-date-picker/types").DatePickerType>;
        required: true;
        default: import("../va-date-picker/types").DatePickerType;
    };
    hidden: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    disabled: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    readonly: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    mode: {
        type: PropType<import("../va-date-picker/types").DatePickerMode>;
        required: true;
        default: import("../va-date-picker/types").DatePickerMode;
    };
    selected: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    stateful: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    focused: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    otherMonth: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    today: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    inRange: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    weekend: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    highlightWeekend: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    highlightToday: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    monthNames: {
        type: PropType<string[]>;
        required: true;
        default: string[];
    };
    weekdayNames: {
        type: PropType<string[]>;
        required: true;
        default: string[];
    };
    firstWeekday: {
        type: PropType<"Monday" | "Sunday">;
        required: true;
        default: "Monday" | "Sunday";
    };
    hideWeekDays: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    showOtherMonths: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    startYear: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    endYear: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    view: {
        type: PropType<import("../va-date-picker/types").DatePickerView | undefined>;
        required: false;
        default: undefined;
    };
    onClick: {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onUpdate:modelValue": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onHover:day": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onClick:day": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    allowedDays: {
        type: PropType<((date: Date) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    weekends: {
        type: PropType<((date: Date) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    "onUpdate:view": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onHover:month": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onClick:month": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    allowedMonths: {
        type: PropType<((date: Date) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    "onHover:year": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onClick:year": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    allowedYears: {
        type: PropType<((date: Date) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    weekendsColor: {
        type: PropType<string | undefined>;
        required: false;
        default: undefined;
    };
    outline: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    label: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    bordered: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    requiredMark: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    counterValue: {
        type: PropType<number | undefined>;
        required: false;
        default: undefined;
    };
    maxLength: {
        type: PropType<number | undefined>;
        required: false;
        default: undefined;
    };
    "onClick-prepend": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onClick-append": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onClick-prepend-inner": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onClick-append-inner": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearableIcon: {
        type: StringConstructor;
        default: string;
    };
}, {
    datePicker: import("vue").Ref<import("vue").DefineComponent<{
        modelValue: {
            type: PropType<import("../va-date-picker/types").DatePickerModelValue>;
        };
        monthNames: {
            type: PropType<string[]>;
            default: string[];
        };
        weekdayNames: {
            type: PropType<string[]>;
            default: string[];
        };
        view: {
            type: PropType<import("../va-date-picker/types").DatePickerView>;
        };
        type: {
            type: PropType<import("../va-date-picker/types").DatePickerType>;
            default: string;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: undefined;
        };
        weekendsColor: {
            type: StringConstructor;
            default: undefined;
        };
        mode: {
            type: PropType<import("../va-date-picker/types").DatePickerMode>;
            required: true;
            default: import("../va-date-picker/types").DatePickerMode;
        };
        highlightToday: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        startYear: {
            type: PropType<number>;
            required: true;
            default: number;
        };
        endYear: {
            type: PropType<number>;
            required: true;
            default: number;
        };
        allowedYears: {
            type: PropType<((date: Date) => boolean) | undefined>;
            required: false;
            default: undefined;
        };
        "onUpdate:modelValue": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        "onHover:year": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        "onClick:year": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        allowedMonths: {
            type: PropType<((date: Date) => boolean) | undefined>;
            required: false;
            default: undefined;
        };
        "onHover:month": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        "onClick:month": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        hidden: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        selected: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        focused: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        otherMonth: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        today: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        inRange: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        weekend: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        highlightWeekend: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        firstWeekday: {
            type: PropType<"Monday" | "Sunday">;
            required: true;
            default: "Monday" | "Sunday";
        };
        hideWeekDays: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        showOtherMonths: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        onClick: {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        allowedDays: {
            type: PropType<((date: Date) => boolean) | undefined>;
            required: false;
            default: undefined;
        };
        weekends: {
            type: PropType<((date: Date) => boolean) | undefined>;
            required: false;
            default: undefined;
        };
        "onHover:day": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        "onClick:day": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        "onUpdate:view": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        stateful: {
            type: PropType<boolean>;
            default: boolean;
        };
    }, {
        dayPickerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
            view: {
                type: PropType<import("../va-date-picker/types").DatePickerView>;
                required: true;
                default: import("../va-date-picker/types").DatePickerView;
            };
            hidden: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            disabled: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            readonly: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            mode: {
                type: PropType<import("../va-date-picker/types").DatePickerMode>;
                required: true;
                default: import("../va-date-picker/types").DatePickerMode;
            };
            selected: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            focused: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            otherMonth: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            today: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            inRange: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            weekend: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            highlightWeekend: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            highlightToday: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            monthNames: {
                type: PropType<string[]>;
                required: true;
                default: string[];
            };
            weekdayNames: {
                type: PropType<string[]>;
                required: true;
                default: string[];
            };
            firstWeekday: {
                type: PropType<"Monday" | "Sunday">;
                required: true;
                default: "Monday" | "Sunday";
            };
            hideWeekDays: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            showOtherMonths: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            onClick: {
                type: PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            modelValue: {
                type: PropType<import("../va-date-picker/types").DatePickerModelValue>;
                required: false;
                default: undefined;
            };
            allowedDays: {
                type: PropType<((date: Date) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            weekends: {
                type: PropType<((date: Date) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            "onUpdate:modelValue": {
                type: PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onHover:day": {
                type: PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick:day": {
                type: PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
        }>>;
        headerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
            disabled: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            monthNames: {
                type: PropType<unknown[]>;
                required: true;
                default: unknown[];
            };
            view: {
                type: PropType<import("../va-date-picker/types").DatePickerView | undefined>;
                required: false;
                default: undefined;
            };
            color: {
                type: PropType<string | undefined>;
                required: false;
                default: undefined;
            };
            "onUpdate:view": {
                type: PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
        }>>;
        monthPickerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
            view: {
                type: PropType<import("../va-date-picker/types").DatePickerView>;
                required: true;
                default: import("../va-date-picker/types").DatePickerView;
            };
            readonly: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            mode: {
                type: PropType<import("../va-date-picker/types").DatePickerMode>;
                required: true;
                default: import("../va-date-picker/types").DatePickerMode;
            };
            highlightToday: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            monthNames: {
                type: PropType<string[]>;
                required: true;
                default: string[];
            };
            modelValue: {
                type: PropType<import("../va-date-picker/types").DatePickerModelValue>;
                required: false;
                default: undefined;
            };
            allowedMonths: {
                type: PropType<((date: Date) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            "onUpdate:modelValue": {
                type: PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onHover:month": {
                type: PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick:month": {
                type: PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
        }>>;
        yearPickerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
            view: {
                type: PropType<import("../va-date-picker/types").DatePickerView>;
                required: true;
                default: import("../va-date-picker/types").DatePickerView;
            };
            readonly: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            mode: {
                type: PropType<import("../va-date-picker/types").DatePickerMode>;
                required: true;
                default: import("../va-date-picker/types").DatePickerMode;
            };
            highlightToday: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            startYear: {
                type: PropType<number>;
                required: true;
                default: number;
            };
            endYear: {
                type: PropType<number>;
                required: true;
                default: number;
            };
            modelValue: {
                type: PropType<import("../va-date-picker/types").DatePickerModelValue>;
                required: false;
                default: undefined;
            };
            allowedYears: {
                type: PropType<((date: Date) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            "onUpdate:modelValue": {
                type: PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onHover:year": {
                type: PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick:year": {
                type: PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
        }>>;
        syncView: import("vue").WritableComputedRef<import("../va-date-picker/types").DatePickerView>;
        classComputed: import("vue").ComputedRef<{
            'va-date-picker_without-week-days': boolean;
            'va-date-picker_disabled': boolean;
        }>;
        valueComputed: import("vue").WritableComputedRef<import("../va-date-picker/types").DatePickerModelValue>;
        onDayModelValueUpdate: (modelValue: import("../va-date-picker/types").DatePickerModelValue) => void;
        onMonthClick: (date: Date) => void;
        onMonthModelValueUpdate: (modelValue: import("../va-date-picker/types").DatePickerModelValue) => void;
        onYearClick: (date: Date) => void;
        onYearModelValueUpdate: (modelValue: import("../va-date-picker/types").DatePickerModelValue) => void;
        colorsStyle: Record<string, any>;
        currentPicker: import("vue").Ref<import("vue").DefineComponent<{
            monthNames: {
                type: PropType<string[]>;
                required: true;
            };
            weekdayNames: {
                type: PropType<string[]>;
                required: true;
            };
            firstWeekday: {
                type: PropType<"Monday" | "Sunday">;
                default: string;
            };
            hideWeekDays: {
                type: BooleanConstructor;
                default: boolean;
            };
            view: {
                type: PropType<import("../va-date-picker/types").DatePickerView>;
                default: () => {
                    type: string;
                };
            };
            modelValue: {
                type: PropType<import("../va-date-picker/types").DatePickerModelValue>;
            };
            mode: {
                type: PropType<import("../va-date-picker/types").DatePickerMode>;
                default: string;
            };
            showOtherMonths: {
                type: BooleanConstructor;
                default: boolean;
            };
            allowedDays: {
                type: PropType<(date: Date) => boolean>;
            };
            weekends: {
                type: PropType<(date: Date) => boolean>;
            };
            highlightWeekend: {
                type: BooleanConstructor;
                default: boolean;
            };
            highlightToday: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            hidden: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            disabled: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            selected: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            focused: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            otherMonth: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            today: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            inRange: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            weekend: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            onClick: {
                type: PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
        }, {
            hoveredIndex: import("vue").Ref<number>;
            calendarDates: import("vue").ComputedRef<Date[]>;
            onClick: (date: Date) => void;
            isToday: (date: Date) => boolean;
            isSelected: (date: Date) => boolean;
            isInRange: (date: Date) => boolean;
            isOtherMonth: (date: Date) => boolean;
            isDateDisabled: (date: Date) => boolean;
            isDateWeekend: (date: Date) => boolean;
            containerAttributes: {
                onFocus: () => void;
                onKeydown: (e: KeyboardEvent) => void;
                onBlur: () => void;
                onMousedown: () => void;
                tabindex: number;
            };
            weekdayNamesComputed: import("vue").ComputedRef<string[]>;
            VaDayPickerCellPropValues: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
                hidden: {
                    type: PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                disabled: {
                    type: PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                readonly: {
                    type: PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                selected: {
                    type: PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                focused: {
                    type: PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                otherMonth: {
                    type: PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                today: {
                    type: PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                inRange: {
                    type: PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                weekend: {
                    type: PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                highlightWeekend: {
                    type: PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                highlightToday: {
                    type: PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                onClick: {
                    type: PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
            }>>;
            focusedCellIndex: import("vue").Ref<number>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "hover:day" | "click:day")[], "update:modelValue" | "hover:day" | "click:day", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            monthNames: {
                type: PropType<string[]>;
                required: true;
            };
            weekdayNames: {
                type: PropType<string[]>;
                required: true;
            };
            firstWeekday: {
                type: PropType<"Monday" | "Sunday">;
                default: string;
            };
            hideWeekDays: {
                type: BooleanConstructor;
                default: boolean;
            };
            view: {
                type: PropType<import("../va-date-picker/types").DatePickerView>;
                default: () => {
                    type: string;
                };
            };
            modelValue: {
                type: PropType<import("../va-date-picker/types").DatePickerModelValue>;
            };
            mode: {
                type: PropType<import("../va-date-picker/types").DatePickerMode>;
                default: string;
            };
            showOtherMonths: {
                type: BooleanConstructor;
                default: boolean;
            };
            allowedDays: {
                type: PropType<(date: Date) => boolean>;
            };
            weekends: {
                type: PropType<(date: Date) => boolean>;
            };
            highlightWeekend: {
                type: BooleanConstructor;
                default: boolean;
            };
            highlightToday: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            hidden: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            disabled: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            selected: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            focused: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            otherMonth: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            today: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            inRange: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            weekend: {
                type: PropType<boolean>;
                required: true;
                default: boolean;
            };
            onClick: {
                type: PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
        }>> & {
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            "onHover:day"?: ((...args: any[]) => any) | undefined;
            "onClick:day"?: ((...args: any[]) => any) | undefined;
        }, {
            view: import("../va-date-picker/types").DatePickerView;
            hidden: boolean;
            disabled: boolean;
            readonly: boolean;
            mode: import("../va-date-picker/types").DatePickerMode;
            onClick: ((...args: any[]) => any) | undefined;
            selected: boolean;
            focused: boolean;
            otherMonth: boolean;
            today: boolean;
            inRange: boolean;
            weekend: boolean;
            highlightWeekend: boolean;
            highlightToday: boolean;
            firstWeekday: "Monday" | "Sunday";
            hideWeekDays: boolean;
            showOtherMonths: boolean;
        }> | import("vue").DefineComponent<{
            modelValue: {
                type: PropType<import("../va-date-picker/types").DatePickerModelValue>;
            };
            monthNames: {
                type: PropType<string[]>;
                required: true;
            };
            view: {
                type: PropType<import("../va-date-picker/types").DatePickerView>;
                default: () => {
                    type: string;
                };
            };
            allowedMonths: {
                type: PropType<(date: Date) => boolean>;
                default: undefined;
            };
            highlightToday: {
                type: BooleanConstructor;
                default: boolean;
            };
            mode: {
                type: PropType<import("../va-date-picker/types").DatePickerMode>;
                default: string;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
        }, {
            months: import("vue").ComputedRef<Date[]>;
            hoveredIndex: import("vue").Ref<number>;
            onClick: (date: Date) => void;
            isToday: (date: Date) => boolean;
            isSelected: (date: Date) => boolean;
            isInRange: (date: Date) => boolean;
            isDisabled: (date: Date) => boolean;
            containerAttributes: {
                onFocus: () => void;
                onKeydown: (e: KeyboardEvent) => void;
                onBlur: () => void;
                onMousedown: () => void;
                tabindex: number;
            };
            focusedCellIndex: import("vue").Ref<number>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "hover:month" | "click:month")[], "update:modelValue" | "hover:month" | "click:month", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: PropType<import("../va-date-picker/types").DatePickerModelValue>;
            };
            monthNames: {
                type: PropType<string[]>;
                required: true;
            };
            view: {
                type: PropType<import("../va-date-picker/types").DatePickerView>;
                default: () => {
                    type: string;
                };
            };
            allowedMonths: {
                type: PropType<(date: Date) => boolean>;
                default: undefined;
            };
            highlightToday: {
                type: BooleanConstructor;
                default: boolean;
            };
            mode: {
                type: PropType<import("../va-date-picker/types").DatePickerMode>;
                default: string;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>> & {
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            "onHover:month"?: ((...args: any[]) => any) | undefined;
            "onClick:month"?: ((...args: any[]) => any) | undefined;
        }, {
            view: import("../va-date-picker/types").DatePickerView;
            readonly: boolean;
            mode: import("../va-date-picker/types").DatePickerMode;
            highlightToday: boolean;
            allowedMonths: (date: Date) => boolean;
        }> | import("vue").DefineComponent<{
            modelValue: {
                type: PropType<import("../va-date-picker/types").DatePickerModelValue>;
            };
            allowedYears: {
                type: PropType<(date: Date) => boolean>;
                default: undefined;
            };
            highlightToday: {
                type: BooleanConstructor;
                default: boolean;
            };
            startYear: {
                type: NumberConstructor;
                default: number;
            };
            mode: {
                type: PropType<import("../va-date-picker/types").DatePickerMode>;
                default: string;
            };
            view: {
                type: PropType<import("../va-date-picker/types").DatePickerView>;
                default: () => {
                    type: string;
                };
            };
            endYear: {
                type: NumberConstructor;
                default: () => number;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
        }, {
            hoveredIndex: import("vue").Ref<number>;
            years: import("vue").ComputedRef<Date[]>;
            rootNode: import("vue").ShallowRef<HTMLElement | undefined>;
            onClick: (date: Date) => void;
            isToday: (date: Date) => boolean;
            isSelected: (date: Date) => boolean;
            isInRange: (date: Date) => boolean;
            isYearDisabled: (year: Date) => boolean;
            focusedCellIndex: import("vue").Ref<number>;
            containerAttributes: {
                onFocus: () => void;
                onKeydown: (e: KeyboardEvent) => void;
                onBlur: () => void;
                onMousedown: () => void;
                tabindex: number;
            };
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "hover:year" | "click:year")[], "update:modelValue" | "hover:year" | "click:year", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: PropType<import("../va-date-picker/types").DatePickerModelValue>;
            };
            allowedYears: {
                type: PropType<(date: Date) => boolean>;
                default: undefined;
            };
            highlightToday: {
                type: BooleanConstructor;
                default: boolean;
            };
            startYear: {
                type: NumberConstructor;
                default: number;
            };
            mode: {
                type: PropType<import("../va-date-picker/types").DatePickerMode>;
                default: string;
            };
            view: {
                type: PropType<import("../va-date-picker/types").DatePickerView>;
                default: () => {
                    type: string;
                };
            };
            endYear: {
                type: NumberConstructor;
                default: () => number;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>> & {
            "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
            "onHover:year"?: ((...args: any[]) => any) | undefined;
            "onClick:year"?: ((...args: any[]) => any) | undefined;
        }, {
            view: import("../va-date-picker/types").DatePickerView;
            readonly: boolean;
            mode: import("../va-date-picker/types").DatePickerMode;
            highlightToday: boolean;
            allowedYears: (date: Date) => boolean;
            startYear: number;
            endYear: number;
        }> | undefined>;
        focusCurrentPicker: () => any;
        isPickerReadonly: (pickerName: "day" | "month" | "year") => boolean;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: PropType<import("../va-date-picker/types").DatePickerModelValue>;
        };
        monthNames: {
            type: PropType<string[]>;
            default: string[];
        };
        weekdayNames: {
            type: PropType<string[]>;
            default: string[];
        };
        view: {
            type: PropType<import("../va-date-picker/types").DatePickerView>;
        };
        type: {
            type: PropType<import("../va-date-picker/types").DatePickerType>;
            default: string;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: undefined;
        };
        weekendsColor: {
            type: StringConstructor;
            default: undefined;
        };
        mode: {
            type: PropType<import("../va-date-picker/types").DatePickerMode>;
            required: true;
            default: import("../va-date-picker/types").DatePickerMode;
        };
        highlightToday: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        startYear: {
            type: PropType<number>;
            required: true;
            default: number;
        };
        endYear: {
            type: PropType<number>;
            required: true;
            default: number;
        };
        allowedYears: {
            type: PropType<((date: Date) => boolean) | undefined>;
            required: false;
            default: undefined;
        };
        "onUpdate:modelValue": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        "onHover:year": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        "onClick:year": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        allowedMonths: {
            type: PropType<((date: Date) => boolean) | undefined>;
            required: false;
            default: undefined;
        };
        "onHover:month": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        "onClick:month": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        hidden: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        selected: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        focused: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        otherMonth: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        today: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        inRange: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        weekend: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        highlightWeekend: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        firstWeekday: {
            type: PropType<"Monday" | "Sunday">;
            required: true;
            default: "Monday" | "Sunday";
        };
        hideWeekDays: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        showOtherMonths: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        onClick: {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        allowedDays: {
            type: PropType<((date: Date) => boolean) | undefined>;
            required: false;
            default: undefined;
        };
        weekends: {
            type: PropType<((date: Date) => boolean) | undefined>;
            required: false;
            default: undefined;
        };
        "onHover:day": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        "onClick:day": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        "onUpdate:view": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        stateful: {
            type: PropType<boolean>;
            default: boolean;
        };
    }>> & {
        [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
    }, {
        type: import("../va-date-picker/types").DatePickerType;
        color: string;
        hidden: boolean;
        disabled: boolean;
        readonly: boolean;
        mode: import("../va-date-picker/types").DatePickerMode;
        onClick: ((...args: any[]) => any) | undefined;
        selected: boolean;
        stateful: boolean;
        "onUpdate:modelValue": ((...args: any[]) => any) | undefined;
        focused: boolean;
        otherMonth: boolean;
        today: boolean;
        inRange: boolean;
        weekend: boolean;
        highlightWeekend: boolean;
        highlightToday: boolean;
        "onHover:day": ((...args: any[]) => any) | undefined;
        "onClick:day": ((...args: any[]) => any) | undefined;
        monthNames: string[];
        weekdayNames: string[];
        firstWeekday: "Monday" | "Sunday";
        hideWeekDays: boolean;
        showOtherMonths: boolean;
        allowedDays: ((date: Date) => boolean) | undefined;
        weekends: ((date: Date) => boolean) | undefined;
        "onUpdate:view": ((...args: any[]) => any) | undefined;
        "onHover:month": ((...args: any[]) => any) | undefined;
        "onClick:month": ((...args: any[]) => any) | undefined;
        allowedMonths: ((date: Date) => boolean) | undefined;
        "onHover:year": ((...args: any[]) => any) | undefined;
        "onClick:year": ((...args: any[]) => any) | undefined;
        allowedYears: ((date: Date) => boolean) | undefined;
        startYear: number;
        endYear: number;
        weekendsColor: string;
    }> | undefined>;
    valueText: import("vue").ComputedRef<string>;
    valueWithoutText: import("vue").WritableComputedRef<DateInputValue>;
    valueComputed: import("vue").WritableComputedRef<string | {
        toString: () => string;
        toDateString: () => string;
        toTimeString: () => string;
        toLocaleString: {
            (): string;
            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
        };
        toLocaleDateString: {
            (): string;
            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
        };
        toLocaleTimeString: {
            (): string;
            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
        };
        valueOf: () => number;
        getTime: () => number;
        getFullYear: () => number;
        getUTCFullYear: () => number;
        getMonth: () => number;
        getUTCMonth: () => number;
        getDate: () => number;
        getUTCDate: () => number;
        getDay: () => number;
        getUTCDay: () => number;
        getHours: () => number;
        getUTCHours: () => number;
        getMinutes: () => number;
        getUTCMinutes: () => number;
        getSeconds: () => number;
        getUTCSeconds: () => number;
        getMilliseconds: () => number;
        getUTCMilliseconds: () => number;
        getTimezoneOffset: () => number;
        setTime: (time: number) => number;
        setMilliseconds: (ms: number) => number;
        setUTCMilliseconds: (ms: number) => number;
        setSeconds: (sec: number, ms?: number | undefined) => number;
        setUTCSeconds: (sec: number, ms?: number | undefined) => number;
        setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
        setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
        setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
        setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
        setDate: (date: number) => number;
        setUTCDate: (date: number) => number;
        setMonth: (month: number, date?: number | undefined) => number;
        setUTCMonth: (month: number, date?: number | undefined) => number;
        setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
        setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
        toUTCString: () => string;
        toISOString: () => string;
        toJSON: (key?: any) => string;
        [Symbol.toPrimitive]: {
            (hint: "default"): string;
            (hint: "string"): string;
            (hint: "number"): number;
            (hint: string): string | number;
        };
    } | (string | {
        toString: () => string;
        toDateString: () => string;
        toTimeString: () => string;
        toLocaleString: {
            (): string;
            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
        };
        toLocaleDateString: {
            (): string;
            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
        };
        toLocaleTimeString: {
            (): string;
            (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
        };
        valueOf: () => number;
        getTime: () => number;
        getFullYear: () => number;
        getUTCFullYear: () => number;
        getMonth: () => number;
        getUTCMonth: () => number;
        getDate: () => number;
        getUTCDate: () => number;
        getDay: () => number;
        getUTCDay: () => number;
        getHours: () => number;
        getUTCHours: () => number;
        getMinutes: () => number;
        getUTCMinutes: () => number;
        getSeconds: () => number;
        getUTCSeconds: () => number;
        getMilliseconds: () => number;
        getUTCMilliseconds: () => number;
        getTimezoneOffset: () => number;
        setTime: (time: number) => number;
        setMilliseconds: (ms: number) => number;
        setUTCMilliseconds: (ms: number) => number;
        setSeconds: (sec: number, ms?: number | undefined) => number;
        setUTCSeconds: (sec: number, ms?: number | undefined) => number;
        setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
        setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
        setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
        setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
        setDate: (date: number) => number;
        setUTCDate: (date: number) => number;
        setMonth: (month: number, date?: number | undefined) => number;
        setUTCMonth: (month: number, date?: number | undefined) => number;
        setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
        setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
        toUTCString: () => string;
        toISOString: () => string;
        toJSON: (key?: any) => string;
        [Symbol.toPrimitive]: {
            (hint: "default"): string;
            (hint: "string"): string;
            (hint: "number"): number;
            (hint: string): string | number;
        };
    })[] | {
        start?: string | {
            toString: () => string;
            toDateString: () => string;
            toTimeString: () => string;
            toLocaleString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleDateString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleTimeString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            valueOf: () => number;
            getTime: () => number;
            getFullYear: () => number;
            getUTCFullYear: () => number;
            getMonth: () => number;
            getUTCMonth: () => number;
            getDate: () => number;
            getUTCDate: () => number;
            getDay: () => number;
            getUTCDay: () => number;
            getHours: () => number;
            getUTCHours: () => number;
            getMinutes: () => number;
            getUTCMinutes: () => number;
            getSeconds: () => number;
            getUTCSeconds: () => number;
            getMilliseconds: () => number;
            getUTCMilliseconds: () => number;
            getTimezoneOffset: () => number;
            setTime: (time: number) => number;
            setMilliseconds: (ms: number) => number;
            setUTCMilliseconds: (ms: number) => number;
            setSeconds: (sec: number, ms?: number | undefined) => number;
            setUTCSeconds: (sec: number, ms?: number | undefined) => number;
            setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setDate: (date: number) => number;
            setUTCDate: (date: number) => number;
            setMonth: (month: number, date?: number | undefined) => number;
            setUTCMonth: (month: number, date?: number | undefined) => number;
            setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            toUTCString: () => string;
            toISOString: () => string;
            toJSON: (key?: any) => string;
            [Symbol.toPrimitive]: {
                (hint: "default"): string;
                (hint: "string"): string;
                (hint: "number"): number;
                (hint: string): string | number;
            };
        } | null | undefined;
        end?: string | {
            toString: () => string;
            toDateString: () => string;
            toTimeString: () => string;
            toLocaleString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleDateString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            toLocaleTimeString: {
                (): string;
                (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
            };
            valueOf: () => number;
            getTime: () => number;
            getFullYear: () => number;
            getUTCFullYear: () => number;
            getMonth: () => number;
            getUTCMonth: () => number;
            getDate: () => number;
            getUTCDate: () => number;
            getDay: () => number;
            getUTCDay: () => number;
            getHours: () => number;
            getUTCHours: () => number;
            getMinutes: () => number;
            getUTCMinutes: () => number;
            getSeconds: () => number;
            getUTCSeconds: () => number;
            getMilliseconds: () => number;
            getUTCMilliseconds: () => number;
            getTimezoneOffset: () => number;
            setTime: (time: number) => number;
            setMilliseconds: (ms: number) => number;
            setUTCMilliseconds: (ms: number) => number;
            setSeconds: (sec: number, ms?: number | undefined) => number;
            setUTCSeconds: (sec: number, ms?: number | undefined) => number;
            setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
            setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
            setDate: (date: number) => number;
            setUTCDate: (date: number) => number;
            setMonth: (month: number, date?: number | undefined) => number;
            setUTCMonth: (month: number, date?: number | undefined) => number;
            setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
            toUTCString: () => string;
            toISOString: () => string;
            toJSON: (key?: any) => string;
            [Symbol.toPrimitive]: {
                (hint: "default"): string;
                (hint: "string"): string;
                (hint: "number"): number;
                (hint: string): string | number;
            };
        } | null | undefined;
    } | undefined>;
    isOpenSync: import("vue").WritableComputedRef<boolean | undefined>;
    onInputTextChanged: ({ target }: Event) => void;
    isFocused: import("vue").Ref<boolean>;
    input: import("vue").ShallowRef<HTMLInputElement | undefined>;
    inputWrapperProps: import("vue").ComputedRef<{
        focused: boolean;
        error: boolean;
        errorMessages: string[];
        readonly: boolean;
        color: string;
        outline: boolean;
        label: string;
        disabled: boolean;
        success: boolean;
        bordered: boolean;
        messages: string | string[];
        errorCount: string | number;
        immediateValidation: boolean;
        requiredMark: boolean;
        onClick?: ((...args: any[]) => any) | undefined;
        modelValue?: undefined;
        rules?: ((v: any) => any)[] | undefined;
        "onClick-prepend"?: ((...args: any[]) => any) | undefined;
        "onClick-append"?: ((...args: any[]) => any) | undefined;
        "onClick-prepend-inner"?: ((...args: any[]) => any) | undefined;
        "onClick-append-inner"?: ((...args: any[]) => any) | undefined;
        counterValue?: number | undefined;
        maxLength?: number | undefined;
    }>;
    inputListeners: import("vue").ComputedRef<{
        focus: () => void;
        blur: () => void;
    }>;
    inputAttributesComputed: import("vue").ComputedRef<{
        'aria-invalid': boolean;
        'aria-errormessage': string;
        readonly: boolean;
        tabindex: number;
        value: string;
        ariaLabel: string;
        ariaRequired: boolean;
        ariaDisabled: boolean;
        ariaReadOnly: boolean;
    }>;
    datePickerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
        [x: string & `on${string}`]: {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        type: {
            type: PropType<import("../va-date-picker/types").DatePickerType>;
            required: true;
            default: import("../va-date-picker/types").DatePickerType;
        };
        hidden: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        disabled: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        readonly: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        mode: {
            type: PropType<import("../va-date-picker/types").DatePickerMode>;
            required: true;
            default: import("../va-date-picker/types").DatePickerMode;
        };
        selected: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        stateful: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        focused: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        otherMonth: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        today: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        inRange: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        weekend: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        highlightWeekend: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        highlightToday: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        monthNames: {
            type: PropType<string[]>;
            required: true;
            default: string[];
        };
        weekdayNames: {
            type: PropType<string[]>;
            required: true;
            default: string[];
        };
        firstWeekday: {
            type: PropType<"Monday" | "Sunday">;
            required: true;
            default: "Monday" | "Sunday";
        };
        hideWeekDays: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        showOtherMonths: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        startYear: {
            type: PropType<number>;
            required: true;
            default: number;
        };
        endYear: {
            type: PropType<number>;
            required: true;
            default: number;
        };
        view: {
            type: PropType<import("../va-date-picker/types").DatePickerView | undefined>;
            required: false;
            default: undefined;
        };
        color: {
            type: PropType<string | undefined>;
            required: false;
            default: undefined;
        };
        onClick: {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        modelValue: {
            type: PropType<import("../va-date-picker/types").DatePickerModelValue>;
            required: false;
            default: undefined;
        };
        "onUpdate:modelValue": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        "onHover:day": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        "onClick:day": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        allowedDays: {
            type: PropType<((date: Date) => boolean) | undefined>;
            required: false;
            default: undefined;
        };
        weekends: {
            type: PropType<((date: Date) => boolean) | undefined>;
            required: false;
            default: undefined;
        };
        "onUpdate:view": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        "onHover:month": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        "onClick:month": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        allowedMonths: {
            type: PropType<((date: Date) => boolean) | undefined>;
            required: false;
            default: undefined;
        };
        "onHover:year": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        "onClick:year": {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        allowedYears: {
            type: PropType<((date: Date) => boolean) | undefined>;
            required: false;
            default: undefined;
        };
        weekendsColor: {
            type: PropType<string | undefined>;
            required: false;
            default: undefined;
        };
    }>>;
    filterSlots: import("vue").ComputedRef<string[]>;
    canBeCleared: import("vue").ComputedRef<boolean>;
    clearIconProps: import("vue").ComputedRef<{
        name: string;
        color: string;
        size: string;
    }>;
    iconProps: import("vue").ComputedRef<{
        name: string;
        color: string;
        size: string;
        class: string;
    }>;
    hideAndFocus: () => void;
    toggleDropdown: (event: Event | KeyboardEvent) => void;
    showDropdown: () => void;
    focusInputOrPicker: () => void;
    focusDatePicker: () => void;
    reset: () => void;
    focus: () => void;
    blur: () => void;
    iconTabindexComputed: import("vue").ComputedRef<-1 | 0>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    clearValue: {
        type: PropType<DateInputModelValue>;
        default: undefined;
    };
    modelValue: {
        type: PropType<DateInputModelValue>;
    };
    resetOnClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    isOpen: {
        type: BooleanConstructor;
        default: undefined;
    };
    format: {
        type: PropType<(date: DateInputModelValue) => string>;
    };
    formatDate: {
        type: PropType<(date: Date) => string>;
        default: (d: Date) => string;
    };
    parse: {
        type: PropType<(input: string) => DateInputValue>;
    };
    parseDate: {
        type: PropType<(input: string) => Date>;
    };
    parseValue: {
        type: PropType<(date: DateInputModelValue) => import("../va-date-picker/types").DatePickerModelValue>;
    };
    delimiter: {
        type: StringConstructor;
        default: string;
    };
    rangeDelimiter: {
        type: StringConstructor;
        default: string;
    };
    manualInput: {
        type: BooleanConstructor;
        default: boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    leftIcon: {
        type: BooleanConstructor;
        default: boolean;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    errorMessages: {
        type: PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    rules: {
        type: PropType<((v: any) => any)[]>;
        default: () => any;
    } & {
        type: PropType<((v: DateInputModelValue) => any)[]>;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    messages: {
        type: PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    type: {
        type: PropType<import("../va-date-picker/types").DatePickerType>;
        required: true;
        default: import("../va-date-picker/types").DatePickerType;
    };
    hidden: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    disabled: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    readonly: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    mode: {
        type: PropType<import("../va-date-picker/types").DatePickerMode>;
        required: true;
        default: import("../va-date-picker/types").DatePickerMode;
    };
    selected: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    stateful: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    focused: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    otherMonth: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    today: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    inRange: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    weekend: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    highlightWeekend: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    highlightToday: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    monthNames: {
        type: PropType<string[]>;
        required: true;
        default: string[];
    };
    weekdayNames: {
        type: PropType<string[]>;
        required: true;
        default: string[];
    };
    firstWeekday: {
        type: PropType<"Monday" | "Sunday">;
        required: true;
        default: "Monday" | "Sunday";
    };
    hideWeekDays: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    showOtherMonths: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    startYear: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    endYear: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    view: {
        type: PropType<import("../va-date-picker/types").DatePickerView | undefined>;
        required: false;
        default: undefined;
    };
    onClick: {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onUpdate:modelValue": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onHover:day": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onClick:day": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    allowedDays: {
        type: PropType<((date: Date) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    weekends: {
        type: PropType<((date: Date) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    "onUpdate:view": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onHover:month": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onClick:month": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    allowedMonths: {
        type: PropType<((date: Date) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    "onHover:year": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onClick:year": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    allowedYears: {
        type: PropType<((date: Date) => boolean) | undefined>;
        required: false;
        default: undefined;
    };
    weekendsColor: {
        type: PropType<string | undefined>;
        required: false;
        default: undefined;
    };
    outline: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    label: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    bordered: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    requiredMark: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    counterValue: {
        type: PropType<number | undefined>;
        required: false;
        default: undefined;
    };
    maxLength: {
        type: PropType<number | undefined>;
        required: false;
        default: undefined;
    };
    "onClick-prepend": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onClick-append": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onClick-prepend-inner": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    "onClick-append-inner": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearableIcon: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    type: import("../va-date-picker/types").DatePickerType;
    error: boolean;
    view: import("../va-date-picker/types").DatePickerView | undefined;
    color: string;
    outline: boolean;
    hidden: boolean;
    label: string;
    disabled: boolean;
    readonly: boolean;
    success: boolean;
    mode: import("../va-date-picker/types").DatePickerMode;
    icon: string;
    onClick: ((...args: any[]) => any) | undefined;
    selected: boolean;
    stateful: boolean;
    leftIcon: boolean;
    "onUpdate:modelValue": ((...args: any[]) => any) | undefined;
    bordered: boolean;
    messages: string | string[];
    errorMessages: string | string[];
    errorCount: string | number;
    rules: ((v: DateInputModelValue) => any)[];
    immediateValidation: boolean;
    "onClick-prepend": ((...args: any[]) => any) | undefined;
    "onClick-append": ((...args: any[]) => any) | undefined;
    "onClick-prepend-inner": ((...args: any[]) => any) | undefined;
    "onClick-append-inner": ((...args: any[]) => any) | undefined;
    counterValue: number | undefined;
    maxLength: number | undefined;
    focused: boolean;
    requiredMark: boolean;
    clearable: boolean;
    clearableIcon: string;
    clearValue: DateInputModelValue;
    manualInput: boolean;
    otherMonth: boolean;
    today: boolean;
    inRange: boolean;
    weekend: boolean;
    highlightWeekend: boolean;
    highlightToday: boolean;
    "onHover:day": ((...args: any[]) => any) | undefined;
    "onClick:day": ((...args: any[]) => any) | undefined;
    monthNames: string[];
    weekdayNames: string[];
    firstWeekday: "Monday" | "Sunday";
    hideWeekDays: boolean;
    showOtherMonths: boolean;
    allowedDays: ((date: Date) => boolean) | undefined;
    weekends: ((date: Date) => boolean) | undefined;
    "onUpdate:view": ((...args: any[]) => any) | undefined;
    "onHover:month": ((...args: any[]) => any) | undefined;
    "onClick:month": ((...args: any[]) => any) | undefined;
    allowedMonths: ((date: Date) => boolean) | undefined;
    "onHover:year": ((...args: any[]) => any) | undefined;
    "onClick:year": ((...args: any[]) => any) | undefined;
    allowedYears: ((date: Date) => boolean) | undefined;
    startYear: number;
    endYear: number;
    weekendsColor: string | undefined;
    resetOnClose: boolean;
    isOpen: boolean;
    formatDate: (date: Date) => string;
    delimiter: string;
    rangeDelimiter: string;
}>;
export default _default;
